!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
==	scala/Boolean.scala	/^  def ==(x: Boolean): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Byte.scala	/^  def ==(x: Short): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Char.scala	/^  def ==(x: Short): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Double.scala	/^  def ==(x: Short): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Float.scala	/^  def ==(x: Short): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Int.scala	/^  def ==(x: Short): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Long.scala	/^  def ==(x: Short): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Byte): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Char): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Double): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Float): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Int): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Long): Boolean$/;"	m
==	scala/Short.scala	/^  def ==(x: Short): Boolean$/;"	m
A	scala/collection/generic/IsTraversableLike.scala	/^      type A = A0$/;"	T
A	scala/collection/generic/IsTraversableLike.scala	/^      type A = Char$/;"	T
A	scala/collection/generic/IsTraversableOnce.scala	/^      type A = A0$/;"	T
A	scala/collection/generic/IsTraversableOnce.scala	/^      type A = Char$/;"	T
ALL	scala/annotation/elidable.scala	/^  final val ALL     = Int.MinValue  \/\/ Level.ALL.intValue()$/;"	V
ASSERTION	scala/annotation/elidable.scala	/^  final val ASSERTION = 2000    \/\/ we should make this more granular$/;"	V
AbstractFunction0	scala/runtime/AbstractFunction0.scala	/^abstract class AbstractFunction0[@specialized(Specializable.Primitives) +R] extends Function0[R] {$/;"	a
AbstractFunction1	scala/runtime/AbstractFunction1.scala	/^abstract class AbstractFunction1[@specialized(scala.Int, scala.Long, scala.Float, scala.Double\/*, scala.AnyRef*\/) -T1, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double\/*, scala.AnyRef*\/) +R] extends Function1[T1, R] {$/;"	a
AbstractFunction10	scala/runtime/AbstractFunction10.scala	/^abstract class AbstractFunction10[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, +R] extends Function10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R] {$/;"	a
AbstractFunction11	scala/runtime/AbstractFunction11.scala	/^abstract class AbstractFunction11[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, +R] extends Function11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, R] {$/;"	a
AbstractFunction12	scala/runtime/AbstractFunction12.scala	/^abstract class AbstractFunction12[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, +R] extends Function12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, R] {$/;"	a
AbstractFunction13	scala/runtime/AbstractFunction13.scala	/^abstract class AbstractFunction13[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, +R] extends Function13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, R] {$/;"	a
AbstractFunction14	scala/runtime/AbstractFunction14.scala	/^abstract class AbstractFunction14[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, +R] extends Function14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, R] {$/;"	a
AbstractFunction15	scala/runtime/AbstractFunction15.scala	/^abstract class AbstractFunction15[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, +R] extends Function15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, R] {$/;"	a
AbstractFunction16	scala/runtime/AbstractFunction16.scala	/^abstract class AbstractFunction16[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, +R] extends Function16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, R] {$/;"	a
AbstractFunction17	scala/runtime/AbstractFunction17.scala	/^abstract class AbstractFunction17[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, +R] extends Function17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, R] {$/;"	a
AbstractFunction18	scala/runtime/AbstractFunction18.scala	/^abstract class AbstractFunction18[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, +R] extends Function18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, R] {$/;"	a
AbstractFunction19	scala/runtime/AbstractFunction19.scala	/^abstract class AbstractFunction19[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, +R] extends Function19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, R] {$/;"	a
AbstractFunction2	scala/runtime/AbstractFunction2.scala	/^abstract class AbstractFunction2[@specialized(scala.Int, scala.Long, scala.Double) -T1, @specialized(scala.Int, scala.Long, scala.Double) -T2, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R] extends Function2[T1, T2, R] {$/;"	a
AbstractFunction20	scala/runtime/AbstractFunction20.scala	/^abstract class AbstractFunction20[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, +R] extends Function20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, R] {$/;"	a
AbstractFunction21	scala/runtime/AbstractFunction21.scala	/^abstract class AbstractFunction21[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, +R] extends Function21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, R] {$/;"	a
AbstractFunction22	scala/runtime/AbstractFunction22.scala	/^abstract class AbstractFunction22[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, -T22, +R] extends Function22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, R] {$/;"	a
AbstractFunction3	scala/runtime/AbstractFunction3.scala	/^abstract class AbstractFunction3[-T1, -T2, -T3, +R] extends Function3[T1, T2, T3, R] {$/;"	a
AbstractFunction4	scala/runtime/AbstractFunction4.scala	/^abstract class AbstractFunction4[-T1, -T2, -T3, -T4, +R] extends Function4[T1, T2, T3, T4, R] {$/;"	a
AbstractFunction5	scala/runtime/AbstractFunction5.scala	/^abstract class AbstractFunction5[-T1, -T2, -T3, -T4, -T5, +R] extends Function5[T1, T2, T3, T4, T5, R] {$/;"	a
AbstractFunction6	scala/runtime/AbstractFunction6.scala	/^abstract class AbstractFunction6[-T1, -T2, -T3, -T4, -T5, -T6, +R] extends Function6[T1, T2, T3, T4, T5, T6, R] {$/;"	a
AbstractFunction7	scala/runtime/AbstractFunction7.scala	/^abstract class AbstractFunction7[-T1, -T2, -T3, -T4, -T5, -T6, -T7, +R] extends Function7[T1, T2, T3, T4, T5, T6, T7, R] {$/;"	a
AbstractFunction8	scala/runtime/AbstractFunction8.scala	/^abstract class AbstractFunction8[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, +R] extends Function8[T1, T2, T3, T4, T5, T6, T7, T8, R] {$/;"	a
AbstractFunction9	scala/runtime/AbstractFunction9.scala	/^abstract class AbstractFunction9[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, +R] extends Function9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R] {$/;"	a
AbstractMethodError	scala/package.scala	/^  type AbstractMethodError             = java.lang.AbstractMethodError$/;"	T
AbstractPartialFunction	scala/runtime/AbstractPartialFunction.scala	/^abstract class AbstractPartialFunction[@specialized(scala.Int, scala.Long, scala.Float, scala.Double, scala.AnyRef) -T1, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double, scala.AnyRef) +R] extends Function1[T1, R] with PartialFunction[T1, R] { self =>$/;"	a
AbstractPromise	scala/concurrent/impl/AbstractPromise.java	/^abstract class AbstractPromise {$/;"	c
AbstractSyntax	scala/util/parsing/ast/AbstractSyntax.scala	/^trait AbstractSyntax {$/;"	t
AdaptiveWorkStealingForkJoinTasks	scala/collection/parallel/Tasks.scala	/^trait AdaptiveWorkStealingForkJoinTasks extends ForkJoinTasks with AdaptiveWorkStealingTasks {$/;"	t
AdaptiveWorkStealingTasks	scala/collection/parallel/Tasks.scala	/^trait AdaptiveWorkStealingTasks extends Tasks {$/;"	t
AdaptiveWorkStealingThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^trait AdaptiveWorkStealingThreadPoolTasks extends ThreadPoolTasks with AdaptiveWorkStealingTasks {$/;"	t
AddingFlatHashTable	scala/collection/parallel/mutable/ParHashSet.scala	/^  class AddingFlatHashTable(numelems: Int, lf: Int, inseedvalue: Int) extends FlatHashTable[T] {$/;"	c
AllNumeric	scala/Specializable.scala	/^  final val AllNumeric  = new Group((Byte, Short, Int, Long, Char, Float, Double))$/;"	V
Alt	scala/util/regexp/Base.scala	/^  class Alt private (val rs: _regexpT*) extends RegExp {$/;"	c
Alt	scala/util/regexp/Base.scala	/^  object Alt {$/;"	o
Always	scala/xml/XML.scala	/^  val Always = Value$/;"	V
Annotation	scala/annotation/Annotation.scala	/^abstract class Annotation {}$/;"	a
Any	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Any     = ManifestFactory.Any$/;"	V
Any	scala/reflect/ClassTag.scala	/^  val Any     : ClassTag[scala.Any]        = Manifest.Any$/;"	V
Any	scala/reflect/Manifest.scala	/^  val Any: Manifest[scala.Any] = new PhantomManifest[scala.Any](ObjectTYPE, "Any") {$/;"	V
AnyRef	scala/package.scala	/^  val AnyRef = new Specializable {$/;"	V
AnyRef	scala/reflect/ClassTag.scala	/^  val AnyRef  : ClassTag[scala.AnyRef]     = Manifest.AnyRef$/;"	V
AnyRef	scala/reflect/Manifest.scala	/^  val AnyRef: Manifest[scala.AnyRef] = Object.asInstanceOf[Manifest[scala.AnyRef]]$/;"	V
AnyVal	scala/AnyVal.scala	/^abstract class AnyVal extends Any with NotNull {$/;"	a
AnyVal	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val AnyVal  = ManifestFactory.AnyVal$/;"	V
AnyVal	scala/reflect/ClassTag.scala	/^  val AnyVal  : ClassTag[scala.AnyVal]     = Manifest.AnyVal$/;"	V
AnyVal	scala/reflect/Manifest.scala	/^  val AnyVal: Manifest[scala.AnyVal] = new PhantomManifest[scala.AnyVal](ObjectTYPE, "AnyVal") {$/;"	V
AnyValManifest	scala/reflect/Manifest.scala	/^abstract class AnyValManifest[T <: AnyVal](override val toString: String) extends Manifest[T] with Equals {$/;"	a
App	scala/App.scala	/^trait App extends DelayedInit {$/;"	t
Appended	scala/collection/GenIterableViewLike.scala	/^  trait Appended[B >: A] extends super.Appended[B] with Transformed[B] {$/;"	t
Appended	scala/collection/GenSeqViewLike.scala	/^  trait Appended[B >: A] extends super.Appended[B] with Transformed[B] {$/;"	t
Appended	scala/collection/GenTraversableViewLike.scala	/^  trait Appended[B >: A] extends Transformed[B] {$/;"	t
Appended	scala/collection/IterableViewLike.scala	/^  trait Appended[B >: A] extends super[TraversableViewLike].Appended[B] with super[GenIterableViewLike].Appended[B] with Transformed[B]$/;"	t
Appended	scala/collection/SeqViewLike.scala	/^  trait Appended[B >: A] extends super[IterableViewLike].Appended[B] with super[GenSeqViewLike].Appended[B] with Transformed[B]$/;"	t
Appended	scala/collection/TraversableViewLike.scala	/^  trait Appended[B >: A] extends Transformed[B] with super.Appended[B]$/;"	t
Appended	scala/collection/immutable/StreamViewLike.scala	/^  trait Appended[B >: A] extends super.Appended[B] with Transformed[B]$/;"	t
Appended	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Appended[U >: T] extends super.Appended[U] with Transformed[U] {$/;"	t
Appended	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Appended[U >: T] extends super[GenSeqViewLike].Appended[U] with super[ParIterableViewLike].Appended[U] with Transformed[U] {$/;"	t
Appended	scala/collection/parallel/RemainsIterator.scala	/^  class Appended[U >: T, PI <: IterableSplitter[U]](protected val that: PI) extends IterableSplitter[U] {$/;"	c
Appended	scala/collection/parallel/RemainsIterator.scala	/^  class Appended[U >: T, PI <: SeqSplitter[U]](it: PI) extends super.Appended[U, PI](it) with SeqSplitter[U] {$/;"	c
Application	scala/Application.scala	/^trait Application {$/;"	t
Array	scala/Array.scala	/^object Array extends FallbackArrayBuilding {$/;"	o
ArrayBuffer	scala/collection/mutable/ArrayBuffer.scala	/^class ArrayBuffer[A](override protected val initialSize: Int)$/;"	c
ArrayBuffer	scala/collection/mutable/ArrayBuffer.scala	/^object ArrayBuffer extends SeqFactory[ArrayBuffer] {$/;"	o
ArrayBuilder	scala/collection/mutable/ArrayBuilder.scala	/^abstract class ArrayBuilder[T] extends Builder[T, Array[T]] with Serializable$/;"	a
ArrayBuilder	scala/collection/mutable/ArrayBuilder.scala	/^object ArrayBuilder {$/;"	o
ArrayHashing	scala/util/hashing/MurmurHash3.scala	/^  class ArrayHashing[@specialized T] extends Hashing[Array[T]] {$/;"	c
ArrayIndexOutOfBoundsException	scala/package.scala	/^  type ArrayIndexOutOfBoundsException  = java.lang.ArrayIndexOutOfBoundsException$/;"	T
ArrayLike	scala/collection/mutable/ArrayLike.scala	/^trait ArrayLike[A, +Repr] extends Any with IndexedSeqOptimized[A, Repr] { self =>$/;"	t
ArrayOps	scala/collection/mutable/ArrayOps.scala	/^object ArrayOps {$/;"	o
ArrayOps	scala/collection/mutable/ArrayOps.scala	/^trait ArrayOps[T] extends Any with ArrayLike[T, Array[T]] with CustomParallelizable[T, ParArray[T]] {$/;"	t
ArrayRuntime	scala/runtime/ArrayRuntime.java	/^class ArrayRuntime {$/;"	c
ArraySeq	scala/collection/mutable/ArraySeq.scala	/^class ArraySeq[A](override val length: Int)$/;"	c
ArraySeq	scala/collection/mutable/ArraySeq.scala	/^object ArraySeq extends SeqFactory[ArraySeq] {$/;"	o
ArrayStack	scala/collection/mutable/ArrayStack.scala	/^class ArrayStack[T] private(private var table : Array[AnyRef],$/;"	c
ArrayStack	scala/collection/mutable/ArrayStack.scala	/^object ArrayStack extends SeqFactory[ArrayStack] {$/;"	o
AsJava	scala/collection/JavaConverters.scala	/^  type AsJava[A]            = Decorators.AsJava[A]$/;"	T
AsJava	scala/collection/convert/Decorators.scala	/^  class AsJava[A](op: => A) {$/;"	c
AsJavaCollection	scala/collection/JavaConverters.scala	/^  type AsJavaCollection[A]  = Decorators.AsJavaCollection[A]$/;"	T
AsJavaCollection	scala/collection/convert/Decorators.scala	/^  class AsJavaCollection[A](i: Iterable[A]) {$/;"	c
AsJavaDictionary	scala/collection/JavaConverters.scala	/^  type AsJavaDictionary[A, B]  = Decorators.AsJavaDictionary[A, B]$/;"	T
AsJavaDictionary	scala/collection/convert/Decorators.scala	/^  class AsJavaDictionary[A, B](m : mutable.Map[A, B]) {$/;"	c
AsJavaEnumeration	scala/collection/JavaConverters.scala	/^  type AsJavaEnumeration[A] = Decorators.AsJavaEnumeration[A]$/;"	T
AsJavaEnumeration	scala/collection/convert/Decorators.scala	/^  class AsJavaEnumeration[A](i: Iterator[A]) {$/;"	c
AsScala	scala/collection/JavaConverters.scala	/^  type AsScala[A]           = Decorators.AsScala[A]$/;"	T
AsScala	scala/collection/convert/Decorators.scala	/^  class AsScala[A](op: => A) {$/;"	c
Atom	scala/xml/Atom.scala	/^class Atom[+A](val data: A) extends SpecialNode with Serializable {$/;"	c
AtomicIndexFlag	scala/collection/generic/Signalling.scala	/^trait AtomicIndexFlag extends Signalling {$/;"	t
AttListDecl	scala/xml/dtd/Decl.scala	/^case class AttListDecl(name: String, attrs:List[AttrDecl])$/;"	r
AttrDecl	scala/xml/dtd/Decl.scala	/^case class AttrDecl(name: String, tpe: String, default: DefaultDecl) {$/;"	r
Attribute	scala/xml/Attribute.scala	/^object Attribute {$/;"	o
AttributesType	scala/xml/parsing/MarkupParser.scala	/^  type AttributesType = (MetaData, NamespaceBinding)$/;"	T
Await	scala/concurrent/package.scala	/^  object Await {$/;"	o
Awaitable	scala/concurrent/Awaitable.scala	/^trait Awaitable[+T] {$/;"	t
BLACK	scala/Console.scala	/^  final val BLACK      = "\\033[30m"$/;"	V
BLACK_B	scala/Console.scala	/^  final val BLACK_B    = "\\033[40m"$/;"	V
BLINK	scala/Console.scala	/^  final val BLINK      = "\\033[5m"$/;"	V
BLUE	scala/Console.scala	/^  final val BLUE       = "\\033[34m"$/;"	V
BLUE_B	scala/Console.scala	/^  final val BLUE_B     = "\\033[44m"$/;"	V
BOLD	scala/Console.scala	/^  final val BOLD       = "\\033[1m"$/;"	V
BYTE	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
Base	scala/util/regexp/Base.scala	/^abstract class Base {$/;"	a
BaseBerrySethi	scala/util/automata/BaseBerrySethi.scala	/^abstract class BaseBerrySethi {$/;"	a
BasicIO	scala/sys/process/BasicIO.scala	/^object BasicIO {$/;"	o
BasicIO.{ Uncloseable, Streamed }	scala/sys/process/ProcessBuilderImpl.scala	/^import BasicIO.{ Uncloseable, Streamed }$/;"	i
BasicNode	scala/collection/concurrent/BasicNode.java	/^public abstract class BasicNode {$/;"	c
BasicTransformer	scala/xml/transform/BasicTransformer.scala	/^abstract class BasicTransformer extends Function1[Node,Node]$/;"	a
BeanDescription	scala/beans/BeanDescription.scala	/^class BeanDescription(val description: String) extends scala.annotation.Annotation$/;"	c
BeanDescription	scala/reflect/package.scala	/^  type BeanDescription = scala.beans.BeanDescription$/;"	T
BeanDisplayName	scala/beans/BeanDisplayName.scala	/^class BeanDisplayName(val name: String) extends scala.annotation.Annotation$/;"	c
BeanDisplayName	scala/reflect/package.scala	/^  type BeanDisplayName = scala.beans.BeanDisplayName$/;"	T
BeanInfo	scala/beans/BeanInfo.scala	/^class BeanInfo extends scala.annotation.Annotation$/;"	c
BeanInfo	scala/reflect/package.scala	/^  type BeanInfo = scala.beans.BeanInfo$/;"	T
BeanInfoSkip	scala/beans/BeanInfoSkip.scala	/^class BeanInfoSkip extends scala.annotation.Annotation$/;"	c
BeanInfoSkip	scala/reflect/package.scala	/^  type BeanInfoSkip = scala.beans.BeanInfoSkip$/;"	T
BeanProperty	scala/beans/BeanProperty.scala	/^class BeanProperty extends scala.annotation.StaticAnnotation$/;"	c
BeanProperty	scala/reflect/package.scala	/^  type BeanProperty = scala.beans.BeanProperty$/;"	T
Benchmark	scala/testing/Benchmark.scala	/^trait Benchmark {$/;"	t
BestOfBreed	scala/Specializable.scala	/^  final val BestOfBreed = new Group((Int, Double, Boolean, Unit, AnyRef))$/;"	V
BigDecimal	scala/collection/immutable/Range.scala	/^  object BigDecimal {$/;"	o
BigDecimal	scala/math/BigDecimal.scala	/^class BigDecimal($/;"	c
BigDecimal	scala/math/BigDecimal.scala	/^object BigDecimal {$/;"	o
BigDecimal	scala/package.scala	/^  type BigDecimal = scala.math.BigDecimal$/;"	T
BigDecimal	scala/package.scala	/^  val BigDecimal = scala.math.BigDecimal$/;"	V
BigDecimal.RoundingMode._	scala/math/BigDecimal.scala	/^  import BigDecimal.RoundingMode._$/;"	i
BigDecimalAsIfIntegral	scala/math/Numeric.scala	/^  object BigDecimalAsIfIntegral extends BigDecimalAsIfIntegral with Ordering.BigDecimalOrdering$/;"	o
BigDecimalAsIfIntegral	scala/math/Numeric.scala	/^  trait BigDecimalAsIfIntegral extends BigDecimalIsConflicted with Integral[BigDecimal] {$/;"	t
BigDecimalIsConflicted	scala/math/Numeric.scala	/^  trait BigDecimalIsConflicted extends Numeric[BigDecimal] {$/;"	t
BigDecimalIsFractional	scala/math/Numeric.scala	/^  trait BigDecimalIsFractional extends BigDecimalIsConflicted with Fractional[BigDecimal] {$/;"	t
BigDecimalOrdering	scala/math/Ordering.scala	/^  trait BigDecimalOrdering extends Ordering[BigDecimal] {$/;"	t
BigInt	scala/collection/immutable/Range.scala	/^  object BigInt {$/;"	o
BigInt	scala/math/BigInt.scala	/^class BigInt(val bigInteger: BigInteger) extends ScalaNumber with ScalaNumericConversions with Serializable {$/;"	c
BigInt	scala/math/BigInt.scala	/^object BigInt {$/;"	o
BigInt	scala/package.scala	/^  type BigInt = scala.math.BigInt$/;"	T
BigInt	scala/package.scala	/^  val BigInt = scala.math.BigInt$/;"	V
BigIntIsIntegral	scala/math/Numeric.scala	/^  trait BigIntIsIntegral extends Integral[BigInt] {$/;"	t
BigIntOrdering	scala/math/Ordering.scala	/^  trait BigIntOrdering extends Ordering[BigInt] {$/;"	t
Binder	scala/xml/factory/Binder.scala	/^abstract class Binder(val preserveWS: Boolean) extends ValidatingMarkupHandler {$/;"	a
BinderEnv	scala/util/parsing/ast/Binders.scala	/^  abstract class BinderEnv {$/;"	a
Binders	scala/util/parsing/ast/Binders.scala	/^trait Binders extends AbstractSyntax with Mappable {$/;"	t
BindingSensitive	scala/util/parsing/ast/Binders.scala	/^  trait BindingSensitive {$/;"	t
BitSet	scala/collection/BitSet.scala	/^object BitSet extends BitSetFactory[BitSet] {$/;"	o
BitSet	scala/collection/BitSet.scala	/^trait BitSet extends SortedSet[Int]$/;"	t
BitSet	scala/collection/immutable/BitSet.scala	/^abstract class BitSet extends scala.collection.AbstractSet[Int]$/;"	a
BitSet	scala/collection/immutable/BitSet.scala	/^object BitSet extends BitSetFactory[BitSet] {$/;"	o
BitSet	scala/collection/mutable/BitSet.scala	/^class BitSet(protected var elems: Array[Long]) extends AbstractSet[Int]$/;"	c
BitSet	scala/collection/mutable/BitSet.scala	/^object BitSet extends BitSetFactory[BitSet] {$/;"	o
BitSet1	scala/collection/immutable/BitSet.scala	/^  class BitSet1(val elems: Long) extends BitSet {$/;"	c
BitSet2	scala/collection/immutable/BitSet.scala	/^  class BitSet2(val elems0: Long, elems1: Long) extends BitSet {$/;"	c
BitSetFactory	scala/collection/generic/BitSetFactory.scala	/^trait BitSetFactory[Coll <: BitSet with BitSetLike[Coll]] {$/;"	t
BitSetLike	scala/collection/BitSetLike.scala	/^object BitSetLike {$/;"	o
BitSetLike	scala/collection/BitSetLike.scala	/^trait BitSetLike[+This <: BitSetLike[This] with SortedSet[Int]] extends SortedSetLike[Int, This] { self =>$/;"	t
BitSetLike._	scala/collection/BitSetLike.scala	/^import BitSetLike._$/;"	i
BitSetLike.{LogWL, updateArray}	scala/collection/immutable/BitSet.scala	/^import BitSetLike.{LogWL, updateArray}$/;"	i
BitSetLike.{LogWL, updateArray}	scala/collection/mutable/BitSet.scala	/^import BitSetLike.{LogWL, updateArray}$/;"	i
BitSetN	scala/collection/immutable/BitSet.scala	/^  class BitSetN(val elems: Array[Long]) extends BitSet {$/;"	c
Bits32AndUp	scala/Specializable.scala	/^  final val Bits32AndUp = new Group((Int, Long, Float, Double))$/;"	V
BlackTree	scala/collection/immutable/RedBlack.scala	/^  case class BlackTree[+B](override val key: A,$/;"	r
BlackTree	scala/collection/immutable/RedBlackTree.scala	/^  object BlackTree {$/;"	o
BlockContext	scala/concurrent/BlockContext.scala	/^object BlockContext {$/;"	o
BlockContext	scala/concurrent/BlockContext.scala	/^trait BlockContext {$/;"	t
Boolean	scala/Boolean.scala	/^object Boolean extends AnyValCompanion {$/;"	o
Boolean	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Boolean = ManifestFactory.Boolean$/;"	V
Boolean	scala/reflect/ClassTag.scala	/^  val Boolean : ClassTag[scala.Boolean]    = Manifest.Boolean$/;"	V
Boolean	scala/reflect/Manifest.scala	/^  val Boolean: AnyValManifest[Boolean] = new AnyValManifest[scala.Boolean]("Boolean") {$/;"	V
BooleanBeanProperty	scala/beans/BooleanBeanProperty.scala	/^class BooleanBeanProperty extends scala.annotation.StaticAnnotation$/;"	c
BooleanBeanProperty	scala/reflect/package.scala	/^  type BooleanBeanProperty = scala.beans.BooleanBeanProperty$/;"	T
BooleanOrdering	scala/math/Ordering.scala	/^  trait BooleanOrdering extends Ordering[Boolean] {$/;"	t
BooleanProp	scala/sys/BooleanProp.scala	/^object BooleanProp {$/;"	o
BooleanProp	scala/sys/BooleanProp.scala	/^trait BooleanProp extends Prop[Boolean] {$/;"	t
BooleanPropImpl	scala/sys/BooleanProp.scala	/^  class BooleanPropImpl(key: String, valueFn: String => Boolean) extends PropImpl(key, valueFn) with BooleanProp {$/;"	c
BooleanRef	scala/runtime/BooleanRef.java	/^    public BooleanRef(boolean elem) { this.elem = elem; }$/;"	m	class:BooleanRef
BooleanRef	scala/runtime/BooleanRef.java	/^public class BooleanRef implements java.io.Serializable {$/;"	c
BoundElement	scala/util/parsing/ast/Binders.scala	/^  case class BoundElement[boundElement <: NameElement](el: boundElement, scope: Scope[boundElement]) extends NameElement with Proxy with BindingSensitive {$/;"	r
Box	scala/xml/PrettyPrinter.scala	/^  case class Box(col: Int, s: String) extends Item$/;"	r
Boxed	scala/runtime/Boxed.scala	/^trait Boxed {$/;"	t
BoxedUnit	scala/runtime/BoxedUnit.java	/^    private BoxedUnit() { }$/;"	m	class:BoxedUnit	file:
BoxedUnit	scala/runtime/BoxedUnit.java	/^public final class BoxedUnit implements java.io.Serializable {$/;"	c
BoxesRunTime	scala/runtime/BoxesRunTime.java	/^public final class BoxesRunTime$/;"	c
Breaks	scala/util/control/Breaks.scala	/^class Breaks {$/;"	c
Breaks	scala/util/control/Breaks.scala	/^object Breaks extends Breaks$/;"	o
BrokenException	scala/xml/PrettyPrinter.scala	/^  class BrokenException() extends java.lang.Exception$/;"	c
Buffer	scala/collection/mutable/Buffer.scala	/^object Buffer extends SeqFactory[Buffer] {$/;"	o
Buffer	scala/collection/mutable/Buffer.scala	/^trait Buffer[A] extends Seq[A]$/;"	t
BufferLike	scala/collection/mutable/BufferLike.scala	/^trait BufferLike[A, +This <: BufferLike[A, This] with Buffer[A]]$/;"	t
BufferProxy	scala/collection/mutable/BufferProxy.scala	/^trait BufferProxy[A] extends Buffer[A] with Proxy {$/;"	t
BufferSize	scala/sys/process/BasicIO.scala	/^  final val BufferSize = 8192$/;"	V
BufferedIterator	scala/collection/BufferedIterator.scala	/^trait BufferedIterator[+A] extends Iterator[A] {$/;"	t
BufferedIterator	scala/package.scala	/^  type BufferedIterator[+A] = scala.collection.BufferedIterator[A]$/;"	T
BufferedLineIterator	scala/io/BufferedSource.scala	/^  class BufferedLineIterator extends AbstractIterator[String] with Iterator[String] {$/;"	c
BufferedSource	scala/io/BufferedSource.scala	/^class BufferedSource(inputStream: InputStream, bufferSize: Int)(implicit val codec: Codec) extends Source {$/;"	c
Builder	scala/collection/mutable/Builder.scala	/^trait Builder[-Elem, +To] extends Growable[Elem] {$/;"	t
BuilderOps	scala/collection/parallel/ParIterableLike.scala	/^  trait BuilderOps[Elem, To] {$/;"	t
By	scala/util/control/Exception.scala	/^  class By[T,R](f: T => R) {$/;"	c
Byte	scala/Byte.scala	/^object Byte extends AnyValCompanion {$/;"	o
Byte	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Byte    = ManifestFactory.Byte$/;"	V
Byte	scala/reflect/ClassTag.scala	/^  val Byte    : ClassTag[scala.Byte]       = Manifest.Byte$/;"	V
Byte	scala/reflect/Manifest.scala	/^  val Byte: AnyValManifest[Byte] = new AnyValManifest[scala.Byte]("Byte") {$/;"	V
ByteIsIntegral	scala/math/Numeric.scala	/^  trait ByteIsIntegral extends Integral[Byte] {$/;"	t
ByteOrdering	scala/math/Ordering.scala	/^  trait ByteOrdering extends Ordering[Byte] {$/;"	t
BytePickle	scala/io/BytePickle.scala	/^object BytePickle {$/;"	o
ByteRef	scala/runtime/ByteRef.java	/^    public ByteRef(byte elem) { this.elem = elem; }$/;"	m	class:ByteRef
ByteRef	scala/runtime/ByteRef.java	/^public class ByteRef implements java.io.Serializable {$/;"	c
ByteswapHashing	scala/util/hashing/ByteswapHashing.scala	/^object ByteswapHashing {$/;"	o
CACHE	scala/xml/factory/LoggedNodeFactory.scala	/^  final val CACHE = 1$/;"	V
CAS	scala/collection/concurrent/TrieMap.scala	/^  def CAS(old: MainNode[K, V], n: MainNode[K, V]) = INodeBase.updater.compareAndSet(this, old, n)$/;"	m
CAS_PREV	scala/collection/concurrent/MainNode.java	/^    public boolean CAS_PREV(MainNode<K, V> oldval, MainNode<K, V> nval) {$/;"	m	class:MainNode
CAS_ROOT	scala/collection/concurrent/TrieMap.scala	/^  def CAS_ROOT(ov: AnyRef, nv: AnyRef) = rootupdater.compareAndSet(this, ov, nv)$/;"	m
CAS_SIZE	scala/collection/concurrent/CNodeBase.java	/^    public boolean CAS_SIZE(int oldval, int nval) {$/;"	m	class:CNodeBase
CHAR	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
CHECK_RATE	scala/collection/parallel/package.scala	/^  val CHECK_RATE = 512$/;"	V
CHOICE	scala/xml/dtd/Tokens.scala	/^  final val CHOICE       = 9$/;"	V
CNodeBase	scala/collection/concurrent/CNodeBase.java	/^abstract class CNodeBase<K, V> extends MainNode<K, V> {$/;"	c
COLUMN_BITS	scala/io/Position.scala	/^  final val COLUMN_BITS = 31 - LINE_BITS \/\/ no negatives => 31$/;"	V
COLUMN_MASK	scala/io/Position.scala	/^  final val COLUMN_MASK = (1 << COLUMN_BITS) - 1$/;"	V
COMMA	scala/xml/dtd/Tokens.scala	/^  final val COMMA        = 5$/;"	V
CONFIG	scala/annotation/elidable.scala	/^  final val CONFIG  = 700           \/\/ Level.CONFIG.intValue()$/;"	V
CR	scala/collection/immutable/StringLike.scala	/^  private final val CR: Char = 0x0D$/;"	V
CYAN	scala/Console.scala	/^  final val CYAN       = "\\033[36m"$/;"	V
CYAN_B	scala/Console.scala	/^  final val CYAN_B     = "\\033[46m"$/;"	V
CachedFileStorage	scala/xml/persistent/CachedFileStorage.scala	/^abstract class CachedFileStorage(private val file1: File) extends Thread with Logged {$/;"	a
CanBuild	scala/collection/generic/package.scala	/^  type CanBuild[-Elem, +To] = CanBuildFrom[Nothing, Elem, To]$/;"	T
CanBuildFrom	scala/collection/generic/CanBuildFrom.scala	/^trait CanBuildFrom[-From, -Elem, +To] {$/;"	t
CanCombineFrom	scala/collection/generic/CanCombineFrom.scala	/^trait CanCombineFrom[-From, -Elem, +To] extends CanBuildFrom[From, Elem, To] with Parallel {$/;"	t
CanCombineFromMap	scala/collection/generic/ParMapFactory.scala	/^  class CanCombineFromMap[K, V] extends CanCombineFrom[CC[_, _], (K, V), CC[K, V]] {$/;"	c
CancellationException	scala/concurrent/package.scala	/^  type CancellationException = java.util.concurrent.CancellationException$/;"	T
Catch	scala/util/control/Exception.scala	/^  class Catch[+T]($/;"	c
Catcher	scala/util/control/Exception.scala	/^  type Catcher[+T] = PartialFunction[Throwable, T]$/;"	T
Channel	scala/concurrent/Channel.scala	/^class Channel[A] {$/;"	c
Char	scala/Char.scala	/^object Char extends AnyValCompanion {$/;"	o
Char	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Char    = ManifestFactory.Char$/;"	V
Char	scala/reflect/ClassTag.scala	/^  val Char    : ClassTag[scala.Char]       = Manifest.Char$/;"	V
Char	scala/reflect/Manifest.scala	/^  val Char: AnyValManifest[Char] = new AnyValManifest[scala.Char]("Char") {$/;"	V
CharArrayReader	scala/util/parsing/input/CharArrayReader.scala	/^class CharArrayReader(chars: Array[Char], index: Int) extends CharSequenceReader(chars, index) {$/;"	c
CharArrayReader	scala/util/parsing/input/CharArrayReader.scala	/^object CharArrayReader {$/;"	o
CharIsIntegral	scala/math/Numeric.scala	/^  trait CharIsIntegral extends Integral[Char] {$/;"	t
CharOrdering	scala/math/Ordering.scala	/^  trait CharOrdering extends Ordering[Char] {$/;"	t
CharRef	scala/runtime/CharRef.java	/^    public CharRef(char elem) { this.elem = elem; }$/;"	m	class:CharRef
CharRef	scala/runtime/CharRef.java	/^public class CharRef implements java.io.Serializable {$/;"	c
CharSequenceReader	scala/util/parsing/input/CharSequenceReader.scala	/^class CharSequenceReader(override val source: java.lang.CharSequence,$/;"	c
CharSequenceReader	scala/util/parsing/input/CharSequenceReader.scala	/^object CharSequenceReader {$/;"	o
CharSequenceReader._	scala/util/parsing/input/CharSequenceReader.scala	/^  import CharSequenceReader._$/;"	i
CircularIncludeException	scala/xml/include/CircularIncludeException.scala	/^class CircularIncludeException(message: String) extends XIncludeException {$/;"	c
Class	scala/Predef.scala	/^  type Class[T]      = java.lang.Class[T]$/;"	T
ClassCastException	scala/package.scala	/^  type ClassCastException              = java.lang.ClassCastException$/;"	T
ClassManifest	scala/Predef.scala	/^  type ClassManifest[T] = scala.reflect.ClassManifest[T]$/;"	T
ClassManifest	scala/Predef.scala	/^  val ClassManifest     = scala.reflect.ClassManifest$/;"	V
ClassManifest	scala/reflect/package.scala	/^  type ClassManifest[T]  = scala.reflect.ClassTag[T]$/;"	T
ClassManifest	scala/reflect/package.scala	/^  val ClassManifest = ClassManifestFactory$/;"	V
ClassManifestDeprecatedApis	scala/reflect/ClassManifestDeprecatedApis.scala	/^trait ClassManifestDeprecatedApis[T] extends OptManifest[T] {$/;"	t
ClassManifestFactory	scala/reflect/ClassManifestDeprecatedApis.scala	/^object ClassManifestFactory {$/;"	o
ClassManifestTraversableFactory	scala/collection/generic/package.scala	/^  type ClassManifestTraversableFactory[CC[X] <: Traversable[X] with GenericClassManifestTraversableTemplate[X, CC]] = ClassTagTraversableFactory[CC]$/;"	T
ClassTag	scala/reflect/ClassTag.scala	/^object ClassTag {$/;"	o
ClassTag	scala/reflect/ClassTag.scala	/^trait ClassTag[T] extends ClassManifestDeprecatedApis[T] with Equals with Serializable {$/;"	t
ClassTagTraversableFactory	scala/collection/generic/ClassTagTraversableFactory.scala	/^abstract class ClassTagTraversableFactory[CC[X] <: Traversable[X] with GenericClassTagTraversableTemplate[X, CC]]$/;"	a
ClassfileAnnotation	scala/annotation/ClassfileAnnotation.scala	/^trait ClassfileAnnotation extends StaticAnnotation$/;"	t
Classifier	scala/concurrent/duration/DurationConversions.scala	/^  trait Classifier[C] {$/;"	t
Clearable	scala/collection/generic/Clearable.scala	/^trait Clearable {$/;"	t
Cloneable	scala/Cloneable.scala	/^trait Cloneable extends java.lang.Cloneable$/;"	t
Cloneable	scala/collection/mutable/Cloneable.scala	/^trait Cloneable[+A <: AnyRef] extends scala.Cloneable {$/;"	t
Closeable	scala/sys/process/package.scala	/^      type Closeable       = java.io.Closeable$/;"	T
Codec	scala/io/Codec.scala	/^class Codec(val charSet: Charset) {$/;"	c
Codec	scala/io/Codec.scala	/^object Codec extends LowPriorityCodecImplicits {$/;"	o
Coll	scala/collection/IterableView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/SeqView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/TraversableView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/generic/GenMapFactory.scala	/^  type Coll = CC[_, _]$/;"	T
Coll	scala/collection/generic/GenericClassTagCompanion.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/generic/GenericCompanion.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/generic/GenericOrderedCompanion.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/generic/SortedMapFactory.scala	/^  type Coll = CC[_, _]$/;"	T
Coll	scala/collection/generic/SortedSetFactory.scala	/^  type Coll = CC[_]$/;"	T
Coll	scala/collection/mutable/IndexedSeqView.scala	/^  type Coll = TraversableView[_, C] forSome {type C <: Traversable[_]}$/;"	T
Coll	scala/collection/parallel/ParIterableView.scala	/^  type Coll = ParIterableView[_, C, _] forSome { type C <: ParIterable[_] }$/;"	T
Coll	scala/collection/parallel/ParSeqView.scala	/^  type Coll = ParSeqView[_, C, _] forSome { type C <: ParSeq[_] }$/;"	T
Coll	scala/xml/NodeSeq.scala	/^  type Coll = NodeSeq$/;"	T
Combiner	scala/collection/parallel/Combiner.scala	/^trait Combiner[-Elem, +To] extends Builder[Elem, To] with Sizing with Parallel {$/;"	t
CombinerFactory	scala/collection/parallel/package.scala	/^  trait CombinerFactory[U, Repr] {$/;"	t
Comment	scala/xml/Comment.scala	/^case class Comment(commentText: String) extends SpecialNode {$/;"	r
ConcurrentMap	scala/collection/mutable/ConcurrentMap.scala	/^trait ConcurrentMap[A, B] extends Map[A, B] {$/;"	t
ConcurrentMapDeprecatedWrapper	scala/collection/convert/Wrappers.scala	/^  class ConcurrentMapDeprecatedWrapper[A, B](override val underlying: mutable.ConcurrentMap[A, B]) extends MutableMapWrapper[A, B](underlying) with juc.ConcurrentMap[A, B] {$/;"	c
ConcurrentMapWrapper	scala/collection/convert/Wrappers.scala	/^  class ConcurrentMapWrapper[A, B](override val underlying: concurrent.Map[A, B]) extends MutableMapWrapper[A, B](underlying) with juc.ConcurrentMap[A, B] {$/;"	c
ConcurrentModificationException	scala/compat/Platform.scala	/^  type ConcurrentModificationException = java.util.ConcurrentModificationException$/;"	T
Configure	scala/io/Codec.scala	/^  type Configure[T] = (T => T, Boolean)$/;"	T
ConsRHS	scala/util/grammar/HedgeRHS.scala	/^case class ConsRHS(tnt: Int, hnt: Int) extends HedgeRHS$/;"	r
ConsWrapper	scala/collection/immutable/Stream.scala	/^  class ConsWrapper[A](tl: => Stream[A]) {$/;"	c
Console	scala/Console.scala	/^object Console {$/;"	o
ConsoleErrorHandler	scala/xml/parsing/FactoryAdapter.scala	/^trait ConsoleErrorHandler extends DefaultHandler {$/;"	t
ConsoleLogger	scala/util/logging/ConsoleLogger.scala	/^trait ConsoleLogger extends Logged {$/;"	t
Constant	scala/annotation/switch.scala	/^  val Constant = 'Q'$/;"	V
ConstantImpl	scala/sys/BooleanProp.scala	/^  class ConstantImpl(val key: String, val value: Boolean) extends BooleanProp {$/;"	c
ConstructingHandler	scala/xml/parsing/ConstructingHandler.scala	/^abstract class ConstructingHandler extends MarkupHandler$/;"	a
ConstructingParser	scala/xml/parsing/ConstructingParser.scala	/^class ConstructingParser(val input: Source, val preserveWS: Boolean)$/;"	c
ConstructingParser	scala/xml/parsing/ConstructingParser.scala	/^object ConstructingParser {$/;"	o
ContentModel	scala/xml/dtd/ContentModel.scala	/^object ContentModel extends WordExp {$/;"	o
ContentModel.ElemName	scala/xml/dtd/ElementValidator.scala	/^import ContentModel.ElemName$/;"	i
ContentModel._	scala/xml/dtd/ContentModelParser.scala	/^  import ContentModel._$/;"	i
ContentModel.{ Alt, RegExp }	scala/xml/dtd/ContentModel.scala	/^  import ContentModel.{ Alt, RegExp }$/;"	i
ContentModel.{ ElemName, Translator }	scala/xml/dtd/ContentModel.scala	/^  import ContentModel.{ ElemName, Translator }$/;"	i
ContentModelParser	scala/xml/dtd/ContentModelParser.scala	/^object ContentModelParser extends Scanner { \/\/ a bit too permissive concerning #PCDATA$/;"	o
Contents	scala/collection/mutable/FlatHashTable.scala	/^  class Contents[A]($/;"	c
Contents	scala/collection/mutable/HashTable.scala	/^  class Contents[A, Entry >: Null <: HashEntry[A, Entry]]($/;"	c
ControlThrowable	scala/util/control/ControlThrowable.scala	/^trait ControlThrowable extends Throwable with NoStackTrace$/;"	t
CopyChainToArray	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  class CopyChainToArray(array: Array[Any], offset: Int, howmany: Int) extends Task[Unit, CopyChainToArray] {$/;"	c
CopyUnrolledToArray	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  class CopyUnrolledToArray(array: Array[Any], offset: Int, howmany: Int)$/;"	c
CreateGroupedTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  class CreateGroupedTrie[Repr](cbf: () => Combiner[V, Repr], bucks: Array[Unrolled[(K, V)]], root: Array[HashMap[K, AnyRef]], offset: Int, howmany: Int)$/;"	c
CreateTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  class CreateTrie(bucks: Array[Unrolled[(K, V)]], root: Array[HashMap[K, V]], offset: Int, howmany: Int)$/;"	c
CreateTrie	scala/collection/parallel/immutable/ParHashSet.scala	/^  class CreateTrie(bucks: Array[Unrolled[Any]], root: Array[HashSet[T]], offset: Int, howmany: Int)$/;"	c
Creator	scala/sys/Prop.scala	/^  trait Creator[+T] {$/;"	t
CustomParallelizable	scala/collection/CustomParallelizable.scala	/^trait CustomParallelizable[+A, +ParRepr <: Parallel] extends Any with Parallelizable[A, ParRepr] {$/;"	t
DAYS	scala/concurrent/duration/package.scala	/^  final val DAYS         = java.util.concurrent.TimeUnit.DAYS$/;"	V
DEF	scala/io/BytePickle.scala	/^  val DEF = 1$/;"	V
DEFAULT	scala/xml/dtd/Decl.scala	/^case class DEFAULT(fixed: Boolean, attValue: String) extends DefaultDecl {$/;"	r
DOUBLE	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
DTD	scala/xml/dtd/DTD.scala	/^abstract class DTD {$/;"	a
Deadline	scala/concurrent/duration/Deadline.scala	/^case class Deadline private (time: FiniteDuration) extends Ordered[Deadline] {$/;"	r
Deadline	scala/concurrent/duration/Deadline.scala	/^object Deadline {$/;"	o
Decl	scala/xml/dtd/Decl.scala	/^abstract class Decl$/;"	a
DecorateAsJava	scala/collection/convert/DecorateAsJava.scala	/^trait DecorateAsJava {$/;"	t
DecorateAsScala	scala/collection/convert/DecorateAsScala.scala	/^trait DecorateAsScala {$/;"	t
Decorators._	scala/collection/convert/DecorateAsJava.scala	/^import Decorators._$/;"	i
Decorators._	scala/collection/convert/DecorateAsScala.scala	/^import Decorators._$/;"	i
Def	scala/io/BytePickle.scala	/^  case class Def() extends RefDef$/;"	r
Default	scala/xml/XML.scala	/^  val Default = Value$/;"	V
DefaultBufSize	scala/io/Source.scala	/^  val DefaultBufSize = 2048$/;"	V
DefaultDecl	scala/xml/dtd/Decl.scala	/^abstract class DefaultDecl {$/;"	a
DefaultMap	scala/collection/DefaultMap.scala	/^trait DefaultMap[A, +B] extends Map[A, B] { self =>$/;"	t
DefaultMap	scala/collection/immutable/DefaultMap.scala	/^trait DefaultMap[A, +B] extends Map[A, B] { self =>$/;"	t
DefaultMapModel	scala/collection/mutable/DefaultMapModel.scala	/^trait DefaultMapModel[A, B] extends Map[A, B] {$/;"	t
DefaultMarkupHandler	scala/xml/parsing/DefaultMarkupHandler.scala	/^abstract class DefaultMarkupHandler extends MarkupHandler {$/;"	a
DefaultPromise	scala/concurrent/impl/Promise.scala	/^  class DefaultPromise[T] extends AbstractPromise with Promise[T] { self =>$/;"	c
DefaultSignalling	scala/collection/generic/Signalling.scala	/^class DefaultSignalling extends Signalling with VolatileAbort {$/;"	c
DefaultThreadFactory	scala/concurrent/impl/ExecutionContextImpl.scala	/^  class DefaultThreadFactory(daemonic: Boolean) extends ThreadFactory with ForkJoinPool.ForkJoinWorkerThreadFactory { $/;"	c
DelayedInit	scala/DelayedInit.scala	/^trait DelayedInit {$/;"	t
DelayedLazyVal	scala/concurrent/DelayedLazyVal.scala	/^class DelayedLazyVal[T](f: () => T, body: => Unit)(implicit exec: ExecutionContext){$/;"	c
DelegatedContext	scala/collection/generic/Signalling.scala	/^class DelegatedContext(var signalDelegate: Signalling) extends DelegatedSignalling$/;"	c
DelegatedSignalling	scala/collection/generic/Signalling.scala	/^trait DelegatedSignalling extends Signalling {$/;"	t
Described	scala/util/control/Exception.scala	/^  trait Described {$/;"	t
DetWordAutom	scala/util/automata/DetWordAutom.scala	/^abstract class DetWordAutom[T <: AnyRef] {$/;"	a
DictionaryWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val DictionaryWrapper            = Wrappers.DictionaryWrapper$/;"	V
DictionaryWrapper	scala/collection/convert/Wrappers.scala	/^  case class DictionaryWrapper[A, B](underlying: mutable.Map[A, B]) extends ju.Dictionary[A, B] {$/;"	r
DocCons	scala/text/Document.scala	/^case class DocCons(hd: Document, tl: Document) extends Document$/;"	r
DocGroup	scala/text/Document.scala	/^case class DocGroup(doc: Document) extends Document$/;"	r
DocNest	scala/text/Document.scala	/^case class DocNest(indent: Int, doc: Document) extends Document$/;"	r
DocText	scala/text/Document.scala	/^case class DocText(txt: String) extends Document$/;"	r
DocType	scala/xml/dtd/DocType.scala	/^case class DocType(name: String, extID: ExternalID, intSubset: Seq[dtd.Decl])$/;"	r
Document	scala/text/Document.scala	/^abstract class Document {$/;"	a
Document	scala/text/Document.scala	/^object Document {$/;"	o
Document	scala/xml/Document.scala	/^class Document extends NodeSeq with pull.XMLEvent with Serializable {$/;"	c
Double	scala/Double.scala	/^object Double extends AnyValCompanion {$/;"	o
Double	scala/collection/immutable/Range.scala	/^  object Double {$/;"	o
Double	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Double  = ManifestFactory.Double$/;"	V
Double	scala/reflect/ClassTag.scala	/^  val Double  : ClassTag[scala.Double]     = Manifest.Double$/;"	V
Double	scala/reflect/Manifest.scala	/^  val Double: AnyValManifest[Double] = new AnyValManifest[scala.Double]("Double") {$/;"	V
DoubleAsIfIntegral	scala/math/Numeric.scala	/^  object DoubleAsIfIntegral extends DoubleAsIfIntegral with Ordering.DoubleOrdering$/;"	o
DoubleAsIfIntegral	scala/math/Numeric.scala	/^  trait DoubleAsIfIntegral extends DoubleIsConflicted with Integral[Double] {$/;"	t
DoubleIsConflicted	scala/math/Numeric.scala	/^  trait DoubleIsConflicted extends Numeric[Double] {$/;"	t
DoubleIsFractional	scala/math/Numeric.scala	/^  trait DoubleIsFractional extends DoubleIsConflicted with Fractional[Double] {$/;"	t
DoubleLinkedList	scala/collection/mutable/DoubleLinkedList.scala	/^class DoubleLinkedList[A]() extends AbstractSeq[A]$/;"	c
DoubleLinkedList	scala/collection/mutable/DoubleLinkedList.scala	/^object DoubleLinkedList extends SeqFactory[DoubleLinkedList] {$/;"	o
DoubleLinkedListLike	scala/collection/mutable/DoubleLinkedListLike.scala	/^trait DoubleLinkedListLike[A, This <: Seq[A] with DoubleLinkedListLike[A, This]] extends SeqLike[A, This] with LinkedListLike[A, This] { self =>$/;"	t
DoubleOrdering	scala/math/Ordering.scala	/^  trait DoubleOrdering extends Ordering[Double] {$/;"	t
DoubleRef	scala/runtime/DoubleRef.java	/^    public DoubleRef(double elem) { this.elem = elem; }$/;"	m	class:DoubleRef
DoubleRef	scala/runtime/DoubleRef.java	/^public class DoubleRef implements java.io.Serializable {$/;"	c
DroppedWhile	scala/collection/GenIterableViewLike.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A] {$/;"	t
DroppedWhile	scala/collection/GenSeqViewLike.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A] {$/;"	t
DroppedWhile	scala/collection/GenTraversableViewLike.scala	/^  trait DroppedWhile extends Transformed[A] {$/;"	t
DroppedWhile	scala/collection/IterableViewLike.scala	/^  trait DroppedWhile extends super[TraversableViewLike].DroppedWhile with super[GenIterableViewLike].DroppedWhile with Transformed[A]$/;"	t
DroppedWhile	scala/collection/SeqViewLike.scala	/^  trait DroppedWhile extends super[IterableViewLike].DroppedWhile with super[GenSeqViewLike].DroppedWhile with Transformed[A]$/;"	t
DroppedWhile	scala/collection/TraversableViewLike.scala	/^  trait DroppedWhile extends Transformed[A] with super.DroppedWhile$/;"	t
DroppedWhile	scala/collection/immutable/StreamViewLike.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A]$/;"	t
DroppedWhile	scala/collection/mutable/IndexedSeqView.scala	/^  trait DroppedWhile extends super.DroppedWhile with Transformed[A] {$/;"	t
DummyImplicit	scala/Predef.scala	/^  class DummyImplicit$/;"	c
DummyImplicit	scala/Predef.scala	/^  object DummyImplicit {$/;"	o
Duration	scala/concurrent/duration/Duration.scala	/^object Duration {$/;"	o
Duration.Undefined	scala/concurrent/impl/Promise.scala	/^      import Duration.Undefined$/;"	i
Duration._	scala/concurrent/duration/Duration.scala	/^  import Duration._$/;"	i
DurationConversions	scala/concurrent/duration/DurationConversions.scala	/^object DurationConversions {$/;"	o
DurationConversions	scala/concurrent/duration/DurationConversions.scala	/^trait DurationConversions extends Any {$/;"	t
DurationConversions._	scala/concurrent/duration/DurationConversions.scala	/^import DurationConversions._$/;"	i
Dynamic	scala/Dynamic.scala	/^trait Dynamic extends Any$/;"	t
DynamicVariable	scala/util/DynamicVariable.scala	/^class DynamicVariable[T](init: T) {$/;"	c
E	scala/math/package.scala	/^  val E = java.lang.Math.E$/;"	V
EFCons	scala/util/parsing/combinator/Parsers.scala	/^  case class EFCons(hd: Elem => ElemFun, tl: ElemFun) extends ElemFun$/;"	r
EFNil	scala/util/parsing/combinator/Parsers.scala	/^  case class EFNil(res: Boolean) extends ElemFun*\/$/;"	r
ELEMENTS	scala/xml/dtd/ContentModel.scala	/^case class ELEMENTS(r: ContentModel.RegExp) extends DFAContentModel {$/;"	r
END	scala/xml/dtd/Tokens.scala	/^  final val END          = 10$/;"	V
ENDCH	scala/xml/dtd/Scanner.scala	/^  final val ENDCH = '\\u0000'$/;"	V
EOL	scala/compat/Platform.scala	/^  val EOL = scala.util.Properties.lineSeparator$/;"	V
Either	scala/package.scala	/^  type Either[+A, +B] = scala.util.Either[A, B]$/;"	T
Either	scala/package.scala	/^  val Either = scala.util.Either$/;"	V
Either	scala/util/Either.scala	/^object Either {$/;"	o
Elem	scala/util/parsing/combinator/RegexParsers.scala	/^  type Elem = Char$/;"	T
Elem	scala/util/parsing/combinator/lexical/Scanners.scala	/^  type Elem = Char$/;"	T
Elem	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^  type Elem = lexical.Token$/;"	T
Elem	scala/xml/Elem.scala	/^class Elem($/;"	c
Elem	scala/xml/Elem.scala	/^object Elem {$/;"	o
ElemDecl	scala/xml/dtd/Decl.scala	/^case class ElemDecl(name: String, contentModel: ContentModel)$/;"	r
ElemName	scala/xml/dtd/ContentModel.scala	/^  case class ElemName(name: String) extends Label {$/;"	r
Element	scala/util/parsing/ast/AbstractSyntax.scala	/^  trait Element extends Positional$/;"	t
ElementType	scala/xml/parsing/MarkupParser.scala	/^  type ElementType  = NodeSeq$/;"	T
ElementValidator	scala/xml/dtd/ElementValidator.scala	/^class ElementValidator() extends Function1[Node,Boolean] {$/;"	c
Empty	scala/collection/immutable/Stream.scala	/^  object Empty extends Stream[Nothing] with Serializable {$/;"	o
Empty	scala/xml/NodeSeq.scala	/^  final val Empty = fromSeq(Nil)$/;"	V
EmptyBinderEnv	scala/util/parsing/ast/Binders.scala	/^  object EmptyBinderEnv extends BinderEnv {$/;"	o
EmptyNamespace	scala/xml/Node.scala	/^  val EmptyNamespace = ""$/;"	V
EmptyView	scala/collection/GenIterableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView {$/;"	t
EmptyView	scala/collection/GenSeqViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView {$/;"	t
EmptyView	scala/collection/GenTraversableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] {$/;"	t
EmptyView	scala/collection/IterableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super[TraversableViewLike].EmptyView with super[GenIterableViewLike].EmptyView$/;"	t
EmptyView	scala/collection/SeqViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super[IterableViewLike].EmptyView with super[GenSeqViewLike].EmptyView$/;"	t
EmptyView	scala/collection/TraversableViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView$/;"	t
EmptyView	scala/collection/immutable/StreamViewLike.scala	/^  trait EmptyView extends Transformed[Nothing] with super.EmptyView$/;"	t
EmptyWrappedArray	scala/collection/mutable/WrappedArray.scala	/^  private val EmptyWrappedArray  = new ofRef[AnyRef](new Array[AnyRef](0))$/;"	V
EncodingHeuristics	scala/xml/include/sax/EncodingHeuristics.scala	/^object EncodingHeuristics$/;"	o
EncodingNames	scala/xml/include/sax/EncodingHeuristics.scala	/^  object EncodingNames {$/;"	o
EncodingNames._	scala/xml/include/sax/EncodingHeuristics.scala	/^  import EncodingNames._$/;"	i
EndOfStream	scala/xml/pull/XMLEventReader.scala	/^  val EndOfStream = POISON$/;"	V
EndOfStream	scala/xml/pull/XMLEventReader.scala	/^  val EndOfStream: T$/;"	V
EntityDecl	scala/xml/dtd/Decl.scala	/^abstract class EntityDecl extends MarkupDecl$/;"	a
EntityDef	scala/xml/dtd/Decl.scala	/^abstract class EntityDef {$/;"	a
EntityRef	scala/xml/EntityRef.scala	/^case class EntityRef(entityName: String) extends SpecialNode {$/;"	r
EntityResolver	scala/xml/package.scala	/^  type EntityResolver     = org.xml.sax.EntityResolver$/;"	T
Entry	scala/collection/mutable/DefaultMapModel.scala	/^  type Entry = DefaultEntry[A, B]$/;"	T
Entry	scala/collection/mutable/HashMap.scala	/^  type Entry = DefaultEntry[A, B]$/;"	T
Entry	scala/collection/mutable/LinkedHashMap.scala	/^  type Entry = LinkedEntry[A, B]$/;"	T
Entry	scala/collection/mutable/LinkedHashSet.scala	/^  type Entry = LinkedHashSet.Entry[A]$/;"	T
Entry	scala/collection/parallel/mutable/ParHashMap.scala	/^      type Entry = DefaultEntry[K, V]$/;"	T
Entry	scala/collection/parallel/mutable/ParHashMap.scala	/^  type Entry = scala.collection.mutable.DefaultEntry[K, V]$/;"	T
EntryIterator	scala/collection/parallel/mutable/ParHashTable.scala	/^  abstract class EntryIterator[T, +IterRepr <: IterableSplitter[T]]$/;"	a
Enumeration	scala/Enumeration.scala	/^abstract class Enumeration (initial: Int) extends Serializable {$/;"	a
EofCh	scala/util/parsing/input/CharArrayReader.scala	/^  final val EofCh = '\\032'$/;"	V
EofCh	scala/util/parsing/input/CharSequenceReader.scala	/^  final val EofCh = '\\032'$/;"	V
EofCh	scala/util/parsing/input/PagedSeqReader.scala	/^  final val EofCh = '\\032'$/;"	V
EofCh	scala/util/parsing/input/StreamReader.scala	/^  final val EofCh = '\\032'$/;"	V
Equality	scala/xml/Equality.scala	/^object Equality {$/;"	o
Equality	scala/xml/Equality.scala	/^trait Equality extends scala.Equals {$/;"	t
Equality._	scala/xml/Equality.scala	/^import Equality._$/;"	i
Equals	scala/Equals.scala	/^trait Equals extends Any {$/;"	t
Equiv	scala/math/Equiv.scala	/^object Equiv extends LowPriorityEquiv {$/;"	o
Equiv	scala/math/Equiv.scala	/^trait Equiv[T] extends Any with Serializable {$/;"	t
Equiv	scala/package.scala	/^  type Equiv[T] = scala.math.Equiv[T]$/;"	T
Equiv	scala/package.scala	/^  val Equiv = scala.math.Equiv$/;"	V
Error	scala/package.scala	/^  type Error     = java.lang.Error$/;"	T
Error	scala/util/parsing/combinator/Parsers.scala	/^  case class Error(override val msg: String, override val next: Input) extends NoSuccess(msg, next) {$/;"	r
ErrorToken	scala/util/parsing/combinator/token/Tokens.scala	/^  case class ErrorToken(msg: String) extends Token {$/;"	r
Escapes	scala/xml/Utility.scala	/^  object Escapes {$/;"	o
Escapes.{ escMap, unescMap }	scala/xml/Utility.scala	/^  import Escapes.{ escMap, unescMap }$/;"	i
EvComment	scala/xml/pull/XMLEvent.scala	/^case class EvComment(text: String) extends XMLEvent$/;"	r
EvElemEnd	scala/xml/pull/XMLEvent.scala	/^case class EvElemEnd(pre: String, label: String) extends XMLEvent$/;"	r
EvElemStart	scala/xml/pull/XMLEvent.scala	/^case class EvElemStart(pre: String, label: String, attrs: MetaData, scope: NamespaceBinding) extends XMLEvent$/;"	r
EvEntityRef	scala/xml/pull/XMLEvent.scala	/^case class EvEntityRef(entity: String) extends XMLEvent$/;"	r
EvProcInstr	scala/xml/pull/XMLEvent.scala	/^case class EvProcInstr(target: String, text: String) extends XMLEvent$/;"	r
EvText	scala/xml/pull/XMLEvent.scala	/^case class EvText(text: String) extends XMLEvent$/;"	r
Everything	scala/Specializable.scala	/^  final val Everything  = new Group((Byte, Short, Int, Long, Char, Float, Double, Boolean, Unit, AnyRef))$/;"	V
Exception	scala/package.scala	/^  type Exception = java.lang.Exception$/;"	T
Exception	scala/util/control/Exception.scala	/^object Exception {$/;"	o
Exclusive	scala/collection/immutable/NumericRange.scala	/^  class Exclusive[T](start: T, end: T, step: T)(implicit num: Integral[T])$/;"	c
ExecutionContext	scala/concurrent/ExecutionContext.scala	/^object ExecutionContext {$/;"	o
ExecutionContext	scala/concurrent/ExecutionContext.scala	/^trait ExecutionContext {$/;"	t
ExecutionContextExecutor	scala/concurrent/ExecutionContext.scala	/^trait ExecutionContextExecutor extends ExecutionContext with Executor$/;"	t
ExecutionContextExecutorService	scala/concurrent/ExecutionContext.scala	/^trait ExecutionContextExecutorService extends ExecutionContextExecutor with ExecutorService$/;"	t
ExecutionContextTaskSupport	scala/collection/parallel/TaskSupport.scala	/^class ExecutionContextTaskSupport(val environment: ExecutionContext = scala.concurrent.ExecutionContext.global)$/;"	c
ExecutionContextTasks	scala/collection/parallel/Tasks.scala	/^trait ExecutionContextTasks extends Tasks {$/;"	t
ExecutionException	scala/concurrent/package.scala	/^  type ExecutionException =    java.util.concurrent.ExecutionException$/;"	T
ExtDef	scala/xml/dtd/Decl.scala	/^case class ExtDef(extID:ExternalID) extends EntityDef {$/;"	r
ExternalID	scala/xml/dtd/ExternalID.scala	/^abstract class ExternalID extends parsing.TokenTests$/;"	a
ExternalSources	scala/xml/parsing/ExternalSources.scala	/^trait ExternalSources {$/;"	t
ExtraImplicits	scala/math/Fractional.scala	/^  trait ExtraImplicits {$/;"	t
ExtraImplicits	scala/math/Integral.scala	/^  trait ExtraImplicits {$/;"	t
ExtraImplicits	scala/math/Numeric.scala	/^  trait ExtraImplicits {$/;"	t
ExtraImplicits	scala/math/Ordering.scala	/^  trait ExtraImplicits {$/;"	t
FF	scala/collection/immutable/StringLike.scala	/^  private final val FF: Char = 0x0C$/;"	V
FINE	scala/annotation/elidable.scala	/^  final val FINE    = 500           \/\/ Level.FINE.intValue()$/;"	V
FINER	scala/annotation/elidable.scala	/^  final val FINER   = 400           \/\/ Level.FINER.intValue()$/;"	V
FINEST	scala/annotation/elidable.scala	/^  final val FINEST  = 300           \/\/ Level.FINEST.intValue()$/;"	V
FIRSTPOS	scala/io/Position.scala	/^  final val FIRSTPOS = encode(1, 1)$/;"	V
FLOAT	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
FULL	scala/xml/factory/LoggedNodeFactory.scala	/^  final val FULL  = 2$/;"	V
FactoryAdapter	scala/xml/parsing/FactoryAdapter.scala	/^abstract class FactoryAdapter extends DefaultHandler with factory.XMLLoader[Node] {$/;"	a
FactoryOps	scala/collection/parallel/package.scala	/^  trait FactoryOps[From, Elem, To] {$/;"	t
Failure	scala/util/parsing/combinator/Parsers.scala	/^  case class Failure(override val msg: String, override val next: Input) extends NoSuccess(msg, next) {$/;"	r
FallbackArrayBuilding	scala/Array.scala	/^class FallbackArrayBuilding {$/;"	c
FatalError	scala/xml/parsing/FatalError.scala	/^case class FatalError(msg: String) extends java.lang.RuntimeException(msg)$/;"	r
File	scala/sys/process/package.scala	/^      type File            = java.io.File$/;"	T
FileBuilder	scala/sys/process/ProcessBuilder.scala	/^  trait FileBuilder extends Sink with Source {$/;"	t
FileProcessLogger	scala/sys/process/ProcessLogger.scala	/^class FileProcessLogger(file: File) extends ProcessLogger with Closeable with Flushable {$/;"	c
FillBlocks	scala/collection/parallel/mutable/ParHashMap.scala	/^  class FillBlocks(buckets: Array[Unrolled[DefaultEntry[K, V]]], table: AddingHashTable, offset: Int, howmany: Int)$/;"	c
FillBlocks	scala/collection/parallel/mutable/ParHashSet.scala	/^  class FillBlocks(buckets: Array[UnrolledBuffer[Any]], table: AddingFlatHashTable, val offset: Int, val howmany: Int)$/;"	c
Filter	scala/collection/mutable/Publisher.scala	/^  type Filter = Evt => Boolean$/;"	T
FilterMonadic	scala/collection/generic/FilterMonadic.scala	/^trait FilterMonadic[+A, +Repr] extends Any {$/;"	t
Filtered	scala/collection/GenIterableViewLike.scala	/^  trait Filtered extends super.Filtered with Transformed[A] {$/;"	t
Filtered	scala/collection/GenSeqViewLike.scala	/^  trait Filtered extends super.Filtered with Transformed[A] {$/;"	t
Filtered	scala/collection/GenTraversableViewLike.scala	/^  trait Filtered extends Transformed[A] {$/;"	t
Filtered	scala/collection/IterableViewLike.scala	/^  trait Filtered extends super[TraversableViewLike].Filtered with super[GenIterableViewLike].Filtered with Transformed[A]$/;"	t
Filtered	scala/collection/SeqViewLike.scala	/^  trait Filtered extends super[IterableViewLike].Filtered with super[GenSeqViewLike].Filtered with Transformed[A]$/;"	t
Filtered	scala/collection/TraversableViewLike.scala	/^  trait Filtered extends Transformed[A] with super.Filtered$/;"	t
Filtered	scala/collection/immutable/StreamViewLike.scala	/^  trait Filtered extends super.Filtered with Transformed[A]$/;"	t
Filtered	scala/collection/mutable/IndexedSeqView.scala	/^  trait Filtered extends super.Filtered with Transformed[A] {$/;"	t
Finally	scala/util/control/Exception.scala	/^  class Finally private[Exception](body: => Unit) extends Described {$/;"	c
FiniteDuration	scala/concurrent/duration/Duration.scala	/^object FiniteDuration {$/;"	o
FiniteDuration._	scala/concurrent/duration/Duration.scala	/^  import FiniteDuration._$/;"	i
FlatHashTable	scala/collection/mutable/FlatHashTable.scala	/^trait FlatHashTable[A] extends FlatHashTable.HashUtils[A] {$/;"	t
FlatHashTable._	scala/collection/mutable/FlatHashTable.scala	/^  import FlatHashTable._$/;"	i
FlatMapped	scala/collection/GenIterableViewLike.scala	/^  trait FlatMapped[B] extends super.FlatMapped[B] with Transformed[B] {$/;"	t
FlatMapped	scala/collection/GenSeqViewLike.scala	/^  trait FlatMapped[B] extends super.FlatMapped[B] with Transformed[B] {$/;"	t
FlatMapped	scala/collection/GenTraversableViewLike.scala	/^  trait FlatMapped[B] extends Transformed[B] {$/;"	t
FlatMapped	scala/collection/IterableViewLike.scala	/^  trait FlatMapped[B] extends super[TraversableViewLike].FlatMapped[B] with super[GenIterableViewLike].FlatMapped[B] with Transformed[B]$/;"	t
FlatMapped	scala/collection/SeqViewLike.scala	/^  trait FlatMapped[B] extends super[IterableViewLike].FlatMapped[B] with super[GenSeqViewLike].FlatMapped[B] with Transformed[B]$/;"	t
FlatMapped	scala/collection/TraversableViewLike.scala	/^  trait FlatMapped[B] extends Transformed[B] with super.FlatMapped[B]$/;"	t
FlatMapped	scala/collection/immutable/StreamViewLike.scala	/^  trait FlatMapped[B] extends super.FlatMapped[B] with Transformed[B]$/;"	t
FlattenOps	scala/collection/TraversableOnce.scala	/^  class FlattenOps[A](travs: TraversableOnce[TraversableOnce[A]]) {$/;"	c
Float	scala/Float.scala	/^object Float extends AnyValCompanion {$/;"	o
Float	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Float   = ManifestFactory.Float$/;"	V
Float	scala/reflect/ClassTag.scala	/^  val Float   : ClassTag[scala.Float]      = Manifest.Float$/;"	V
Float	scala/reflect/Manifest.scala	/^  val Float: AnyValManifest[Float] = new AnyValManifest[scala.Float]("Float") {$/;"	V
FloatAsIfIntegral	scala/math/Numeric.scala	/^  object FloatAsIfIntegral extends FloatAsIfIntegral with Ordering.FloatOrdering {$/;"	o
FloatAsIfIntegral	scala/math/Numeric.scala	/^  trait FloatAsIfIntegral extends FloatIsConflicted with Integral[Float] {$/;"	t
FloatIsConflicted	scala/math/Numeric.scala	/^  trait FloatIsConflicted extends Numeric[Float] {$/;"	t
FloatIsFractional	scala/math/Numeric.scala	/^  trait FloatIsFractional extends FloatIsConflicted with Fractional[Float] {$/;"	t
FloatOrdering	scala/math/Ordering.scala	/^  trait FloatOrdering extends Ordering[Float] {$/;"	t
FloatRef	scala/runtime/FloatRef.java	/^    public FloatRef(float elem) { this.elem = elem; }$/;"	m	class:FloatRef
FloatRef	scala/runtime/FloatRef.java	/^public class FloatRef implements java.io.Serializable {$/;"	c
FmtState	scala/text/Document.scala	/^    type FmtState = (Int, Boolean, Document)$/;"	T
ForceImplicitAmbiguity	scala/collection/TraversableOnce.scala	/^  class ForceImplicitAmbiguity$/;"	c
Forced	scala/collection/GenIterableViewLike.scala	/^  trait Forced[B] extends super.Forced[B] with Transformed[B] {$/;"	t
Forced	scala/collection/GenSeqViewLike.scala	/^  trait Forced[B] extends super.Forced[B] with Transformed[B] {$/;"	t
Forced	scala/collection/GenTraversableViewLike.scala	/^  trait Forced[B] extends Transformed[B] {$/;"	t
Forced	scala/collection/IterableViewLike.scala	/^  trait Forced[B] extends super[TraversableViewLike].Forced[B] with super[GenIterableViewLike].Forced[B] with Transformed[B]$/;"	t
Forced	scala/collection/SeqViewLike.scala	/^  trait Forced[B] extends super[IterableViewLike].Forced[B] with super[GenSeqViewLike].Forced[B] with Transformed[B]$/;"	t
Forced	scala/collection/TraversableViewLike.scala	/^  trait Forced[B] extends Transformed[B] with super.Forced[B]$/;"	t
Forced	scala/collection/immutable/StreamViewLike.scala	/^  trait Forced[B] extends super.Forced[B] with Transformed[B]$/;"	t
Forced	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Forced[S] extends super.Forced[S] with Transformed[S] {$/;"	t
Forced	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Forced[S] extends super[GenSeqViewLike].Forced[S] with super[ParIterableViewLike].Forced[S] with Transformed[S] {$/;"	t
ForkJoinTaskSupport	scala/collection/parallel/TaskSupport.scala	/^class ForkJoinTaskSupport(val environment: ForkJoinPool = ForkJoinTasks.defaultForkJoinPool)$/;"	c
ForkJoinTasks	scala/collection/parallel/Tasks.scala	/^object ForkJoinTasks {$/;"	o
ForkJoinTasks	scala/collection/parallel/Tasks.scala	/^trait ForkJoinTasks extends Tasks with HavingForkJoinPool {$/;"	t
Fractional	scala/math/Fractional.scala	/^object Fractional {$/;"	o
Fractional	scala/math/Fractional.scala	/^trait Fractional[T] extends Numeric[T] {$/;"	t
Fractional	scala/package.scala	/^  type Fractional[T] = scala.math.Fractional[T]$/;"	T
FractionalOps	scala/math/Fractional.scala	/^  class FractionalOps(lhs: T) extends Ops(lhs) {$/;"	c
FractionalProxy	scala/runtime/ScalaNumberProxy.scala	/^trait FractionalProxy[T] extends Any with ScalaNumberProxy[T] with RangedProxy[T] {$/;"	t
Function	scala/Function.scala	/^object Function {$/;"	o
Function	scala/Predef.scala	/^  type Function[-A, +B] = Function1[A, B]$/;"	T
Function0	scala/Function0.scala	/^trait Function0[@specialized(Specializable.Primitives) +R] extends AnyRef { self =>$/;"	t
Function1	scala/Function1.scala	/^trait Function1[@specialized(scala.Int, scala.Long, scala.Float, scala.Double\/*, scala.AnyRef*\/) -T1, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double\/*, scala.AnyRef*\/) +R] extends AnyRef { self =>$/;"	t
Function10	scala/Function10.scala	/^trait Function10[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, +R] extends AnyRef { self =>$/;"	t
Function11	scala/Function11.scala	/^trait Function11[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, +R] extends AnyRef { self =>$/;"	t
Function12	scala/Function12.scala	/^trait Function12[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, +R] extends AnyRef { self =>$/;"	t
Function13	scala/Function13.scala	/^trait Function13[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, +R] extends AnyRef { self =>$/;"	t
Function14	scala/Function14.scala	/^trait Function14[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, +R] extends AnyRef { self =>$/;"	t
Function15	scala/Function15.scala	/^trait Function15[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, +R] extends AnyRef { self =>$/;"	t
Function16	scala/Function16.scala	/^trait Function16[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, +R] extends AnyRef { self =>$/;"	t
Function17	scala/Function17.scala	/^trait Function17[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, +R] extends AnyRef { self =>$/;"	t
Function18	scala/Function18.scala	/^trait Function18[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, +R] extends AnyRef { self =>$/;"	t
Function19	scala/Function19.scala	/^trait Function19[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, +R] extends AnyRef { self =>$/;"	t
Function2	scala/Function2.scala	/^trait Function2[@specialized(scala.Int, scala.Long, scala.Double) -T1, @specialized(scala.Int, scala.Long, scala.Double) -T2, @specialized(scala.Unit, scala.Boolean, scala.Int, scala.Float, scala.Long, scala.Double) +R] extends AnyRef { self =>$/;"	t
Function20	scala/Function20.scala	/^trait Function20[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, +R] extends AnyRef { self =>$/;"	t
Function21	scala/Function21.scala	/^trait Function21[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, +R] extends AnyRef { self =>$/;"	t
Function22	scala/Function22.scala	/^trait Function22[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, -T10, -T11, -T12, -T13, -T14, -T15, -T16, -T17, -T18, -T19, -T20, -T21, -T22, +R] extends AnyRef { self =>$/;"	t
Function3	scala/Function3.scala	/^trait Function3[-T1, -T2, -T3, +R] extends AnyRef { self =>$/;"	t
Function4	scala/Function4.scala	/^trait Function4[-T1, -T2, -T3, -T4, +R] extends AnyRef { self =>$/;"	t
Function5	scala/Function5.scala	/^trait Function5[-T1, -T2, -T3, -T4, -T5, +R] extends AnyRef { self =>$/;"	t
Function6	scala/Function6.scala	/^trait Function6[-T1, -T2, -T3, -T4, -T5, -T6, +R] extends AnyRef { self =>$/;"	t
Function7	scala/Function7.scala	/^trait Function7[-T1, -T2, -T3, -T4, -T5, -T6, -T7, +R] extends AnyRef { self =>$/;"	t
Function8	scala/Function8.scala	/^trait Function8[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, +R] extends AnyRef { self =>$/;"	t
Function9	scala/Function9.scala	/^trait Function9[-T1, -T2, -T3, -T4, -T5, -T6, -T7, -T8, -T9, +R] extends AnyRef { self =>$/;"	t
Future	scala/concurrent/Future.scala	/^object Future {$/;"	o
Future	scala/concurrent/Future.scala	/^trait Future[+T] extends Awaitable[T] {$/;"	t
Future	scala/concurrent/FutureTaskRunner.scala	/^  type Future[T]$/;"	T
Future	scala/concurrent/ThreadPoolRunner.scala	/^  type Future[T] = java.util.concurrent.Future[T]$/;"	T
Future	scala/concurrent/ThreadRunner.scala	/^  type Future[T] = () => T$/;"	T
Future	scala/parallel/Future.scala	/^trait Future[@specialized +R] extends (() => R) {$/;"	t
FutureTaskRunner	scala/concurrent/FutureTaskRunner.scala	/^trait FutureTaskRunner extends TaskRunner {$/;"	t
FutureThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^object FutureThreadPoolTasks {$/;"	o
FutureThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^trait FutureThreadPoolTasks extends Tasks {$/;"	t
GCAS	scala/collection/concurrent/TrieMap.scala	/^  def GCAS(old: MainNode[K, V], n: MainNode[K, V], ct: TrieMap[K, V]): Boolean = {$/;"	m
GCAS_READ	scala/collection/concurrent/TrieMap.scala	/^  def GCAS_READ(ct: TrieMap[K, V]): MainNode[K, V] = {$/;"	m
GREEN	scala/Console.scala	/^  final val GREEN      = "\\033[32m"$/;"	V
GREEN_B	scala/Console.scala	/^  final val GREEN_B    = "\\033[42m"$/;"	V
Gen	scala/collection/concurrent/Gen.java	/^final class Gen {$/;"	c
GenIterable	scala/collection/GenIterable.scala	/^object GenIterable extends GenTraversableFactory[GenIterable] {$/;"	o
GenIterable	scala/collection/GenIterable.scala	/^trait GenIterable[+A]$/;"	t
GenIterableLike	scala/collection/GenIterableLike.scala	/^trait GenIterableLike[+A, +Repr] extends Any with GenTraversableLike[A, Repr] {$/;"	t
GenIterableView	scala/collection/GenIterableView.scala	/^trait GenIterableView[+A, +Coll] extends GenIterableViewLike[A, Coll, GenIterableView[A, Coll]] { }$/;"	t
GenIterableViewLike	scala/collection/GenIterableViewLike.scala	/^trait GenIterableViewLike[+A,$/;"	t
GenMap	scala/collection/GenMap.scala	/^object GenMap extends GenMapFactory[GenMap] {$/;"	o
GenMap	scala/collection/GenMap.scala	/^trait GenMap[A, +B]$/;"	t
GenMapFactory	scala/collection/generic/GenMapFactory.scala	/^abstract class GenMapFactory[CC[A, B] <: GenMap[A, B] with GenMapLike[A, B, CC[A, B]]] {$/;"	a
GenMapLike	scala/collection/GenMapLike.scala	/^trait GenMapLike[A, +B, +Repr] extends GenIterableLike[(A, B), Repr] with Equals with Parallelizable[(A, B), parallel.ParMap[A, B]] {$/;"	t
GenSeq	scala/collection/GenSeq.scala	/^object GenSeq extends GenTraversableFactory[GenSeq] {$/;"	o
GenSeq	scala/collection/GenSeq.scala	/^trait GenSeq[+A]$/;"	t
GenSeqFactory	scala/collection/generic/GenSeqFactory.scala	/^abstract class GenSeqFactory[CC[X] <: GenSeq[X] with GenericTraversableTemplate[X, CC]]$/;"	a
GenSeqLike	scala/collection/GenSeqLike.scala	/^trait GenSeqLike[+A, +Repr] extends Any with GenIterableLike[A, Repr] with Equals with Parallelizable[A, parallel.ParSeq[A]] {$/;"	t
GenSeqView	scala/collection/GenSeqView.scala	/^trait GenSeqView[+A, +Coll] extends GenSeqViewLike[A, Coll, GenSeqView[A, Coll]] { }$/;"	t
GenSeqViewLike	scala/collection/GenSeqViewLike.scala	/^trait GenSeqViewLike[+A,$/;"	t
GenSet	scala/collection/GenSet.scala	/^object GenSet extends GenTraversableFactory[GenSet] {$/;"	o
GenSet	scala/collection/GenSet.scala	/^trait GenSet[A]$/;"	t
GenSetFactory	scala/collection/generic/GenSetFactory.scala	/^abstract class GenSetFactory[CC[X] <: GenSet[X] with GenSetLike[X, CC[X]]]$/;"	a
GenSetLike	scala/collection/GenSetLike.scala	/^trait GenSetLike[A, +Repr]$/;"	t
GenTraversable	scala/collection/GenTraversable.scala	/^object GenTraversable extends GenTraversableFactory[GenTraversable] {$/;"	o
GenTraversable	scala/collection/GenTraversable.scala	/^trait GenTraversable[+A]$/;"	t
GenTraversableFactory	scala/collection/generic/GenTraversableFactory.scala	/^abstract class GenTraversableFactory[CC[X] <: GenTraversable[X] with GenericTraversableTemplate[X, CC]]$/;"	a
GenTraversableLike	scala/collection/GenTraversableLike.scala	/^trait GenTraversableLike[+A, +Repr] extends Any with GenTraversableOnce[A] with Parallelizable[A, parallel.ParIterable[A]] {$/;"	t
GenTraversableOnce	scala/collection/GenTraversableOnce.scala	/^trait GenTraversableOnce[+A] extends Any {$/;"	t
GenTraversableView	scala/collection/GenTraversableView.scala	/^trait GenTraversableView[+A, +Coll] extends GenTraversableViewLike[A, Coll, GenTraversableView[A, Coll]] { }$/;"	t
GenTraversableViewLike	scala/collection/GenTraversableViewLike.scala	/^trait GenTraversableViewLike[+A,$/;"	t
GenericCanBuildFrom	scala/collection/generic/ClassTagTraversableFactory.scala	/^  class GenericCanBuildFrom[A](implicit tag: ClassTag[A]) extends CanBuildFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanBuildFrom	scala/collection/generic/GenTraversableFactory.scala	/^  class GenericCanBuildFrom[A] extends CanBuildFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanBuildFrom	scala/collection/generic/OrderedTraversableFactory.scala	/^  class GenericCanBuildFrom[A](implicit ord: Ordering[A]) extends CanBuildFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanCombineFrom	scala/collection/generic/ParFactory.scala	/^  class GenericCanCombineFrom[A] extends GenericCanBuildFrom[A] with CanCombineFrom[CC[_], A, CC[A]] {$/;"	c
GenericCanCombineFrom	scala/collection/generic/ParSetFactory.scala	/^  class GenericCanCombineFrom[A] extends CanCombineFrom[CC[_], A, CC[A]] {$/;"	c
GenericClassManifestCompanion	scala/collection/generic/package.scala	/^  type GenericClassManifestCompanion[+CC[X] <: Traversable[X]] = GenericClassTagCompanion[CC]$/;"	T
GenericClassManifestTraversableTemplate	scala/collection/generic/package.scala	/^  type GenericClassManifestTraversableTemplate[+A, +CC[X] <: Traversable[X]] = GenericClassTagTraversableTemplate[A, CC]$/;"	T
GenericClassTagCompanion	scala/collection/generic/GenericClassTagCompanion.scala	/^abstract class GenericClassTagCompanion[+CC[X] <: Traversable[X]] {$/;"	a
GenericClassTagTraversableTemplate	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^trait GenericClassTagTraversableTemplate[+A, +CC[X] <: Traversable[X]] extends HasNewBuilder[A, CC[A] @uncheckedVariance] {$/;"	t
GenericCompanion	scala/collection/generic/GenericCompanion.scala	/^abstract class GenericCompanion[+CC[X] <: GenTraversable[X]] {$/;"	a
GenericOrderedCompanion	scala/collection/generic/GenericOrderedCompanion.scala	/^abstract class GenericOrderedCompanion[+CC[X] <: Traversable[X]] {$/;"	a
GenericOrderedTraversableTemplate	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^trait GenericOrderedTraversableTemplate[+A, +CC[X] <: Traversable[X]] extends HasNewBuilder[A, CC[A] @uncheckedVariance] {$/;"	t
GenericParCompanion	scala/collection/generic/GenericParCompanion.scala	/^trait GenericParCompanion[+CC[X] <: ParIterable[X]] {$/;"	t
GenericParMapCompanion	scala/collection/generic/GenericParCompanion.scala	/^trait GenericParMapCompanion[+CC[P, Q] <: ParMap[P, Q]] {$/;"	t
GenericParMapTemplate	scala/collection/generic/GenericParTemplate.scala	/^trait GenericParMapTemplate[K, +V, +CC[X, Y] <: ParMap[X, Y]] extends GenericParTemplate[(K, V), ParIterable]$/;"	t
GenericParTemplate	scala/collection/generic/GenericParTemplate.scala	/^trait GenericParTemplate[+A, +CC[X] <: ParIterable[X]]$/;"	t
GenericSeqCompanion	scala/collection/generic/GenericSeqCompanion.scala	/^trait GenericSeqCompanion[CC[X] <: Traversable[X]]$/;"	t
GenericSetTemplate	scala/collection/generic/GenericSetTemplate.scala	/^trait GenericSetTemplate[A, +CC[X] <: GenSet[X]] extends GenericTraversableTemplate[A, CC] {$/;"	t
GenericTraversableTemplate	scala/collection/generic/GenericTraversableTemplate.scala	/^trait GenericTraversableTemplate[+A, +CC[X] <: GenTraversable[X]] extends HasNewBuilder[A, CC[A] @uncheckedVariance] {$/;"	t
Group	scala/Specializable.scala	/^  class Group[T >: Null](value: T) extends SpecializedGroup { }$/;"	c
GroupedIterator	scala/collection/Iterator.scala	/^  class GroupedIterator[B >: A](self: Iterator[A], size: Int, step: Int)$/;"	c
Groups	scala/util/matching/Regex.scala	/^  object Groups {$/;"	o
Growable	scala/collection/generic/Growable.scala	/^trait Growable[-A] extends Clearable {$/;"	t
GrowingBuilder	scala/collection/mutable/GrowingBuilder.scala	/^class GrowingBuilder[Elem, To <: Growable[Elem]](empty: To) extends Builder[Elem, To] {$/;"	c
HOURS	scala/concurrent/duration/package.scala	/^  final val HOURS        = java.util.concurrent.TimeUnit.HOURS$/;"	V
Handler	scala/io/Codec.scala	/^  type Handler      = CharacterCodingException => Int$/;"	T
HasNewBuilder	scala/collection/generic/HasNewBuilder.scala	/^trait HasNewBuilder[+A, +Repr] extends Any {$/;"	t
HasNewCombiner	scala/collection/generic/HasNewCombiner.scala	/^trait HasNewCombiner[+T, +Repr] {$/;"	t
HashEntry	scala/collection/mutable/HashEntry.scala	/^trait HashEntry [A, E] {$/;"	t
HashMap	scala/collection/immutable/HashMap.scala	/^class HashMap[A, +B] extends AbstractMap[A, B]$/;"	c
HashMap	scala/collection/immutable/HashMap.scala	/^object HashMap extends ImmutableMapFactory[HashMap] with BitOperations.Int {$/;"	o
HashMap	scala/collection/mutable/HashMap.scala	/^class HashMap[A, B] private[collection] (contents: HashTable.Contents[A, DefaultEntry[A, B]])$/;"	c
HashMap	scala/collection/mutable/HashMap.scala	/^object HashMap extends MutableMapFactory[HashMap] {$/;"	o
HashMap.{ HashTrieMap, HashMapCollision1, HashMap1 }	scala/collection/immutable/TrieIterator.scala	/^import HashMap.{ HashTrieMap, HashMapCollision1, HashMap1 }$/;"	i
HashMap.{Merger, MergeFunction, liftMerger}	scala/collection/immutable/HashMap.scala	/^  import HashMap.{Merger, MergeFunction, liftMerger}$/;"	i
HashMap1	scala/collection/immutable/HashMap.scala	/^  class HashMap1[A,+B](private[collection] val key: A, private[collection] val hash: Int, private[collection] val value: (B @uV), private[collection] var kv: (A,B @uV)) extends HashMap[A,B] {$/;"	c
HashMapCombiner._	scala/collection/parallel/immutable/ParHashMap.scala	/^  import HashMapCombiner._$/;"	i
HashSet	scala/collection/immutable/HashSet.scala	/^class HashSet[A] extends AbstractSet[A]$/;"	c
HashSet	scala/collection/immutable/HashSet.scala	/^object HashSet extends ImmutableSetFactory[HashSet] {$/;"	o
HashSet	scala/collection/mutable/HashSet.scala	/^class HashSet[A] private[collection] (contents: FlatHashTable.Contents[A])$/;"	c
HashSet	scala/collection/mutable/HashSet.scala	/^object HashSet extends MutableSetFactory[HashSet] {$/;"	o
HashSet.{ HashTrieSet, HashSetCollision1, HashSet1 }	scala/collection/immutable/TrieIterator.scala	/^import HashSet.{ HashTrieSet, HashSetCollision1, HashSet1 }$/;"	i
HashSet1	scala/collection/immutable/HashSet.scala	/^  class HashSet1[A](private[HashSet] val key: A, private[HashSet] val hash: Int) extends HashSet[A] {$/;"	c
HashSetCombiner	scala/collection/parallel/immutable/ParHashSet.scala	/^object HashSetCombiner {$/;"	o
HashSetCombiner._	scala/collection/parallel/immutable/ParHashSet.scala	/^  import HashSetCombiner._$/;"	i
HashTable	scala/collection/mutable/HashTable.scala	/^trait HashTable[A, Entry >: Null <: HashEntry[A, Entry]] extends HashTable.HashUtils[A] {$/;"	t
HashTable._	scala/collection/mutable/HashTable.scala	/^  import HashTable._$/;"	i
HashTable._	scala/collection/parallel/mutable/ParHashMap.scala	/^    import HashTable._$/;"	i
HashTable.powerOfTwo	scala/collection/mutable/FlatHashTable.scala	/^  import HashTable.powerOfTwo$/;"	i
HashTrieMap	scala/collection/immutable/HashMap.scala	/^  class HashTrieMap[A, +B]($/;"	c
HashTrieSet	scala/collection/immutable/HashSet.scala	/^  class HashTrieSet[A](private val bitmap: Int, private[collection] val elems: Array[HashSet[A]], private val size0: Int)$/;"	c
HashUtils	scala/collection/mutable/FlatHashTable.scala	/^  trait HashUtils[A] {$/;"	t
HashUtils	scala/collection/mutable/HashTable.scala	/^  trait HashUtils[KeyType] {$/;"	t
Hashing	scala/util/hashing/Hashing.scala	/^object Hashing {$/;"	o
Hashing	scala/util/hashing/Hashing.scala	/^trait Hashing[T] extends Serializable {$/;"	t
HavingForkJoinPool	scala/collection/parallel/Tasks.scala	/^trait HavingForkJoinPool {$/;"	t
HedgeRHS	scala/util/grammar/HedgeRHS.scala	/^abstract class HedgeRHS$/;"	a
History	scala/collection/mutable/History.scala	/^class History[Evt, Pub]$/;"	c
IEEEremainder	scala/math/package.scala	/^  def IEEEremainder(x: Double, y: Double): Double = java.lang.Math.IEEEremainder(x, y)$/;"	m
INFO	scala/annotation/elidable.scala	/^  final val INFO    = 800           \/\/ Level.INFO.intValue()$/;"	V
INT	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
INVISIBLE	scala/Console.scala	/^  final val INVISIBLE  = "\\033[8m"$/;"	V
INodeBase	scala/collection/concurrent/INodeBase.java	/^    public INodeBase(Gen generation) {$/;"	m	class:INodeBase
INodeBase	scala/collection/concurrent/INodeBase.java	/^abstract class INodeBase<K, V> extends BasicNode {$/;"	c
INodeBase._	scala/collection/concurrent/TrieMap.scala	/^  import INodeBase._$/;"	i
IOException	scala/sys/process/package.scala	/^      type IOException     = java.io.IOException$/;"	T
ISO8859	scala/io/Codec.scala	/^  final val ISO8859: Codec = new Codec(Charset forName "ISO-8859-1")$/;"	V
Ident	scala/util/parsing/combinator/testing/RegexTest.scala	/^case class Ident(s: String)$/;"	r
Identifier	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class Identifier(chars: String) extends Token {$/;"	r
IdleSignalling	scala/collection/generic/Signalling.scala	/^object IdleSignalling extends DefaultSignalling$/;"	o
IllegalArgumentException	scala/package.scala	/^  type IllegalArgumentException        = java.lang.IllegalArgumentException$/;"	T
Immutable	scala/Immutable.scala	/^trait Immutable$/;"	t
ImmutableMapAdaptor	scala/collection/mutable/ImmutableMapAdaptor.scala	/^class ImmutableMapAdaptor[A, B](protected var imap: immutable.Map[A, B])$/;"	c
ImmutableMapFactory	scala/collection/generic/ImmutableMapFactory.scala	/^abstract class ImmutableMapFactory[CC[A, +B] <: immutable.Map[A, B] with immutable.MapLike[A, B, CC[A, B]]] extends MapFactory[CC]$/;"	a
ImmutableSetAdaptor	scala/collection/mutable/ImmutableSetAdaptor.scala	/^class ImmutableSetAdaptor[A](protected var set: immutable.Set[A])$/;"	c
ImmutableSetFactory	scala/collection/generic/ImmutableSetFactory.scala	/^abstract class ImmutableSetFactory[CC[X] <: immutable.Set[X] with SetLike[X, CC[X]]]$/;"	a
ImmutableSortedMapFactory	scala/collection/generic/ImmutableSortedMapFactory.scala	/^abstract class ImmutableSortedMapFactory[CC[A, B] <: immutable.SortedMap[A, B] with SortedMapLike[A, B, CC[A, B]]] extends SortedMapFactory[CC]$/;"	a
ImmutableSortedSetFactory	scala/collection/generic/ImmutableSortedSetFactory.scala	/^abstract class ImmutableSortedSetFactory[CC[A] <: immutable.SortedSet[A] with SortedSetLike[A, CC[A]]] extends SortedSetFactory[CC]$/;"	a
Impl	scala/collection/immutable/IndexedSeq.scala	/^  class Impl[A](buf: ArrayBuffer[A]) extends AbstractSeq[A] with IndexedSeq[A] with Serializable {$/;"	c
ImplicitConversions	scala/util/parsing/combinator/ImplicitConversions.scala	/^trait ImplicitConversions { self: Parsers =>$/;"	t
Implicits	scala/concurrent/ExecutionContext.scala	/^  object Implicits {$/;"	o
Implicits	scala/math/Fractional.scala	/^  object Implicits extends ExtraImplicits$/;"	o
Implicits	scala/math/Integral.scala	/^  object Implicits extends ExtraImplicits$/;"	o
Implicits	scala/math/Numeric.scala	/^  object Implicits extends ExtraImplicits { }$/;"	o
Implicits	scala/math/Ordering.scala	/^  object Implicits extends ExtraImplicits { }$/;"	o
Include	scala/collection/script/Message.scala	/^case class Include[+A](location: Location, elem: A) extends Message[A] {$/;"	r
Inclusion	scala/util/automata/Inclusion.scala	/^trait Inclusion[A <: AnyRef] {$/;"	t
Inclusive	scala/collection/immutable/NumericRange.scala	/^  class Inclusive[T](start: T, end: T, step: T)(implicit num: Integral[T])$/;"	c
Inclusive	scala/collection/immutable/Range.scala	/^  class Inclusive(start: Int, end: Int, step: Int) extends Range(start, end, step) {$/;"	c
Index	scala/collection/script/Location.scala	/^case class Index(n: Int) extends Location$/;"	r
Index	scala/xml/persistent/Index.scala	/^abstract class Index[A] extends Function1[Node,A] {}$/;"	a
IndexOutOfBoundsException	scala/package.scala	/^  type IndexOutOfBoundsException       = java.lang.IndexOutOfBoundsException$/;"	T
IndexedSeq	scala/collection/IndexedSeq.scala	/^object IndexedSeq extends SeqFactory[IndexedSeq] {$/;"	o
IndexedSeq	scala/collection/IndexedSeq.scala	/^trait IndexedSeq[+A] extends Seq[A]$/;"	t
IndexedSeq	scala/collection/immutable/IndexedSeq.scala	/^object IndexedSeq extends SeqFactory[IndexedSeq] {$/;"	o
IndexedSeq	scala/collection/immutable/IndexedSeq.scala	/^trait IndexedSeq[+A] extends Seq[A]$/;"	t
IndexedSeq	scala/collection/mutable/IndexedSeq.scala	/^object IndexedSeq extends SeqFactory[IndexedSeq] {$/;"	o
IndexedSeq	scala/collection/mutable/IndexedSeq.scala	/^trait IndexedSeq[A] extends Seq[A]$/;"	t
IndexedSeq	scala/package.scala	/^  type IndexedSeq[+A] = scala.collection.IndexedSeq[A]$/;"	T
IndexedSeq	scala/package.scala	/^  val IndexedSeq = scala.collection.IndexedSeq$/;"	V
IndexedSeqLike	scala/collection/IndexedSeqLike.scala	/^trait IndexedSeqLike[+A, +Repr] extends Any with SeqLike[A, Repr] {$/;"	t
IndexedSeqLike	scala/collection/mutable/IndexedSeqLike.scala	/^trait IndexedSeqLike[A, +Repr] extends Any with scala.collection.IndexedSeqLike[A, Repr] { self =>$/;"	t
IndexedSeqOptimized	scala/collection/IndexedSeqOptimized.scala	/^trait IndexedSeqOptimized[+A, +Repr] extends Any with IndexedSeqLike[A, Repr] { self =>$/;"	t
IndexedSeqOptimized	scala/collection/mutable/IndexedSeqOptimized.scala	/^trait IndexedSeqOptimized[A, +Repr] extends Any with IndexedSeqLike[A, Repr] with scala.collection.IndexedSeqOptimized[A, Repr]$/;"	t
IndexedSeqView	scala/collection/mutable/IndexedSeqView.scala	/^object IndexedSeqView {$/;"	o
IndexedSeqView	scala/collection/mutable/IndexedSeqView.scala	/^trait IndexedSeqView[A, +Coll] extends IndexedSeq[A]$/;"	t
Inf	scala/concurrent/duration/Duration.scala	/^  val Inf: Infinite = new Infinite {$/;"	V
Input	scala/util/parsing/combinator/Parsers.scala	/^  type Input = Reader[Elem]$/;"	T
InputSource	scala/xml/package.scala	/^  type InputSource        = org.xml.sax.InputSource$/;"	T
InputStream	scala/sys/process/package.scala	/^      type InputStream     = java.io.InputStream$/;"	T
InputType	scala/xml/parsing/MarkupParser.scala	/^  type InputType    = Source$/;"	T
Int	scala/Int.scala	/^object Int extends AnyValCompanion {$/;"	o
Int	scala/collection/generic/BitOperations.scala	/^    type Int = scala.Int$/;"	T
Int	scala/collection/generic/BitOperations.scala	/^  object Int extends Int$/;"	o
Int	scala/collection/generic/BitOperations.scala	/^  trait Int {$/;"	t
Int	scala/collection/immutable/Range.scala	/^  object Int {$/;"	o
Int	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Int     = ManifestFactory.Int$/;"	V
Int	scala/reflect/ClassTag.scala	/^  val Int     : ClassTag[scala.Int]        = Manifest.Int$/;"	V
Int	scala/reflect/Manifest.scala	/^  val Int: AnyValManifest[Int] = new AnyValManifest[scala.Int]("Int") {$/;"	V
IntDef	scala/xml/dtd/Decl.scala	/^case class IntDef(value:String) extends EntityDef {$/;"	r
IntIsIntegral	scala/math/Numeric.scala	/^  trait IntIsIntegral extends Integral[Int] {$/;"	t
IntMap	scala/collection/immutable/IntMap.scala	/^object IntMap {$/;"	o
IntMap._	scala/collection/immutable/IntMap.scala	/^import IntMap._$/;"	i
IntMapUtils._	scala/collection/immutable/IntMap.scala	/^import IntMapUtils._$/;"	i
IntOrdering	scala/math/Ordering.scala	/^  trait IntOrdering extends Ordering[Int] {$/;"	t
IntRef	scala/runtime/IntRef.java	/^    public IntRef(int elem) { this.elem = elem; }$/;"	m	class:IntRef
IntRef	scala/runtime/IntRef.java	/^public class IntRef implements java.io.Serializable {$/;"	c
Integral	scala/Specializable.scala	/^  final val Integral    = new Group((Byte, Short, Int, Long, Char))$/;"	V
Integral	scala/math/Integral.scala	/^object Integral {$/;"	o
Integral	scala/math/Integral.scala	/^trait Integral[T] extends Numeric[T] {$/;"	t
Integral	scala/package.scala	/^  type Integral[T] = scala.math.Integral[T]$/;"	T
IntegralOps	scala/math/Integral.scala	/^  class IntegralOps(lhs: T) extends Ops(lhs) {$/;"	c
IntegralProxy	scala/runtime/ScalaNumberProxy.scala	/^trait IntegralProxy[T] extends Any with ScalaWholeNumberProxy[T] with RangedProxy[T] {$/;"	t
InterruptedException	scala/package.scala	/^  type InterruptedException            = java.lang.InterruptedException$/;"	T
InvalidEscapeException	scala/StringContext.scala	/^  class InvalidEscapeException(str: String, idx: Int)$/;"	c
IsTraversableLike	scala/collection/generic/IsTraversableLike.scala	/^object IsTraversableLike {$/;"	o
IsTraversableLike	scala/collection/generic/IsTraversableLike.scala	/^trait IsTraversableLike[Repr] {$/;"	t
IsTraversableOnce	scala/collection/generic/IsTraversableOnce.scala	/^object IsTraversableOnce {$/;"	o
IsTraversableOnce	scala/collection/generic/IsTraversableOnce.scala	/^trait IsTraversableOnce[Repr] {$/;"	t
Item	scala/xml/PrettyPrinter.scala	/^  class Item$/;"	c
Iterable	scala/collection/Iterable.scala	/^object Iterable extends TraversableFactory[Iterable] {$/;"	o
Iterable	scala/collection/Iterable.scala	/^trait Iterable[+A] extends Traversable[A]$/;"	t
Iterable	scala/collection/immutable/Iterable.scala	/^object Iterable extends TraversableFactory[Iterable] {$/;"	o
Iterable	scala/collection/immutable/Iterable.scala	/^trait Iterable[+A] extends Traversable[A]$/;"	t
Iterable	scala/collection/mutable/Iterable.scala	/^object Iterable extends TraversableFactory[Iterable] {$/;"	o
Iterable	scala/collection/mutable/Iterable.scala	/^trait Iterable[A] extends Traversable[A]$/;"	t
Iterable	scala/package.scala	/^  type Iterable[+A] = scala.collection.Iterable[A]$/;"	T
Iterable	scala/package.scala	/^  val Iterable = scala.collection.Iterable$/;"	V
IterableForwarder	scala/collection/generic/IterableForwarder.scala	/^trait IterableForwarder[+A] extends Iterable[A] with TraversableForwarder[A] {$/;"	t
IterableLike	scala/collection/IterableLike.scala	/^trait IterableLike[+A, +Repr] extends Any with Equals with TraversableLike[A, Repr] with GenIterableLike[A, Repr] {$/;"	t
IterableProxy	scala/collection/IterableProxy.scala	/^trait IterableProxy[+A] extends Iterable[A] with IterableProxyLike[A, Iterable[A]]$/;"	t
IterableProxyLike	scala/collection/IterableProxyLike.scala	/^trait IterableProxyLike[+A, +Repr <: IterableLike[A, Repr] with Iterable[A]]$/;"	t
IterableSplitter	scala/collection/parallel/RemainsIterator.scala	/^trait IterableSplitter[+T]$/;"	t
IterableView	scala/collection/IterableView.scala	/^object IterableView {$/;"	o
IterableView	scala/collection/IterableView.scala	/^trait IterableView[+A, +Coll] extends IterableViewLike[A, Coll, IterableView[A, Coll]] with GenIterableView[A, Coll]$/;"	t
IterableViewLike	scala/collection/IterableViewLike.scala	/^trait IterableViewLike[+A,$/;"	t
IterableWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val IterableWrapper              = Wrappers.IterableWrapper$/;"	V
IterableWrapper	scala/collection/convert/Wrappers.scala	/^  case class IterableWrapper[A](underlying: Iterable[A]) extends ju.AbstractCollection[A] with IterableWrapperTrait[A] { }$/;"	r
IterableWrapperTrait	scala/collection/convert/Wrappers.scala	/^  trait IterableWrapperTrait[A] extends ju.AbstractCollection[A] {$/;"	t
Iterator	scala/collection/Iterator.scala	/^object Iterator {$/;"	o
Iterator	scala/collection/Iterator.scala	/^trait Iterator[+A] extends TraversableOnce[A] {$/;"	t
Iterator	scala/package.scala	/^  type Iterator[+A] = scala.collection.Iterator[A]$/;"	T
Iterator	scala/package.scala	/^  val Iterator = scala.collection.Iterator$/;"	V
Iterator.empty	scala/collection/Iterator.scala	/^import Iterator.empty$/;"	i
IteratorWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val IteratorWrapper              = Wrappers.IteratorWrapper$/;"	V
IteratorWrapper	scala/collection/convert/Wrappers.scala	/^  case class IteratorWrapper[A](underlying: Iterator[A]) extends ju.Iterator[A] with ju.Enumeration[A] {$/;"	r
JCollectionWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JCollectionWrapper           = Wrappers.JCollectionWrapper$/;"	V
JCollectionWrapper	scala/collection/convert/Wrappers.scala	/^  case class JCollectionWrapper[A](underlying: ju.Collection[A]) extends AbstractIterable[A] with Iterable[A] {$/;"	r
JConcurrentMapDeprecatedWrapper	scala/collection/convert/Wrappers.scala	/^  case class JConcurrentMapDeprecatedWrapper[A, B](val underlying: juc.ConcurrentMap[A, B]) extends mutable.AbstractMap[A, B] with JMapWrapperLike[A, B, JConcurrentMapDeprecatedWrapper[A, B]] with mutable.ConcurrentMap[A, B] {$/;"	r
JConcurrentMapWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JConcurrentMapWrapper        = Wrappers.JConcurrentMapWrapper$/;"	V
JConcurrentMapWrapper	scala/collection/convert/Wrappers.scala	/^  case class JConcurrentMapWrapper[A, B](val underlying: juc.ConcurrentMap[A, B]) extends mutable.AbstractMap[A, B] with JMapWrapperLike[A, B, JConcurrentMapWrapper[A, B]] with concurrent.Map[A, B] {$/;"	r
JDictionaryWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JDictionaryWrapper           = Wrappers.JDictionaryWrapper$/;"	V
JDictionaryWrapper	scala/collection/convert/Wrappers.scala	/^  case class JDictionaryWrapper[A, B](underlying: ju.Dictionary[A, B]) extends mutable.AbstractMap[A, B] with mutable.Map[A, B] {$/;"	r
JEnumerationWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JEnumerationWrapper          = Wrappers.JEnumerationWrapper$/;"	V
JEnumerationWrapper	scala/collection/convert/Wrappers.scala	/^  case class JEnumerationWrapper[A](underlying: ju.Enumeration[A]) extends AbstractIterator[A] with Iterator[A] {$/;"	r
JIterableWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JIterableWrapper             = Wrappers.JIterableWrapper$/;"	V
JIterableWrapper	scala/collection/convert/Wrappers.scala	/^  case class JIterableWrapper[A](underlying: jl.Iterable[A]) extends AbstractIterable[A] with Iterable[A] {$/;"	r
JIteratorWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JIteratorWrapper             = Wrappers.JIteratorWrapper$/;"	V
JIteratorWrapper	scala/collection/convert/Wrappers.scala	/^  case class JIteratorWrapper[A](underlying: ju.Iterator[A]) extends AbstractIterator[A] with Iterator[A] {$/;"	r
JListWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JListWrapper                 = Wrappers.JListWrapper$/;"	V
JListWrapper	scala/collection/convert/Wrappers.scala	/^  case class JListWrapper[A](val underlying: ju.List[A]) extends mutable.AbstractBuffer[A] with mutable.Buffer[A] {$/;"	r
JMapWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JMapWrapper                  = Wrappers.JMapWrapper$/;"	V
JMapWrapper	scala/collection/convert/Wrappers.scala	/^  case class JMapWrapper[A, B](val underlying : ju.Map[A, B]) extends mutable.AbstractMap[A, B] with JMapWrapperLike[A, B, JMapWrapper[A, B]] {$/;"	r
JMapWrapperLike	scala/collection/convert/Wrappers.scala	/^  trait JMapWrapperLike[A, B, +Repr <: mutable.MapLike[A, B, Repr] with mutable.Map[A, B]] extends mutable.Map[A, B] with mutable.MapLike[A, B, Repr] {$/;"	t
JProcess	scala/sys/process/package.scala	/^      type JProcess        = java.lang.Process$/;"	T
JProcessBuilder	scala/sys/process/package.scala	/^      type JProcessBuilder = java.lang.ProcessBuilder$/;"	T
JPropertiesWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JPropertiesWrapper           = Wrappers.JPropertiesWrapper$/;"	V
JPropertiesWrapper	scala/collection/convert/Wrappers.scala	/^  case class JPropertiesWrapper(underlying: ju.Properties) extends mutable.AbstractMap[String, String]$/;"	r
JSON	scala/util/parsing/json/JSON.scala	/^object JSON extends Parser {$/;"	o
JSONArray	scala/util/parsing/json/Parser.scala	/^case class JSONArray (list : List[Any]) extends JSONType {$/;"	r
JSONFormat	scala/util/parsing/json/Parser.scala	/^object JSONFormat {$/;"	o
JSONObject	scala/util/parsing/json/Parser.scala	/^case class JSONObject (obj : Map[String,Any]) extends JSONType {$/;"	r
JSetWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val JSetWrapper                  = Wrappers.JSetWrapper$/;"	V
JSetWrapper	scala/collection/convert/Wrappers.scala	/^  case class JSetWrapper[A](underlying: ju.Set[A]) extends mutable.AbstractSet[A] with mutable.Set[A] with mutable.SetLike[A, JSetWrapper[A]] {$/;"	r
JavaConversions	scala/collection/JavaConversions.scala	/^object JavaConversions extends WrapAsScala with WrapAsJava {$/;"	o
JavaConversions	scala/concurrent/JavaConversions.scala	/^object JavaConversions {$/;"	o
JavaConverters	scala/collection/JavaConverters.scala	/^object JavaConverters extends DecorateAsJava with DecorateAsScala {$/;"	o
JavaTokenParsers	scala/util/parsing/combinator/JavaTokenParsers.scala	/^trait JavaTokenParsers extends RegexParsers {$/;"	t
KEY_ABSENT	scala/collection/concurrent/TrieMap.scala	/^  val KEY_ABSENT = new AnyRef$/;"	V
KEY_PRESENT	scala/collection/concurrent/TrieMap.scala	/^  val KEY_PRESENT = new AnyRef$/;"	V
Keyword	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class Keyword(chars: String) extends Token {$/;"	r
LF	scala/collection/immutable/StringLike.scala	/^  private final val LF: Char = 0x0A$/;"	V
LINE_BITS	scala/io/Position.scala	/^  final val LINE_BITS   = 20$/;"	V
LINE_MASK	scala/io/Position.scala	/^  final val LINE_MASK   = (1 << LINE_BITS) - 1$/;"	V
LONG	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
LPAREN	scala/xml/dtd/Tokens.scala	/^  final val LPAREN       = 3$/;"	V
Label	scala/util/regexp/WordExp.scala	/^  abstract class Label$/;"	a
LabelledRHS	scala/util/grammar/TreeRHS.scala	/^case class LabelledRHS[A](label: A, hnt: Int) extends TreeRHS$/;"	r
LazyBuilder	scala/collection/mutable/LazyBuilder.scala	/^abstract class LazyBuilder[Elem, +To] extends Builder[Elem, To] {$/;"	a
LazyCell	scala/collection/immutable/Stream.scala	/^  class LazyCell(st: => Stream[A]) {$/;"	c
LazyCombiner	scala/collection/parallel/mutable/LazyCombiner.scala	/^trait LazyCombiner[Elem, +To, Buff <: Growable[Elem] with Sizing] extends Combiner[Elem, To] {$/;"	t
Leading	scala/collection/Iterator.scala	/^    class Leading extends AbstractIterator[A] {$/;"	c
Left	scala/package.scala	/^  type Left[+A, +B] = scala.util.Left[A, B]$/;"	T
Left	scala/package.scala	/^  val Left = scala.util.Left$/;"	V
Letter	scala/util/regexp/WordExp.scala	/^  case class Letter(a: _labelT) extends RegExp {$/;"	r
Lexer	scala/util/parsing/json/Lexer.scala	/^class Lexer extends StdLexical with ImplicitConversions {$/;"	c
Lexical	scala/util/parsing/combinator/lexical/Lexical.scala	/^abstract class Lexical extends Scanners with Tokens {$/;"	a
LineIterator	scala/io/Source.scala	/^  class LineIterator extends AbstractIterator[String] with Iterator[String] {$/;"	c
LinearSeq	scala/collection/LinearSeq.scala	/^object LinearSeq extends SeqFactory[LinearSeq] {$/;"	o
LinearSeq	scala/collection/LinearSeq.scala	/^trait LinearSeq[+A] extends Seq[A]$/;"	t
LinearSeq	scala/collection/immutable/LinearSeq.scala	/^object LinearSeq extends SeqFactory[LinearSeq] {$/;"	o
LinearSeq	scala/collection/immutable/LinearSeq.scala	/^trait LinearSeq[+A] extends Seq[A]$/;"	t
LinearSeq	scala/collection/mutable/LinearSeq.scala	/^object LinearSeq extends SeqFactory[LinearSeq] {$/;"	o
LinearSeq	scala/collection/mutable/LinearSeq.scala	/^trait LinearSeq[A] extends Seq[A]$/;"	t
LinearSeqLike	scala/collection/LinearSeqLike.scala	/^trait LinearSeqLike[+A, +Repr <: LinearSeqLike[A, Repr]] extends SeqLike[A, Repr] {$/;"	t
LinearSeqOptimized	scala/collection/LinearSeqOptimized.scala	/^trait LinearSeqOptimized[+A, +Repr <: LinearSeqOptimized[A, Repr]] extends LinearSeqLike[A, Repr] { self: Repr =>$/;"	t
LinkedHashMap	scala/collection/mutable/LinkedHashMap.scala	/^class LinkedHashMap[A, B] extends AbstractMap[A, B]$/;"	c
LinkedHashMap	scala/collection/mutable/LinkedHashMap.scala	/^object LinkedHashMap extends MutableMapFactory[LinkedHashMap] {$/;"	o
LinkedHashSet	scala/collection/mutable/LinkedHashSet.scala	/^class LinkedHashSet[A] extends AbstractSet[A]$/;"	c
LinkedHashSet	scala/collection/mutable/LinkedHashSet.scala	/^object LinkedHashSet extends MutableSetFactory[LinkedHashSet] {$/;"	o
LinkedList	scala/collection/mutable/LinkedList.scala	/^class LinkedList[A]() extends AbstractSeq[A]$/;"	c
LinkedList	scala/collection/mutable/LinkedList.scala	/^object LinkedList extends SeqFactory[LinkedList] {$/;"	o
LinkedList	scala/concurrent/Channel.scala	/^  class LinkedList[A] {$/;"	c
LinkedListLike	scala/collection/mutable/LinkedListLike.scala	/^trait LinkedListLike[A, This <: Seq[A] with LinkedListLike[A, This]] extends SeqLike[A, This] { self =>$/;"	t
List	scala/collection/immutable/List.scala	/^object List extends SeqFactory[List] {$/;"	o
List	scala/package.scala	/^  type List[+A] = scala.collection.immutable.List[A]$/;"	T
List	scala/package.scala	/^  val List = scala.collection.immutable.List$/;"	V
ListBuffer	scala/collection/mutable/ListBuffer.scala	/^object ListBuffer extends SeqFactory[ListBuffer] {$/;"	o
ListMap	scala/collection/immutable/ListMap.scala	/^class ListMap[A, +B]$/;"	c
ListMap	scala/collection/immutable/ListMap.scala	/^object ListMap extends ImmutableMapFactory[ListMap] {$/;"	o
ListMap	scala/collection/mutable/ListMap.scala	/^class ListMap[A, B]$/;"	c
ListMap	scala/collection/mutable/ListMap.scala	/^object ListMap extends MutableMapFactory[ListMap] {$/;"	o
ListSet	scala/collection/immutable/ListSet.scala	/^class ListSet[A] extends AbstractSet[A]$/;"	c
ListSet	scala/collection/immutable/ListSet.scala	/^object ListSet extends ImmutableSetFactory[ListSet] {$/;"	o
ListSetBuilder	scala/collection/immutable/ListSet.scala	/^  class ListSetBuilder[Elem](initial: ListSet[Elem]) extends Builder[Elem, ListSet[Elem]] {$/;"	c
Lock	scala/concurrent/Lock.scala	/^class Lock {$/;"	c
LogWL	scala/collection/BitSetLike.scala	/^  private[collection] val LogWL = 6$/;"	V
Logged	scala/util/logging/Logged.scala	/^trait Logged {$/;"	t
LoggedNodeFactory	scala/xml/factory/LoggedNodeFactory.scala	/^trait LoggedNodeFactory[A <: Node] extends NodeFactory[A] with scala.util.logging.Logged {$/;"	t
Long	scala/Long.scala	/^object Long extends AnyValCompanion {$/;"	o
Long	scala/collection/generic/BitOperations.scala	/^    type Long = scala.Long$/;"	T
Long	scala/collection/generic/BitOperations.scala	/^  object Long extends Long$/;"	o
Long	scala/collection/generic/BitOperations.scala	/^  trait Long {$/;"	t
Long	scala/collection/immutable/Range.scala	/^  object Long {$/;"	o
Long	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Long    = ManifestFactory.Long$/;"	V
Long	scala/reflect/ClassTag.scala	/^  val Long    : ClassTag[scala.Long]       = Manifest.Long$/;"	V
Long	scala/reflect/Manifest.scala	/^  val Long: AnyValManifest[Long] = new AnyValManifest[scala.Long]("Long") {$/;"	V
LongIsIntegral	scala/math/Numeric.scala	/^  trait LongIsIntegral extends Integral[Long] {$/;"	t
LongMap	scala/collection/immutable/LongMap.scala	/^object LongMap {$/;"	o
LongMap._	scala/collection/immutable/LongMap.scala	/^import LongMap._$/;"	i
LongMapUtils._	scala/collection/immutable/LongMap.scala	/^import LongMapUtils._$/;"	i
LongOrdering	scala/math/Ordering.scala	/^  trait LongOrdering extends Ordering[Long] {$/;"	t
LongRef	scala/runtime/LongRef.java	/^    public LongRef(long elem) { this.elem = elem; }$/;"	m	class:LongRef
LongRef	scala/runtime/LongRef.java	/^public class LongRef implements java.io.Serializable {$/;"	c
LowPriorityCodecImplicits	scala/io/Codec.scala	/^trait LowPriorityCodecImplicits {$/;"	t
LowPriorityEquiv	scala/math/Equiv.scala	/^trait LowPriorityEquiv {$/;"	t
LowPriorityImplicits	scala/LowPriorityImplicits.scala	/^class LowPriorityImplicits {$/;"	c
LowPriorityOrderingImplicits	scala/math/Ordering.scala	/^trait LowPriorityOrderingImplicits {$/;"	t
LowPriorityWrapAsScala	scala/collection/convert/WrapAsScala.scala	/^trait LowPriorityWrapAsScala {$/;"	t
MAGENTA	scala/Console.scala	/^  final val MAGENTA    = "\\033[35m"$/;"	V
MAGENTA_B	scala/Console.scala	/^  final val MAGENTA_B  = "\\033[45m"$/;"	V
MAXIMUM	scala/annotation/elidable.scala	/^  final val MAXIMUM = OFF$/;"	V
MAX_PRINT	scala/collection/immutable/Range.scala	/^  private[immutable] val MAX_PRINT = 512  \/\/ some arbitrary value$/;"	V
MICROSECONDS	scala/concurrent/duration/package.scala	/^  final val MICROSECONDS = java.util.concurrent.TimeUnit.MICROSECONDS$/;"	V
MILLISECONDS	scala/concurrent/duration/package.scala	/^  final val MILLISECONDS = java.util.concurrent.TimeUnit.MILLISECONDS$/;"	V
MINIMUM	scala/annotation/elidable.scala	/^  final val MINIMUM = ALL$/;"	V
MINUTES	scala/concurrent/duration/package.scala	/^  final val MINUTES      = java.util.concurrent.TimeUnit.MINUTES$/;"	V
MIN_FOR_COPY	scala/collection/parallel/package.scala	/^  val MIN_FOR_COPY = 512$/;"	V
MIXED	scala/xml/dtd/ContentModel.scala	/^case class MIXED(r: ContentModel.RegExp) extends DFAContentModel {$/;"	r
MODULE_INSTANCE_NAME	scala/reflect/NameTransformer.scala	/^  val MODULE_INSTANCE_NAME = "MODULE$"$/;"	V
MODULE_SUFFIX_STRING	scala/reflect/NameTransformer.scala	/^  val MODULE_SUFFIX_STRING = sys.props.getOrElse("SCALA_MODULE_SUFFIX_STRING", "$")$/;"	V
Main	scala/xml/include/sax/Main.scala	/^object Main {$/;"	o
MainNode	scala/collection/concurrent/MainNode.java	/^abstract class MainNode<K, V> extends BasicNode {$/;"	c
MakeValidationException	scala/xml/dtd/ValidationException.scala	/^object MakeValidationException {$/;"	o
MalformedAttributeException	scala/xml/MalformedAttributeException.scala	/^case class MalformedAttributeException(msg: String) extends RuntimeException(msg)$/;"	r
ManagedBlocker	scala/concurrent/ManagedBlocker.scala	/^trait ManagedBlocker {$/;"	t
MangledHashing	scala/collection/concurrent/TrieMap.scala	/^  class MangledHashing[K] extends Hashing[K] {$/;"	c
Manifest	scala/Predef.scala	/^  type Manifest[T]      = scala.reflect.Manifest[T]$/;"	T
Manifest	scala/Predef.scala	/^  val Manifest          = scala.reflect.Manifest$/;"	V
Manifest	scala/reflect/Manifest.scala	/^trait Manifest[T] extends ClassManifest[T] with Equals {$/;"	t
Manifest	scala/reflect/package.scala	/^  val Manifest = ManifestFactory$/;"	V
Manifest._	scala/reflect/ClassManifestDeprecatedApis.scala	/^      import Manifest._$/;"	i
ManifestFactory	scala/reflect/Manifest.scala	/^object ManifestFactory {$/;"	o
Map	scala/Predef.scala	/^  type Map[A, +B] = immutable.Map[A, B]$/;"	T
Map	scala/Predef.scala	/^  val Map         = immutable.Map$/;"	V
Map	scala/collection/Map.scala	/^object Map extends MapFactory[Map] {$/;"	o
Map	scala/collection/Map.scala	/^trait Map[A, +B] extends Iterable[(A, B)] with GenMap[A, B] with MapLike[A, B, Map[A, B]] {$/;"	t
Map	scala/collection/concurrent/Map.scala	/^trait Map[A, B] extends scala.collection.mutable.Map[A, B] {$/;"	t
Map	scala/collection/immutable/Map.scala	/^object Map extends ImmutableMapFactory[Map] {$/;"	o
Map	scala/collection/immutable/Map.scala	/^trait Map[A, +B] extends Iterable[(A, B)]$/;"	t
Map	scala/collection/mutable/Map.scala	/^object Map extends MutableMapFactory[Map] {$/;"	o
Map	scala/collection/mutable/Map.scala	/^trait Map[A, B]$/;"	t
Map	scala/collection/parallel/mutable/ParArray.scala	/^  class Map[S](f: T => S, targetarr: Array[Any], offset: Int, howmany: Int) extends Task[Unit, Map[S]] {$/;"	c
Map1	scala/collection/immutable/Map.scala	/^  class Map1[A, +B](key1: A, value1: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	c
Map2	scala/collection/immutable/Map.scala	/^  class Map2[A, +B](key1: A, value1: B, key2: A, value2: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	c
Map3	scala/collection/immutable/Map.scala	/^  class Map3[A, +B](key1: A, value1: B, key2: A, value2: B, key3: A, value3: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	c
Map4	scala/collection/immutable/Map.scala	/^  class Map4[A, +B](key1: A, value1: B, key2: A, value2: B, key3: A, value3: B, key4: A, value4: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	c
MapBuilder	scala/collection/mutable/MapBuilder.scala	/^class MapBuilder[A, B, Coll <: scala.collection.GenMap[A, B] with scala.collection.GenMapLike[A, B, Coll]](empty: Coll)$/;"	c
MapCanBuildFrom	scala/collection/generic/GenMapFactory.scala	/^  class MapCanBuildFrom[A, B] extends CanBuildFrom[Coll, (A, B), CC[A, B]] {$/;"	c
MapColl	scala/collection/generic/ParMapFactory.scala	/^  type MapColl = CC[_, _]$/;"	T
MapFactory	scala/collection/generic/MapFactory.scala	/^abstract class MapFactory[CC[A, B] <: Map[A, B] with MapLike[A, B, CC[A, B]]] extends GenMapFactory[CC] {$/;"	a
MapLike	scala/collection/MapLike.scala	/^trait MapLike[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapLike	scala/collection/immutable/MapLike.scala	/^trait MapLike[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapLike	scala/collection/mutable/MapLike.scala	/^trait MapLike[A, B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapProxy	scala/collection/MapProxy.scala	/^trait MapProxy[A, +B] extends Map[A, B] with MapProxyLike[A, B, Map[A, B]]$/;"	t
MapProxy	scala/collection/immutable/MapProxy.scala	/^trait MapProxy[A, +B] extends Map[A, B] with MapProxyLike[A, B, Map[A, B]] {$/;"	t
MapProxy	scala/collection/mutable/MapProxy.scala	/^trait MapProxy[A, B] extends Map[A, B] with MapProxyLike[A, B, Map[A, B]] {$/;"	t
MapProxyLike	scala/collection/MapProxyLike.scala	/^trait MapProxyLike[A, +B, +This <: MapLike[A, B, This] with Map[A, B]]$/;"	t
MapWrapper	scala/collection/convert/Wrappers.scala	/^  class MapWrapper[A, B](underlying: Map[A, B]) extends ju.AbstractMap[A, B] { self =>$/;"	c
Mappable	scala/util/parsing/ast/Binders.scala	/^  trait Mappable[T] {$/;"	t
Mappable	scala/util/parsing/ast/Binders.scala	/^trait Mappable {$/;"	t
Mapped	scala/collection/GenIterableViewLike.scala	/^  trait Mapped[B] extends super.Mapped[B] with Transformed[B] {$/;"	t
Mapped	scala/collection/GenSeqViewLike.scala	/^  trait Mapped[B] extends super.Mapped[B] with Transformed[B] {$/;"	t
Mapped	scala/collection/GenTraversableViewLike.scala	/^  trait Mapped[B] extends Transformed[B] {$/;"	t
Mapped	scala/collection/IterableViewLike.scala	/^  trait Mapped[B] extends super[TraversableViewLike].Mapped[B] with super[GenIterableViewLike].Mapped[B] with Transformed[B]$/;"	t
Mapped	scala/collection/SeqViewLike.scala	/^  trait Mapped[B] extends super[IterableViewLike].Mapped[B] with super[GenSeqViewLike].Mapped[B] with Transformed[B]$/;"	t
Mapped	scala/collection/TraversableViewLike.scala	/^  trait Mapped[B] extends Transformed[B] with super.Mapped[B]$/;"	t
Mapped	scala/collection/immutable/StreamViewLike.scala	/^  trait Mapped[B] extends super.Mapped[B] with Transformed[B]$/;"	t
Mapped	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Mapped[S] extends super.Mapped[S] with Transformed[S]{$/;"	t
Mapped	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Mapped[S] extends super[GenSeqViewLike].Mapped[S] with super[ParIterableViewLike].Mapped[S] with Transformed[S] {$/;"	t
Mapped	scala/collection/parallel/RemainsIterator.scala	/^  class Mapped[S](f: T => S) extends IterableSplitter[S] {$/;"	c
Mapped	scala/collection/parallel/RemainsIterator.scala	/^  class Mapped[S](f: T => S) extends super.Mapped[S](f) with SeqSplitter[S] {$/;"	c
Mapper	scala/util/parsing/ast/Binders.scala	/^  trait Mapper { def apply[T <% Mappable[T]](x: T): T } \/* TODO: having type `Forall T. T => T` is too strict:$/;"	t
MarkupDecl	scala/xml/dtd/Decl.scala	/^abstract class MarkupDecl extends Decl {$/;"	a
MarkupHandler	scala/xml/parsing/MarkupHandler.scala	/^abstract class MarkupHandler extends Logged$/;"	a
MarkupParser	scala/xml/parsing/MarkupParser.scala	/^trait MarkupParser extends MarkupParserCommon with TokenTests$/;"	t
Marshal	scala/util/Marshal.scala	/^object Marshal {$/;"	o
Match	scala/util/matching/Regex.scala	/^  class Match(val source: java.lang.CharSequence,$/;"	c
Match	scala/util/matching/Regex.scala	/^  object Match {$/;"	o
MatchData	scala/util/matching/Regex.scala	/^  trait MatchData {$/;"	t
MatchIterator	scala/util/matching/Regex.scala	/^  class MatchIterator(val source: java.lang.CharSequence, val regex: Regex, val groupNames: Seq[String])$/;"	c
MaxComplexity	scala/runtime/MethodCache.scala	/^  final private val MaxComplexity = 160$/;"	V
MaxLong	scala/math/BigDecimal.scala	/^  val MaxLong = new BigDecimal(BigDec valueOf Long.MaxValue, defaultMathContext)$/;"	V
MaxLong	scala/math/BigInt.scala	/^  val MaxLong = BigInt(Long.MaxValue)$/;"	V
MaxQueueSize	scala/xml/pull/XMLEventReader.scala	/^  override val MaxQueueSize = 1000$/;"	V
MaxQueueSize	scala/xml/pull/XMLEventReader.scala	/^  val MaxQueueSize = -1$/;"	V
MaxValue	scala/Byte.scala	/^  final val MaxValue = java.lang.Byte.MAX_VALUE$/;"	V
MaxValue	scala/Char.scala	/^  final val MaxValue = java.lang.Character.MAX_VALUE$/;"	V
MaxValue	scala/Double.scala	/^  final val MaxValue = java.lang.Double.MAX_VALUE$/;"	V
MaxValue	scala/Float.scala	/^  final val MaxValue = java.lang.Float.MAX_VALUE$/;"	V
MaxValue	scala/Int.scala	/^  final val MaxValue = java.lang.Integer.MAX_VALUE$/;"	V
MaxValue	scala/Long.scala	/^  final val MaxValue = java.lang.Long.MAX_VALUE$/;"	V
MaxValue	scala/Short.scala	/^  final val MaxValue = java.lang.Short.MAX_VALUE$/;"	V
Message	scala/collection/script/Message.scala	/^trait Message[+A]$/;"	t
Meta	scala/util/regexp/Base.scala	/^  class Meta(r1: _regexpT) extends RegExp {$/;"	c
MetaData	scala/xml/MetaData.scala	/^abstract class MetaData$/;"	a
MetaData	scala/xml/MetaData.scala	/^object MetaData {$/;"	o
MinLong	scala/math/BigDecimal.scala	/^  val MinLong = new BigDecimal(BigDec valueOf Long.MinValue, defaultMathContext)$/;"	V
MinLong	scala/math/BigInt.scala	/^  val MinLong = BigInt(Long.MinValue)$/;"	V
MinPositiveValue	scala/Double.scala	/^  final val MinPositiveValue = java.lang.Double.MIN_VALUE$/;"	V
MinPositiveValue	scala/Float.scala	/^  final val MinPositiveValue = java.lang.Float.MIN_VALUE$/;"	V
MinValue	scala/Byte.scala	/^  final val MinValue = java.lang.Byte.MIN_VALUE$/;"	V
MinValue	scala/Char.scala	/^  final val MinValue = java.lang.Character.MIN_VALUE$/;"	V
MinValue	scala/Double.scala	/^  final val MinValue = -java.lang.Double.MAX_VALUE$/;"	V
MinValue	scala/Float.scala	/^  final val MinValue = -java.lang.Float.MAX_VALUE$/;"	V
MinValue	scala/Int.scala	/^  final val MinValue = java.lang.Integer.MIN_VALUE$/;"	V
MinValue	scala/Long.scala	/^  final val MinValue = java.lang.Long.MIN_VALUE$/;"	V
MinValue	scala/Short.scala	/^  final val MinValue = java.lang.Short.MIN_VALUE$/;"	V
MinimizeMode	scala/xml/XML.scala	/^object MinimizeMode extends Enumeration {$/;"	o
MinusInf	scala/concurrent/duration/Duration.scala	/^  val MinusInf: Infinite = new Infinite {$/;"	V
MultiMap	scala/collection/mutable/MultiMap.scala	/^trait MultiMap[A, B] extends Map[A, Set[B]] {$/;"	t
MurmurHash	scala/util/MurmurHash.scala	/^class MurmurHash[@specialized(Int,Long,Float,Double) T](seed: Int) extends (T => Unit) {$/;"	c
MurmurHash	scala/util/MurmurHash.scala	/^object MurmurHash {$/;"	o
MurmurHash._	scala/util/MurmurHash.scala	/^  import MurmurHash._$/;"	i
MurmurHash3	scala/util/hashing/MurmurHash3.scala	/^object MurmurHash3 extends MurmurHash3 {$/;"	o
Mutable	scala/Mutable.scala	/^trait Mutable$/;"	t
MutableBufferWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val MutableBufferWrapper         = Wrappers.MutableBufferWrapper$/;"	V
MutableBufferWrapper	scala/collection/convert/Wrappers.scala	/^  case class MutableBufferWrapper[A](underlying: mutable.Buffer[A]) extends ju.AbstractList[A] with IterableWrapperTrait[A] {$/;"	r
MutableList	scala/collection/mutable/MutableList.scala	/^class MutableList[A]$/;"	c
MutableList	scala/collection/mutable/MutableList.scala	/^object MutableList extends SeqFactory[MutableList] {$/;"	o
MutableMapFactory	scala/collection/generic/MutableMapFactory.scala	/^abstract class MutableMapFactory[CC[A, B] <: mutable.Map[A, B] with mutable.MapLike[A, B, CC[A, B]]]$/;"	a
MutableMapWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val MutableMapWrapper            = Wrappers.MutableMapWrapper$/;"	V
MutableMapWrapper	scala/collection/convert/Wrappers.scala	/^  case class MutableMapWrapper[A, B](underlying: mutable.Map[A, B]) extends MapWrapper[A, B](underlying) {$/;"	r
MutableSeqWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val MutableSeqWrapper            = Wrappers.MutableSeqWrapper$/;"	V
MutableSeqWrapper	scala/collection/convert/Wrappers.scala	/^  case class MutableSeqWrapper[A](underlying: mutable.Seq[A]) extends ju.AbstractList[A] with IterableWrapperTrait[A] {$/;"	r
MutableSetFactory	scala/collection/generic/MutableSetFactory.scala	/^abstract class MutableSetFactory[CC[X] <: mutable.Set[X] with mutable.SetLike[X, CC[X]]]$/;"	a
MutableSetWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val MutableSetWrapper            = Wrappers.MutableSetWrapper$/;"	V
MutableSetWrapper	scala/collection/convert/Wrappers.scala	/^  case class MutableSetWrapper[A](underlying: mutable.Set[A]) extends SetWrapper[A](underlying) {$/;"	r
MutableSortedSetFactory	scala/collection/generic/MutableSortedSetFactory.scala	/^abstract class MutableSortedSetFactory[CC[A] <: mutable.SortedSet[A] with SortedSetLike[A, CC[A]] with mutable.Set[A] with mutable.SetLike[A, CC[A]]] extends SortedSetFactory[CC] {$/;"	a
NAME	scala/xml/dtd/Tokens.scala	/^  final val NAME         = 1$/;"	V
NAME_JOIN_STRING	scala/reflect/NameTransformer.scala	/^  val NAME_JOIN_STRING     = sys.props.getOrElse("SCALA_NAME_JOIN_STRING", "$")$/;"	V
NANOSECONDS	scala/concurrent/duration/package.scala	/^  final val NANOSECONDS  = java.util.concurrent.TimeUnit.NANOSECONDS$/;"	V
NIL	scala/collection/immutable/Vector.scala	/^  private[immutable] val NIL = new Vector[Nothing](0, 0, 0)$/;"	V
NONE	scala/xml/factory/LoggedNodeFactory.scala	/^  final val NONE  = 0$/;"	V
NOPOS	scala/io/Position.scala	/^  final val NOPOS = 0$/;"	V
NaN	scala/Double.scala	/^  final val NaN              = java.lang.Double.NaN$/;"	V
NaN	scala/Float.scala	/^  final val NaN              = java.lang.Float.NaN$/;"	V
NameElement	scala/util/parsing/ast/AbstractSyntax.scala	/^  trait NameElement extends Element {$/;"	t
NameTransformer	scala/reflect/NameTransformer.scala	/^object NameTransformer {$/;"	o
NamespaceBinding	scala/xml/NamespaceBinding.scala	/^case class NamespaceBinding(prefix: String, uri: String, parent: NamespaceBinding) extends AnyRef with Equality$/;"	r
NamespaceType	scala/xml/parsing/MarkupParser.scala	/^  type NamespaceType = NamespaceBinding$/;"	T
NegativeInfinity	scala/Double.scala	/^  final val NegativeInfinity = java.lang.Double.NEGATIVE_INFINITY$/;"	V
NegativeInfinity	scala/Float.scala	/^  final val NegativeInfinity = java.lang.Float.NEGATIVE_INFINITY$/;"	V
Never	scala/xml/XML.scala	/^  val Never = Value$/;"	V
Newline	scala/sys/process/BasicIO.scala	/^  final val Newline    = props("line.separator")$/;"	V
Nil	scala/package.scala	/^  val Nil = scala.collection.immutable.Nil$/;"	V
NoBindingFactoryAdapter	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^class NoBindingFactoryAdapter extends FactoryAdapter with NodeFactory[Elem]$/;"	c
NoBuilder	scala/collection/TraversableView.scala	/^  class NoBuilder[A] extends Builder[A, Nothing] {$/;"	c
NoCombiner	scala/collection/parallel/ParIterableView.scala	/^  abstract class NoCombiner[T] extends Combiner[T, Nothing] {$/;"	a
NoCombiner	scala/collection/parallel/ParSeqView.scala	/^  abstract class NoCombiner[T] extends Combiner[T, Nothing] {$/;"	a
NoManifest	scala/Predef.scala	/^  val NoManifest        = scala.reflect.NoManifest$/;"	V
NoManifest	scala/reflect/NoManifest.scala	/^object NoManifest extends OptManifest[Nothing] with Serializable {$/;"	o
NoPosition	scala/util/parsing/input/NoPosition.scala	/^object NoPosition extends Position {$/;"	o
NoPositioner	scala/io/Source.scala	/^  object NoPositioner extends Positioner(Position) {$/;"	o
NoStackTrace	scala/util/control/NoStackTrace.scala	/^object NoStackTrace {$/;"	o
NoStackTrace	scala/util/control/NoStackTrace.scala	/^trait NoStackTrace extends Throwable {$/;"	t
NoSuccess	scala/util/parsing/combinator/Parsers.scala	/^  object NoSuccess {$/;"	o
NoSuchElementException	scala/package.scala	/^  type NoSuchElementException          = java.util.NoSuchElementException$/;"	T
Node	scala/util/regexp/PointedHedgeExp.scala	/^  case class  Node(label: _labelT, r: _regexpT) extends RegExp {$/;"	r
Node	scala/xml/Node.scala	/^abstract class Node extends NodeSeq {$/;"	a
Node	scala/xml/Node.scala	/^object Node {$/;"	o
NodeBuffer	scala/xml/NodeBuffer.scala	/^class NodeBuffer extends scala.collection.mutable.ArrayBuffer[Node] {$/;"	c
NodeFactory	scala/xml/factory/NodeFactory.scala	/^trait NodeFactory[A <: Node] {$/;"	t
NodeSeq	scala/xml/NodeSeq.scala	/^abstract class NodeSeq extends AbstractSeq[Node] with immutable.Seq[Node] with SeqLike[Node, NodeSeq] with Equality {$/;"	a
NodeSeq	scala/xml/NodeSeq.scala	/^object NodeSeq {$/;"	o
NonEmpty	scala/collection/immutable/RedBlack.scala	/^  abstract class NonEmpty[+B] extends Tree[B] with Serializable {$/;"	a
NonFatal	scala/util/control/NonFatal.scala	/^object NonFatal {$/;"	o
NonLocalReturnControl	scala/runtime/NonLocalReturnControl.scala	/^class NonLocalReturnControl[@specialized T](val key: AnyRef, val value: T) extends ControlThrowable {$/;"	c
NondetWordAutom	scala/util/automata/NondetWordAutom.scala	/^abstract class NondetWordAutom[T <: AnyRef] {$/;"	a
NotNull	scala/NotNull.scala	/^trait NotNull extends Any {}$/;"	t
NotationDecl	scala/xml/dtd/Decl.scala	/^case class NotationDecl( name:String, extID:ExternalID ) extends MarkupDecl {$/;"	r
Nothing	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Nothing = ManifestFactory.Nothing$/;"	V
Nothing	scala/reflect/ClassTag.scala	/^  val Nothing : ClassTag[scala.Nothing]    = Manifest.Nothing$/;"	V
Nothing	scala/reflect/Manifest.scala	/^  val Nothing: Manifest[scala.Nothing] = new PhantomManifest[scala.Nothing](NothingTYPE, "Nothing") {$/;"	V
NothingTYPE	scala/reflect/ClassTag.scala	/^  private val NothingTYPE = classOf[scala.runtime.Nothing$]$/;"	V
NothingTYPE	scala/reflect/Manifest.scala	/^  private val NothingTYPE = classOf[scala.runtime.Nothing$]$/;"	V
Null	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Null    = ManifestFactory.Null$/;"	V
Null	scala/reflect/ClassTag.scala	/^  val Null    : ClassTag[scala.Null]       = Manifest.Null$/;"	V
Null	scala/reflect/Manifest.scala	/^  val Null: Manifest[scala.Null] = new PhantomManifest[scala.Null](NullTYPE, "Null") {$/;"	V
NullPointerException	scala/package.scala	/^  type NullPointerException            = java.lang.NullPointerException$/;"	T
NullTYPE	scala/reflect/ClassTag.scala	/^  private val NullTYPE = classOf[scala.runtime.Null$]$/;"	V
NullTYPE	scala/reflect/Manifest.scala	/^  private val NullTYPE = classOf[scala.runtime.Null$]$/;"	V
Number	scala/util/parsing/combinator/testing/RegexTest.scala	/^case class Number(n: Int)$/;"	r
NumberFormatException	scala/package.scala	/^  type NumberFormatException           = java.lang.NumberFormatException$/;"	T
Numeric	scala/math/Numeric.scala	/^object Numeric {$/;"	o
Numeric	scala/math/Numeric.scala	/^trait Numeric[T] extends Ordering[T] {$/;"	t
Numeric	scala/package.scala	/^  type Numeric[T] = scala.math.Numeric[T]$/;"	T
Numeric	scala/package.scala	/^  val Numeric = scala.math.Numeric$/;"	V
NumericLit	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class NumericLit(chars: String) extends Token {$/;"	r
NumericParser	scala/util/parsing/json/Parser.scala	/^  type NumericParser = String => Any$/;"	T
NumericRange	scala/collection/immutable/NumericRange.scala	/^abstract class NumericRange[T]$/;"	a
NumericRange	scala/collection/immutable/NumericRange.scala	/^object NumericRange {$/;"	o
NumericRange.defaultOrdering	scala/collection/immutable/NumericRange.scala	/^  import NumericRange.defaultOrdering$/;"	i
OFF	scala/annotation/elidable.scala	/^  final val OFF     = Int.MaxValue  \/\/ Level.OFF.intValue()$/;"	V
OPT	scala/xml/dtd/Tokens.scala	/^  final val OPT          = 8$/;"	V
OTHER	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
Object	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Object  = ManifestFactory.Object$/;"	V
Object	scala/reflect/ClassTag.scala	/^  val Object  : ClassTag[java.lang.Object] = Manifest.Object$/;"	V
Object	scala/reflect/Manifest.scala	/^  val Object: Manifest[java.lang.Object] = new PhantomManifest[java.lang.Object](ObjectTYPE, "Object") {$/;"	V
ObjectRef	scala/runtime/ObjectRef.java	/^    public ObjectRef(T elem) { this.elem = elem; }$/;"	m	class:ObjectRef
ObjectRef	scala/runtime/ObjectRef.java	/^public class ObjectRef<T> implements java.io.Serializable {$/;"	c
ObjectTYPE	scala/reflect/ClassTag.scala	/^  private val ObjectTYPE = classOf[java.lang.Object]$/;"	V
ObjectTYPE	scala/reflect/Manifest.scala	/^  private val ObjectTYPE = classOf[java.lang.Object]$/;"	V
ObservableBuffer	scala/collection/mutable/ObservableBuffer.scala	/^trait ObservableBuffer[A] extends Buffer[A] with Publisher[Message[A] with Undoable]$/;"	t
ObservableMap	scala/collection/mutable/ObservableMap.scala	/^trait ObservableMap[A, B] extends Map[A, B] with Publisher[Message[(A, B)] with Undoable]$/;"	t
ObservableSet	scala/collection/mutable/ObservableSet.scala	/^trait ObservableSet[A] extends Set[A] with Publisher[Message[A] with Undoable]$/;"	t
Of	scala/Enumeration.scala	/^                                                   classOf[Value].isAssignableFrom(m.getReturnType) &&$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Boolean] -> classOf[java.lang.Boolean],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Byte]    -> classOf[java.lang.Byte],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Char]    -> classOf[java.lang.Character],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Double]  -> classOf[java.lang.Double],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Float]   -> classOf[java.lang.Float],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Int]     -> classOf[java.lang.Integer],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Long]    -> classOf[java.lang.Long],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Short]   -> classOf[java.lang.Short],$/;"	c
Of	scala/concurrent/Future.scala	/^    classOf[Unit]    -> classOf[scala.runtime.BoxedUnit]$/;"	c
OffsetPosition	scala/util/parsing/input/OffsetPosition.scala	/^case class OffsetPosition(source: java.lang.CharSequence, offset: Int) extends Position {$/;"	r
OnCompleteRunnable	scala/concurrent/Future.scala	/^trait OnCompleteRunnable {$/;"	t
OnceCanBuildFrom	scala/collection/TraversableOnce.scala	/^  class OnceCanBuildFrom[A] extends BufferedCanBuildFrom[A, TraversableOnce] {$/;"	c
OnceParser	scala/util/parsing/combinator/Parsers.scala	/^  def OnceParser[T](f: Input => ParseResult[T]): Parser[T] with OnceParser[T]$/;"	m
OnceParser	scala/util/parsing/combinator/Parsers.scala	/^  trait OnceParser[+T] extends Parser[T] {$/;"	t
OpenHashMap	scala/collection/mutable/OpenHashMap.scala	/^class OpenHashMap[Key, Value](initialSize : Int)$/;"	c
OpenHashMap	scala/collection/mutable/OpenHashMap.scala	/^object OpenHashMap {$/;"	o
OpenHashMap.OpenEntry	scala/collection/mutable/OpenHashMap.scala	/^  import OpenHashMap.OpenEntry$/;"	i
Ops	scala/math/Numeric.scala	/^  class Ops(lhs: T) {$/;"	c
Ops	scala/math/Ordering.scala	/^  class Ops(lhs: T) {$/;"	c
OptManifest	scala/Predef.scala	/^  type OptManifest[T]   = scala.reflect.OptManifest[T]$/;"	T
OptManifest	scala/reflect/OptManifest.scala	/^trait OptManifest[+T] extends Serializable/;"	t
Option	scala/Option.scala	/^object Option {$/;"	o
OptionOrdering	scala/math/Ordering.scala	/^  trait OptionOrdering[T] extends Ordering[Option[T]] {$/;"	t
Ordered	scala/math/Ordered.scala	/^object Ordered {$/;"	o
Ordered	scala/math/Ordered.scala	/^trait Ordered[A] extends Any with java.lang.Comparable[A] {$/;"	t
Ordered	scala/package.scala	/^  type Ordered[T] = scala.math.Ordered[T]$/;"	T
Ordered	scala/package.scala	/^  val Ordered = scala.math.Ordered$/;"	V
OrderedProxy	scala/runtime/ScalaNumberProxy.scala	/^trait OrderedProxy[T] extends Any with Ordered[T] with Typed[T] {$/;"	t
OrderedTraversableFactory	scala/collection/generic/OrderedTraversableFactory.scala	/^abstract class OrderedTraversableFactory[CC[X] <: Traversable[X] with GenericOrderedTraversableTemplate[X, CC]]$/;"	a
Ordering	scala/math/Ordering.scala	/^object Ordering extends LowPriorityOrderingImplicits {$/;"	o
Ordering	scala/math/Ordering.scala	/^trait Ordering[T] extends Comparator[T] with PartialOrdering[T] with Serializable {$/;"	t
Ordering	scala/package.scala	/^  type Ordering[T] = scala.math.Ordering[T]$/;"	T
Ordering	scala/package.scala	/^  val Ordering = scala.math.Ordering$/;"	V
Otherwise	scala/collection/parallel/ParIterableLike.scala	/^    trait Otherwise[Cmb] {$/;"	t
Otherwise	scala/collection/parallel/package.scala	/^    trait Otherwise[R] {$/;"	t
OutputStream	scala/sys/process/package.scala	/^      type OutputStream    = java.io.OutputStream$/;"	T
P	scala/util/automata/SubsetConstruction.scala	/^      val P = rest.pop$/;"	V
PCData	scala/xml/PCData.scala	/^class PCData(data: String) extends Atom[String](data) {$/;"	c
PCData	scala/xml/PCData.scala	/^object PCData {$/;"	o
PEReference	scala/xml/dtd/Decl.scala	/^case class PEReference(ent:String) extends MarkupDecl {$/;"	r
PLUS	scala/xml/dtd/Tokens.scala	/^  final val PLUS         = 7$/;"	V
PU	scala/io/BytePickle.scala	/^  abstract class PU[T] {$/;"	a
PackratParser	scala/util/parsing/combinator/PackratParsers.scala	/^  abstract class PackratParser[+T] extends super.Parser[T]$/;"	a
PackratParsers	scala/util/parsing/combinator/PackratParsers.scala	/^trait PackratParsers extends Parsers {$/;"	t
PackratReader	scala/util/parsing/combinator/PackratParsers.scala	/^  class PackratReader[+T](underlying: Reader[T]) extends Reader[T] { outer =>$/;"	c
PageSize	scala/collection/immutable/PagedSeq.scala	/^  private final val PageSize = 4096$/;"	V
PagedSeq	scala/collection/immutable/PagedSeq.scala	/^class PagedSeq[T: ClassTag] protected($/;"	c
PagedSeq	scala/collection/immutable/PagedSeq.scala	/^object PagedSeq {$/;"	o
PagedSeq._	scala/collection/immutable/PagedSeq.scala	/^import PagedSeq._$/;"	i
PagedSeqReader	scala/util/parsing/input/PagedSeqReader.scala	/^class PagedSeqReader(seq: PagedSeq[Char],$/;"	c
PagedSeqReader	scala/util/parsing/input/PagedSeqReader.scala	/^object PagedSeqReader {$/;"	o
PagedSeqReader._	scala/util/parsing/input/PagedSeqReader.scala	/^  import PagedSeqReader._$/;"	i
Pair	scala/Predef.scala	/^  object Pair {$/;"	o
Pair	scala/Predef.scala	/^  type Pair[+A, +B] = Tuple2[A, B]$/;"	T
ParArray	scala/collection/parallel/mutable/ParArray.scala	/^class ParArray[T] private[mutable] (val arrayseq: ArraySeq[T])$/;"	c
ParArray	scala/collection/parallel/mutable/ParArray.scala	/^object ParArray extends ParFactory[ParArray] {$/;"	o
ParArrayCombiner	scala/collection/parallel/mutable/package.scala	/^  type ParArrayCombiner[T] = ResizableParArrayCombiner[T]$/;"	T
ParArrayCombiner	scala/collection/parallel/mutable/package.scala	/^  val ParArrayCombiner = ResizableParArrayCombiner$/;"	V
ParArrayIterator	scala/collection/parallel/mutable/ParArray.scala	/^  class ParArrayIterator(var i: Int = 0, val until: Int = length, val arr: Array[Any] = array)$/;"	c
ParFactory	scala/collection/generic/ParFactory.scala	/^abstract class ParFactory[CC[X] <: ParIterable[X] with GenericParTemplate[X, CC]]$/;"	a
ParFlatHashTable	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^trait ParFlatHashTable[T] extends scala.collection.mutable.FlatHashTable[T] {$/;"	t
ParFlatHashTableIterator	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^  abstract class ParFlatHashTableIterator(var idx: Int, val until: Int, val totalsize: Int)$/;"	a
ParHashMap	scala/collection/parallel/immutable/ParHashMap.scala	/^class ParHashMap[K, +V] private[immutable] (private[this] val trie: HashMap[K, V])$/;"	c
ParHashMap	scala/collection/parallel/immutable/ParHashMap.scala	/^object ParHashMap extends ParMapFactory[ParHashMap] {$/;"	o
ParHashMap	scala/collection/parallel/mutable/ParHashMap.scala	/^class ParHashMap[K, V] private[collection] (contents: HashTable.Contents[K, DefaultEntry[K, V]])$/;"	c
ParHashMap	scala/collection/parallel/mutable/ParHashMap.scala	/^object ParHashMap extends ParMapFactory[ParHashMap] {$/;"	o
ParHashMapIterator	scala/collection/parallel/immutable/ParHashMap.scala	/^  class ParHashMapIterator(var triter: Iterator[(K, V @uncheckedVariance)], val sz: Int)$/;"	c
ParHashMapIterator	scala/collection/parallel/mutable/ParHashMap.scala	/^  class ParHashMapIterator(start: Int, untilIdx: Int, totalSize: Int, e: DefaultEntry[K, V])$/;"	c
ParHashSet	scala/collection/parallel/immutable/ParHashSet.scala	/^class ParHashSet[T] private[immutable] (private[this] val trie: HashSet[T])$/;"	c
ParHashSet	scala/collection/parallel/immutable/ParHashSet.scala	/^object ParHashSet extends ParSetFactory[ParHashSet] {$/;"	o
ParHashSet	scala/collection/parallel/mutable/ParHashSet.scala	/^class ParHashSet[T] private[collection] (contents: FlatHashTable.Contents[T])$/;"	c
ParHashSet	scala/collection/parallel/mutable/ParHashSet.scala	/^object ParHashSet extends ParSetFactory[ParHashSet] {$/;"	o
ParHashSetIterator	scala/collection/parallel/immutable/ParHashSet.scala	/^  class ParHashSetIterator(var triter: Iterator[T], val sz: Int)$/;"	c
ParHashSetIterator	scala/collection/parallel/mutable/ParHashSet.scala	/^  class ParHashSetIterator(start: Int, iteratesUntil: Int, totalElements: Int)$/;"	c
ParHashTable	scala/collection/parallel/mutable/ParHashTable.scala	/^trait ParHashTable[K, Entry >: Null <: HashEntry[K, Entry]] extends scala.collection.mutable.HashTable[K, Entry] {$/;"	t
ParIterable	scala/collection/parallel/ParIterable.scala	/^object ParIterable extends ParFactory[ParIterable] {$/;"	o
ParIterable	scala/collection/parallel/ParIterable.scala	/^trait ParIterable[+T]$/;"	t
ParIterable	scala/collection/parallel/immutable/ParIterable.scala	/^object ParIterable extends ParFactory[ParIterable] {$/;"	o
ParIterable	scala/collection/parallel/immutable/ParIterable.scala	/^trait ParIterable[+T]$/;"	t
ParIterable	scala/collection/parallel/mutable/ParIterable.scala	/^object ParIterable extends ParFactory[ParIterable] {$/;"	o
ParIterable	scala/collection/parallel/mutable/ParIterable.scala	/^trait ParIterable[T] extends scala.collection\/*.mutable*\/.GenIterable[T]$/;"	t
ParIterableLike	scala/collection/parallel/ParIterableLike.scala	/^trait ParIterableLike[+T, +Repr <: ParIterable[T], +Sequential <: Iterable[T] with IterableLike[T, Sequential]]$/;"	t
ParIterableView	scala/collection/parallel/ParIterableView.scala	/^object ParIterableView {$/;"	o
ParIterableView	scala/collection/parallel/ParIterableView.scala	/^trait ParIterableView[+T, +Coll <: Parallel, +CollSeq]$/;"	t
ParIterableViewLike	scala/collection/parallel/ParIterableViewLike.scala	/^trait ParIterableViewLike[+T,$/;"	t
ParIterator	scala/collection/parallel/immutable/package.scala	/^    class ParIterator(var i: Int = 0, val until: Int = length, elem: T = self.elem) extends SeqSplitter[T] {$/;"	c
ParMap	scala/collection/parallel/ParMap.scala	/^object ParMap extends ParMapFactory[ParMap] {$/;"	o
ParMap	scala/collection/parallel/ParMap.scala	/^trait ParMap[K, +V]$/;"	t
ParMap	scala/collection/parallel/immutable/ParMap.scala	/^object ParMap extends ParMapFactory[ParMap] {$/;"	o
ParMap	scala/collection/parallel/immutable/ParMap.scala	/^trait ParMap[K, +V]$/;"	t
ParMap	scala/collection/parallel/mutable/ParMap.scala	/^object ParMap extends ParMapFactory[ParMap] {$/;"	o
ParMap	scala/collection/parallel/mutable/ParMap.scala	/^trait ParMap[K, V]$/;"	t
ParMapFactory	scala/collection/generic/ParMapFactory.scala	/^abstract class ParMapFactory[CC[X, Y] <: ParMap[X, Y] with ParMapLike[X, Y, CC[X, Y], _]]$/;"	a
ParMapLike	scala/collection/parallel/ParMapLike.scala	/^trait ParMapLike[K,$/;"	t
ParMapLike	scala/collection/parallel/mutable/ParMapLike.scala	/^trait ParMapLike[K,$/;"	t
ParRange	scala/collection/parallel/immutable/ParRange.scala	/^class ParRange(val range: Range)$/;"	c
ParRange	scala/collection/parallel/immutable/ParRange.scala	/^object ParRange {$/;"	o
ParRangeIterator	scala/collection/parallel/immutable/ParRange.scala	/^  class ParRangeIterator(range: Range = self.range)$/;"	c
ParSeq	scala/collection/parallel/ParSeq.scala	/^object ParSeq extends ParFactory[ParSeq] {$/;"	o
ParSeq	scala/collection/parallel/ParSeq.scala	/^trait ParSeq[+T] extends GenSeq[T]$/;"	t
ParSeq	scala/collection/parallel/immutable/ParSeq.scala	/^object ParSeq extends ParFactory[ParSeq] {$/;"	o
ParSeq	scala/collection/parallel/immutable/ParSeq.scala	/^trait ParSeq[+T]$/;"	t
ParSeq	scala/collection/parallel/mutable/ParSeq.scala	/^object ParSeq extends ParFactory[ParSeq] {$/;"	o
ParSeq	scala/collection/parallel/mutable/ParSeq.scala	/^trait ParSeq[T] extends scala.collection\/*.mutable*\/.GenSeq[T] \/\/ was: scala.collection.mutable.Seq[T]$/;"	t
ParSeqLike	scala/collection/parallel/ParSeqLike.scala	/^trait ParSeqLike[+T, +Repr <: ParSeq[T], +Sequential <: Seq[T] with SeqLike[T, Sequential]]$/;"	t
ParSeqView	scala/collection/parallel/ParSeqView.scala	/^object ParSeqView {$/;"	o
ParSeqView	scala/collection/parallel/ParSeqView.scala	/^trait ParSeqView[+T, +Coll <: Parallel, +CollSeq]$/;"	t
ParSeqViewLike	scala/collection/parallel/ParSeqViewLike.scala	/^trait ParSeqViewLike[+T,$/;"	t
ParSet	scala/collection/parallel/ParSet.scala	/^object ParSet extends ParSetFactory[ParSet] {$/;"	o
ParSet	scala/collection/parallel/ParSet.scala	/^trait ParSet[T]$/;"	t
ParSet	scala/collection/parallel/immutable/ParSet.scala	/^object ParSet extends ParSetFactory[ParSet] {$/;"	o
ParSet	scala/collection/parallel/immutable/ParSet.scala	/^trait ParSet[T]$/;"	t
ParSet	scala/collection/parallel/mutable/ParSet.scala	/^object ParSet extends ParSetFactory[ParSet] {$/;"	o
ParSet	scala/collection/parallel/mutable/ParSet.scala	/^trait ParSet[T]$/;"	t
ParSetFactory	scala/collection/generic/ParSetFactory.scala	/^abstract class ParSetFactory[CC[X] <: ParSet[X] with ParSetLike[X, CC[X], _] with GenericParTemplate[X, CC]]$/;"	a
ParSetLike	scala/collection/parallel/ParSetLike.scala	/^trait ParSetLike[T,$/;"	t
ParSetLike	scala/collection/parallel/mutable/ParSetLike.scala	/^trait ParSetLike[T,$/;"	t
ParTrieMap	scala/collection/parallel/mutable/ParTrieMap.scala	/^object ParTrieMap extends ParMapFactory[ParTrieMap] {$/;"	o
ParVector	scala/collection/parallel/immutable/ParVector.scala	/^class ParVector[+T](private[this] val vector: Vector[T])$/;"	c
ParVector	scala/collection/parallel/immutable/ParVector.scala	/^object ParVector extends ParFactory[ParVector] {$/;"	o
ParVectorIterator	scala/collection/parallel/immutable/ParVector.scala	/^  class ParVectorIterator(_start: Int, _end: Int) extends VectorIterator[T](_start, _end) with SeqSplitter[T] {$/;"	c
Para	scala/xml/PrettyPrinter.scala	/^  case class Para(s: String) extends Item$/;"	r
Parallel	scala/collection/Parallel.scala	/^trait Parallel$/;"	t
Parallelizable	scala/collection/Parallelizable.scala	/^trait Parallelizable[+A, +ParRepr <: Parallel] extends Any {$/;"	t
ParameterEntityDecl	scala/xml/dtd/Decl.scala	/^case class ParameterEntityDecl(name: String, entdef: EntityDef) extends EntityDecl {$/;"	r
ParsedEntityDecl	scala/xml/dtd/Decl.scala	/^case class ParsedEntityDecl(name: String, entdef: EntityDef) extends EntityDecl {$/;"	r
Parser	scala/util/parsing/combinator/Parsers.scala	/^  abstract class Parser[+T] extends (Input => ParseResult[T]) {$/;"	a
Parser	scala/util/parsing/combinator/Parsers.scala	/^  def Parser[T](f: Input => ParseResult[T]): Parser[T]$/;"	m
Parser	scala/util/parsing/json/Parser.scala	/^class Parser extends StdTokenParsers with ImplicitConversions {$/;"	c
Parsers	scala/util/parsing/combinator/Parsers.scala	/^trait Parsers {$/;"	t
Partial	scala/collection/immutable/Range.scala	/^  class Partial[T, U](f: T => U) {$/;"	c
PartialFunction	scala/PartialFunction.scala	/^object PartialFunction {$/;"	o
PartialFunction	scala/PartialFunction.scala	/^trait PartialFunction[-A, +B] extends (A => B) { self =>$/;"	t
PartialFunction._	scala/PartialFunction.scala	/^  import PartialFunction._$/;"	i
PartialFunction._	scala/xml/dtd/ContentModel.scala	/^import PartialFunction._$/;"	i
PartialFunction._	scala/xml/dtd/ElementValidator.scala	/^import PartialFunction._$/;"	i
PartialOrdering	scala/math/PartialOrdering.scala	/^trait PartialOrdering[T] extends Equiv[T] {$/;"	t
PartialOrdering	scala/package.scala	/^  type PartialOrdering[T] = scala.math.PartialOrdering[T]$/;"	T
PartiallyOrdered	scala/math/PartiallyOrdered.scala	/^trait PartiallyOrdered[+A] {$/;"	t
PartiallyOrdered	scala/package.scala	/^  type PartiallyOrdered[T] = scala.math.PartiallyOrdered[T]$/;"	T
PartitionIterator	scala/collection/Iterator.scala	/^    class PartitionIterator(p: A => Boolean) extends AbstractIterator[A] {$/;"	c
Partner	scala/collection/Iterator.scala	/^    class Partner extends AbstractIterator[A] {$/;"	c
Patched	scala/collection/GenSeqViewLike.scala	/^  trait Patched[B >: A] extends Transformed[B] {$/;"	t
Patched	scala/collection/SeqViewLike.scala	/^  trait Patched[B >: A] extends Transformed[B] with super[GenSeqViewLike].Patched[B]$/;"	t
Patched	scala/collection/immutable/StreamViewLike.scala	/^  trait Patched[B >: A] extends super.Patched[B] with Transformed[B]$/;"	t
Patched	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Patched[U >: T] extends super.Patched[U] with Transformed[U] {$/;"	t
Patched	scala/collection/parallel/RemainsIterator.scala	/^  class Patched[U >: T](from: Int, patch: SeqSplitter[U], replaced: Int) extends SeqSplitter[U] {$/;"	c
Pattern	scala/util/matching/Regex.scala	/^   * val varPattern = """%(\\w+)""".r$/;"	v
Pdef	scala/util/automata/SubsetConstruction.scala	/^      val Pdef = nfa nextDefault P$/;"	V
Pdelta	scala/util/automata/SubsetConstruction.scala	/^      val Pdelta = new mutable.HashMap[T, immutable.BitSet]$/;"	V
PhantomReference	scala/ref/PhantomReference.scala	/^class PhantomReference[+T <: AnyRef](value: T, queue: ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	c
Pi	scala/math/package.scala	/^  val Pi = java.lang.Math.PI$/;"	V
PicklerEnv	scala/io/BytePickle.scala	/^  class PicklerEnv extends mutable.HashMap[Any, Int] {$/;"	c
PicklerState	scala/io/BytePickle.scala	/^  class PicklerState(val stream: Array[Byte], val dict: PicklerEnv)$/;"	c
Platform	scala/compat/Platform.scala	/^object Platform {$/;"	o
PointedHedgeExp	scala/util/regexp/PointedHedgeExp.scala	/^abstract class PointedHedgeExp extends Base {$/;"	a
Position	scala/io/Position.scala	/^abstract class Position {$/;"	a
Position	scala/io/Position.scala	/^object Position extends Position {$/;"	o
Position	scala/util/parsing/input/Position.scala	/^trait Position {$/;"	t
PositionType	scala/xml/parsing/MarkupParser.scala	/^  type PositionType = Int$/;"	T
Positional	scala/util/parsing/input/Positional.scala	/^trait Positional {$/;"	t
Positioner	scala/io/Source.scala	/^  class Positioner(encoder: Position) {$/;"	c
PositiveInfinity	scala/Double.scala	/^  final val PositiveInfinity = java.lang.Double.POSITIVE_INFINITY$/;"	V
PositiveInfinity	scala/Float.scala	/^  final val PositiveInfinity = java.lang.Float.POSITIVE_INFINITY$/;"	V
PreciseSplitter	scala/collection/parallel/PreciseSplitter.scala	/^trait PreciseSplitter[+T] extends Splitter[T] {$/;"	t
Predef	scala/Predef.scala	/^object Predef extends LowPriorityImplicits {$/;"	o
PrefixedAttribute	scala/xml/PrefixedAttribute.scala	/^class PrefixedAttribute($/;"	c
PrefixedAttribute	scala/xml/PrefixedAttribute.scala	/^object PrefixedAttribute {$/;"	o
Prepended	scala/collection/GenSeqViewLike.scala	/^  trait Prepended[B >: A] extends Transformed[B] {$/;"	t
Prepended	scala/collection/SeqViewLike.scala	/^  trait Prepended[B >: A] extends Transformed[B] with super[GenSeqViewLike].Prepended[B]$/;"	t
Prepended	scala/collection/immutable/StreamViewLike.scala	/^  trait Prepended[B >: A] extends super.Prepended[B] with Transformed[B]$/;"	t
Prepended	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Prepended[U >: T] extends super.Prepended[U] with Transformed[U] {$/;"	t
PrettyPrinter	scala/xml/PrettyPrinter.scala	/^class PrettyPrinter(width: Int, step: Int) {$/;"	c
Primitives	scala/Specializable.scala	/^  final val Primitives  = new Group((Byte, Short, Int, Long, Char, Float, Double, Boolean, Unit))$/;"	V
PriorityQueue	scala/collection/mutable/PriorityQueue.scala	/^class PriorityQueue[A](implicit val ord: Ordering[A])$/;"	c
PriorityQueue	scala/collection/mutable/PriorityQueue.scala	/^object PriorityQueue extends OrderedTraversableFactory[PriorityQueue] {$/;"	o
PriorityQueueProxy	scala/collection/mutable/PriorityQueueProxy.scala	/^abstract class PriorityQueueProxy[A](implicit ord: Ordering[A]) extends PriorityQueue[A]$/;"	a
ProcInstr	scala/xml/ProcInstr.scala	/^case class ProcInstr(target: String, proctext: String) extends SpecialNode$/;"	r
Process	scala/sys/process/Process.scala	/^object Process extends ProcessImpl with ProcessCreation { }$/;"	o
Process	scala/sys/process/Process.scala	/^trait Process {$/;"	t
Process._	scala/sys/process/Process.scala	/^  import Process._$/;"	i
Process._	scala/sys/process/ProcessBuilderImpl.scala	/^import Process._$/;"	i
ProcessBuilder	scala/sys/process/ProcessBuilder.scala	/^object ProcessBuilder extends ProcessBuilderImpl {$/;"	o
ProcessBuilder	scala/sys/process/ProcessBuilder.scala	/^trait ProcessBuilder extends Source with Sink {$/;"	t
ProcessBuilder._	scala/sys/process/Process.scala	/^import ProcessBuilder._$/;"	i
ProcessBuilder._	scala/sys/process/ProcessBuilder.scala	/^import ProcessBuilder._$/;"	i
ProcessCreation	scala/sys/process/Process.scala	/^trait ProcessCreation {$/;"	t
ProcessImplicits	scala/sys/process/Process.scala	/^trait ProcessImplicits {$/;"	t
ProcessLogger	scala/sys/process/ProcessLogger.scala	/^object ProcessLogger {$/;"	o
ProcessLogger	scala/sys/process/ProcessLogger.scala	/^trait ProcessLogger {$/;"	t
ProducerConsumerIterator	scala/xml/pull/XMLEventReader.scala	/^trait ProducerConsumerIterator[T >: Null] extends Iterator[T] {$/;"	t
Product	scala/Product.scala	/^trait Product extends Any with Equals {$/;"	t
Product1	scala/Product1.scala	/^object Product1 {$/;"	o
Product1	scala/Product1.scala	/^trait Product1[@specialized(Int, Long, Double) +T1] extends Any with Product {$/;"	t
Product10	scala/Product10.scala	/^object Product10 {$/;"	o
Product10	scala/Product10.scala	/^trait Product10[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10] extends Any with Product {$/;"	t
Product11	scala/Product11.scala	/^object Product11 {$/;"	o
Product11	scala/Product11.scala	/^trait Product11[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11] extends Any with Product {$/;"	t
Product12	scala/Product12.scala	/^object Product12 {$/;"	o
Product12	scala/Product12.scala	/^trait Product12[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12] extends Any with Product {$/;"	t
Product13	scala/Product13.scala	/^object Product13 {$/;"	o
Product13	scala/Product13.scala	/^trait Product13[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13] extends Any with Product {$/;"	t
Product14	scala/Product14.scala	/^object Product14 {$/;"	o
Product14	scala/Product14.scala	/^trait Product14[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14] extends Any with Product {$/;"	t
Product15	scala/Product15.scala	/^object Product15 {$/;"	o
Product15	scala/Product15.scala	/^trait Product15[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15] extends Any with Product {$/;"	t
Product16	scala/Product16.scala	/^object Product16 {$/;"	o
Product16	scala/Product16.scala	/^trait Product16[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16] extends Any with Product {$/;"	t
Product17	scala/Product17.scala	/^object Product17 {$/;"	o
Product17	scala/Product17.scala	/^trait Product17[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17] extends Any with Product {$/;"	t
Product18	scala/Product18.scala	/^object Product18 {$/;"	o
Product18	scala/Product18.scala	/^trait Product18[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18] extends Any with Product {$/;"	t
Product19	scala/Product19.scala	/^object Product19 {$/;"	o
Product19	scala/Product19.scala	/^trait Product19[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19] extends Any with Product {$/;"	t
Product2	scala/Product2.scala	/^object Product2 {$/;"	o
Product2	scala/Product2.scala	/^trait Product2[@specialized(Int, Long, Double) +T1, @specialized(Int, Long, Double) +T2] extends Any with Product {$/;"	t
Product20	scala/Product20.scala	/^object Product20 {$/;"	o
Product20	scala/Product20.scala	/^trait Product20[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20] extends Any with Product {$/;"	t
Product21	scala/Product21.scala	/^object Product21 {$/;"	o
Product21	scala/Product21.scala	/^trait Product21[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21] extends Any with Product {$/;"	t
Product22	scala/Product22.scala	/^object Product22 {$/;"	o
Product22	scala/Product22.scala	/^trait Product22[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22] extends Any with Product {$/;"	t
Product3	scala/Product3.scala	/^object Product3 {$/;"	o
Product3	scala/Product3.scala	/^trait Product3[+T1, +T2, +T3] extends Any with Product {$/;"	t
Product4	scala/Product4.scala	/^object Product4 {$/;"	o
Product4	scala/Product4.scala	/^trait Product4[+T1, +T2, +T3, +T4] extends Any with Product {$/;"	t
Product5	scala/Product5.scala	/^object Product5 {$/;"	o
Product5	scala/Product5.scala	/^trait Product5[+T1, +T2, +T3, +T4, +T5] extends Any with Product {$/;"	t
Product6	scala/Product6.scala	/^object Product6 {$/;"	o
Product6	scala/Product6.scala	/^trait Product6[+T1, +T2, +T3, +T4, +T5, +T6] extends Any with Product {$/;"	t
Product7	scala/Product7.scala	/^object Product7 {$/;"	o
Product7	scala/Product7.scala	/^trait Product7[+T1, +T2, +T3, +T4, +T5, +T6, +T7] extends Any with Product {$/;"	t
Product8	scala/Product8.scala	/^object Product8 {$/;"	o
Product8	scala/Product8.scala	/^trait Product8[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8] extends Any with Product {$/;"	t
Product9	scala/Product9.scala	/^object Product9 {$/;"	o
Product9	scala/Product9.scala	/^trait Product9[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9] extends Any with Product {$/;"	t
Promise	scala/concurrent/Promise.scala	/^object Promise {$/;"	o
Promise	scala/concurrent/Promise.scala	/^trait Promise[T] {$/;"	t
PromiseCompletingRunnable	scala/concurrent/impl/Future.scala	/^  class PromiseCompletingRunnable[T](body: => T) extends Runnable {$/;"	c
Prop	scala/sys/Prop.scala	/^object Prop {$/;"	o
Prop	scala/sys/Prop.scala	/^trait Prop[+T] {$/;"	t
Properties	scala/util/Properties.scala	/^object Properties extends PropertiesTrait {$/;"	o
Proxy	scala/Proxy.scala	/^object Proxy {$/;"	o
Proxy	scala/Proxy.scala	/^trait Proxy extends Any {$/;"	t
Proxy.Typed	scala/runtime/ScalaNumberProxy.scala	/^import Proxy.Typed$/;"	i
Pub	scala/collection/mutable/ObservableBuffer.scala	/^  type Pub <: ObservableBuffer[A]$/;"	T
Pub	scala/collection/mutable/ObservableMap.scala	/^  type Pub <: ObservableMap[A, B]$/;"	T
Pub	scala/collection/mutable/ObservableSet.scala	/^  type Pub <: ObservableSet[A]$/;"	T
Pub	scala/collection/mutable/Publisher.scala	/^  type Pub <: Publisher[Evt]$/;"	T
PublicID	scala/xml/dtd/ExternalID.scala	/^case class PublicID(publicId: String, systemId: String) extends ExternalID {$/;"	r
Publisher	scala/collection/mutable/Publisher.scala	/^trait Publisher[Evt] {$/;"	t
Q	scala/util/automata/SubsetConstruction.scala	/^        val Q = nfa.next(P, label)$/;"	V
QNode	scala/xml/QNode.scala	/^object QNode {$/;"	o
Queue	scala/collection/immutable/Queue.scala	/^class Queue[+A] protected(protected val in: List[A], protected val out: List[A])$/;"	c
Queue	scala/collection/immutable/Queue.scala	/^object Queue extends SeqFactory[Queue] {$/;"	o
Queue	scala/collection/mutable/Queue.scala	/^class Queue[A]$/;"	c
Queue	scala/collection/mutable/Queue.scala	/^object Queue extends SeqFactory[Queue] {$/;"	o
QueueProxy	scala/collection/mutable/QueueProxy.scala	/^trait QueueProxy[A] extends Queue[A] with Proxy {$/;"	t
R	scala/concurrent/duration/DurationConversions.scala	/^    type R = Deadline$/;"	T
R	scala/concurrent/duration/DurationConversions.scala	/^    type R = FiniteDuration$/;"	T
RDCSS_READ_ROOT	scala/collection/concurrent/TrieMap.scala	/^  def RDCSS_READ_ROOT(abort: Boolean = false): INode[K, V] = {$/;"	m
READ_PREV	scala/collection/concurrent/MainNode.java	/^    public MainNode<K, V> READ_PREV() {$/;"	m	class:MainNode
READ_SIZE	scala/collection/concurrent/CNodeBase.java	/^    public int READ_SIZE() {$/;"	m	class:CNodeBase
RED	scala/Console.scala	/^  final val RED        = "\\033[31m"$/;"	V
RED_B	scala/Console.scala	/^  final val RED_B      = "\\033[41m"$/;"	V
REF	scala/io/BytePickle.scala	/^  val REF = 0$/;"	V
RESET	scala/Console.scala	/^  final val RESET      = "\\033[0m"$/;"	V
RESTART	scala/collection/concurrent/INodeBase.java	/^    public static final Object RESTART = new Object();$/;"	f	class:INodeBase
REVERSED	scala/Console.scala	/^  final val REVERSED   = "\\033[7m"$/;"	V
RPAREN	scala/xml/dtd/Tokens.scala	/^  final val RPAREN       = 4$/;"	V
Random	scala/util/Random.scala	/^class Random(val self: java.util.Random) {$/;"	c
Random	scala/util/Random.scala	/^object Random extends Random {$/;"	o
Range	scala/collection/immutable/Range.scala	/^class Range(val start: Int, val end: Int, val step: Int)$/;"	c
Range	scala/collection/immutable/Range.scala	/^object Range {$/;"	o
Range	scala/package.scala	/^  type Range = scala.collection.immutable.Range$/;"	T
Range	scala/package.scala	/^  val Range = scala.collection.immutable.Range$/;"	V
RangeUtils	scala/collection/immutable/package.scala	/^  trait RangeUtils[+Repr <: RangeUtils[Repr]] {$/;"	t
RangedProxy	scala/runtime/ScalaNumberProxy.scala	/^trait RangedProxy[T] extends Any with Typed[T] {$/;"	t
Reader	scala/util/parsing/input/Reader.scala	/^abstract class Reader[+T] {$/;"	a
RedBlack	scala/collection/immutable/RedBlack.scala	/^abstract class RedBlack[A] extends Serializable {$/;"	a
RedBlackTree	scala/collection/immutable/RedBlackTree.scala	/^object RedBlackTree {$/;"	o
RedTree	scala/collection/immutable/RedBlack.scala	/^  case class RedTree[+B](override val key: A,$/;"	r
RedTree	scala/collection/immutable/RedBlackTree.scala	/^  object RedTree {$/;"	o
Ref	scala/io/BytePickle.scala	/^  case class Ref() extends RefDef$/;"	r
RefDef	scala/io/BytePickle.scala	/^  abstract class RefDef$/;"	a
Reference	scala/ref/Reference.scala	/^trait Reference[+T <: AnyRef] extends Function0[T] {$/;"	t
ReferenceQueue	scala/ref/ReferenceQueue.scala	/^class ReferenceQueue[+T <: AnyRef] {$/;"	c
ReferenceWrapper	scala/ref/ReferenceWrapper.scala	/^trait ReferenceWrapper[+T <: AnyRef] extends Reference[T] with Proxy {$/;"	t
RegExp	scala/util/regexp/Base.scala	/^  abstract class RegExp {$/;"	a
Regex	scala/util/matching/Regex.scala	/^class Regex(regex: String, groupNames: String*) extends Serializable {$/;"	c
Regex	scala/util/matching/Regex.scala	/^object Regex {$/;"	o
Regex._	scala/util/matching/Regex.scala	/^  import Regex._$/;"	i
RegexParsers	scala/util/parsing/combinator/RegexParsers.scala	/^trait RegexParsers extends Parsers {$/;"	t
RegexTest	scala/util/parsing/combinator/testing/RegexTest.scala	/^object RegexTest extends RegexParsers {$/;"	o
RelaxedPosition	scala/io/Source.scala	/^  object RelaxedPosition extends Position {$/;"	o
RelaxedPositioner	scala/io/Source.scala	/^  object RelaxedPositioner extends Positioner(RelaxedPosition) { }$/;"	o
Remove	scala/collection/script/Message.scala	/^case class Remove[+A](location: Location, elem: A) extends Message[A] {$/;"	r
Reset	scala/collection/script/Message.scala	/^case class Reset[+A]() extends Message[A]$/;"	r
ResizableArray	scala/collection/mutable/ResizableArray.scala	/^object ResizableArray extends SeqFactory[ResizableArray] {$/;"	o
ResizableArray	scala/collection/mutable/ResizableArray.scala	/^trait ResizableArray[A] extends IndexedSeq[A]$/;"	t
ResizableParArrayCombiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^object ResizableParArrayCombiner {$/;"	o
ResizableParArrayCombiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^trait ResizableParArrayCombiner[T] extends LazyCombiner[T, ParArray[T], ExposedArrayBuffer[T]] {$/;"	t
Responder	scala/Responder.scala	/^abstract class Responder[+A] extends Serializable {$/;"	a
Responder	scala/Responder.scala	/^object Responder {$/;"	o
Result	scala/collection/parallel/Tasks.scala	/^  type Result = R$/;"	T
ResultWithoutStep	scala/runtime/RichInt.scala	/^  type ResultWithoutStep = Range$/;"	T
ResultWithoutStep	scala/runtime/ScalaNumberProxy.scala	/^  type ResultWithoutStep = NumericRange[T]$/;"	T
ResultWithoutStep	scala/runtime/ScalaNumberProxy.scala	/^  type ResultWithoutStep = Range.Partial[T, NumericRange[T]]$/;"	T
ReturnAndDo	scala/util/parsing/ast/Binders.scala	/^  trait ReturnAndDo[T]{$/;"	t
ReusableCBF	scala/collection/IndexedSeq.scala	/^  override lazy val ReusableCBF: GenericCanBuildFrom[Nothing] = new GenericCanBuildFrom[Nothing] {$/;"	V
ReusableCBF	scala/collection/generic/GenTraversableFactory.scala	/^  lazy val ReusableCBF: GenericCanBuildFrom[Nothing] = new ReusableCBF$/;"	V
ReusableCBF	scala/collection/immutable/IndexedSeq.scala	/^  override lazy val ReusableCBF  = $/;"	V
ReusableCBF	scala/collection/immutable/Vector.scala	/^  override lazy val ReusableCBF  = $/;"	V
Reversed	scala/collection/GenSeqViewLike.scala	/^  trait Reversed extends Transformed[A] {$/;"	t
Reversed	scala/collection/SeqViewLike.scala	/^  trait Reversed extends Transformed[A] with super[GenSeqViewLike].Reversed$/;"	t
Reversed	scala/collection/immutable/StreamViewLike.scala	/^  trait Reversed extends super.Reversed with Transformed[A]$/;"	t
Reversed	scala/collection/mutable/IndexedSeqView.scala	/^  trait Reversed extends super.Reversed with Transformed[A] {$/;"	t
Reversed	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Reversed extends super.Reversed with Transformed[T] {$/;"	t
RevertibleHistory	scala/collection/mutable/RevertibleHistory.scala	/^class RevertibleHistory[Evt <: Undoable, Pub] extends History[Evt, Pub] with Undoable with Serializable {$/;"	c
RewriteRule	scala/xml/transform/RewriteRule.scala	/^abstract class RewriteRule extends BasicTransformer {$/;"	a
Right	scala/package.scala	/^  type Right[+A, +B] = scala.util.Right[A, B]$/;"	T
Right	scala/package.scala	/^  val Right = scala.util.Right$/;"	V
RoundingMode	scala/math/BigDecimal.scala	/^    type RoundingMode = Value$/;"	T
RoundingMode	scala/math/BigDecimal.scala	/^  object RoundingMode extends Enumeration {$/;"	o
RuleTransformer	scala/xml/transform/RuleTransformer.scala	/^class RuleTransformer(rules: RewriteRule*) extends BasicTransformer {$/;"	c
RuntimeException	scala/package.scala	/^  type RuntimeException                = java.lang.RuntimeException$/;"	T
S	scala/xml/dtd/Tokens.scala	/^  final val S            = 13$/;"	V
SAXException	scala/xml/package.scala	/^  type SAXException       = org.xml.sax.SAXException$/;"	T
SAXParseException	scala/xml/package.scala	/^  type SAXParseException  = org.xml.sax.SAXParseException$/;"	T
SAXParser	scala/xml/package.scala	/^  type SAXParser          = javax.xml.parsers.SAXParser$/;"	T
SECONDS	scala/concurrent/duration/package.scala	/^  final val SECONDS      = java.util.concurrent.TimeUnit.SECONDS$/;"	V
SEVERE	scala/annotation/elidable.scala	/^  final val SEVERE  = 1000          \/\/ Level.SEVERE.intValue()$/;"	V
SHORT	scala/runtime/BoxesRunTime.java	/^    private static final int CHAR = 0, BYTE = 1, SHORT = 2, INT = 3, LONG = 4, FLOAT = 5, DOUBLE = 6, OTHER = 7;$/;"	f	class:BoxesRunTime	file:
SPU	scala/io/BytePickle.scala	/^  abstract class SPU[T] {$/;"	a
SQRT2	scala/collection/parallel/package.scala	/^  val SQRT2 = math.sqrt(2)$/;"	V
SSCTask	scala/collection/parallel/ParIterableLike.scala	/^  type SSCTask[R, Tp] = StrictSplitterCheckTask[R, Tp]$/;"	T
STAR	scala/xml/dtd/Tokens.scala	/^  final val STAR         = 6$/;"	V
SU	scala/collection/immutable/StringLike.scala	/^  private final val SU: Char = 0x1A$/;"	V
SU	scala/xml/Utility.scala	/^  final val SU = '\\u001A'$/;"	V
ScalaBeanInfo	scala/beans/ScalaBeanInfo.scala	/^abstract class ScalaBeanInfo(clazz: java.lang.Class[_],$/;"	a
ScalaBeanInfo	scala/reflect/package.scala	/^  type ScalaBeanInfo = scala.beans.ScalaBeanInfo$/;"	T
ScalaCompilerVersion	scala/util/Properties.scala	/^  val ScalaCompilerVersion = new AttributeName("Scala-Compiler-Version")$/;"	V
ScalaLongSignature	scala/reflect/ScalaLongSignature.java	/^public @interface ScalaLongSignature {$/;"	i
ScalaNumber	scala/math/ScalaNumber.java	/^public abstract class ScalaNumber extends java.lang.Number {$/;"	c
ScalaNumberProxy	scala/runtime/ScalaNumberProxy.scala	/^trait ScalaNumberProxy[T] extends Any with ScalaNumericAnyConversions with Typed[T] with OrderedProxy[T] {$/;"	t
ScalaNumericAnyConversions	scala/math/ScalaNumericConversions.scala	/^trait ScalaNumericAnyConversions extends Any {$/;"	t
ScalaNumericConversions	scala/math/ScalaNumericConversions.scala	/^trait ScalaNumericConversions extends ScalaNumber with ScalaNumericAnyConversions {$/;"	t
ScalaObject	scala/ScalaObject.scala	/^trait ScalaObject$/;"	t
ScalaReflectionException	scala/reflect/package.scala	/^case class ScalaReflectionException(msg: String) extends Exception(msg)$/;"	r
ScalaRunTime	scala/runtime/ScalaRunTime.scala	/^object ScalaRunTime {$/;"	o
ScalaSignature	scala/reflect/ScalaSignature.java	/^public @interface ScalaSignature {$/;"	i
ScalaWholeNumberProxy	scala/runtime/ScalaNumberProxy.scala	/^trait ScalaWholeNumberProxy[T] extends Any with ScalaNumberProxy[T] {$/;"	t
ScanToArray	scala/collection/parallel/mutable/ParArray.scala	/^  class ScanToArray[U >: T](tree: ScanTree[U], z: U, op: (U, U) => U, targetarr: Array[Any])$/;"	c
Scanner	scala/util/parsing/combinator/lexical/Scanners.scala	/^  class Scanner(in: Reader[Char]) extends Reader[Token] {$/;"	c
Scanner	scala/xml/dtd/Scanner.scala	/^class Scanner extends Tokens with parsing.TokenTests {$/;"	c
Scanners	scala/util/parsing/combinator/lexical/Scanners.scala	/^trait Scanners extends Parsers {$/;"	t
Scope	scala/util/parsing/ast/Binders.scala	/^  class Scope[binderType <: NameElement] extends AbstractIterable[binderType] with Iterable[binderType] {$/;"	c
Script	scala/collection/script/Message.scala	/^class Script[A] extends ArrayBuffer[Message[A]] with Message[A] {$/;"	c
Scriptable	scala/collection/script/Scriptable.scala	/^trait Scriptable[A] {$/;"	t
Seq	scala/collection/Seq.scala	/^object Seq extends SeqFactory[Seq] {$/;"	o
Seq	scala/collection/Seq.scala	/^trait Seq[+A] extends PartialFunction[Int, A]$/;"	t
Seq	scala/collection/immutable/Seq.scala	/^object Seq extends SeqFactory[Seq] {$/;"	o
Seq	scala/collection/immutable/Seq.scala	/^trait Seq[+A] extends Iterable[A]$/;"	t
Seq	scala/collection/mutable/Seq.scala	/^object Seq extends SeqFactory[Seq] {$/;"	o
Seq	scala/collection/mutable/Seq.scala	/^trait Seq[A] extends Iterable[A]$/;"	t
Seq	scala/package.scala	/^  type Seq[+A] = scala.collection.Seq[A]$/;"	T
Seq	scala/package.scala	/^  val Seq = scala.collection.Seq$/;"	V
Seq.fill	scala/collection/SeqViewLike.scala	/^import Seq.fill$/;"	i
SeqFactory	scala/collection/generic/SeqFactory.scala	/^abstract class SeqFactory[CC[X] <: Seq[X] with GenericTraversableTemplate[X, CC]]$/;"	a
SeqForwarder	scala/collection/generic/SeqForwarder.scala	/^trait SeqForwarder[+A] extends Seq[A] with IterableForwarder[A] {$/;"	t
SeqLike	scala/collection/SeqLike.scala	/^object SeqLike {$/;"	o
SeqLike	scala/collection/SeqLike.scala	/^trait SeqLike[+A, +Repr] extends Any with IterableLike[A, Repr] with GenSeqLike[A, Repr] with Parallelizable[A, ParSeq[A]] { self =>$/;"	t
SeqLike	scala/collection/mutable/SeqLike.scala	/^trait SeqLike[A, +This <: SeqLike[A, This] with Seq[A]]$/;"	t
SeqProxy	scala/collection/SeqProxy.scala	/^trait SeqProxy[+A] extends Seq[A] with SeqProxyLike[A, Seq[A]]$/;"	t
SeqProxyLike	scala/collection/SeqProxyLike.scala	/^trait SeqProxyLike[+A, +Repr <: SeqLike[A, Repr] with Seq[A]] extends SeqLike[A, Repr] with IterableProxyLike[A, Repr] {$/;"	t
SeqSplitter	scala/collection/parallel/RemainsIterator.scala	/^trait SeqSplitter[+T]$/;"	t
SeqView	scala/collection/SeqView.scala	/^object SeqView {$/;"	o
SeqView	scala/collection/SeqView.scala	/^trait SeqView[+A, +Coll] extends SeqViewLike[A, Coll, SeqView[A, Coll]] with GenSeqView[A, Coll]$/;"	t
SeqViewLike	scala/collection/SeqViewLike.scala	/^trait SeqViewLike[+A,$/;"	t
SeqWrapper	scala/collection/JavaConversions.scala	/^  @deprecated("Use a member of scala.collection.convert.Wrappers", "2.10.0") val SeqWrapper                   = Wrappers.SeqWrapper$/;"	V
SeqWrapper	scala/collection/convert/Wrappers.scala	/^  case class SeqWrapper[A](underlying: Seq[A]) extends ju.AbstractList[A] with IterableWrapperTrait[A] {$/;"	r
Sequ	scala/util/regexp/Base.scala	/^  class Sequ private (val rs: _regexpT*) extends RegExp {$/;"	c
Sequ	scala/util/regexp/Base.scala	/^  object Sequ {$/;"	o
SerialVersionUID	scala/SerialVersionUID.scala	/^class SerialVersionUID(uid: Long) extends scala.annotation.StaticAnnotation$/;"	c
SerialVersionUID	scala/package.scala	/^  type SerialVersionUID = annotation.SerialVersionUID$/;"	T
Serializable	scala/Serializable.scala	/^trait Serializable extends Any with java.io.Serializable$/;"	t
Set	scala/Predef.scala	/^  type Set[A]     = immutable.Set[A]$/;"	T
Set	scala/Predef.scala	/^  val Set         = immutable.Set$/;"	V
Set	scala/collection/Set.scala	/^object Set extends SetFactory[Set] {$/;"	o
Set	scala/collection/Set.scala	/^trait Set[A] extends (A => Boolean)$/;"	t
Set	scala/collection/immutable/Set.scala	/^object Set extends ImmutableSetFactory[Set] {$/;"	o
Set	scala/collection/immutable/Set.scala	/^trait Set[A] extends Iterable[A]$/;"	t
Set	scala/collection/mutable/Set.scala	/^object Set extends MutableSetFactory[Set] {$/;"	o
Set	scala/collection/mutable/Set.scala	/^trait Set[A] extends Iterable[A]$/;"	t
Set	scala/util/parsing/combinator/PackratParsers.scala	/^          h.evalSet = h.evalSet.filterNot(_==p)$/;"	V
Set	scala/util/parsing/combinator/PackratParsers.scala	/^    head.evalSet = head.involvedSet$/;"	V
Set	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class Head(var headParser: Parser[_], var involvedSet: List[Parser[_]], var evalSet: List[Parser[_]]){$/;"	V
Set1	scala/collection/immutable/Set.scala	/^  class Set1[A] private[collection] (elem1: A) extends AbstractSet[A] with Set[A] with Serializable {$/;"	c
Set2	scala/collection/immutable/Set.scala	/^  class Set2[A] private[collection] (elem1: A, elem2: A) extends AbstractSet[A] with Set[A] with Serializable {$/;"	c
Set3	scala/collection/immutable/Set.scala	/^  class Set3[A] private[collection] (elem1: A, elem2: A, elem3: A) extends AbstractSet[A] with Set[A] with Serializable {$/;"	c
Set4	scala/collection/immutable/Set.scala	/^  class Set4[A] private[collection] (elem1: A, elem2: A, elem3: A, elem4: A) extends AbstractSet[A] with Set[A] with Serializable {$/;"	c
SetBuilder	scala/collection/mutable/SetBuilder.scala	/^class SetBuilder[A, Coll <: scala.collection.Set[A] with scala.collection.SetLike[A, Coll]](empty: Coll) extends Builder[A, Coll] {$/;"	c
SetFactory	scala/collection/generic/SetFactory.scala	/^abstract class SetFactory[CC[X] <: Set[X] with SetLike[X, CC[X]]]$/;"	a
SetLike	scala/collection/SetLike.scala	/^trait SetLike[A, +This <: SetLike[A, This] with Set[A]]$/;"	t
SetLike	scala/collection/mutable/SetLike.scala	/^trait SetLike[A, +This <: SetLike[A, This] with Set[A]]$/;"	t
SetProxy	scala/collection/SetProxy.scala	/^trait SetProxy[A] extends Set[A] with SetProxyLike[A, Set[A]]$/;"	t
SetProxy	scala/collection/immutable/SetProxy.scala	/^trait SetProxy[A] extends Set[A] with SetProxyLike[A, Set[A]] {$/;"	t
SetProxy	scala/collection/mutable/SetProxy.scala	/^trait SetProxy[A] extends Set[A] with SetProxyLike[A, Set[A]] {$/;"	t
SetProxyLike	scala/collection/SetProxyLike.scala	/^trait SetProxyLike[A, +This <: SetLike[A, This] with Set[A]] extends SetLike[A, This] with IterableProxyLike[A, This] {$/;"	t
SetStorage	scala/xml/persistent/SetStorage.scala	/^class SetStorage(file: File) extends CachedFileStorage(file) {$/;"	c
SetWrapper	scala/collection/convert/Wrappers.scala	/^  class SetWrapper[A](underlying: Set[A]) extends ju.AbstractSet[A] {$/;"	c
Short	scala/Short.scala	/^object Short extends AnyValCompanion {$/;"	o
Short	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Short   = ManifestFactory.Short$/;"	V
Short	scala/reflect/ClassTag.scala	/^  val Short   : ClassTag[scala.Short]      = Manifest.Short$/;"	V
Short	scala/reflect/Manifest.scala	/^  val Short: AnyValManifest[Short] = new AnyValManifest[scala.Short]("Short") {$/;"	V
ShortIsIntegral	scala/math/Numeric.scala	/^  trait ShortIsIntegral extends Integral[Short] {$/;"	t
ShortOrdering	scala/math/Ordering.scala	/^  trait ShortOrdering extends Ordering[Short] {$/;"	t
ShortRef	scala/runtime/ShortRef.java	/^    public ShortRef(short elem) { this.elem = elem; }$/;"	m	class:ShortRef
ShortRef	scala/runtime/ShortRef.java	/^public class ShortRef implements java.io.Serializable {$/;"	c
Show	scala/testing/Show.scala	/^trait Show {$/;"	t
Shrinkable	scala/collection/generic/Shrinkable.scala	/^trait Shrinkable[-A] {$/;"	t
ShutdownHookThread	scala/sys/ShutdownHookThread.scala	/^class ShutdownHookThread private (name: String) extends Thread(name) {$/;"	c
ShutdownHookThread	scala/sys/ShutdownHookThread.scala	/^object ShutdownHookThread {$/;"	o
Signalling	scala/collection/generic/Signalling.scala	/^trait Signalling {$/;"	t
SignallingOps	scala/collection/parallel/ParIterableLike.scala	/^  trait SignallingOps[PI <: DelegatedSignalling] {$/;"	t
Sink	scala/sys/process/ProcessBuilder.scala	/^  trait Sink {$/;"	t
Size	scala/collection/parallel/mutable/ParTrieMap.scala	/^  class Size(offset: Int, howmany: Int, array: Array[BasicNode]) extends Task[Int, Size] {$/;"	c
Sizing	scala/collection/generic/Sizing.scala	/^trait Sizing {$/;"	t
SliceInterval	scala/collection/generic/SliceInterval.scala	/^object SliceInterval {$/;"	o
Sliced	scala/collection/GenIterableViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[A] {$/;"	t
Sliced	scala/collection/GenSeqViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[A] {$/;"	t
Sliced	scala/collection/GenTraversableViewLike.scala	/^  trait Sliced extends Transformed[A] {$/;"	t
Sliced	scala/collection/IterableViewLike.scala	/^  trait Sliced extends super[TraversableViewLike].Sliced with super[GenIterableViewLike].Sliced with Transformed[A]$/;"	t
Sliced	scala/collection/SeqViewLike.scala	/^  trait Sliced extends super[IterableViewLike].Sliced with super[GenSeqViewLike].Sliced with Transformed[A]$/;"	t
Sliced	scala/collection/TraversableViewLike.scala	/^  trait Sliced extends Transformed[A] with super.Sliced$/;"	t
Sliced	scala/collection/immutable/StreamViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[A]$/;"	t
Sliced	scala/collection/mutable/IndexedSeqView.scala	/^  trait Sliced extends super.Sliced with Transformed[A] {$/;"	t
Sliced	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Sliced extends super.Sliced with Transformed[T] {$/;"	t
Sliced	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Sliced extends super[GenSeqViewLike].Sliced with super[ParIterableViewLike].Sliced with Transformed[T] {$/;"	t
SoftReference	scala/ref/SoftReference.scala	/^class SoftReference[+T <: AnyRef](value : T, queue : ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	c
Sorted	scala/collection/generic/Sorted.scala	/^trait Sorted[K, +This <: Sorted[K, This]] {$/;"	t
SortedMap	scala/collection/SortedMap.scala	/^object SortedMap extends SortedMapFactory[SortedMap] {$/;"	o
SortedMap	scala/collection/SortedMap.scala	/^trait SortedMap[A, +B] extends Map[A, B] with SortedMapLike[A, B, SortedMap[A, B]] {$/;"	t
SortedMap	scala/collection/immutable/SortedMap.scala	/^object SortedMap extends ImmutableSortedMapFactory[SortedMap] {$/;"	o
SortedMap	scala/collection/immutable/SortedMap.scala	/^trait SortedMap[A, +B] extends Map[A, B]$/;"	t
SortedMapCanBuildFrom	scala/collection/generic/SortedMapFactory.scala	/^  class SortedMapCanBuildFrom[A, B](implicit ord: Ordering[A]) extends CanBuildFrom[Coll, (A, B), CC[A, B]] {$/;"	c
SortedMapFactory	scala/collection/generic/SortedMapFactory.scala	/^abstract class SortedMapFactory[CC[A, B] <: SortedMap[A, B] with SortedMapLike[A, B, CC[A, B]]] {$/;"	a
SortedMapLike	scala/collection/SortedMapLike.scala	/^trait SortedMapLike[A, +B, +This <: SortedMapLike[A, B, This] with SortedMap[A, B]] extends Sorted[A, This] with MapLike[A, B, This] {$/;"	t
SortedSet	scala/collection/SortedSet.scala	/^object SortedSet extends SortedSetFactory[SortedSet] {$/;"	o
SortedSet	scala/collection/SortedSet.scala	/^trait SortedSet[A] extends Set[A] with SortedSetLike[A, SortedSet[A]] {$/;"	t
SortedSet	scala/collection/immutable/SortedSet.scala	/^object SortedSet extends ImmutableSortedSetFactory[SortedSet] {$/;"	o
SortedSet	scala/collection/immutable/SortedSet.scala	/^trait SortedSet[A] extends Set[A] with scala.collection.SortedSet[A] with SortedSetLike[A, SortedSet[A]] {$/;"	t
SortedSet	scala/collection/mutable/SortedSet.scala	/^object SortedSet extends MutableSortedSetFactory[SortedSet] {$/;"	o
SortedSet	scala/collection/mutable/SortedSet.scala	/^trait SortedSet[A] extends scala.collection.SortedSet[A] with scala.collection.SortedSetLike[A,SortedSet[A]]$/;"	t
SortedSetCanBuildFrom	scala/collection/generic/SortedSetFactory.scala	/^  class SortedSetCanBuildFrom[A](implicit ord: Ordering[A]) extends CanBuildFrom[Coll, A, CC[A]] {$/;"	c
SortedSetFactory	scala/collection/generic/SortedSetFactory.scala	/^abstract class SortedSetFactory[CC[A] <: SortedSet[A] with SortedSetLike[A, CC[A]]] {$/;"	a
SortedSetLike	scala/collection/SortedSetLike.scala	/^trait SortedSetLike[A, +This <: SortedSet[A] with SortedSetLike[A, This]] extends Sorted[A, This] with SetLike[A, This] {$/;"	t
Sorting	scala/util/Sorting.scala	/^object Sorting {$/;"	o
Source	scala/io/Source.scala	/^abstract class Source extends Iterator[Char] {$/;"	a
Source	scala/io/Source.scala	/^object Source {$/;"	o
Source	scala/sys/process/ProcessBuilder.scala	/^  trait Source {$/;"	t
Source	scala/xml/XML.scala	/^object Source {$/;"	o
Source.DefaultBufSize	scala/io/BufferedSource.scala	/^import Source.DefaultBufSize$/;"	i
Source._	scala/xml/XML.scala	/^import Source._$/;"	i
SpecialNode	scala/xml/SpecialNode.scala	/^abstract class SpecialNode extends Node with pull.XMLEvent {$/;"	a
Specializable	scala/Specializable.scala	/^object Specializable {$/;"	o
Specializable	scala/Specializable.scala	/^trait Specializable extends SpecializableCompanion$/;"	t
Specializable._	scala/specialized.scala	/^import Specializable._$/;"	i
SpecializedGroup	scala/Specializable.scala	/^  trait SpecializedGroup { }$/;"	t
Splitter	scala/collection/parallel/Splitter.scala	/^object Splitter {$/;"	o
Splitter	scala/collection/parallel/Splitter.scala	/^trait Splitter[+T] extends Iterator[T] {$/;"	t
Stack	scala/collection/immutable/Stack.scala	/^class Stack[+A] protected (protected val elems: List[A])$/;"	c
Stack	scala/collection/immutable/Stack.scala	/^object Stack extends SeqFactory[Stack] {$/;"	o
Stack	scala/collection/mutable/Stack.scala	/^class Stack[A] private (var elems: List[A])$/;"	c
Stack	scala/collection/mutable/Stack.scala	/^object Stack extends SeqFactory[Stack] {$/;"	o
StackBuilder	scala/collection/mutable/Stack.scala	/^  class StackBuilder[A] extends Builder[A, Stack[A]] {$/;"	c
StackOverflowError	scala/compat/Platform.scala	/^  type StackOverflowError = java.lang.StackOverflowError$/;"	T
StackProxy	scala/collection/mutable/StackProxy.scala	/^trait StackProxy[A] extends Stack[A] with Proxy {$/;"	t
StandardTokenParsers	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^class StandardTokenParsers extends StdTokenParsers {$/;"	c
Star	scala/util/regexp/Base.scala	/^  case class Star(r: _regexpT) extends RegExp {$/;"	r
StaticAnnotation	scala/annotation/StaticAnnotation.scala	/^trait StaticAnnotation extends Annotation$/;"	t
Statics	scala/runtime/Statics.java	/^public final class Statics {$/;"	c
StdLexical	scala/util/parsing/combinator/lexical/StdLexical.scala	/^class StdLexical extends Lexical with StdTokens {$/;"	c
StdTokenParsers	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^trait StdTokenParsers extends TokenParsers {$/;"	t
StdTokens	scala/util/parsing/combinator/token/StdTokens.scala	/^trait StdTokens extends Tokens {$/;"	t
StopException	scala/runtime/WorksheetSupport.scala	/^class StopException extends Exception$/;"	c
Str	scala/util/parsing/combinator/testing/RegexTest.scala	/^case class Str(s: String)$/;"	r
Stream	scala/collection/immutable/Stream.scala	/^abstract class Stream[+A] extends AbstractSeq[A]$/;"	a
Stream	scala/collection/immutable/Stream.scala	/^object Stream extends SeqFactory[Stream] {$/;"	o
Stream	scala/package.scala	/^  type Stream[+A] = scala.collection.immutable.Stream[A]$/;"	T
Stream	scala/package.scala	/^  val Stream = scala.collection.immutable.Stream$/;"	V
Stream.cons	scala/collection/immutable/Stream.scala	/^import Stream.cons$/;"	i
StreamBuilder	scala/collection/immutable/Stream.scala	/^  class StreamBuilder[A] extends scala.collection.mutable.LazyBuilder[A, Stream[A]] {$/;"	c
StreamCanBuildFrom	scala/collection/immutable/Stream.scala	/^  class StreamCanBuildFrom[A] extends GenericCanBuildFrom[A]$/;"	c
StreamReader	scala/util/parsing/input/StreamReader.scala	/^object StreamReader {$/;"	o
StreamReader._	scala/util/parsing/input/StreamReader.scala	/^  import StreamReader._$/;"	i
StreamView	scala/collection/immutable/StreamView.scala	/^trait StreamView[+A, +Coll] extends StreamViewLike[A, Coll, StreamView[A, Coll]] { }$/;"	t
StreamViewLike	scala/collection/immutable/StreamViewLike.scala	/^trait StreamViewLike[+A,$/;"	t
String	scala/Predef.scala	/^  type String        = java.lang.String$/;"	T
StringBuilder	scala/collection/mutable/StringBuilder.scala	/^object StringBuilder {$/;"	o
StringBuilder	scala/package.scala	/^  type StringBuilder = scala.collection.mutable.StringBuilder$/;"	T
StringBuilder	scala/package.scala	/^  val StringBuilder = scala.collection.mutable.StringBuilder$/;"	V
StringCanBuildFrom	scala/Predef.scala	/^  implicit val StringCanBuildFrom: CanBuildFrom[String, Char, String] = new CanBuildFrom[String, Char, String] {$/;"	V
StringContext	scala/StringContext.scala	/^case class StringContext(parts: String*) {$/;"	r
StringContext	scala/StringContext.scala	/^object StringContext {$/;"	o
StringContext._	scala/StringContext.scala	/^  import StringContext._$/;"	i
StringIndexOutOfBoundsException	scala/package.scala	/^  type StringIndexOutOfBoundsException = java.lang.StringIndexOutOfBoundsException$/;"	T
StringLike	scala/collection/immutable/StringLike.scala	/^object StringLike {$/;"	o
StringLike	scala/collection/immutable/StringLike.scala	/^trait StringLike[+Repr] extends Any with scala.collection.IndexedSeqOptimized[Char, Repr] with Ordered[String] {$/;"	t
StringLike._	scala/collection/immutable/StringLike.scala	/^import StringLike._$/;"	i
StringLit	scala/util/parsing/combinator/token/StdTokens.scala	/^  case class StringLit(chars: String) extends Token {$/;"	r
StringOrdering	scala/math/Ordering.scala	/^  trait StringOrdering extends Ordering[String] {$/;"	t
Sub	scala/collection/mutable/Publisher.scala	/^  type Sub = Subscriber[Evt, Pub]$/;"	T
Subscriber	scala/collection/mutable/Subscriber.scala	/^trait Subscriber[-Evt, -Pub] {$/;"	t
SubsetConstruction	scala/util/automata/SubsetConstruction.scala	/^class SubsetConstruction[T <: AnyRef](val nfa: NondetWordAutom[T]) {$/;"	c
Subtractable	scala/collection/generic/Subtractable.scala	/^trait Subtractable[A, +Repr <: Subtractable[A, Repr]] { self =>$/;"	t
Success	scala/util/parsing/combinator/Parsers.scala	/^  case class Success[+T](result: T, override val next: Input) extends ParseResult[T] {$/;"	r
SuperParIterator	scala/collection/parallel/ParSeqLike.scala	/^  type SuperParIterator = IterableSplitter[T]$/;"	T
Symbol	scala/Symbol.scala	/^object Symbol extends UniquenessCache[String, Symbol] {$/;"	o
SyncChannel	scala/concurrent/SyncChannel.scala	/^class SyncChannel[A] {$/;"	c
SyncVar	scala/concurrent/SyncVar.scala	/^class SyncVar[A] {$/;"	c
SyncVar	scala/sys/process/package.scala	/^      type SyncVar[T]      = scala.concurrent.SyncVar[T]$/;"	T
SynchronizedBuffer	scala/collection/mutable/SynchronizedBuffer.scala	/^trait SynchronizedBuffer[A] extends Buffer[A] {$/;"	t
SynchronizedMap	scala/collection/mutable/SynchronizedMap.scala	/^trait SynchronizedMap[A, B] extends Map[A, B] {$/;"	t
SynchronizedPriorityQueue	scala/collection/mutable/SynchronizedPriorityQueue.scala	/^class SynchronizedPriorityQueue[A](implicit ord: Ordering[A]) extends PriorityQueue[A] {$/;"	c
SynchronizedQueue	scala/collection/mutable/SynchronizedQueue.scala	/^class SynchronizedQueue[A] extends Queue[A] {$/;"	c
SynchronizedSet	scala/collection/mutable/SynchronizedSet.scala	/^trait SynchronizedSet[A] extends Set[A] {$/;"	t
SynchronizedStack	scala/collection/mutable/SynchronizedStack.scala	/^class SynchronizedStack[A] extends Stack[A] {$/;"	c
SyntaxError	scala/util/regexp/SyntaxError.scala	/^class SyntaxError(e: String) extends RuntimeException(e)$/;"	c
SystemID	scala/xml/dtd/ExternalID.scala	/^case class SystemID(systemId: String) extends ExternalID {$/;"	r
SystemProperties	scala/sys/SystemProperties.scala	/^class SystemProperties$/;"	c
SystemProperties	scala/sys/SystemProperties.scala	/^object SystemProperties {$/;"	o
T	scala/collection/SeqLike.scala	/^        val T = kmpJumpTable(Wopt, n1-n0)$/;"	V
TOKEN_PCDATA	scala/xml/dtd/Tokens.scala	/^  final val TOKEN_PCDATA = 0$/;"	V
TYPE	scala/runtime/BoxedUnit.java	/^    public final static Class<Void> TYPE = java.lang.Void.TYPE;$/;"	f	class:BoxedUnit
Tag	scala/runtime/ScalaRunTime.scala	/^    classTag[T].runtimeClass.asInstanceOf[jClass[T]]$/;"	c
TaggedDelegatedContext	scala/collection/generic/Signalling.scala	/^class TaggedDelegatedContext(deleg: Signalling, override val tag: Int) extends DelegatedContext(deleg)$/;"	c
TailCalls	scala/util/control/TailCalls.scala	/^object TailCalls {$/;"	o
TailRec	scala/util/control/TailCalls.scala	/^  abstract class TailRec[+A] {$/;"	a
Taken	scala/collection/parallel/RemainsIterator.scala	/^  class Taken(taken: Int) extends IterableSplitter[T] {$/;"	c
Taken	scala/collection/parallel/RemainsIterator.scala	/^  class Taken(tk: Int) extends super.Taken(tk) with SeqSplitter[T] {$/;"	c
TakenWhile	scala/collection/GenIterableViewLike.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A] {$/;"	t
TakenWhile	scala/collection/GenSeqViewLike.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A] {$/;"	t
TakenWhile	scala/collection/GenTraversableViewLike.scala	/^  trait TakenWhile extends Transformed[A] {$/;"	t
TakenWhile	scala/collection/IterableViewLike.scala	/^  trait TakenWhile extends super[TraversableViewLike].TakenWhile with super[GenIterableViewLike].TakenWhile with Transformed[A]$/;"	t
TakenWhile	scala/collection/SeqViewLike.scala	/^  trait TakenWhile extends super[IterableViewLike].TakenWhile with super[GenSeqViewLike].TakenWhile with Transformed[A]$/;"	t
TakenWhile	scala/collection/TraversableViewLike.scala	/^  trait TakenWhile extends Transformed[A] with super.TakenWhile$/;"	t
TakenWhile	scala/collection/immutable/StreamViewLike.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A]$/;"	t
TakenWhile	scala/collection/mutable/IndexedSeqView.scala	/^  trait TakenWhile extends super.TakenWhile with Transformed[A] {$/;"	t
Task	scala/collection/parallel/Tasks.scala	/^trait Task[R, +Tp] {$/;"	t
Task	scala/concurrent/JavaConversions.scala	/^      type Task[T] = Runnable$/;"	T
Task	scala/concurrent/TaskRunner.scala	/^  type Task[T]$/;"	T
Task	scala/concurrent/ThreadPoolRunner.scala	/^  type Task[T] = Callable[T] with Runnable$/;"	T
Task	scala/concurrent/ThreadRunner.scala	/^  type Task[T] = () => T$/;"	T
TaskOps	scala/collection/parallel/ParIterableLike.scala	/^  trait TaskOps[R, Tp] {$/;"	t
TaskRunner	scala/concurrent/TaskRunner.scala	/^trait TaskRunner {$/;"	t
TaskRunners	scala/concurrent/TaskRunners.scala	/^object TaskRunners {$/;"	o
TaskSupport	scala/collection/parallel/TaskSupport.scala	/^trait TaskSupport extends Tasks$/;"	t
Tasks	scala/collection/parallel/Tasks.scala	/^trait Tasks {$/;"	t
Test	scala/annotation/elidable.scala	/^   object Test extends App {$/;"	o
Tester	scala/util/parsing/combinator/testing/Tester.scala	/^abstract class Tester {$/;"	a
Text	scala/xml/Text.scala	/^class Text(data: String) extends Atom[String](data) {$/;"	c
Text	scala/xml/Text.scala	/^object Text {$/;"	o
TextBuffer	scala/xml/TextBuffer.scala	/^class TextBuffer$/;"	c
TextBuffer	scala/xml/TextBuffer.scala	/^object TextBuffer {$/;"	o
ThreadPoolRunner	scala/concurrent/ThreadPoolRunner.scala	/^trait ThreadPoolRunner extends FutureTaskRunner {$/;"	t
ThreadPoolTaskSupport	scala/collection/parallel/TaskSupport.scala	/^class ThreadPoolTaskSupport(val environment: ThreadPoolExecutor = ThreadPoolTasks.defaultThreadPool)$/;"	c
ThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^object ThreadPoolTasks {$/;"	o
ThreadPoolTasks	scala/collection/parallel/Tasks.scala	/^trait ThreadPoolTasks extends Tasks {$/;"	t
ThreadRunner	scala/concurrent/ThreadRunner.scala	/^class ThreadRunner extends FutureTaskRunner {$/;"	c
Throwable	scala/package.scala	/^  type Throwable = java.lang.Throwable$/;"	T
ThrowableOps	scala/collection/parallel/package.scala	/^  trait ThrowableOps {$/;"	t
TimeUnit	scala/concurrent/duration/package.scala	/^  type TimeUnit          = java.util.concurrent.TimeUnit$/;"	T
TimeoutException	scala/concurrent/package.scala	/^  type TimeoutException =      java.util.concurrent.TimeoutException$/;"	T
ToIteratorWrapper	scala/collection/convert/Wrappers.scala	/^  class ToIteratorWrapper[A](underlying : Iterator[A]) {$/;"	c
Token	scala/util/parsing/combinator/token/Tokens.scala	/^  abstract class Token {$/;"	a
TokenParsers	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^trait TokenParsers extends Parsers {$/;"	t
TokenTests	scala/xml/parsing/TokenTests.scala	/^trait TokenTests {$/;"	t
Tokens	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^  type Tokens = StdTokens$/;"	T
Tokens	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  type Tokens <: StdTokens$/;"	T
Tokens	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^  type Tokens <: token.Tokens$/;"	T
Tokens	scala/util/parsing/combinator/token/Tokens.scala	/^trait Tokens {$/;"	t
Tokens	scala/util/parsing/json/Parser.scala	/^  type Tokens = Lexer$/;"	T
Tokens	scala/xml/dtd/Tokens.scala	/^class Tokens {$/;"	c
TopIter	scala/util/regexp/PointedHedgeExp.scala	/^  case class  TopIter(r1: _regexpT, r2: _regexpT) extends RegExp {$/;"	r
TopScope	scala/xml/TopScope.scala	/^object TopScope extends NamespaceBinding(null, null, null) {$/;"	o
TraitSetter	scala/runtime/TraitSetter.java	/^public @interface TraitSetter {$/;"	i
Transformed	scala/collection/GenIterableViewLike.scala	/^  trait Transformed[+B] extends GenIterableView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/GenSeqViewLike.scala	/^  trait Transformed[+B] extends GenSeqView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/GenTraversableViewLike.scala	/^  trait Transformed[+B] extends GenTraversableView[B, Coll] {$/;"	t
Transformed	scala/collection/IterableViewLike.scala	/^  trait Transformed[+B] extends IterableView[B, Coll] with super[TraversableViewLike].Transformed[B] with super[GenIterableViewLike].Transformed[B] {$/;"	t
Transformed	scala/collection/SeqViewLike.scala	/^  trait Transformed[+B] extends SeqView[B, Coll] with super[IterableViewLike].Transformed[B] with super[GenSeqViewLike].Transformed[B] {$/;"	t
Transformed	scala/collection/TraversableViewLike.scala	/^  trait Transformed[+B] extends TraversableView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/immutable/StreamViewLike.scala	/^  trait Transformed[+B] extends StreamView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/mutable/IndexedSeqView.scala	/^  trait Transformed[B] extends IndexedSeqView[B, Coll] with super.Transformed[B] {$/;"	t
Transformed	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Transformed[+S] extends ParIterableView[S, Coll, CollSeq] with super.Transformed[S] {$/;"	t
Transformed	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Transformed[+S] extends ParSeqView[S, Coll, CollSeq]$/;"	t
Translator	scala/xml/dtd/ContentModel.scala	/^  object Translator extends WordBerrySethi {$/;"	o
Traversable	scala/collection/Traversable.scala	/^object Traversable extends TraversableFactory[Traversable] { self =>$/;"	o
Traversable	scala/collection/Traversable.scala	/^trait Traversable[+A] extends TraversableLike[A, Traversable[A]]$/;"	t
Traversable	scala/collection/immutable/Traversable.scala	/^object Traversable extends TraversableFactory[Traversable] {$/;"	o
Traversable	scala/collection/immutable/Traversable.scala	/^trait Traversable[+A] extends scala.collection.Traversable[A]$/;"	t
Traversable	scala/collection/mutable/Traversable.scala	/^object Traversable extends TraversableFactory[Traversable] {$/;"	o
Traversable	scala/collection/mutable/Traversable.scala	/^trait Traversable[A] extends scala.collection.Traversable[A]$/;"	t
Traversable	scala/package.scala	/^  type Traversable[+A] = scala.collection.Traversable[A]$/;"	T
Traversable	scala/package.scala	/^  val Traversable = scala.collection.Traversable$/;"	V
Traversable.breaks._	scala/collection/TraversableLike.scala	/^  import Traversable.breaks._$/;"	i
TraversableFactory	scala/collection/generic/TraversableFactory.scala	/^trait TraversableFactory[CC[X] <: Traversable[X] with GenericTraversableTemplate[X, CC]]$/;"	t
TraversableForwarder	scala/collection/generic/TraversableForwarder.scala	/^trait TraversableForwarder[+A] extends Traversable[A] {$/;"	t
TraversableLike	scala/collection/TraversableLike.scala	/^trait TraversableLike[+A, +Repr] extends Any$/;"	t
TraversableOnce	scala/collection/TraversableOnce.scala	/^object TraversableOnce {$/;"	o
TraversableOnce	scala/collection/TraversableOnce.scala	/^trait TraversableOnce[+A] extends Any with GenTraversableOnce[A] {$/;"	t
TraversableOnce	scala/package.scala	/^  type TraversableOnce[+A] = scala.collection.TraversableOnce[A]$/;"	T
TraversableOps	scala/collection/parallel/package.scala	/^  trait TraversableOps[T] {$/;"	t
TraversableProxy	scala/collection/TraversableProxy.scala	/^trait TraversableProxy[+A] extends Traversable[A] with TraversableProxyLike[A, Traversable[A]]$/;"	t
TraversableProxyLike	scala/collection/TraversableProxyLike.scala	/^trait TraversableProxyLike[+A, +Repr <: TraversableLike[A, Repr] with Traversable[A]] extends TraversableLike[A, Repr] with Proxy {$/;"	t
TraversableView	scala/collection/TraversableView.scala	/^object TraversableView {$/;"	o
TraversableView	scala/collection/TraversableView.scala	/^trait TraversableView[+A, +Coll] extends TraversableViewLike[A, Coll, TraversableView[A, Coll]] with GenTraversableView[A, Coll] { }$/;"	t
TraversableView.NoBuilder	scala/collection/GenIterableViewLike.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/GenTraversableViewLike.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/IterableView.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/IterableViewLike.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/SeqView.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/SeqViewLike.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/TraversableView.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/TraversableViewLike.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableView.NoBuilder	scala/collection/mutable/IndexedSeqView.scala	/^import TraversableView.NoBuilder$/;"	i
TraversableViewLike	scala/collection/TraversableViewLike.scala	/^trait TraversableViewLike[+A,$/;"	t
Tree	scala/collection/immutable/RedBlack.scala	/^  abstract class Tree[+B] extends Serializable {$/;"	a
TreeMap	scala/collection/immutable/TreeMap.scala	/^class TreeMap[A, +B] private (tree: RB.Tree[A, B])(implicit val ordering: Ordering[A])$/;"	c
TreeMap	scala/collection/immutable/TreeMap.scala	/^object TreeMap extends ImmutableSortedMapFactory[TreeMap] {$/;"	o
TreeRHS	scala/util/grammar/TreeRHS.scala	/^abstract class TreeRHS$/;"	a
TreeSet	scala/collection/immutable/TreeSet.scala	/^class TreeSet[A] private (tree: RB.Tree[A, Unit])(implicit val ordering: Ordering[A])$/;"	c
TreeSet	scala/collection/immutable/TreeSet.scala	/^object TreeSet extends ImmutableSortedSetFactory[TreeSet] {$/;"	o
TreeSet	scala/collection/mutable/TreeSet.scala	/^class TreeSet[A](implicit val ordering: Ordering[A]) extends SortedSet[A] with SetLike[A, TreeSet[A]]$/;"	c
TreeSet	scala/collection/mutable/TreeSet.scala	/^object TreeSet extends MutableSortedSetFactory[TreeSet] {$/;"	o
TrieMap	scala/collection/concurrent/TrieMap.scala	/^object TrieMap extends MutableMapFactory[TrieMap] {$/;"	o
Triple	scala/Predef.scala	/^  object Triple {$/;"	o
Triple	scala/Predef.scala	/^  type Triple[+A, +B, +C] = Tuple3[A, B, C]$/;"	T
Try	scala/util/Try.scala	/^object Try {$/;"	o
Tuple1	scala/Tuple1.scala	/^case class Tuple1[@specialized(Int, Long, Double) +T1](_1: T1)$/;"	r
Tuple10	scala/Tuple10.scala	/^case class Tuple10[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10)$/;"	r
Tuple11	scala/Tuple11.scala	/^case class Tuple11[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11)$/;"	r
Tuple12	scala/Tuple12.scala	/^case class Tuple12[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12)$/;"	r
Tuple13	scala/Tuple13.scala	/^case class Tuple13[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13)$/;"	r
Tuple14	scala/Tuple14.scala	/^case class Tuple14[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14)$/;"	r
Tuple15	scala/Tuple15.scala	/^case class Tuple15[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15)$/;"	r
Tuple16	scala/Tuple16.scala	/^case class Tuple16[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16)$/;"	r
Tuple17	scala/Tuple17.scala	/^case class Tuple17[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17)$/;"	r
Tuple18	scala/Tuple18.scala	/^case class Tuple18[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18)$/;"	r
Tuple19	scala/Tuple19.scala	/^case class Tuple19[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19)$/;"	r
Tuple2	scala/Tuple2.scala	/^case class Tuple2[@specialized(Int, Long, Double, Char, Boolean\/*, AnyRef*\/) +T1, @specialized(Int, Long, Double, Char, Boolean\/*, AnyRef*\/) +T2](_1: T1, _2: T2)$/;"	r
Tuple20	scala/Tuple20.scala	/^case class Tuple20[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20)$/;"	r
Tuple21	scala/Tuple21.scala	/^case class Tuple21[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21)$/;"	r
Tuple22	scala/Tuple22.scala	/^case class Tuple22[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9, +T10, +T11, +T12, +T13, +T14, +T15, +T16, +T17, +T18, +T19, +T20, +T21, +T22](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9, _10: T10, _11: T11, _12: T12, _13: T13, _14: T14, _15: T15, _16: T16, _17: T17, _18: T18, _19: T19, _20: T20, _21: T21, _22: T22)$/;"	r
Tuple2Zipped	scala/runtime/Tuple2Zipped.scala	/^object Tuple2Zipped {$/;"	o
Tuple3	scala/Tuple3.scala	/^case class Tuple3[+T1, +T2, +T3](_1: T1, _2: T2, _3: T3)$/;"	r
Tuple3Zipped	scala/runtime/Tuple3Zipped.scala	/^object Tuple3Zipped {$/;"	o
Tuple4	scala/Tuple4.scala	/^case class Tuple4[+T1, +T2, +T3, +T4](_1: T1, _2: T2, _3: T3, _4: T4)$/;"	r
Tuple5	scala/Tuple5.scala	/^case class Tuple5[+T1, +T2, +T3, +T4, +T5](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5)$/;"	r
Tuple6	scala/Tuple6.scala	/^case class Tuple6[+T1, +T2, +T3, +T4, +T5, +T6](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6)$/;"	r
Tuple7	scala/Tuple7.scala	/^case class Tuple7[+T1, +T2, +T3, +T4, +T5, +T6, +T7](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7)$/;"	r
Tuple8	scala/Tuple8.scala	/^case class Tuple8[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8)$/;"	r
Tuple9	scala/Tuple9.scala	/^case class Tuple9[+T1, +T2, +T3, +T4, +T5, +T6, +T7, +T8, +T9](_1: T1, _2: T2, _3: T3, _4: T4, _5: T5, _6: T6, _7: T7, _8: T8, _9: T9)$/;"	r
TypeConstraint	scala/annotation/TypeConstraint.scala	/^trait TypeConstraint extends Annotation$/;"	t
TypeSymbol	scala/xml/TypeSymbol.scala	/^abstract class TypeSymbol$/;"	a
Typed	scala/Proxy.scala	/^  trait Typed[T] extends Any with Proxy {$/;"	t
UNDERLINED	scala/Console.scala	/^  final val UNDERLINED = "\\033[4m"$/;"	V
UNIT	scala/runtime/BoxedUnit.java	/^    public final static BoxedUnit UNIT = new BoxedUnit();$/;"	f	class:BoxedUnit
UNI_REPLACEMENT_BYTES	scala/io/UTF8Codec.scala	/^  final val UNI_REPLACEMENT_BYTES = Array[Byte](-17, -65, -67)$/;"	V
UNI_REPLACEMENT_CHAR	scala/io/UTF8Codec.scala	/^  final val UNI_REPLACEMENT_CHAR: Int = 0x0000FFFD$/;"	V
URL	scala/sys/process/package.scala	/^      type URL             = java.net.URL$/;"	T
URLBuilder	scala/sys/process/ProcessBuilder.scala	/^  trait URLBuilder extends Source {$/;"	t
UTF8	scala/io/Codec.scala	/^  final val UTF8: Codec    = new Codec(Charset forName "UTF-8")$/;"	V
UTF8Codec	scala/io/UTF8Codec.scala	/^object UTF8Codec {$/;"	o
UnPicklerEnv	scala/io/BytePickle.scala	/^  class UnPicklerEnv extends mutable.HashMap[Int, Any] {$/;"	c
UnPicklerState	scala/io/BytePickle.scala	/^  class UnPicklerState(val stream: Array[Byte], val dict: UnPicklerEnv)$/;"	c
UnanchoredRegex	scala/util/matching/Regex.scala	/^trait UnanchoredRegex extends Regex {$/;"	t
UnavailableResourceException	scala/xml/include/UnavailableResourceException.scala	/^class UnavailableResourceException(message: String)$/;"	c
UnboundElement	scala/util/parsing/ast/Binders.scala	/^  class UnboundElement[N <: NameElement](private val el: N) extends NameElement {$/;"	c
Uncloseable.protect	scala/sys/process/ProcessBuilderImpl.scala	/^import Uncloseable.protect$/;"	i
Undefined	scala/concurrent/duration/Duration.scala	/^  val Undefined: Infinite = new Infinite {$/;"	V
UnderBinder	scala/util/parsing/ast/Binders.scala	/^  class UnderBinder[binderType  <: NameElement, elementT <% Mappable[elementT]](val scope: Scope[binderType], private[Binders] val element: elementT) extends Element with BindingSensitive {$/;"	c
UnderBinder	scala/util/parsing/ast/Binders.scala	/^  object UnderBinder {$/;"	o
UndeterminedEnd	scala/collection/immutable/PagedSeq.scala	/^  final val UndeterminedEnd = Int.MaxValue$/;"	V
Undoable	scala/collection/mutable/Undoable.scala	/^trait Undoable {$/;"	t
Unit	scala/Unit.scala	/^object Unit extends AnyValCompanion {$/;"	o
Unit	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val Unit    = ManifestFactory.Unit$/;"	V
Unit	scala/reflect/ClassTag.scala	/^  val Unit    : ClassTag[scala.Unit]       = Manifest.Unit$/;"	V
Unit	scala/reflect/Manifest.scala	/^  val Unit: AnyValManifest[Unit] = new AnyValManifest[scala.Unit]("Unit") {$/;"	V
UnitOrdering	scala/math/Ordering.scala	/^  trait UnitOrdering extends Ordering[Unit] {$/;"	t
Unparsed	scala/xml/Unparsed.scala	/^class Unparsed(data: String) extends Atom[String](data) {$/;"	c
Unparsed	scala/xml/Unparsed.scala	/^object Unparsed {$/;"	o
UnparsedEntityDecl	scala/xml/dtd/Decl.scala	/^case class UnparsedEntityDecl( name:String, extID:ExternalID, notation:String ) extends EntityDecl {$/;"	r
UnprefixedAttribute	scala/xml/UnprefixedAttribute.scala	/^class UnprefixedAttribute($/;"	c
UnprefixedAttribute	scala/xml/UnprefixedAttribute.scala	/^object UnprefixedAttribute {$/;"	o
Unrolled	scala/collection/mutable/UnrolledBuffer.scala	/^  class Unrolled[T: ClassTag] private[collection] (var size: Int, var array: Array[T], var next: Unrolled[T], val buff: UnrolledBuffer[T] = null) {$/;"	c
UnrolledBuffer	scala/collection/mutable/UnrolledBuffer.scala	/^class UnrolledBuffer[T](implicit val tag: ClassTag[T])$/;"	c
UnrolledBuffer	scala/collection/mutable/UnrolledBuffer.scala	/^object UnrolledBuffer extends ClassTagTraversableFactory[UnrolledBuffer] {$/;"	o
UnrolledBuffer.Unrolled	scala/collection/mutable/UnrolledBuffer.scala	/^  import UnrolledBuffer.Unrolled$/;"	i
UnrolledBuffer.Unrolled	scala/collection/parallel/mutable/ParHashMap.scala	/^  import UnrolledBuffer.Unrolled$/;"	i
UnrolledParArrayCombiner	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^object UnrolledParArrayCombiner {$/;"	o
UnrolledParArrayCombiner	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^trait UnrolledParArrayCombiner[T]$/;"	t
UnsupportedOperationException	scala/package.scala	/^  type UnsupportedOperationException   = java.lang.UnsupportedOperationException$/;"	T
Update	scala/collection/script/Message.scala	/^case class Update[+A](location: Location, elem: A) extends Message[A] {$/;"	r
UserNameElementIsMappable	scala/util/parsing/ast/Binders.scala	/^  def UserNameElementIsMappable[t <: NameElement](self: t): Mappable[t]$/;"	m
Utility	scala/xml/Utility.scala	/^object Utility extends AnyRef with parsing.TokenTests {$/;"	o
Utility.Escapes.{ pairs => unescape }	scala/xml/parsing/MarkupParser.scala	/^import Utility.Escapes.{ pairs => unescape }$/;"	i
Utility.Escapes.{ pairs => unescape }	scala/xml/parsing/MarkupParserCommon.scala	/^import Utility.Escapes.{ pairs => unescape }$/;"	i
Utility.SU	scala/xml/parsing/MarkupParserCommon.scala	/^import Utility.SU$/;"	i
Utility.isNameStart	scala/xml/Null.scala	/^import Utility.isNameStart$/;"	i
Utility.isSpace	scala/xml/TextBuffer.scala	/^import Utility.isSpace$/;"	i
Utility.sbToString	scala/xml/MetaData.scala	/^import Utility.sbToString$/;"	i
Utility.sbToString	scala/xml/NamespaceBinding.scala	/^import Utility.sbToString$/;"	i
Utility.sbToString	scala/xml/PrettyPrinter.scala	/^import Utility.sbToString$/;"	i
Utility.sbToString	scala/xml/dtd/Decl.scala	/^import Utility.sbToString$/;"	i
Utility.{ sbToString, isAtomAndNotText }	scala/xml/Xhtml.scala	/^import Utility.{ sbToString, isAtomAndNotText }$/;"	i
ValidatingMarkupHandler	scala/xml/parsing/ValidatingMarkupHandler.scala	/^abstract class ValidatingMarkupHandler extends MarkupHandler with Logged {$/;"	a
ValidationException	scala/xml/dtd/ValidationException.scala	/^case class ValidationException(e: String) extends Exception(e)$/;"	r
Value	scala/Enumeration.scala	/^  abstract class Value extends Ordered[Value] with Serializable {$/;"	a
ValueFormatter	scala/util/parsing/json/Parser.scala	/^  type ValueFormatter = Any => String$/;"	T
ValueOrdering	scala/Enumeration.scala	/^  object ValueOrdering extends Ordering[Value] {$/;"	o
ValueSet	scala/Enumeration.scala	/^  class ValueSet private[ValueSet] (private[this] var nnIds: immutable.BitSet)$/;"	c
ValueSet	scala/Enumeration.scala	/^  object ValueSet {$/;"	o
Vector	scala/collection/immutable/Vector.scala	/^object Vector extends SeqFactory[Vector] {$/;"	o
Vector	scala/package.scala	/^  type Vector[+A] = scala.collection.immutable.Vector[A]$/;"	T
Vector	scala/package.scala	/^  val Vector = scala.collection.immutable.Vector$/;"	V
VectorIterator	scala/collection/immutable/Vector.scala	/^class VectorIterator[+A](_startIndex: Int, _endIndex: Int)$/;"	c
VectorReusableCBF	scala/collection/immutable/Vector.scala	/^  private val VectorReusableCBF: GenericCanBuildFrom[Nothing] = new VectorReusableCBF$/;"	V
ViewMkString	scala/collection/TraversableViewLike.scala	/^trait ViewMkString[+A] {$/;"	t
VolatileAbort	scala/collection/generic/Signalling.scala	/^trait VolatileAbort extends Signalling {$/;"	t
VolatileBooleanRef	scala/runtime/VolatileBooleanRef.java	/^    public VolatileBooleanRef(boolean elem) { this.elem = elem; }$/;"	m	class:VolatileBooleanRef
VolatileBooleanRef	scala/runtime/VolatileBooleanRef.java	/^public class VolatileBooleanRef implements java.io.Serializable {$/;"	c
VolatileByteRef	scala/runtime/VolatileByteRef.java	/^    public VolatileByteRef(byte elem) { this.elem = elem; }$/;"	m	class:VolatileByteRef
VolatileByteRef	scala/runtime/VolatileByteRef.java	/^public class VolatileByteRef implements java.io.Serializable {$/;"	c
VolatileCharRef	scala/runtime/VolatileCharRef.java	/^    public VolatileCharRef(char elem) { this.elem = elem; }$/;"	m	class:VolatileCharRef
VolatileCharRef	scala/runtime/VolatileCharRef.java	/^public class VolatileCharRef implements java.io.Serializable {$/;"	c
VolatileDoubleRef	scala/runtime/VolatileDoubleRef.java	/^    public VolatileDoubleRef(double elem) { this.elem = elem; }$/;"	m	class:VolatileDoubleRef
VolatileDoubleRef	scala/runtime/VolatileDoubleRef.java	/^public class VolatileDoubleRef implements java.io.Serializable {$/;"	c
VolatileFloatRef	scala/runtime/VolatileFloatRef.java	/^    public VolatileFloatRef(float elem) { this.elem = elem; }$/;"	m	class:VolatileFloatRef
VolatileFloatRef	scala/runtime/VolatileFloatRef.java	/^public class VolatileFloatRef implements java.io.Serializable {$/;"	c
VolatileIntRef	scala/runtime/VolatileIntRef.java	/^    public VolatileIntRef(int elem) { this.elem = elem; }$/;"	m	class:VolatileIntRef
VolatileIntRef	scala/runtime/VolatileIntRef.java	/^public class VolatileIntRef implements java.io.Serializable {$/;"	c
VolatileLongRef	scala/runtime/VolatileLongRef.java	/^    public VolatileLongRef(long elem) { this.elem = elem; }$/;"	m	class:VolatileLongRef
VolatileLongRef	scala/runtime/VolatileLongRef.java	/^public class VolatileLongRef implements java.io.Serializable {$/;"	c
VolatileObjectRef	scala/runtime/VolatileObjectRef.java	/^    public VolatileObjectRef(T elem) { this.elem = elem; }$/;"	m	class:VolatileObjectRef
VolatileObjectRef	scala/runtime/VolatileObjectRef.java	/^public class VolatileObjectRef<T> implements java.io.Serializable {$/;"	c
VolatileShortRef	scala/runtime/VolatileShortRef.java	/^    public VolatileShortRef(short elem) { this.elem = elem; }$/;"	m	class:VolatileShortRef
VolatileShortRef	scala/runtime/VolatileShortRef.java	/^public class VolatileShortRef implements java.io.Serializable {$/;"	c
WARNING	scala/annotation/elidable.scala	/^  final val WARNING = 900           \/\/ Level.WARNING.intValue()$/;"	V
WHITE	scala/Console.scala	/^  final val WHITE      = "\\033[37m"$/;"	V
WHITE_B	scala/Console.scala	/^  final val WHITE_B    = "\\033[47m"$/;"	V
WRITE	scala/collection/concurrent/TrieMap.scala	/^  def WRITE(nval: MainNode[K, V]) = INodeBase.updater.set(this, nval)$/;"	m
WRITE_PREV	scala/collection/concurrent/MainNode.java	/^    public void WRITE_PREV(MainNode<K, V> nval) {$/;"	m	class:MainNode
WRITE_SIZE	scala/collection/concurrent/CNodeBase.java	/^    public void WRITE_SIZE(int nval) {$/;"	m	class:CNodeBase
Warr	scala/collection/SeqLike.scala	/^        private[this] val Warr = new Array[AnyRef](n1-n0)$/;"	V
WeakHashMap	scala/collection/mutable/WeakHashMap.scala	/^class WeakHashMap[A, B] extends JMapWrapper[A, B](new java.util.WeakHashMap)$/;"	c
WeakHashMap	scala/collection/mutable/WeakHashMap.scala	/^object WeakHashMap extends MutableMapFactory[WeakHashMap] {$/;"	o
WeakReference	scala/ref/WeakReference.scala	/^class WeakReference[+T <: AnyRef](value: T, queue: ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	c
WeakReference	scala/ref/WeakReference.scala	/^object WeakReference {$/;"	o
Wildcard	scala/util/regexp/WordExp.scala	/^  case class Wildcard() extends RegExp {$/;"	r
WithDefault	scala/collection/Map.scala	/^  abstract class WithDefault[A, +B](underlying: Map[A, B], d: A => B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	a
WithDefault	scala/collection/immutable/Map.scala	/^  class WithDefault[A, +B](underlying: Map[A, B], d: A => B) extends scala.collection.Map.WithDefault[A, B](underlying, d) with Map[A, B] {$/;"	c
WithDefault	scala/collection/mutable/Map.scala	/^  class WithDefault[A, B](underlying: Map[A, B], d: A => B) extends scala.collection.Map.WithDefault(underlying, d) with Map[A, B] {$/;"	c
WithDefault	scala/collection/parallel/ParMap.scala	/^  abstract class WithDefault[A, +B](underlying: ParMap[A, B], d: A => B) extends ParMap[A, B] {$/;"	a
WithDefault	scala/collection/parallel/immutable/ParMap.scala	/^  class WithDefault[K, +V](underlying: ParMap[K, V], d: K => V)$/;"	c
WithDefault	scala/collection/parallel/mutable/ParMap.scala	/^  class WithDefault[K, V](underlying: ParMap[K, V], d: K => V)$/;"	c
WithFilter	scala/Option.scala	/^  class WithFilter(p: A => Boolean) {$/;"	c
WithFilter	scala/collection/TraversableLike.scala	/^  class WithFilter(p: A => Boolean) extends FilterMonadic[A, Repr] {$/;"	c
Wopt	scala/collection/SeqLike.scala	/^        val Wopt = kmpOptimizeWord(W, n0, n1, forward)$/;"	V
Wopt	scala/collection/SeqLike.scala	/^        val Wopt = kmpOptimizeWord(W, n0, n1, true)$/;"	V
WordBerrySethi	scala/util/automata/WordBerrySethi.scala	/^abstract class WordBerrySethi extends BaseBerrySethi {$/;"	a
WordExp	scala/util/regexp/WordExp.scala	/^abstract class WordExp extends Base {$/;"	a
WordLength	scala/collection/BitSetLike.scala	/^  private val WordLength = 64$/;"	V
WorksheetSupport	scala/runtime/WorksheetSupport.scala	/^object WorksheetSupport {$/;"	o
WrapAsJava	scala/collection/convert/WrapAsJava.scala	/^object WrapAsJava extends WrapAsJava { }$/;"	o
WrapAsJava	scala/collection/convert/WrapAsJava.scala	/^trait WrapAsJava {$/;"	t
WrapAsJava._	scala/collection/convert/DecorateAsJava.scala	/^import WrapAsJava._$/;"	i
WrapAsJava._	scala/collection/convert/Wrappers.scala	/^import WrapAsJava._$/;"	i
WrapAsScala	scala/collection/convert/WrapAsScala.scala	/^object WrapAsScala extends WrapAsScala { }$/;"	o
WrapAsScala	scala/collection/convert/WrapAsScala.scala	/^trait WrapAsScala extends LowPriorityWrapAsScala {$/;"	t
WrapAsScala._	scala/collection/convert/DecorateAsScala.scala	/^import WrapAsScala._$/;"	i
WrapAsScala._	scala/collection/convert/Wrappers.scala	/^import WrapAsScala._$/;"	i
WrappedArray	scala/collection/mutable/WrappedArray.scala	/^abstract class WrappedArray[T]$/;"	a
WrappedArray	scala/collection/mutable/WrappedArray.scala	/^object WrappedArray {$/;"	o
WrappedArrayBuilder	scala/collection/mutable/WrappedArrayBuilder.scala	/^class WrappedArrayBuilder[A](tag: ClassTag[A]) extends Builder[A, WrappedArray[A]] {$/;"	c
WrappedString	scala/collection/immutable/WrappedString.scala	/^class WrappedString(val self: String) extends AbstractSeq[Char] with IndexedSeq[Char] with StringLike[WrappedString] {$/;"	c
WrappedString	scala/collection/immutable/WrappedString.scala	/^object WrappedString {$/;"	o
WrappedTask	scala/collection/parallel/Tasks.scala	/^  class WrappedTask[R, Tp](val body: Task[R, Tp])$/;"	c
WrappedTask	scala/collection/parallel/Tasks.scala	/^  trait WrappedTask[R, +Tp] extends RecursiveAction with super.WrappedTask[R, Tp] {$/;"	t
WrappedTask	scala/collection/parallel/Tasks.scala	/^  trait WrappedTask[R, +Tp] extends Runnable with super.WrappedTask[R, Tp] {$/;"	t
WrappedTask	scala/collection/parallel/Tasks.scala	/^  trait WrappedTask[R, +Tp] {$/;"	t
WrappedTask	scala/collection/parallel/Tasks.scala	/^  trait WrappedTask[R, Tp] extends super.WrappedTask[R, Tp] {$/;"	t
Wrappers	scala/collection/convert/Wrappers.scala	/^object Wrappers extends Wrappers with Serializable$/;"	o
Wrappers._	scala/collection/convert/WrapAsJava.scala	/^  import Wrappers._$/;"	i
Wrappers._	scala/collection/convert/WrapAsScala.scala	/^  import Wrappers._$/;"	i
XINCLUDE_NAMESPACE	scala/xml/include/sax/XIncludeFilter.scala	/^  final val XINCLUDE_NAMESPACE = "http:\/\/www.w3.org\/2001\/XInclude"$/;"	V
XIncludeException	scala/xml/include/XIncludeException.scala	/^class XIncludeException(message: String) extends Exception(message) {$/;"	c
XIncludeFilter	scala/xml/include/sax/XIncludeFilter.scala	/^class XIncludeFilter extends XMLFilterImpl {$/;"	c
XIncluder	scala/xml/include/sax/XIncluder.scala	/^class XIncluder(outs: OutputStream, encoding: String) extends ContentHandler with LexicalHandler {$/;"	c
XML	scala/xml/XML.scala	/^object XML extends XMLLoader[Elem] {$/;"	o
XML.{ xml, namespace }	scala/xml/TopScope.scala	/^  import XML.{ xml, namespace }$/;"	i
XMLEvent	scala/xml/pull/XMLEvent.scala	/^trait XMLEvent$/;"	t
XMLEventReader	scala/xml/pull/XMLEventReader.scala	/^class XMLEventReader(src: Source)$/;"	c
XMLLoader	scala/xml/factory/XMLLoader.scala	/^trait XMLLoader[T <: Node]$/;"	t
XercesClassName	scala/xml/package.scala	/^  val XercesClassName = "org.apache.xerces.parsers.SAXParser"$/;"	V
Xhtml	scala/xml/Xhtml.scala	/^object Xhtml$/;"	o
XhtmlEntities	scala/xml/parsing/XhtmlEntities.scala	/^object XhtmlEntities {$/;"	o
XhtmlParser	scala/xml/parsing/XhtmlParser.scala	/^class XhtmlParser(val input: Source) extends ConstructingHandler with MarkupParser with ExternalSources  {$/;"	c
XhtmlParser	scala/xml/parsing/XhtmlParser.scala	/^object XhtmlParser {$/;"	o
YELLOW	scala/Console.scala	/^  final val YELLOW     = "\\033[33m"$/;"	V
YELLOW_B	scala/Console.scala	/^  final val YELLOW_B   = "\\033[43m"$/;"	V
Zero	scala/concurrent/duration/Duration.scala	/^  val Zero: FiniteDuration = new FiniteDuration(0, DAYS)$/;"	V
Zipped	scala/collection/GenIterableViewLike.scala	/^  trait Zipped[B] extends Transformed[(A, B)] {$/;"	t
Zipped	scala/collection/GenSeqViewLike.scala	/^  trait Zipped[B] extends super.Zipped[B] with Transformed[(A, B)] {$/;"	t
Zipped	scala/collection/IterableViewLike.scala	/^  trait Zipped[B] extends Transformed[(A, B)] with super[GenIterableViewLike].Zipped[B]$/;"	t
Zipped	scala/collection/SeqViewLike.scala	/^  trait Zipped[B] extends super[IterableViewLike].Zipped[B] with super[GenSeqViewLike].Zipped[B] with Transformed[(A, B)]$/;"	t
Zipped	scala/collection/immutable/StreamViewLike.scala	/^  trait Zipped[B] extends super.Zipped[B] with Transformed[(A, B)]$/;"	t
Zipped	scala/collection/parallel/ParIterableViewLike.scala	/^  trait Zipped[S] extends super.Zipped[S] with Transformed[(T, S)] {$/;"	t
Zipped	scala/collection/parallel/ParSeqViewLike.scala	/^  trait Zipped[S] extends super[GenSeqViewLike].Zipped[S] with super[ParIterableViewLike].Zipped[S] with Transformed[(T, S)] {$/;"	t
Zipped	scala/collection/parallel/RemainsIterator.scala	/^  class Zipped[S](protected val that: SeqSplitter[S]) extends IterableSplitter[(T, S)] {$/;"	c
Zipped	scala/collection/parallel/RemainsIterator.scala	/^  class Zipped[S](ti: SeqSplitter[S]) extends super.Zipped[S](ti) with SeqSplitter[(T, S)] {$/;"	c
ZippedAll	scala/collection/GenIterableViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends Transformed[(A1, B)] {$/;"	t
ZippedAll	scala/collection/GenSeqViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends super.ZippedAll[A1, B] with Transformed[(A1, B)] {$/;"	t
ZippedAll	scala/collection/IterableViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends Transformed[(A1, B)] with super[GenIterableViewLike].ZippedAll[A1, B]$/;"	t
ZippedAll	scala/collection/SeqViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends super[IterableViewLike].ZippedAll[A1, B] with super[GenSeqViewLike].ZippedAll[A1, B] with Transformed[(A1, B)]$/;"	t
ZippedAll	scala/collection/immutable/StreamViewLike.scala	/^  trait ZippedAll[A1 >: A, B] extends super.ZippedAll[A1, B] with Transformed[(A1, B)]$/;"	t
ZippedAll	scala/collection/parallel/ParIterableViewLike.scala	/^  trait ZippedAll[U >: T, S] extends super.ZippedAll[U, S] with Transformed[(U, S)] {$/;"	t
ZippedAll	scala/collection/parallel/ParSeqViewLike.scala	/^  trait ZippedAll[U >: T, S] extends super[GenSeqViewLike].ZippedAll[U, S] with super[ParIterableViewLike].ZippedAll[U, S] with Transformed[(U, S)] {$/;"	t
ZippedAll	scala/collection/parallel/RemainsIterator.scala	/^  class ZippedAll[U >: T, S](protected val that: SeqSplitter[S], protected val thiselem: U, protected val thatelem: S)$/;"	c
ZippedAll	scala/collection/parallel/RemainsIterator.scala	/^  class ZippedAll[U >: T, S](ti: SeqSplitter[S], thise: U, thate: S) extends super.ZippedAll[U, S](ti, thise, thate) with SeqSplitter[(U, S)] {$/;"	c
ZippedTraversable2	scala/runtime/Tuple2Zipped.scala	/^object ZippedTraversable2 {$/;"	o
ZippedTraversable2	scala/runtime/Tuple2Zipped.scala	/^trait ZippedTraversable2[+El1, +El2] extends Any {$/;"	t
ZippedTraversable3	scala/runtime/Tuple3Zipped.scala	/^object ZippedTraversable3 {$/;"	o
ZippedTraversable3	scala/runtime/Tuple3Zipped.scala	/^trait ZippedTraversable3[+El1, +El2, +El3] extends Any {$/;"	t
_	scala/xml/parsing/MarkupParser.scala	/^      val _     = xEQ$/;"	V
_1	scala/Product1.scala	/^  def _1: T1$/;"	m
_1	scala/Product10.scala	/^  def _1: T1$/;"	m
_1	scala/Product11.scala	/^  def _1: T1$/;"	m
_1	scala/Product12.scala	/^  def _1: T1$/;"	m
_1	scala/Product13.scala	/^  def _1: T1$/;"	m
_1	scala/Product14.scala	/^  def _1: T1$/;"	m
_1	scala/Product15.scala	/^  def _1: T1$/;"	m
_1	scala/Product16.scala	/^  def _1: T1$/;"	m
_1	scala/Product17.scala	/^  def _1: T1$/;"	m
_1	scala/Product18.scala	/^  def _1: T1$/;"	m
_1	scala/Product19.scala	/^  def _1: T1$/;"	m
_1	scala/Product2.scala	/^  def _1: T1$/;"	m
_1	scala/Product20.scala	/^  def _1: T1$/;"	m
_1	scala/Product21.scala	/^  def _1: T1$/;"	m
_1	scala/Product22.scala	/^  def _1: T1$/;"	m
_1	scala/Product3.scala	/^  def _1: T1$/;"	m
_1	scala/Product4.scala	/^  def _1: T1$/;"	m
_1	scala/Product5.scala	/^  def _1: T1$/;"	m
_1	scala/Product6.scala	/^  def _1: T1$/;"	m
_1	scala/Product7.scala	/^  def _1: T1$/;"	m
_1	scala/Product8.scala	/^  def _1: T1$/;"	m
_1	scala/Product9.scala	/^  def _1: T1$/;"	m
_10	scala/Product10.scala	/^  def _10: T10$/;"	m
_10	scala/Product11.scala	/^  def _10: T10$/;"	m
_10	scala/Product12.scala	/^  def _10: T10$/;"	m
_10	scala/Product13.scala	/^  def _10: T10$/;"	m
_10	scala/Product14.scala	/^  def _10: T10$/;"	m
_10	scala/Product15.scala	/^  def _10: T10$/;"	m
_10	scala/Product16.scala	/^  def _10: T10$/;"	m
_10	scala/Product17.scala	/^  def _10: T10$/;"	m
_10	scala/Product18.scala	/^  def _10: T10$/;"	m
_10	scala/Product19.scala	/^  def _10: T10$/;"	m
_10	scala/Product20.scala	/^  def _10: T10$/;"	m
_10	scala/Product21.scala	/^  def _10: T10$/;"	m
_10	scala/Product22.scala	/^  def _10: T10$/;"	m
_11	scala/Product11.scala	/^  def _11: T11$/;"	m
_11	scala/Product12.scala	/^  def _11: T11$/;"	m
_11	scala/Product13.scala	/^  def _11: T11$/;"	m
_11	scala/Product14.scala	/^  def _11: T11$/;"	m
_11	scala/Product15.scala	/^  def _11: T11$/;"	m
_11	scala/Product16.scala	/^  def _11: T11$/;"	m
_11	scala/Product17.scala	/^  def _11: T11$/;"	m
_11	scala/Product18.scala	/^  def _11: T11$/;"	m
_11	scala/Product19.scala	/^  def _11: T11$/;"	m
_11	scala/Product20.scala	/^  def _11: T11$/;"	m
_11	scala/Product21.scala	/^  def _11: T11$/;"	m
_11	scala/Product22.scala	/^  def _11: T11$/;"	m
_12	scala/Product12.scala	/^  def _12: T12$/;"	m
_12	scala/Product13.scala	/^  def _12: T12$/;"	m
_12	scala/Product14.scala	/^  def _12: T12$/;"	m
_12	scala/Product15.scala	/^  def _12: T12$/;"	m
_12	scala/Product16.scala	/^  def _12: T12$/;"	m
_12	scala/Product17.scala	/^  def _12: T12$/;"	m
_12	scala/Product18.scala	/^  def _12: T12$/;"	m
_12	scala/Product19.scala	/^  def _12: T12$/;"	m
_12	scala/Product20.scala	/^  def _12: T12$/;"	m
_12	scala/Product21.scala	/^  def _12: T12$/;"	m
_12	scala/Product22.scala	/^  def _12: T12$/;"	m
_13	scala/Product13.scala	/^  def _13: T13$/;"	m
_13	scala/Product14.scala	/^  def _13: T13$/;"	m
_13	scala/Product15.scala	/^  def _13: T13$/;"	m
_13	scala/Product16.scala	/^  def _13: T13$/;"	m
_13	scala/Product17.scala	/^  def _13: T13$/;"	m
_13	scala/Product18.scala	/^  def _13: T13$/;"	m
_13	scala/Product19.scala	/^  def _13: T13$/;"	m
_13	scala/Product20.scala	/^  def _13: T13$/;"	m
_13	scala/Product21.scala	/^  def _13: T13$/;"	m
_13	scala/Product22.scala	/^  def _13: T13$/;"	m
_14	scala/Product14.scala	/^  def _14: T14$/;"	m
_14	scala/Product15.scala	/^  def _14: T14$/;"	m
_14	scala/Product16.scala	/^  def _14: T14$/;"	m
_14	scala/Product17.scala	/^  def _14: T14$/;"	m
_14	scala/Product18.scala	/^  def _14: T14$/;"	m
_14	scala/Product19.scala	/^  def _14: T14$/;"	m
_14	scala/Product20.scala	/^  def _14: T14$/;"	m
_14	scala/Product21.scala	/^  def _14: T14$/;"	m
_14	scala/Product22.scala	/^  def _14: T14$/;"	m
_15	scala/Product15.scala	/^  def _15: T15$/;"	m
_15	scala/Product16.scala	/^  def _15: T15$/;"	m
_15	scala/Product17.scala	/^  def _15: T15$/;"	m
_15	scala/Product18.scala	/^  def _15: T15$/;"	m
_15	scala/Product19.scala	/^  def _15: T15$/;"	m
_15	scala/Product20.scala	/^  def _15: T15$/;"	m
_15	scala/Product21.scala	/^  def _15: T15$/;"	m
_15	scala/Product22.scala	/^  def _15: T15$/;"	m
_16	scala/Product16.scala	/^  def _16: T16$/;"	m
_16	scala/Product17.scala	/^  def _16: T16$/;"	m
_16	scala/Product18.scala	/^  def _16: T16$/;"	m
_16	scala/Product19.scala	/^  def _16: T16$/;"	m
_16	scala/Product20.scala	/^  def _16: T16$/;"	m
_16	scala/Product21.scala	/^  def _16: T16$/;"	m
_16	scala/Product22.scala	/^  def _16: T16$/;"	m
_17	scala/Product17.scala	/^  def _17: T17$/;"	m
_17	scala/Product18.scala	/^  def _17: T17$/;"	m
_17	scala/Product19.scala	/^  def _17: T17$/;"	m
_17	scala/Product20.scala	/^  def _17: T17$/;"	m
_17	scala/Product21.scala	/^  def _17: T17$/;"	m
_17	scala/Product22.scala	/^  def _17: T17$/;"	m
_18	scala/Product18.scala	/^  def _18: T18$/;"	m
_18	scala/Product19.scala	/^  def _18: T18$/;"	m
_18	scala/Product20.scala	/^  def _18: T18$/;"	m
_18	scala/Product21.scala	/^  def _18: T18$/;"	m
_18	scala/Product22.scala	/^  def _18: T18$/;"	m
_19	scala/Product19.scala	/^  def _19: T19$/;"	m
_19	scala/Product20.scala	/^  def _19: T19$/;"	m
_19	scala/Product21.scala	/^  def _19: T19$/;"	m
_19	scala/Product22.scala	/^  def _19: T19$/;"	m
_2	scala/Product10.scala	/^  def _2: T2$/;"	m
_2	scala/Product11.scala	/^  def _2: T2$/;"	m
_2	scala/Product12.scala	/^  def _2: T2$/;"	m
_2	scala/Product13.scala	/^  def _2: T2$/;"	m
_2	scala/Product14.scala	/^  def _2: T2$/;"	m
_2	scala/Product15.scala	/^  def _2: T2$/;"	m
_2	scala/Product16.scala	/^  def _2: T2$/;"	m
_2	scala/Product17.scala	/^  def _2: T2$/;"	m
_2	scala/Product18.scala	/^  def _2: T2$/;"	m
_2	scala/Product19.scala	/^  def _2: T2$/;"	m
_2	scala/Product2.scala	/^  def _2: T2$/;"	m
_2	scala/Product20.scala	/^  def _2: T2$/;"	m
_2	scala/Product21.scala	/^  def _2: T2$/;"	m
_2	scala/Product22.scala	/^  def _2: T2$/;"	m
_2	scala/Product3.scala	/^  def _2: T2$/;"	m
_2	scala/Product4.scala	/^  def _2: T2$/;"	m
_2	scala/Product5.scala	/^  def _2: T2$/;"	m
_2	scala/Product6.scala	/^  def _2: T2$/;"	m
_2	scala/Product7.scala	/^  def _2: T2$/;"	m
_2	scala/Product8.scala	/^  def _2: T2$/;"	m
_2	scala/Product9.scala	/^  def _2: T2$/;"	m
_20	scala/Product20.scala	/^  def _20: T20$/;"	m
_20	scala/Product21.scala	/^  def _20: T20$/;"	m
_20	scala/Product22.scala	/^  def _20: T20$/;"	m
_21	scala/Product21.scala	/^  def _21: T21$/;"	m
_21	scala/Product22.scala	/^  def _21: T21$/;"	m
_22	scala/Product22.scala	/^  def _22: T22$/;"	m
_3	scala/Product10.scala	/^  def _3: T3$/;"	m
_3	scala/Product11.scala	/^  def _3: T3$/;"	m
_3	scala/Product12.scala	/^  def _3: T3$/;"	m
_3	scala/Product13.scala	/^  def _3: T3$/;"	m
_3	scala/Product14.scala	/^  def _3: T3$/;"	m
_3	scala/Product15.scala	/^  def _3: T3$/;"	m
_3	scala/Product16.scala	/^  def _3: T3$/;"	m
_3	scala/Product17.scala	/^  def _3: T3$/;"	m
_3	scala/Product18.scala	/^  def _3: T3$/;"	m
_3	scala/Product19.scala	/^  def _3: T3$/;"	m
_3	scala/Product20.scala	/^  def _3: T3$/;"	m
_3	scala/Product21.scala	/^  def _3: T3$/;"	m
_3	scala/Product22.scala	/^  def _3: T3$/;"	m
_3	scala/Product3.scala	/^  def _3: T3$/;"	m
_3	scala/Product4.scala	/^  def _3: T3$/;"	m
_3	scala/Product5.scala	/^  def _3: T3$/;"	m
_3	scala/Product6.scala	/^  def _3: T3$/;"	m
_3	scala/Product7.scala	/^  def _3: T3$/;"	m
_3	scala/Product8.scala	/^  def _3: T3$/;"	m
_3	scala/Product9.scala	/^  def _3: T3$/;"	m
_4	scala/Product10.scala	/^  def _4: T4$/;"	m
_4	scala/Product11.scala	/^  def _4: T4$/;"	m
_4	scala/Product12.scala	/^  def _4: T4$/;"	m
_4	scala/Product13.scala	/^  def _4: T4$/;"	m
_4	scala/Product14.scala	/^  def _4: T4$/;"	m
_4	scala/Product15.scala	/^  def _4: T4$/;"	m
_4	scala/Product16.scala	/^  def _4: T4$/;"	m
_4	scala/Product17.scala	/^  def _4: T4$/;"	m
_4	scala/Product18.scala	/^  def _4: T4$/;"	m
_4	scala/Product19.scala	/^  def _4: T4$/;"	m
_4	scala/Product20.scala	/^  def _4: T4$/;"	m
_4	scala/Product21.scala	/^  def _4: T4$/;"	m
_4	scala/Product22.scala	/^  def _4: T4$/;"	m
_4	scala/Product4.scala	/^  def _4: T4$/;"	m
_4	scala/Product5.scala	/^  def _4: T4$/;"	m
_4	scala/Product6.scala	/^  def _4: T4$/;"	m
_4	scala/Product7.scala	/^  def _4: T4$/;"	m
_4	scala/Product8.scala	/^  def _4: T4$/;"	m
_4	scala/Product9.scala	/^  def _4: T4$/;"	m
_5	scala/Product10.scala	/^  def _5: T5$/;"	m
_5	scala/Product11.scala	/^  def _5: T5$/;"	m
_5	scala/Product12.scala	/^  def _5: T5$/;"	m
_5	scala/Product13.scala	/^  def _5: T5$/;"	m
_5	scala/Product14.scala	/^  def _5: T5$/;"	m
_5	scala/Product15.scala	/^  def _5: T5$/;"	m
_5	scala/Product16.scala	/^  def _5: T5$/;"	m
_5	scala/Product17.scala	/^  def _5: T5$/;"	m
_5	scala/Product18.scala	/^  def _5: T5$/;"	m
_5	scala/Product19.scala	/^  def _5: T5$/;"	m
_5	scala/Product20.scala	/^  def _5: T5$/;"	m
_5	scala/Product21.scala	/^  def _5: T5$/;"	m
_5	scala/Product22.scala	/^  def _5: T5$/;"	m
_5	scala/Product5.scala	/^  def _5: T5$/;"	m
_5	scala/Product6.scala	/^  def _5: T5$/;"	m
_5	scala/Product7.scala	/^  def _5: T5$/;"	m
_5	scala/Product8.scala	/^  def _5: T5$/;"	m
_5	scala/Product9.scala	/^  def _5: T5$/;"	m
_6	scala/Product10.scala	/^  def _6: T6$/;"	m
_6	scala/Product11.scala	/^  def _6: T6$/;"	m
_6	scala/Product12.scala	/^  def _6: T6$/;"	m
_6	scala/Product13.scala	/^  def _6: T6$/;"	m
_6	scala/Product14.scala	/^  def _6: T6$/;"	m
_6	scala/Product15.scala	/^  def _6: T6$/;"	m
_6	scala/Product16.scala	/^  def _6: T6$/;"	m
_6	scala/Product17.scala	/^  def _6: T6$/;"	m
_6	scala/Product18.scala	/^  def _6: T6$/;"	m
_6	scala/Product19.scala	/^  def _6: T6$/;"	m
_6	scala/Product20.scala	/^  def _6: T6$/;"	m
_6	scala/Product21.scala	/^  def _6: T6$/;"	m
_6	scala/Product22.scala	/^  def _6: T6$/;"	m
_6	scala/Product6.scala	/^  def _6: T6$/;"	m
_6	scala/Product7.scala	/^  def _6: T6$/;"	m
_6	scala/Product8.scala	/^  def _6: T6$/;"	m
_6	scala/Product9.scala	/^  def _6: T6$/;"	m
_7	scala/Product10.scala	/^  def _7: T7$/;"	m
_7	scala/Product11.scala	/^  def _7: T7$/;"	m
_7	scala/Product12.scala	/^  def _7: T7$/;"	m
_7	scala/Product13.scala	/^  def _7: T7$/;"	m
_7	scala/Product14.scala	/^  def _7: T7$/;"	m
_7	scala/Product15.scala	/^  def _7: T7$/;"	m
_7	scala/Product16.scala	/^  def _7: T7$/;"	m
_7	scala/Product17.scala	/^  def _7: T7$/;"	m
_7	scala/Product18.scala	/^  def _7: T7$/;"	m
_7	scala/Product19.scala	/^  def _7: T7$/;"	m
_7	scala/Product20.scala	/^  def _7: T7$/;"	m
_7	scala/Product21.scala	/^  def _7: T7$/;"	m
_7	scala/Product22.scala	/^  def _7: T7$/;"	m
_7	scala/Product7.scala	/^  def _7: T7$/;"	m
_7	scala/Product8.scala	/^  def _7: T7$/;"	m
_7	scala/Product9.scala	/^  def _7: T7$/;"	m
_8	scala/Product10.scala	/^  def _8: T8$/;"	m
_8	scala/Product11.scala	/^  def _8: T8$/;"	m
_8	scala/Product12.scala	/^  def _8: T8$/;"	m
_8	scala/Product13.scala	/^  def _8: T8$/;"	m
_8	scala/Product14.scala	/^  def _8: T8$/;"	m
_8	scala/Product15.scala	/^  def _8: T8$/;"	m
_8	scala/Product16.scala	/^  def _8: T8$/;"	m
_8	scala/Product17.scala	/^  def _8: T8$/;"	m
_8	scala/Product18.scala	/^  def _8: T8$/;"	m
_8	scala/Product19.scala	/^  def _8: T8$/;"	m
_8	scala/Product20.scala	/^  def _8: T8$/;"	m
_8	scala/Product21.scala	/^  def _8: T8$/;"	m
_8	scala/Product22.scala	/^  def _8: T8$/;"	m
_8	scala/Product8.scala	/^  def _8: T8$/;"	m
_8	scala/Product9.scala	/^  def _8: T8$/;"	m
_9	scala/Product10.scala	/^  def _9: T9$/;"	m
_9	scala/Product11.scala	/^  def _9: T9$/;"	m
_9	scala/Product12.scala	/^  def _9: T9$/;"	m
_9	scala/Product13.scala	/^  def _9: T9$/;"	m
_9	scala/Product14.scala	/^  def _9: T9$/;"	m
_9	scala/Product15.scala	/^  def _9: T9$/;"	m
_9	scala/Product16.scala	/^  def _9: T9$/;"	m
_9	scala/Product17.scala	/^  def _9: T9$/;"	m
_9	scala/Product18.scala	/^  def _9: T9$/;"	m
_9	scala/Product19.scala	/^  def _9: T9$/;"	m
_9	scala/Product20.scala	/^  def _9: T9$/;"	m
_9	scala/Product21.scala	/^  def _9: T9$/;"	m
_9	scala/Product22.scala	/^  def _9: T9$/;"	m
_9	scala/Product9.scala	/^  def _9: T9$/;"	m
__leftOfArrow	scala/Predef.scala	/^  final class ArrowAssoc[A](val __leftOfArrow: A) extends AnyVal {$/;"	V
__resultOfEnsuring	scala/Predef.scala	/^  final class Ensuring[A](val __resultOfEnsuring: A) extends AnyVal {$/;"	V
_args	scala/App.scala	/^  private var _args: Array[String] = _$/;"	v
_combinerTaskSupport	scala/collection/parallel/Combiner.scala	/^  var _combinerTaskSupport = defaultTaskSupport$/;"	v
_decoder	scala/io/Codec.scala	/^    val _decoder = decoder$/;"	V
_decodingReplacement	scala/io/Codec.scala	/^  private[this] var _decodingReplacement: String      = null$/;"	v
_delim	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  private lazy val _delim: Parser[Token] = {$/;"	V
_desc	scala/util/control/Exception.scala	/^    private var _desc: String = ""$/;"	v
_encodingReplacement	scala/io/Codec.scala	/^  private[this] var _encodingReplacement: Array[Byte] = null$/;"	v
_equals	scala/runtime/ScalaRunTime.scala	/^  def _equals(x: Product, y: Any): Boolean = y match {$/;"	m
_hasNext	scala/collection/SeqLike.scala	/^    private var _hasNext = true$/;"	v
_hasNext	scala/collection/SetLike.scala	/^    private var _hasNext = true$/;"	v
_hasNext	scala/collection/immutable/Vector.scala	/^  private var _hasNext = blockIndex + lo < endIndex$/;"	v
_hashCode	scala/runtime/ScalaRunTime.scala	/^  def _hashCode(x: Product): Int = scala.util.hashing.MurmurHash3.productHash(x)$/;"	m
_isDone	scala/concurrent/DelayedLazyVal.scala	/^  @volatile private[this] var _isDone = false$/;"	v
_labelT	scala/util/regexp/WordExp.scala	/^  type _labelT <: Label$/;"	T
_labelT	scala/xml/dtd/ContentModel.scala	/^  type _labelT = ElemName$/;"	T
_loadFactor	scala/collection/mutable/FlatHashTable.scala	/^  @transient private[collection] var _loadFactor = defaultLoadFactor$/;"	v
_loadFactor	scala/collection/mutable/HashTable.scala	/^  @transient protected var _loadFactor = defaultLoadFactor$/;"	v
_noSuppression	scala/util/control/NoStackTrace.scala	/^  final private var _noSuppression = false$/;"	v
_onCodingException	scala/io/Codec.scala	/^  private[this] var _onCodingException: Handler       = e => throw e$/;"	v
_onMalformedInput	scala/io/Codec.scala	/^  private[this] var _onMalformedInput: Action         = null$/;"	v
_onUnmappableCharacter	scala/io/Codec.scala	/^  private[this] var _onUnmappableCharacter: Action    = null$/;"	v
_partial	scala/collection/Iterator.scala	/^    private[this] var _partial = true                         \/\/ whether we deliver short sequences$/;"	v
_ref	scala/concurrent/impl/AbstractPromise.java	/^    private volatile Object _ref;$/;"	f	class:AbstractPromise	file:
_refoffset	scala/concurrent/impl/AbstractPromise.java	/^    final static long _refoffset;$/;"	f	class:AbstractPromise
_regexpT	scala/util/regexp/Base.scala	/^  type _regexpT <: RegExp$/;"	T
_regexpT	scala/util/regexp/PointedHedgeExp.scala	/^  type _regexpT <: RegExp$/;"	T
_regexpT	scala/util/regexp/WordExp.scala	/^  type _regexpT <: RegExp$/;"	T
_regexpT	scala/xml/dtd/ContentModel.scala	/^  type _regexpT = RegExp$/;"	T
_size	scala/collection/mutable/OpenHashMap.scala	/^  private var _size = 0$/;"	v
_tasksLocal	scala/concurrent/Future.scala	/^    private val _tasksLocal = new ThreadLocal[List[Runnable]]()$/;"	V
_tasksupport	scala/collection/parallel/ParIterableLike.scala	/^  private var _tasksupport = defaultTaskSupport$/;"	v
_toString	scala/runtime/ScalaRunTime.scala	/^  def _toString(x: Product): String =$/;"	m
a	scala/Array.scala	/^  \/\/ Array(e0, ..., en) is translated to { val a = new Array(3); a(i) = ei; a }$/;"	V
a	scala/Array.scala	/^ *  val a = Array(1, 2)$/;"	V
a	scala/collection/BitSetLike.scala	/^    val a = new Array[Long](nwords)$/;"	V
a	scala/collection/BitSetLike.scala	/^    val a = toBitMask$/;"	V
a	scala/collection/GenSeqLike.scala	/^   *       scala> val a = LinkedList(1)$/;"	V
a	scala/collection/GenTraversableLike.scala	/^   *      scala> val a = LinkedList(1)$/;"	V
a	scala/collection/GenTraversableOnce.scala	/^   *      scala> val a = LinkedList(1,2,3,4)$/;"	V
a	scala/collection/TraversableOnce.scala	/^   *      scala> val a = LinkedList(1,2,3,4)$/;"	V
a	scala/collection/immutable/BitSet.scala	/^      val a = new Array[Long](len)$/;"	V
a	scala/collection/immutable/HashMap.scala	/^            val a = thislsb - 1$/;"	V
a	scala/collection/mutable/BitSet.scala	/^    val a = new Array[Long](len)$/;"	V
a	scala/collection/mutable/LinkedList.scala	/^  *    scala>     val a = LinkedList(1, 2, 3)$/;"	V
a	scala/collection/mutable/LinkedListLike.scala	/^   *      scala> val a = LinkedList(1, 2)$/;"	V
a	scala/collection/mutable/LinkedListLike.scala	/^   *    scala> val a = new LinkedList[Int]()$/;"	V
a	scala/collection/parallel/mutable/ParArray.scala	/^      val a = arr$/;"	V
a	scala/compat/Platform.scala	/^   *  val a = scala.compat.Platform.createArray(classOf[Int], 4).asInstanceOf[Array[Int]] \/\/ returns Array[Int](0, 0, 0, 0)$/;"	V
a	scala/compat/Platform.scala	/^   *  val a = scala.compat.Platform.getClassForName("java.lang.Integer")  \/\/ returns the Class[_] for java.lang.Integer$/;"	V
a	scala/concurrent/duration/Duration.scala	/^    val a = math.abs(_a)$/;"	V
a	scala/io/BytePickle.scala	/^      val a = f(b)$/;"	V
a	scala/io/BytePickle.scala	/^      val a = resPa._1$/;"	V
a	scala/util/Sorting.scala	/^        var a = off$/;"	v
a	scala/util/Sorting.scala	/^      var a = _a$/;"	v
a	scala/xml/dtd/ContentModelParser.scala	/^    case NAME   => val a = Letter(ElemName(value)); nextToken; a$/;"	V
a	scala/xml/dtd/ContentModelParser.scala	/^    case NAME   => val a = Letter(ElemName(value)); nextToken; maybeSuffix(a)$/;"	V
a2	scala/collection/immutable/Vector.scala	/^    val a2 = new Array[AnyRef](array.length)$/;"	V
aMap	scala/xml/parsing/MarkupParser.scala	/^    var aMap: MetaData = Null$/;"	v
ab	scala/util/Sorting.scala	/^      val ab = x(a) compare x(b)$/;"	V
abort	scala/collection/generic/Signalling.scala	/^  def abort() = signalDelegate.abort$/;"	m
abort	scala/collection/generic/Signalling.scala	/^  def abort(): Unit$/;"	m
abortflag	scala/collection/generic/Signalling.scala	/^  @volatile private var abortflag = false$/;"	v
abs	scala/math/BigDecimal.scala	/^  def abs: BigDecimal = this.bigDecimal.abs$/;"	m
abs	scala/math/BigInt.scala	/^  def abs: BigInt = new BigInt(this.bigInteger.abs())$/;"	m
abs	scala/math/Numeric.scala	/^    def abs(): T = Numeric.this.abs(lhs)$/;"	m
abs	scala/math/Numeric.scala	/^  def abs(x: T): T = if (lt(x, zero)) negate(x) else x$/;"	m
abs	scala/math/package.scala	/^  def abs(x: Double): Double = java.lang.Math.abs(x)$/;"	m
abs	scala/math/package.scala	/^  def abs(x: Float): Float = java.lang.Math.abs(x)$/;"	m
abs	scala/math/package.scala	/^  def abs(x: Int): Int = java.lang.Math.abs(x)$/;"	m
abs	scala/math/package.scala	/^  def abs(x: Long): Long = java.lang.Math.abs(x)$/;"	m
abs	scala/runtime/ScalaNumberProxy.scala	/^  def abs             = num.abs(self)$/;"	m
abstractType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def abstractType[T](prefix: OptManifest[_], name: String, clazz: jClass[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
abstractType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def abstractType[T](prefix: OptManifest[_], name: String, upperbound: ClassManifest[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
abstractType	scala/reflect/Manifest.scala	/^  def abstractType[T](prefix: Manifest[_], name: String, upperBound: Predef.Class[_], args: Manifest[_]*): Manifest[T] =$/;"	m
ac	scala/util/Sorting.scala	/^      val ac = x(a) compare x(c)$/;"	V
acc	scala/Array.scala	/^      var acc = start$/;"	v
acc	scala/collection/Iterator.scala	/^    private[this] var acc = start$/;"	v
acc	scala/collection/LinearSeqOptimized.scala	/^    var acc = z$/;"	v
acc	scala/collection/TraversableLike.scala	/^    var acc = z$/;"	v
acc	scala/collection/TraversableOnce.scala	/^    var acc: B = 0.asInstanceOf[B]$/;"	v
acc	scala/collection/generic/GenTraversableFactory.scala	/^      var acc = start$/;"	v
acc	scala/collection/immutable/ListMap.scala	/^      var acc = ListMap[A, B1]()$/;"	v
accept	scala/util/parsing/combinator/Parsers.scala	/^  def accept[ES <% List[Elem]](es: ES): Parser[List[Elem]] = acceptSeq(es)$/;"	m
accept	scala/util/parsing/combinator/Parsers.scala	/^  def accept[U](expected: String, f: PartialFunction[Elem, U]): Parser[U] = acceptMatch(expected, f)$/;"	m
accept	scala/xml/dtd/ContentModelParser.scala	/^  def accept(tok: Int) = {$/;"	m
acceptIf	scala/util/parsing/combinator/Parsers.scala	/^  def acceptIf(p: Elem => Boolean)(err: Elem => String): Parser[Elem] = Parser { in =>$/;"	m
acceptMatch	scala/util/parsing/combinator/Parsers.scala	/^  def acceptMatch[U](expected: String, f: PartialFunction[Elem, U]): Parser[U] = Parser{ in =>$/;"	m
acceptSeq	scala/util/parsing/combinator/Parsers.scala	/^  def acceptSeq[ES <% Iterable[Elem]](es: ES): Parser[List[Elem]] =$/;"	m
acos	scala/math/package.scala	/^  def acos(x: Double): Double = java.lang.Math.acos(x)$/;"	m
acquire	scala/concurrent/Lock.scala	/^  def acquire() = synchronized {$/;"	m
activateSubscription	scala/collection/mutable/Publisher.scala	/^  def activateSubscription(sub: Sub) { suspended -= sub }$/;"	m
actualInitialSize	scala/collection/mutable/OpenHashMap.scala	/^  private[this] val actualInitialSize = OpenHashMap.nextPowerOfTwo(initialSize)$/;"	V
actualn	scala/collection/parallel/ParIterableLike.scala	/^    val actualn = if (size > n) n else size$/;"	V
adapter	scala/xml/factory/XMLLoader.scala	/^  def adapter: FactoryAdapter = new NoBindingFactoryAdapter()$/;"	m
add	scala/collection/mutable/SetLike.scala	/^  def add(elem: A): Boolean = {$/;"	m
add	scala/runtime/BoxesRunTime.java	/^    public static Object add(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
add	scala/runtime/MethodCache.scala	/^  def add(forReceiver: JClass[_], forMethod: JMethod): MethodCache = this$/;"	m
add	scala/runtime/MethodCache.scala	/^  def add(forReceiver: JClass[_], forMethod: JMethod): MethodCache =$/;"	m
add	scala/runtime/MethodCache.scala	/^  def add(forReceiver: JClass[_], forMethod: JMethod): MethodCache$/;"	m
add	scala/util/automata/SubsetConstruction.scala	/^    def add(Q: immutable.BitSet) {$/;"	m
addBinder	scala/util/parsing/ast/Binders.scala	/^    def addBinder(b: binderType) { substitution += Pair(b, b) }$/;"	m
addBinding	scala/collection/mutable/MultiMap.scala	/^  def addBinding(key: A, value: B): this.type = {$/;"	m
addFinal	scala/util/automata/SubsetConstruction.scala	/^    def addFinal(q: immutable.BitSet) {$/;"	m
addOne	scala/collection/mutable/LinkedList.scala	/^  *    scala>     val addOne: PartialFunction[Any, Float] = {case i: Int => i + 1.0f}$/;"	V
addShutdownHook	scala/sys/package.scala	/^  def addShutdownHook(body: => Unit): ShutdownHookThread = ShutdownHookThread(body)$/;"	m
addString	scala/collection/TraversableOnce.scala	/^  def addString(b: StringBuilder): StringBuilder = addString(b, "")$/;"	m
addString	scala/collection/TraversableOnce.scala	/^  def addString(b: StringBuilder, sep: String): StringBuilder = addString(b, "", sep, "")$/;"	m
addString	scala/collection/TraversableOnce.scala	/^  def addString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder = {$/;"	m
adecls	scala/xml/dtd/ElementValidator.scala	/^  protected var adecls:       List[AttrDecl]         = _$/;"	v
advance	scala/collection/Iterator.scala	/^      def advance() = {$/;"	m
advance	scala/collection/concurrent/TrieMap.scala	/^  def advance(): Unit = if (depth >= 0) {$/;"	m
advanceDFA	scala/xml/parsing/ValidatingMarkupHandler.scala	/^    def advanceDFA(dm:DFAContentModel) = {$/;"	m
after	scala/util/matching/Regex.scala	/^    def after(i: Int): java.lang.CharSequence =$/;"	m
after	scala/util/matching/Regex.scala	/^    def after: java.lang.CharSequence =$/;"	m
afterCombine	scala/collection/parallel/package.scala	/^    def afterCombine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]) {}$/;"	m
aggregate	scala/collection/GenTraversableOnce.scala	/^  def aggregate[B](z: B)(seqop: (B, A) => B, combop: (B, B) => B): B$/;"	m
aggregate	scala/collection/TraversableOnce.scala	/^  def aggregate[B](z: B)(seqop: (B, A) => B, combop: (B, B) => B): B = foldLeft(z)(seqop)$/;"	m
aggregate	scala/collection/parallel/ParIterableLike.scala	/^  def aggregate[S](z: S)(seqop: (S, T) => S, combop: (S, S) => S): S = {$/;"	m
ahead	scala/collection/Iterator.scala	/^    var ahead: Iterator[A] = null$/;"	v
ai	scala/StringContext.scala	/^    val ai = args.iterator$/;"	V
all	scala/collection/parallel/mutable/ParArray.scala	/^      var all = true$/;"	v
allDeclarationsProcessed	scala/xml/Document.scala	/^  var allDeclarationsProcessed = false$/;"	v
allThreads	scala/sys/package.scala	/^  def allThreads(): IndexedSeq[Thread] = {$/;"	m
allocateAndCopy	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def allocateAndCopy: To$/;"	m
allocateAndCopy	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def allocateAndCopy = if (chain.size > 1) {$/;"	m
allowForwardRef	scala/util/parsing/ast/Binders.scala	/^    def allowForwardRef: Scope[binderType] = this \/\/ TODO$/;"	m
alongWith	scala/collection/parallel/package.scala	/^    def alongWith(that: Throwable) = (self, that) match {$/;"	m
alongWith	scala/collection/parallel/package.scala	/^    def alongWith(that: Throwable): Throwable$/;"	m
alpha_==	scala/util/parsing/ast/Binders.scala	/^    def alpha_==[t <: NameElement](other: BoundElement[t]): Boolean = scope.indexFor(el) == other.scope.indexFor(other.el)$/;"	m
alphanumeric	scala/util/Random.scala	/^  def alphanumeric: Stream[Char] = {$/;"	m
alt	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: Nothing](a: => ParseResult[U]): ParseResult[U] = { val alt = a; alt match {$/;"	V
aname	scala/xml/parsing/MarkupParser.scala	/^      val aname = xName$/;"	V
anchored	scala/util/matching/Regex.scala	/^  def anchored: Regex             = this$/;"	m
and	scala/util/control/Exception.scala	/^    def and(other: => Unit): Finally = new Finally({ body ; other })$/;"	m
andDo	scala/util/parsing/ast/Binders.scala	/^      def andDo(block: => Unit): T = {block; r}$/;"	m
andDo	scala/util/parsing/ast/Binders.scala	/^    def andDo(block: => Unit): T$/;"	m
andFinally	scala/util/control/Exception.scala	/^    def andFinally(body: => Unit): Catch[T] = fin match {$/;"	m
andThen	scala/concurrent/Future.scala	/^  def andThen[U](pf: PartialFunction[Try[T], U])(implicit executor: ExecutionContext): Future[T] = {$/;"	m
annotation.tailrec	scala/collection/mutable/ListMap.scala	/^import annotation.tailrec$/;"	i
anonfun0	scala/Function0.scala	/^ *    val anonfun0 = new Function0[String] {$/;"	V
anonfun1	scala/Function1.scala	/^ *    val anonfun1 = new Function1[Int, Int] {$/;"	V
anonfun2	scala/Function2.scala	/^ *    val anonfun2 = new Function2[Int, Int, Int] {$/;"	V
ans	scala/collection/SeqLike.scala	/^      val ans = kmpSearch(source, s0, fixed_s1, target, t0, t1, false)$/;"	V
ans	scala/collection/SeqLike.scala	/^      val ans = kmpSearch(source, s0, s1, target, t0, t1, true)$/;"	V
answer	scala/collection/SeqLike.scala	/^        var answer = -1$/;"	v
anyHash	scala/runtime/Statics.java	/^  public static int anyHash(Object x) {$/;"	m	class:Statics
anyValClass	scala/runtime/ScalaRunTime.scala	/^  def anyValClass[T <: AnyVal : ClassTag](value: T): jClass[T] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: T, state: Array[Byte]): Array[Byte]$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: T, state: PicklerState): PicklerState$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: t, state: Array[Byte]): Array[Byte] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(a: t, state: PicklerState): PicklerState =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: Byte, s: PicklerState): PicklerState =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: RefDef, s: Array[Byte]): Array[Byte] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: u, s: Array[Byte]): Array[Byte] = {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(b: u, s: PicklerState): PicklerState = {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(n: Int, s: Array[Byte]): Array[Byte] =$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(n: Int, s: PicklerState): PicklerState = {$/;"	m
appP	scala/io/BytePickle.scala	/^    def appP(v: a, state: PicklerState): PicklerState = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: Array[Byte]): (Int, Array[Byte]) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: Array[Byte]): (RefDef, Array[Byte]) =$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: Array[Byte]): (u, Array[Byte]) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: UnPicklerState): (Byte, UnPicklerState) =$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: UnPicklerState): (Int,UnPicklerState) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(s: UnPicklerState): (u, UnPicklerState) = {$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: Array[Byte]) = (x, state)$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: Array[Byte]): (T, Array[Byte])$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: UnPicklerState) = (x, state)$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: UnPicklerState): (T, UnPicklerState)$/;"	m
appU	scala/io/BytePickle.scala	/^    def appU(state: UnPicklerState): (a, UnPicklerState) = {$/;"	m
append	scala/collection/immutable/RedBlack.scala	/^      def append(tl: Tree[B], tr: Tree[B]): Tree[B] = (tl, tr) match {$/;"	m
append	scala/collection/immutable/RedBlackTree.scala	/^    def append(tl: Tree[A, B], tr: Tree[A, B]): Tree[A, B] = if (tl eq null) {$/;"	m
append	scala/collection/immutable/Stream.scala	/^  def append[B >: A](rest: => TraversableOnce[B]): Stream[B] =$/;"	m
append	scala/collection/mutable/BufferLike.scala	/^  def append(elems: A*) { appendAll(elems) }$/;"	m
append	scala/collection/mutable/LinkedListLike.scala	/^  def append(that: This): This = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(s: String): StringBuilder = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(sb: StringBuilder): StringBuilder = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Any): StringBuilder = {$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Boolean): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Byte): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Char): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Double): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Float): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Int): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Long): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/collection/mutable/StringBuilder.scala	/^  def append(x: Short): StringBuilder = { underlying append x ; this }$/;"	m
append	scala/util/MurmurHash.scala	/^  def append(i: Int) {$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: Nothing](a: => ParseResult[U]): ParseResult[U] = this$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: Nothing](a: => ParseResult[U]): ParseResult[U] = { val alt = a; alt match {$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](a: => ParseResult[U]): ParseResult[U] = this$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](a: => ParseResult[U]): ParseResult[U]$/;"	m
append	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](p0: => Parser[U]): Parser[U] = { lazy val p = p0 \/\/ lazy argument$/;"	m
append	scala/xml/MetaData.scala	/^  def append(updates: MetaData, scope: NamespaceBinding = TopScope): MetaData =$/;"	m
append	scala/xml/TextBuffer.scala	/^  def append(cs: Seq[Char]): this.type = {$/;"	m
appendAll	scala/collection/mutable/BufferLike.scala	/^  def appendAll(xs: TraversableOnce[A]) { this ++= xs }$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: Array[Char]): StringBuilder = {$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: Array[Char], offset: Int, len: Int): StringBuilder = {$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: String): StringBuilder = {$/;"	m
appendAll	scala/collection/mutable/StringBuilder.scala	/^  def appendAll(xs: TraversableOnce[Char]): StringBuilder = appendAll(xs.toArray)$/;"	m
appendByte	scala/io/BytePickle.scala	/^  def appendByte(a: Array[Byte], b: Int): Array[Byte] =$/;"	m
appendEscapedQuoted	scala/xml/Utility.scala	/^  def appendEscapedQuoted(s: String, sb: StringBuilder): StringBuilder = {$/;"	m
appendMiddle	scala/collection/parallel/RemainsIterator.scala	/^      var appendMiddle = false$/;"	v
appendParIterable	scala/collection/parallel/RemainsIterator.scala	/^  def appendParIterable[U >: T, PI <: IterableSplitter[U]](that: PI) = new Appended[U, PI](that)$/;"	m
appendParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def appendParSeq[U >: T, PI <: SeqSplitter[U]](that: PI) = new Appended[U, PI](that)$/;"	m
appendQuoted	scala/xml/Utility.scala	/^  def appendQuoted(s: String): String = sbToString(appendQuoted(s, _))$/;"	m
appendQuoted	scala/xml/Utility.scala	/^  def appendQuoted(s: String, sb: StringBuilder) = {$/;"	m
appendText	scala/xml/parsing/MarkupParser.scala	/^  def appendText(pos: Int, ts: NodeBuffer, txt: String): Unit = {$/;"	m
appendln	scala/collection/parallel/RemainsIterator.scala	/^    def appendln(s: String) = output += s + "\\n"$/;"	m
apply	scala/Array.scala	/^      def apply() = ArrayBuilder.make[T]()(t)$/;"	m
apply	scala/Array.scala	/^      def apply() = ArraySeq.newBuilder[T]$/;"	m
apply	scala/Array.scala	/^      def apply(from: Array[_]) = ArrayBuilder.make[T]()(t)$/;"	m
apply	scala/Array.scala	/^      def apply(from: Array[_]) = ArraySeq.newBuilder[T]$/;"	m
apply	scala/Array.scala	/^  def apply(i: Int): T = throw new Error()$/;"	m
apply	scala/Array.scala	/^  def apply(x: Boolean, xs: Boolean*): Array[Boolean] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Byte, xs: Byte*): Array[Byte] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Char, xs: Char*): Array[Char] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Double, xs: Double*): Array[Double] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Float, xs: Float*): Array[Float] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Int, xs: Int*): Array[Int] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Long, xs: Long*): Array[Long] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Short, xs: Short*): Array[Short] = {$/;"	m
apply	scala/Array.scala	/^  def apply(x: Unit, xs: Unit*): Array[Unit] = {$/;"	m
apply	scala/Array.scala	/^  def apply[T: ClassTag](xs: T*): Array[T] = {$/;"	m
apply	scala/Enumeration.scala	/^        def apply() = newBuilder$/;"	m
apply	scala/Enumeration.scala	/^        def apply(from: ValueSet) = newBuilder$/;"	m
apply	scala/Enumeration.scala	/^    def apply(elems: Value*): ValueSet = (newBuilder ++= elems).result()$/;"	m
apply	scala/Function0.scala	/^  def apply(): R$/;"	m
apply	scala/Function1.scala	/^  def apply(v1: T1): R$/;"	m
apply	scala/Function10.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10): R$/;"	m
apply	scala/Function11.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11): R$/;"	m
apply	scala/Function12.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12): R$/;"	m
apply	scala/Function13.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13): R$/;"	m
apply	scala/Function14.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14): R$/;"	m
apply	scala/Function15.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15): R$/;"	m
apply	scala/Function16.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16): R$/;"	m
apply	scala/Function17.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17): R$/;"	m
apply	scala/Function18.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18): R$/;"	m
apply	scala/Function19.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19): R$/;"	m
apply	scala/Function2.scala	/^  def apply(v1: T1, v2: T2): R$/;"	m
apply	scala/Function20.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19, v20: T20): R$/;"	m
apply	scala/Function21.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19, v20: T20, v21: T21): R$/;"	m
apply	scala/Function22.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9, v10: T10, v11: T11, v12: T12, v13: T13, v14: T14, v15: T15, v16: T16, v17: T17, v18: T18, v19: T19, v20: T20, v21: T21, v22: T22): R$/;"	m
apply	scala/Function3.scala	/^  def apply(v1: T1, v2: T2, v3: T3): R$/;"	m
apply	scala/Function4.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4): R$/;"	m
apply	scala/Function5.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5): R$/;"	m
apply	scala/Function6.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6): R$/;"	m
apply	scala/Function7.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7): R$/;"	m
apply	scala/Function8.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8): R$/;"	m
apply	scala/Function9.scala	/^  def apply(v1: T1, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, v7: T7, v8: T8, v9: T9): R$/;"	m
apply	scala/LowPriorityImplicits.scala	/^      def apply() = immutable.IndexedSeq.newBuilder[T]$/;"	m
apply	scala/LowPriorityImplicits.scala	/^      def apply(from: String) = immutable.IndexedSeq.newBuilder[T]$/;"	m
apply	scala/Option.scala	/^  def apply[A](x: A): Option[A] = if (x == null) None else Some(x)$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: A): B = f1.applyOrElse(x, f2)$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: A): C = k(pf(x))$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: A): Option[B] = {$/;"	m
apply	scala/PartialFunction.scala	/^    def apply(x: Any) = throw new MatchError(x)$/;"	m
apply	scala/PartialFunction.scala	/^  def apply[A, B](f: A => B): PartialFunction[A, B] = { case x => f(x) }$/;"	m
apply	scala/Predef.scala	/^    def apply()             = mutable.StringBuilder.newBuilder$/;"	m
apply	scala/Predef.scala	/^    def apply(from: String) = apply()$/;"	m
apply	scala/Predef.scala	/^    def apply[A, B, C](x: A, y: B, z: C) = Tuple3(x, y, z)$/;"	m
apply	scala/Predef.scala	/^    def apply[A, B](x: A, y: B) = Tuple2(x, y)$/;"	m
apply	scala/Symbol.scala	/^  def apply(name: K): V = {$/;"	m
apply	scala/collection/GenMapLike.scala	/^  def apply(key: A): B$/;"	m
apply	scala/collection/GenSeqLike.scala	/^  def apply(idx: Int): A$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = (self.apply(idx), thatSeq.apply(idx))$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = forced.apply(idx)$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = self(index(idx))$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) = {$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int) =$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): A = self.apply(length - 1 - idx)$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): A =$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): B = mapping(self(idx))$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): B =$/;"	m
apply	scala/collection/GenSeqViewLike.scala	/^    def apply(idx: Int): B$/;"	m
apply	scala/collection/GenSetLike.scala	/^  def apply(elem: A): Boolean = this contains elem$/;"	m
apply	scala/collection/IterableView.scala	/^      def apply() = new NoBuilder$/;"	m
apply	scala/collection/IterableView.scala	/^      def apply(from: Coll) = new NoBuilder$/;"	m
apply	scala/collection/Iterator.scala	/^  def apply[A](elems: A*): Iterator[A] = elems.iterator$/;"	m
apply	scala/collection/LinearSeqOptimized.scala	/^  def apply(n: Int): A = {$/;"	m
apply	scala/collection/MapLike.scala	/^  def apply(key: A): B = get(key) match {$/;"	m
apply	scala/collection/SeqLike.scala	/^        def apply(x: Int) = Warr(x).asInstanceOf[B]$/;"	m
apply	scala/collection/SeqLike.scala	/^        def apply(x: Int) = iso(n0 + x).asInstanceOf[B]$/;"	m
apply	scala/collection/SeqLike.scala	/^        def apply(x: Int) = iso(n1 - 1 - x).asInstanceOf[B]$/;"	m
apply	scala/collection/SeqLike.scala	/^  def apply(idx: Int): A$/;"	m
apply	scala/collection/SeqView.scala	/^      def apply() = new NoBuilder$/;"	m
apply	scala/collection/SeqView.scala	/^      def apply(from: Coll) = new NoBuilder$/;"	m
apply	scala/collection/SeqViewLike.scala	/^    def apply(idx: Int): B$/;"	m
apply	scala/collection/TraversableOnce.scala	/^    def apply() = newIterator$/;"	m
apply	scala/collection/TraversableOnce.scala	/^    def apply(from: Coll[_]): Builder[A, Coll[A]] = from match {$/;"	m
apply	scala/collection/TraversableView.scala	/^      def apply() = new NoBuilder$/;"	m
apply	scala/collection/TraversableView.scala	/^      def apply(from: Coll) = new NoBuilder$/;"	m
apply	scala/collection/convert/Wrappers.scala	/^    def apply(i: Int) = underlying.get(i)$/;"	m
apply	scala/collection/generic/BitSetFactory.scala	/^    def apply() = newBuilder$/;"	m
apply	scala/collection/generic/BitSetFactory.scala	/^    def apply(from: Coll) = newBuilder$/;"	m
apply	scala/collection/generic/BitSetFactory.scala	/^  def apply(elems: Int*): Coll = (empty \/: elems) (_ + _)$/;"	m
apply	scala/collection/generic/CanBuildFrom.scala	/^  def apply(): Builder[Elem, To]$/;"	m
apply	scala/collection/generic/CanBuildFrom.scala	/^  def apply(from: From): Builder[Elem, To]$/;"	m
apply	scala/collection/generic/CanCombineFrom.scala	/^  def apply(): Combiner[Elem, To]$/;"	m
apply	scala/collection/generic/CanCombineFrom.scala	/^  def apply(from: From): Combiner[Elem, To]$/;"	m
apply	scala/collection/generic/ClassTagTraversableFactory.scala	/^    def apply = newBuilder[A]$/;"	m
apply	scala/collection/generic/ClassTagTraversableFactory.scala	/^    def apply(from: CC[_]) = from.genericClassTagBuilder[A]$/;"	m
apply	scala/collection/generic/GenMapFactory.scala	/^    def apply() = newBuilder$/;"	m
apply	scala/collection/generic/GenMapFactory.scala	/^    def apply(from: Coll) = newBuilder[A, B]$/;"	m
apply	scala/collection/generic/GenMapFactory.scala	/^  def apply[A, B](elems: (A, B)*): CC[A, B] = (newBuilder[A, B] ++= elems).result$/;"	m
apply	scala/collection/generic/GenSetFactory.scala	/^    def apply() = newBuilder[A]$/;"	m
apply	scala/collection/generic/GenSetFactory.scala	/^    def apply(from: CC[_]) = newBuilder[A]$/;"	m
apply	scala/collection/generic/GenTraversableFactory.scala	/^    def apply() = newBuilder[A]$/;"	m
apply	scala/collection/generic/GenTraversableFactory.scala	/^    def apply(from: Coll) = from.genericBuilder[A]$/;"	m
apply	scala/collection/generic/GenericClassTagCompanion.scala	/^  def apply[A](elems: A*)(implicit ord: ClassTag[A]): CC[A] = {$/;"	m
apply	scala/collection/generic/GenericCompanion.scala	/^  def apply[A](elems: A*): CC[A] = {$/;"	m
apply	scala/collection/generic/GenericOrderedCompanion.scala	/^  def apply[A](elems: A*)(implicit ord: Ordering[A]): CC[A] = {$/;"	m
apply	scala/collection/generic/OrderedTraversableFactory.scala	/^    def apply = newBuilder[A]$/;"	m
apply	scala/collection/generic/OrderedTraversableFactory.scala	/^    def apply(from: CC[_]) = from.genericOrderedBuilder[A]$/;"	m
apply	scala/collection/generic/ParMapFactory.scala	/^    def apply() = newCombiner[K, V]$/;"	m
apply	scala/collection/generic/ParMapFactory.scala	/^    def apply(from: MapColl) = from.genericMapCombiner[K, V].asInstanceOf[Combiner[(K, V), CC[K, V]]]$/;"	m
apply	scala/collection/generic/SliceInterval.scala	/^  def apply(from: Int, until: Int) = {$/;"	m
apply	scala/collection/generic/SortedMapFactory.scala	/^    def apply() = newBuilder[A, B]$/;"	m
apply	scala/collection/generic/SortedMapFactory.scala	/^    def apply(from: Coll) = newBuilder[A, B](ord)$/;"	m
apply	scala/collection/generic/SortedMapFactory.scala	/^  def apply[A, B](elems: (A, B)*)(implicit ord: Ordering[A]): CC[A, B] = (newBuilder[A, B](ord) ++= elems).result$/;"	m
apply	scala/collection/generic/SortedSetFactory.scala	/^    def apply() = newBuilder[A](ord)$/;"	m
apply	scala/collection/generic/SortedSetFactory.scala	/^    def apply(from: Coll) = newBuilder[A](ord)$/;"	m
apply	scala/collection/generic/SortedSetFactory.scala	/^  def apply[A](elems: A*)(implicit ord: Ordering[A]): CC[A] = (newBuilder[A](ord) ++= elems).result$/;"	m
apply	scala/collection/immutable/HashMap.scala	/^      def apply(kv1: (A1, B1), kv2: (A1, B1)): (A1, B1) = mergef(kv2, kv1)$/;"	m
apply	scala/collection/immutable/HashMap.scala	/^    def apply(kv1: (A, B), kv2: (A, B)): (A, B)$/;"	m
apply	scala/collection/immutable/HashMap.scala	/^    def apply(kv1: (A1, B1), kv2: (A1, B1)): (A1, B1) = mergef(kv1, kv2)$/;"	m
apply	scala/collection/immutable/IndexedSeq.scala	/^    def apply(idx: Int) = buf.apply(idx)$/;"	m
apply	scala/collection/immutable/IntMap.scala	/^    def apply(): Builder[(Int, B), IntMap[B]] = new MapBuilder[Int, B, IntMap[B]](empty[B])$/;"	m
apply	scala/collection/immutable/IntMap.scala	/^    def apply(from: IntMap[A]): Builder[(Int, B), IntMap[B]] = apply()$/;"	m
apply	scala/collection/immutable/IntMap.scala	/^  def apply[T](elems: (Int, T)*): IntMap[T] =$/;"	m
apply	scala/collection/immutable/LongMap.scala	/^    def apply(): Builder[(Long, B), LongMap[B]] = new MapBuilder[Long, B, LongMap[B]](empty[B])$/;"	m
apply	scala/collection/immutable/LongMap.scala	/^    def apply(from: LongMap[A]): Builder[(Long, B), LongMap[B]] = apply()$/;"	m
apply	scala/collection/immutable/LongMap.scala	/^  def apply[T](elems: (Long, T)*): LongMap[T] =$/;"	m
apply	scala/collection/immutable/NumericRange.scala	/^  def apply(idx: Int): T = {$/;"	m
apply	scala/collection/immutable/NumericRange.scala	/^  def apply[T](start: T, end: T, step: T)(implicit num: Integral[T]): Exclusive[T] =$/;"	m
apply	scala/collection/immutable/PagedSeq.scala	/^  def apply(index: Int) = {$/;"	m
apply	scala/collection/immutable/PagedSeq.scala	/^  def apply(index: Int) =$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: BigDecimal, end: BigDecimal, step: BigDecimal) =$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: BigInt, end: BigInt, step: BigInt) = NumericRange(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: Double, end: Double, step: Double) =$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: Int, end: Int, step: Int) = NumericRange(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^    def apply(start: Long, end: Long, step: Long) = NumericRange(start, end, step)$/;"	m
apply	scala/collection/immutable/Range.scala	/^  def apply(start: Int, end: Int): Range = new Range(start, end, 1)$/;"	m
apply	scala/collection/immutable/Range.scala	/^  def apply(start: Int, end: Int, step: Int): Range = new Range(start, end, step)$/;"	m
apply	scala/collection/immutable/Stream.scala	/^    def apply[A](hd: A, tl: => Stream[A]) = new Cons(hd, tl)$/;"	m
apply	scala/collection/immutable/StringLike.scala	/^  def apply(n: Int): Char = toString charAt n$/;"	m
apply	scala/collection/immutable/Vector.scala	/^  def apply(index: Int): A = {$/;"	m
apply	scala/collection/immutable/WrappedString.scala	/^    def apply() = newBuilder$/;"	m
apply	scala/collection/immutable/WrappedString.scala	/^    def apply(from: WrappedString) = newBuilder$/;"	m
apply	scala/collection/mutable/ArrayLike.scala	/^    def apply(idx: Int): Any = self.apply(idx) match {$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Boolean = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Byte = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Char = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Double = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Float = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Int = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Long = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Short = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): T = repr(index)$/;"	m
apply	scala/collection/mutable/ArrayOps.scala	/^    def apply(index: Int): Unit = repr(index)$/;"	m
apply	scala/collection/mutable/ArraySeq.scala	/^  def apply(idx: Int): A = {$/;"	m
apply	scala/collection/mutable/ArrayStack.scala	/^  def apply(n: Int): T =$/;"	m
apply	scala/collection/mutable/ArrayStack.scala	/^  def apply[A: ClassTag](elems: A*): ArrayStack[A] = {$/;"	m
apply	scala/collection/mutable/BufferLike.scala	/^  def apply(n: Int): A$/;"	m
apply	scala/collection/mutable/BufferProxy.scala	/^  def apply(n: Int): A = self.apply(n)$/;"	m
apply	scala/collection/mutable/IndexedSeqView.scala	/^      def apply() = new NoBuilder$/;"	m
apply	scala/collection/mutable/IndexedSeqView.scala	/^      def apply(from: Coll) = new NoBuilder$/;"	m
apply	scala/collection/mutable/IndexedSeqView.scala	/^      def apply(from: TraversableView[_, Array[_]]) = new NoBuilder$/;"	m
apply	scala/collection/mutable/OpenHashMap.scala	/^  def apply[K, V](elems : (K, V)*) = new OpenHashMap[K, V] ++= elems$/;"	m
apply	scala/collection/mutable/ResizableArray.scala	/^  def apply(idx: Int) = {$/;"	m
apply	scala/collection/mutable/UnrolledBuffer.scala	/^  def apply(idx: Int) =$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^      def apply(from: WrappedArray[_]): Builder[T, WrappedArray[T]] =$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^      def apply: Builder[T, WrappedArray[T]] =$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Boolean = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Byte = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Char = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Double = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Float = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Int = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Long = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Short = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): T = array(index).asInstanceOf[T]$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^    def apply(index: Int): Unit = array(index)$/;"	m
apply	scala/collection/mutable/WrappedArray.scala	/^  def apply(index: Int): T$/;"	m
apply	scala/collection/package.scala	/^      def apply()           = b.apply()$/;"	m
apply	scala/collection/package.scala	/^      def apply(from: From) = b.apply()$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^      def apply() = cbf()$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^      def apply() = newCombiner$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^      def apply() = shared$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^    def apply() = bf.apply()$/;"	m
apply	scala/collection/parallel/ParIterableLike.scala	/^    def apply(from: Sequential) = bf.apply(from.par.asInstanceOf[Repr]) \/\/ !!! we only use this on `this.seq`, and know that `this.seq.par.getClass == this.getClass`$/;"	m
apply	scala/collection/parallel/ParIterableView.scala	/^      def apply() = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/ParIterableView.scala	/^      def apply(from: Coll) = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/ParMapLike.scala	/^  def apply(key: K) = get(key) match {$/;"	m
apply	scala/collection/parallel/ParSeq.scala	/^  def apply(i: Int): T$/;"	m
apply	scala/collection/parallel/ParSeqLike.scala	/^    def apply(idx: Int) = self(idx)$/;"	m
apply	scala/collection/parallel/ParSeqView.scala	/^      def apply() = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/ParSeqView.scala	/^      def apply(from: Coll) = new NoCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, Nothing]$/;"	m
apply	scala/collection/parallel/immutable/ParHashMap.scala	/^  def apply[K, V] = new HashMapCombiner[K, V] {} \/\/ was: with EnvironmentPassingCombiner[(K, V), ParHashMap[K, V]]$/;"	m
apply	scala/collection/parallel/immutable/ParHashSet.scala	/^  def apply[T] = new HashSetCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, ParHashSet[T]] {}$/;"	m
apply	scala/collection/parallel/immutable/ParRange.scala	/^  def apply(start: Int, end: Int, step: Int, inclusive: Boolean) = new ParRange($/;"	m
apply	scala/collection/parallel/immutable/ParVector.scala	/^  def apply(idx: Int) = vector.apply(idx)$/;"	m
apply	scala/collection/parallel/immutable/package.scala	/^    def apply(idx: Int) = if (0 <= idx && idx < length) elem else throw new IndexOutOfBoundsException("" + idx)$/;"	m
apply	scala/collection/parallel/mutable/ParArray.scala	/^  def apply(i: Int) = array(i).asInstanceOf[T]$/;"	m
apply	scala/collection/parallel/mutable/ParHashMap.scala	/^  def apply[K, V] = new ParHashMapCombiner[K, V](HashTable.defaultLoadFactor) {} \/\/ was: with EnvironmentPassingCombiner[(K, V), ParHashMap[K, V]]$/;"	m
apply	scala/collection/parallel/mutable/ParHashSet.scala	/^  def apply[T] = new ParHashSetCombiner[T](FlatHashTable.defaultLoadFactor) {} \/\/with EnvironmentPassingCombiner[T, ParHashSet[T]]$/;"	m
apply	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def apply[T](): ResizableParArrayCombiner[T] = apply(new ArrayBuffer[ExposedArrayBuffer[T]] += new ExposedArrayBuffer[T])$/;"	m
apply	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def apply[T](c: ArrayBuffer[ExposedArrayBuffer[T]]): ResizableParArrayCombiner[T] = {$/;"	m
apply	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def apply[T](): UnrolledParArrayCombiner[T] = new UnrolledParArrayCombiner[T] {} \/\/ was: with EnvironmentPassingCombiner[T, ParArray[T]]$/;"	m
apply	scala/collection/parallel/package.scala	/^    def apply(): Combiner[U, Repr]$/;"	m
apply	scala/concurrent/DelayedLazyVal.scala	/^  def apply(): T = if (isDone) complete else f()$/;"	m
apply	scala/concurrent/Future.scala	/^  def apply[T](body: =>T)(implicit execctx: ExecutionContext): Future[T] = impl.Future(body)$/;"	m
apply	scala/concurrent/Promise.scala	/^  def apply[T](): Promise[T] = new impl.Promise.DefaultPromise[T]()$/;"	m
apply	scala/concurrent/duration/Duration.scala	/^  def apply(length: Double, unit: TimeUnit): Duration     = fromNanos(unit.toNanos(1) * length)$/;"	m
apply	scala/concurrent/duration/Duration.scala	/^  def apply(length: Long, unit: String)   = new FiniteDuration(length, Duration.timeUnit(unit))$/;"	m
apply	scala/concurrent/duration/Duration.scala	/^  def apply(length: Long, unit: String): FiniteDuration   = new FiniteDuration(length,  Duration.timeUnit(unit))$/;"	m
apply	scala/concurrent/duration/Duration.scala	/^  def apply(length: Long, unit: TimeUnit) = new FiniteDuration(length, unit)$/;"	m
apply	scala/concurrent/duration/Duration.scala	/^  def apply(length: Long, unit: TimeUnit): FiniteDuration = new FiniteDuration(length, unit)$/;"	m
apply	scala/concurrent/duration/Duration.scala	/^  def apply(s: String): Duration = {$/;"	m
apply	scala/concurrent/impl/Future.scala	/^  def apply[T](body: =>T)(implicit executor: ExecutionContext): scala.concurrent.Future[T] = {$/;"	m
apply	scala/io/Codec.scala	/^  def apply(charSet: Charset): Codec        = new Codec(charSet)$/;"	m
apply	scala/io/Codec.scala	/^  def apply(decoder: CharsetDecoder): Codec = {$/;"	m
apply	scala/io/Codec.scala	/^  def apply(encoding: String): Codec        = new Codec(Charset forName encoding)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(bd: BigDec): BigDecimal = apply(bd, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(bd: BigDec, mc: MathContext): BigDecimal = new BigDecimal(bd, mc)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(d: Double): BigDecimal = apply(d, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(d: Double, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(i: Int): BigDecimal = apply(i, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(i: Int, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(l: Long): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(l: Long, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(mc: MathContext): BigDecimal = BigDecimal(this.bigDecimal.toString, mc)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: BigInt, scale: Int): BigDecimal = apply(unscaledVal, scale, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: BigInt, scale: Int, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: Long, scale: Int): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(unscaledVal: Long, scale: Int, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: Array[Char]): BigDecimal = apply(x, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: Array[Char], mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: BigInt): BigDecimal = apply(x, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: BigInt, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: String): BigDecimal = apply(x, defaultMathContext)$/;"	m
apply	scala/math/BigDecimal.scala	/^  def apply(x: String, mc: MathContext): BigDecimal =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(bitlength: Int, certainty: Int, rnd: scala.util.Random): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(i: Int): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(l: Long): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(numbits: Int, rnd: scala.util.Random): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(signum: Int, magnitude: Array[Byte]): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: Array[Byte]): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: BigInteger): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: String): BigInt =$/;"	m
apply	scala/math/BigInt.scala	/^  def apply(x: String, radix: Int): BigInt =$/;"	m
apply	scala/math/Equiv.scala	/^  def apply[T: Equiv] : Equiv[T] = implicitly[Equiv[T]]$/;"	m
apply	scala/math/Ordering.scala	/^  def apply[T](implicit ord: Ordering[T]) = ord$/;"	m
apply	scala/parallel/Future.scala	/^  def apply(): R$/;"	m
apply	scala/ref/Reference.scala	/^  def apply(): T$/;"	m
apply	scala/ref/ReferenceWrapper.scala	/^  def apply() = {$/;"	m
apply	scala/ref/WeakReference.scala	/^  def apply[T <: AnyRef](value: T) = new WeakReference(value)$/;"	m
apply	scala/reflect/ClassTag.scala	/^  def apply[T](runtimeClass1: jClass[_]): ClassTag[T] =$/;"	m
apply	scala/sys/Prop.scala	/^    def apply(key: String): Prop[T]$/;"	m
apply	scala/sys/Prop.scala	/^  def apply[T: Creator](key: String): Prop[T] = implicitly[Creator[T]] apply key$/;"	m
apply	scala/sys/PropImpl.scala	/^  def apply(key: String): Prop[T] = new PropImpl[T](key, f)$/;"	m
apply	scala/sys/ShutdownHookThread.scala	/^  def apply(body: => Unit): ShutdownHookThread = {$/;"	m
apply	scala/sys/process/BasicIO.scala	/^    def apply(in: InputStream): InputStream      = new FilterInputStream(in) with Uncloseable { }$/;"	m
apply	scala/sys/process/BasicIO.scala	/^    def apply(out: OutputStream): OutputStream   = new FilterOutputStream(out) with Uncloseable { }$/;"	m
apply	scala/sys/process/BasicIO.scala	/^    def apply[T](nonzeroException: Boolean): Streamed[T] = {$/;"	m
apply	scala/sys/process/BasicIO.scala	/^  def apply(withIn: Boolean, buffer: StringBuffer, log: Option[ProcessLogger]) =$/;"	m
apply	scala/sys/process/BasicIO.scala	/^  def apply(withIn: Boolean, log: ProcessLogger) =$/;"	m
apply	scala/sys/process/BasicIO.scala	/^  def apply(withIn: Boolean, output: String => Unit, log: Option[ProcessLogger]) =$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(builder: JProcessBuilder): ProcessBuilder = new Simple(builder)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: Seq[String]): ProcessBuilder                    = apply(command, None)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: Seq[String], cwd: File, extraEnv: (String, String)*): ProcessBuilder =$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: Seq[String], cwd: Option[File], extraEnv: (String, String)*): ProcessBuilder = {$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String): ProcessBuilder                         = apply(command, None)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String, arguments: Seq[String]): ProcessBuilder = apply(command +: arguments, None)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String, cwd: File, extraEnv: (String, String)*): ProcessBuilder =$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: String, cwd: Option[File], extraEnv: (String, String)*): ProcessBuilder = {$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(command: scala.xml.Elem): ProcessBuilder  = apply(command.text.trim)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(file: File): FileBuilder                  = new FileImpl(file)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(name: String, exitValue: => Int): ProcessBuilder = new Dummy(name, exitValue)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(url: URL): URLBuilder                     = new URLImpl(url)$/;"	m
apply	scala/sys/process/Process.scala	/^  def apply(value: Boolean): ProcessBuilder           = apply(value.toString, if (value) 0 else 1)$/;"	m
apply	scala/sys/process/ProcessImpl.scala	/^    def apply(f: => Unit): Thread = apply(f, false)$/;"	m
apply	scala/sys/process/ProcessImpl.scala	/^    def apply(f: => Unit, daemon: Boolean): Thread = {$/;"	m
apply	scala/sys/process/ProcessImpl.scala	/^    def apply[T](f: => T): () => T = {$/;"	m
apply	scala/sys/process/ProcessLogger.scala	/^  def apply(file: File): FileProcessLogger = new FileProcessLogger(file)$/;"	m
apply	scala/sys/process/ProcessLogger.scala	/^  def apply(fn: String => Unit): ProcessLogger = apply(fn, fn)$/;"	m
apply	scala/sys/process/ProcessLogger.scala	/^  def apply(fout: String => Unit, ferr: String => Unit): ProcessLogger =$/;"	m
apply	scala/testing/Show.scala	/^    def apply[A](args: A*) {$/;"	m
apply	scala/util/MurmurHash.scala	/^  def apply(t: T) {$/;"	m
apply	scala/util/Try.scala	/^  def apply[T](r: => T): Try[T] =$/;"	m
apply	scala/util/control/Exception.scala	/^        def apply(x: Throwable) = f(x)$/;"	m
apply	scala/util/control/Exception.scala	/^    def apply(x: Throwable): T = f(downcast(x).get)$/;"	m
apply	scala/util/control/Exception.scala	/^    def apply[U >: T](body: => U): U =$/;"	m
apply	scala/util/control/NonFatal.scala	/^   def apply(t: Throwable): Boolean = t match {$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^         def apply[s  <% Mappable[s], t  <% Mappable[t]](x :{s, t}): {s, t} = x match {$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^      def apply[b <: NameElement](w : b): Option[Scope[b]] =$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply(i: Int): binderType = this.iterator.toList(i)$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply[A <: NameElement](v: A): Option[Scope[A]] = None$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply[A <: NameElement](v: A): Option[Scope[A]]$/;"	m
apply	scala/util/parsing/ast/Binders.scala	/^    def apply[binderType <: NameElement, elementT <% Mappable[elementT]](scope: Scope[binderType], element: elementT) = new UnderBinder(scope, element)$/;"	m
apply	scala/util/parsing/combinator/PackratParsers.scala	/^      def apply(in: Input) = in match {$/;"	m
apply	scala/util/parsing/combinator/PackratParsers.scala	/^      def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^      def apply(in: Input) = Parser.this(in) map (x => v0)$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^      def apply(in: Input) = seq(Parser.this, q)((x, y) => combine(x,y))(in)$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^      def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^    def apply(in: Input) = lastNoSuccessVar.withValue(None) {$/;"	m
apply	scala/util/parsing/combinator/Parsers.scala	/^    def apply(in: Input): ParseResult[T]$/;"	m
apply	scala/util/parsing/combinator/RegexParsers.scala	/^      def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/combinator/RegexParsers.scala	/^    def apply(in: Input) = {$/;"	m
apply	scala/util/parsing/input/StreamReader.scala	/^  def apply(in: java.io.Reader): StreamReader = {$/;"	m
apply	scala/util/regexp/Base.scala	/^    def apply(rs: _regexpT*) = if (rs.isEmpty) Eps else new Sequ(rs: _*)$/;"	m
apply	scala/util/regexp/Base.scala	/^    def apply(rs: _regexpT*) =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(key: String): Seq[Node]$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String): Seq[Node]$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(pre: Option[String], key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(pre: String, key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	m
apply	scala/xml/Attribute.scala	/^  def apply(pre: String, key: String, value: String, next: MetaData): Attribute =$/;"	m
apply	scala/xml/Elem.scala	/^  def apply(prefix: String, label: String, attributes: MetaData, scope: NamespaceBinding, child: Node*): Elem =$/;"	m
apply	scala/xml/Elem.scala	/^  def apply(prefix: String, label: String, attributes: MetaData, scope: NamespaceBinding, minimizeEmpty: Boolean, child: Node*): Elem =$/;"	m
apply	scala/xml/MetaData.scala	/^  def apply(key: String): Seq[Node]$/;"	m
apply	scala/xml/MetaData.scala	/^  def apply(namespace_uri: String, scp: NamespaceBinding, k: String): Seq[Node]$/;"	m
apply	scala/xml/NodeSeq.scala	/^      def apply() = newBuilder$/;"	m
apply	scala/xml/NodeSeq.scala	/^      def apply(from: Coll) = newBuilder$/;"	m
apply	scala/xml/NodeSeq.scala	/^  def apply(f: Node => Boolean): NodeSeq = filter(f)$/;"	m
apply	scala/xml/NodeSeq.scala	/^  def apply(i: Int): Node = theSeq(i)$/;"	m
apply	scala/xml/Null.scala	/^  def apply(key: String) =$/;"	m
apply	scala/xml/Null.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String) = null$/;"	m
apply	scala/xml/PCData.scala	/^  def apply(data: String) = new PCData(data)$/;"	m
apply	scala/xml/PrefixedAttribute.scala	/^  def apply(key: String): Seq[Node] = next(key)$/;"	m
apply	scala/xml/PrefixedAttribute.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String): Seq[Node] = {$/;"	m
apply	scala/xml/Text.scala	/^  def apply(data: String) = new Text(data)$/;"	m
apply	scala/xml/Unparsed.scala	/^  def apply(data: String) = new Unparsed(data)$/;"	m
apply	scala/xml/UnprefixedAttribute.scala	/^  def apply(key: String): Seq[Node] =$/;"	m
apply	scala/xml/UnprefixedAttribute.scala	/^  def apply(namespace: String, scope: NamespaceBinding, key: String): Seq[Node] =$/;"	m
apply	scala/xml/dtd/ElementValidator.scala	/^  def apply(n: Node): Boolean =$/;"	m
apply	scala/xml/parsing/XhtmlEntities.scala	/^  def apply() = entities$/;"	m
apply	scala/xml/parsing/XhtmlParser.scala	/^  def apply(source: Source): NodeSeq = new XhtmlParser(source).initialize.document$/;"	m
apply	scala/xml/transform/BasicTransformer.scala	/^  def apply(n: Node): Node = {$/;"	m
applyOrElse	scala/PartialFunction.scala	/^  def applyOrElse[A1 <: A, B1 >: B](x: A1, default: A1 => B1): B1 =$/;"	m
applySeq	scala/sys/process/Process.scala	/^  def applySeq[T](builders: Seq[T])(implicit convert: T => Source): Seq[Source] = builders.map(convert)$/;"	m
arg	scala/xml/Attribute.scala	/^    val arg = if (isPrefixed) scope getURI pre else null$/;"	V
arg	scala/xml/parsing/FactoryAdapter.scala	/^        val arg = if (pre == null) null else key$/;"	V
arg1	scala/collection/immutable/StringLike.scala	/^    val arg1 = java.util.regex.Pattern.quote(literal)$/;"	V
arg2	scala/collection/immutable/StringLike.scala	/^    val arg2 = java.util.regex.Matcher.quoteReplacement(replacement)$/;"	V
args1	scala/testing/Show.scala	/^    val args1 = args map (_.asInstanceOf[AnyRef])$/;"	V
args2	scala/xml/include/sax/Main.scala	/^    val args2 = if (dashR) args drop 2 else args$/;"	V
arr	scala/Array.scala	/^    val arr: Array[Array[T]] = (new Array[Array[T]](n1): Array[Array[T]])$/;"	V
arr	scala/Array.scala	/^ *  val arr = Array(1, 2, 3)$/;"	V
arr	scala/collection/GenSeqViewLike.scala	/^      val arr = new Array[Int](self.length)$/;"	V
arr	scala/collection/SeqLike.scala	/^    val arr = new ArraySeq[A](len)$/;"	V
arr	scala/collection/SeqLike.scala	/^    val arr = new Array[Int](wlen)$/;"	V
arr	scala/collection/concurrent/TrieMap.scala	/^    val arr = array$/;"	V
arr	scala/collection/mutable/StringBuilder.scala	/^    val arr = new Array[Char](length)$/;"	V
arr	scala/collection/parallel/ParIterableLike.scala	/^    val arr = new Array[U](size)$/;"	V
arr	scala/collection/parallel/mutable/ParHashTable.scala	/^        val arr = convertToArrayBuffer(es)$/;"	V
arr	scala/reflect/Manifest.scala	/^  def arr[T: Manifest] = new Array[T](0)                \/\/ shorthand for the preceding$/;"	m
arr	scala/reflect/Manifest.scala	/^  def arr[T] = new Array[T](0)                          \/\/ does not compile$/;"	m
arr	scala/reflect/Manifest.scala	/^  def arr[T](implicit m: Manifest[T]) = new Array[T](0) \/\/ compiles$/;"	m
arr	scala/runtime/ScalaRunTime.scala	/^    val arr = new Array[AnyRef](xs.length)$/;"	V
arr	scala/util/hashing/MurmurHash3.scala	/^    val arr = x.productArity$/;"	V
arrReversed	scala/Array.scala	/^ *  val arrReversed = arr.reverse$/;"	V
array	scala/Array.scala	/^    val array = new Array[Boolean](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Byte](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Char](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Double](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Float](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Int](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Long](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Short](xs.length + 1)$/;"	V
array	scala/Array.scala	/^    val array = new Array[T](xs.length)$/;"	V
array	scala/Array.scala	/^    val array = new Array[Unit](xs.length + 1)$/;"	V
array	scala/collection/mutable/ArraySeq.scala	/^      override val array = cloned$/;"	V
array	scala/collection/mutable/ArraySeq.scala	/^  val array: Array[AnyRef] = new Array[AnyRef](length)$/;"	V
array	scala/collection/mutable/ResizableArray.scala	/^  protected var array: Array[AnyRef] = new Array[AnyRef](math.max(initialSize, 1))$/;"	v
array	scala/collection/mutable/WrappedArray.scala	/^  def array: Array[T]$/;"	m
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofBoolean(val array: Array[Boolean]) extends WrappedArray[Boolean] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofByte(val array: Array[Byte]) extends WrappedArray[Byte] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofChar(val array: Array[Char]) extends WrappedArray[Char] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofDouble(val array: Array[Double]) extends WrappedArray[Double] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofFloat(val array: Array[Float]) extends WrappedArray[Float] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofInt(val array: Array[Int]) extends WrappedArray[Int] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofLong(val array: Array[Long]) extends WrappedArray[Long] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofRef[T <: AnyRef](val array: Array[T]) extends WrappedArray[T] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofShort(val array: Array[Short]) extends WrappedArray[Short] with Serializable {$/;"	V
array	scala/collection/mutable/WrappedArray.scala	/^  final class ofUnit(val array: Array[Unit]) extends WrappedArray[Unit] with Serializable {$/;"	V
array	scala/collection/package.scala	/^ * scala> val array = Array(1,2,3,4,5,6)$/;"	V
array	scala/collection/parallel/mutable/ParArray.scala	/^  @transient private var array: Array[Any] = arrayseq.array.asInstanceOf[Array[Any]]$/;"	v
array	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    val array = arrayseq.array.asInstanceOf[Array[Any]]$/;"	V
array	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    val array = arrayseq.array.asInstanceOf[Array[Any]]$/;"	V
array	scala/collection/parallel/mutable/package.scala	/^    override val array = arr$/;"	V
arrayClass	scala/runtime/ScalaRunTime.scala	/^  def arrayClass(clazz: jClass[_]): jClass[_] = {$/;"	m
arrayD	scala/collection/immutable/TrieIterator.scala	/^  private[this] var arrayD: Array[Iterable[T @uV]]            = initArrayD$/;"	v
arrayElementClass	scala/runtime/ScalaRunTime.scala	/^  def arrayElementClass(schematic: Any): jClass[_] = schematic match {$/;"	m
arrayHash	scala/util/MurmurHash.scala	/^  def arrayHash[@specialized T](a: Array[T]) = {$/;"	m
arrayHash	scala/util/hashing/MurmurHash3.scala	/^  def arrayHash[@specialized T](a: Array[T]): Int  = arrayHash(a, arraySeed)$/;"	m
arrayHashing	scala/util/hashing/MurmurHash3.scala	/^  def arrayHashing[@specialized T] = new ArrayHashing[T]$/;"	m
arrayIndex	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var arrayIndex = offset$/;"	v
arrayManifest	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def arrayManifest: ClassManifest[Array[T]] =$/;"	m
arraySeed	scala/util/hashing/MurmurHash3.scala	/^  final val arraySeed       = 0x3c074a61$/;"	V
arrayStack	scala/collection/immutable/TrieIterator.scala	/^  private[this] var arrayStack: Array[Array[Iterable[T @uV]]] = initArrayStack$/;"	v
arrayString	scala/collection/package.scala	/^    def arrayString[T](array: Array[T], from: Int, until: Int): String = {$/;"	m
arrayToString	scala/runtime/ScalaRunTime.scala	/^    def arrayToString(x: AnyRef) = {$/;"	m
arrayType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def arrayType[T](arg: OptManifest[_]): ClassManifest[Array[T]] = arg match {$/;"	m
arrayType	scala/reflect/Manifest.scala	/^  def arrayType[T](arg: Manifest[_]): Manifest[Array[T]] =$/;"	m
array_apply	scala/runtime/ScalaRunTime.scala	/^  def array_apply(xs: AnyRef, idx: Int): Any = xs match {$/;"	m
array_clone	scala/runtime/ScalaRunTime.scala	/^  def array_clone(xs: AnyRef): AnyRef = xs match {$/;"	m
array_length	scala/runtime/ScalaRunTime.scala	/^  def array_length(xs: AnyRef): Int = xs match {$/;"	m
array_update	scala/runtime/ScalaRunTime.scala	/^  def array_update(xs: AnyRef, idx: Int, value: Any): Unit = xs match {$/;"	m
arrayclear	scala/compat/Platform.scala	/^  def arrayclear(arr: Array[Int]) { java.util.Arrays.fill(arr, 0) }$/;"	m
arraycopy	scala/compat/Platform.scala	/^  def arraycopy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {$/;"	m
arrayseq	scala/collection/parallel/mutable/ParArray.scala	/^class ParArray[T] private[mutable] (val arrayseq: ArraySeq[T])$/;"	V
arrayseq	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    val arrayseq = new ArraySeq[T](size)$/;"	V
arrayseq	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    val arrayseq = new ArraySeq[T](size)$/;"	V
arroffset	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var arroffset = offset$/;"	v
arrpit	scala/collection/parallel/mutable/ParHashTable.scala	/^        val arrpit = new scala.collection.parallel.BufferSplitter[T](arr, 0, arr.length, signalDelegate)$/;"	V
asAttrMap	scala/xml/MetaData.scala	/^  def asAttrMap: Map[String, String] =$/;"	m
asCombiner	scala/collection/parallel/ParIterableLike.scala	/^    def asCombiner = cb.asInstanceOf[Combiner[Elem, To]]$/;"	m
asCombiner	scala/collection/parallel/ParIterableLike.scala	/^    def asCombiner: Combiner[Elem, To]$/;"	m
asDigit	scala/runtime/RichChar.scala	/^  def asDigit: Int                      = Character.digit(self, Character.MAX_RADIX)$/;"	m
asJava	scala/collection/convert/Decorators.scala	/^    def asJava: A = op$/;"	m
asJava	scala/collection/convert/Wrappers.scala	/^    def asJava = new IteratorWrapper(underlying)$/;"	m
asJavaCollection	scala/collection/convert/Decorators.scala	/^    def asJavaCollection: ju.Collection[A] = JavaConversions.asJavaCollection(i)$/;"	m
asJavaDictionary	scala/collection/convert/Decorators.scala	/^    def asJavaDictionary: ju.Dictionary[A, B] = JavaConversions.asJavaDictionary(m)$/;"	m
asJavaEnumeration	scala/collection/convert/Decorators.scala	/^    def asJavaEnumeration: ju.Enumeration[A] = JavaConversions.asJavaEnumeration(i)$/;"	m
asJavaList	scala/collection/JavaConversions.scala	/^  def asJavaList[A](b : Seq[A]): ju.List[A] = seqAsJavaList[A](b)$/;"	m
asJavaList	scala/collection/JavaConversions.scala	/^  def asJavaList[A](b : mutable.Buffer[A]): ju.List[A] = bufferAsJavaList[A](b)$/;"	m
asJavaList	scala/collection/JavaConversions.scala	/^  def asJavaList[A](b : mutable.Seq[A]): ju.List[A] = mutableSeqAsJavaList[A](b)$/;"	m
asJavaListConverter	scala/collection/JavaConverters.scala	/^  def asJavaListConverter[A](b : Seq[A]): AsJava[ju.List[A]] = seqAsJavaListConverter(b)$/;"	m
asJavaListConverter	scala/collection/JavaConverters.scala	/^  def asJavaListConverter[A](b : mutable.Buffer[A]): AsJava[ju.List[A]] = bufferAsJavaListConverter(b)$/;"	m
asJavaListConverter	scala/collection/JavaConverters.scala	/^  def asJavaListConverter[A](b : mutable.Seq[A]): AsJava[ju.List[A]] = mutableSeqAsJavaListConverter(b)$/;"	m
asJavaMap	scala/collection/JavaConversions.scala	/^  def asJavaMap[A, B](m : Map[A, B]): ju.Map[A, B] = mapAsJavaMap[A, B](m)$/;"	m
asJavaMap	scala/collection/JavaConversions.scala	/^  def asJavaMap[A, B](m : mutable.Map[A, B]): ju.Map[A, B] = mutableMapAsJavaMap[A, B](m)$/;"	m
asJavaMapConverter	scala/collection/JavaConverters.scala	/^  def asJavaMapConverter[A, B](m : Map[A, B]): AsJava[ju.Map[A, B]] = mapAsJavaMapConverter(m)$/;"	m
asJavaMapConverter	scala/collection/JavaConverters.scala	/^  def asJavaMapConverter[A, B](m : mutable.Map[A, B]): AsJava[ju.Map[A, B]] = mutableMapAsJavaMapConverter(m)$/;"	m
asJavaSet	scala/collection/JavaConversions.scala	/^  def asJavaSet[A](s : mutable.Set[A]): ju.Set[A] = mutableSetAsJavaSet[A](s)$/;"	m
asJavaSet	scala/collection/JavaConversions.scala	/^  def asJavaSet[A](s: Set[A]): ju.Set[A] = setAsJavaSet[A](s)$/;"	m
asJavaSetConverter	scala/collection/JavaConverters.scala	/^  def asJavaSetConverter[A](s : Set[A]): AsJava[ju.Set[A]] = setAsJavaSetConverter(s)$/;"	m
asJavaSetConverter	scala/collection/JavaConverters.scala	/^  def asJavaSetConverter[A](s : mutable.Set[A]): AsJava[ju.Set[A]] = mutableSetAsJavaSetConverter(s)$/;"	m
asParIterable	scala/collection/parallel/package.scala	/^    def asParIterable = t.asInstanceOf[ParIterable[T]]$/;"	m
asParIterable	scala/collection/parallel/package.scala	/^    def asParIterable: ParIterable[T]$/;"	m
asParSeq	scala/collection/parallel/package.scala	/^    def asParSeq = t.asInstanceOf[ParSeq[T]]$/;"	m
asParSeq	scala/collection/parallel/package.scala	/^    def asParSeq: ParSeq[T]$/;"	m
asParallel	scala/collection/parallel/package.scala	/^    def asParallel = bf.asInstanceOf[CanCombineFrom[From, Elem, To]]$/;"	m
asParallel	scala/collection/parallel/package.scala	/^    def asParallel: CanCombineFrom[From, Elem, To]$/;"	m
asRef	scala/xml/Equality.scala	/^  def asRef(x: Any): AnyRef = x.asInstanceOf[AnyRef]$/;"	m
asScala	scala/collection/convert/Decorators.scala	/^    def asScala: A = op$/;"	m
asScalaConcurrentMap	scala/collection/convert/WrapAsScala.scala	/^  def asScalaConcurrentMap[A, B](m: juc.ConcurrentMap[A, B]): mutable.ConcurrentMap[A, B] = m match {$/;"	m
asScalaConcurrentMapConverter	scala/collection/convert/DecorateAsScala.scala	/^  def asScalaConcurrentMapConverter[A, B](m: juc.ConcurrentMap[A, B]): AsScala[mutable.ConcurrentMap[A, B]] =$/;"	m
asScalaIterable	scala/collection/JavaConversions.scala	/^  def asScalaIterable[A](i : jl.Iterable[A]): Iterable[A] = iterableAsScalaIterable[A](i)$/;"	m
asScalaIterable	scala/collection/JavaConversions.scala	/^  def asScalaIterable[A](i : ju.Collection[A]): Iterable[A] = collectionAsScalaIterable[A](i)$/;"	m
asScalaIterableConverter	scala/collection/JavaConverters.scala	/^  def asScalaIterableConverter[A](i : jl.Iterable[A]): AsScala[Iterable[A]] = iterableAsScalaIterableConverter(i)$/;"	m
asScalaIterableConverter	scala/collection/JavaConverters.scala	/^  def asScalaIterableConverter[A](i : ju.Collection[A]): AsScala[Iterable[A]] = collectionAsScalaIterableConverter(i)$/;"	m
asScalaMap	scala/collection/JavaConversions.scala	/^  def asScalaMap(p: ju.Properties): mutable.Map[String, String] = propertiesAsScalaMap(p)$/;"	m
asScalaMap	scala/collection/JavaConversions.scala	/^  def asScalaMap[A, B](m: ju.Map[A, B]): mutable.Map[A, B] = mapAsScalaMap[A, B](m)$/;"	m
asScalaMapConverter	scala/collection/JavaConverters.scala	/^  def asScalaMapConverter(p: ju.Properties): AsScala[mutable.Map[String, String]] = propertiesAsScalaMapConverter(p)$/;"	m
asScalaMapConverter	scala/collection/JavaConverters.scala	/^  def asScalaMapConverter[A, B](m : ju.Map[A, B]): AsScala[mutable.Map[A, B]] = mapAsScalaMapConverter(m)$/;"	m
asin	scala/math/package.scala	/^  def asin(x: Double): Double = java.lang.Math.asin(x)$/;"	m
assert	scala/Predef.scala	/^  def assert(assertion: Boolean) {$/;"	m
assign	scala/collection/parallel/ParIterableLike.scala	/^    def assign(cntx: Signalling): PI = {$/;"	m
assign	scala/collection/parallel/ParIterableLike.scala	/^    def assign(cntx: Signalling): PI$/;"	m
assume	scala/Predef.scala	/^  def assume(assumption: Boolean) {$/;"	m
atEnd	scala/util/parsing/combinator/PackratParsers.scala	/^    def atEnd: Boolean = underlying.atEnd$/;"	m
atEnd	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def atEnd = in.atEnd || (whitespace(in) match { case Success(_, in1) => in1.atEnd case _ => false })$/;"	m
atEnd	scala/util/parsing/input/CharSequenceReader.scala	/^  def atEnd = offset >= source.length$/;"	m
atEnd	scala/util/parsing/input/PagedSeqReader.scala	/^  def atEnd = !seq.isDefinedAt(offset)$/;"	m
atEnd	scala/util/parsing/input/Reader.scala	/^  def atEnd: Boolean$/;"	m
atPos	scala/collection/parallel/mutable/ParHashSet.scala	/^      val atPos = blockStart(that.offset)$/;"	V
atResult	scala/xml/NodeSeq.scala	/^    def atResult = {$/;"	m
atRoot	scala/xml/include/sax/XIncludeFilter.scala	/^  private var atRoot = false$/;"	v
atan	scala/math/package.scala	/^  def atan(x: Double): Double = java.lang.Math.atan(x)$/;"	m
atan2	scala/math/package.scala	/^  def atan2(y: Double, x: Double): Double = java.lang.Math.atan2(y, x)$/;"	m
atom	scala/xml/dtd/ContentModelParser.scala	/^  def atom = token match {$/;"	m
atpe	scala/xml/parsing/MarkupParser.scala	/^      val atpe = cbuf.toString$/;"	V
attList	scala/xml/parsing/MarkupParser.scala	/^    var attList: List[AttrDecl] = Nil$/;"	v
attListDecl	scala/xml/parsing/MarkupHandler.scala	/^  def attListDecl(name: String, attList: List[AttrDecl]): Unit = ()$/;"	m
attr	scala/xml/NodeSeq.scala	/^      val attr =$/;"	V
attr	scala/xml/dtd/DTD.scala	/^  var attr: mutable.Map[String, AttListDecl] = new mutable.HashMap[String, AttListDecl]()$/;"	v
attrDecl	scala/xml/parsing/MarkupParser.scala	/^  def attrDecl() = {$/;"	m
attrStr	scala/xml/dtd/ElementValidator.scala	/^      def attrStr = attr.value.toString$/;"	m
attribStack	scala/xml/parsing/FactoryAdapter.scala	/^  val attribStack = new mutable.Stack[MetaData]$/;"	V
attribute	scala/xml/dtd/ExternalID.scala	/^  def attribute = Node.NoAttributes$/;"	m
attributes	scala/xml/Elem.scala	/^  override val attributes = MetaData.normalize(attributes1, scope)$/;"	V
attributes	scala/xml/Node.scala	/^  def attributes: MetaData = Null$/;"	m
atts	scala/xml/include/sax/XIncludeFilter.scala	/^    var atts = atts1$/;"	v
attsImpl	scala/xml/include/sax/XIncludeFilter.scala	/^          val attsImpl = new AttributesImpl(atts)$/;"	V
aultR	scala/util/automata/SubsetConstruction.scala	/^      defaultR(q) = qDef$/;"	m
aultq	scala/util/automata/WordBerrySethi.scala	/^      defaultq(j) = Nil$/;"	m
aultq	scala/util/automata/WordBerrySethi.scala	/^    defaultq = new Array[List[Int]](pos)                        \/\/ default transitions$/;"	m
automatonFrom	scala/util/automata/WordBerrySethi.scala	/^  def automatonFrom(pat: RegExp, finalTag: Int): NondetWordAutom[_labelT] = {$/;"	m
av	scala/xml/parsing/MarkupParser.scala	/^        val av = xEntityValue()$/;"	V
available	scala/collection/Iterator.scala	/^          val available =$/;"	V
available	scala/concurrent/Lock.scala	/^  var available = true$/;"	v
available	scala/sys/process/BasicIO.scala	/^        val available = try { out.flush(); true } catch { case _: IOException => false }$/;"	V
available	scala/xml/pull/XMLEventReader.scala	/^  def available() = isElement(buffer) || isElement(queue.peek)$/;"	m
availableProcessors	scala/collection/parallel/package.scala	/^  val availableProcessors = java.lang.Runtime.getRuntime.availableProcessors$/;"	V
avalanche	scala/runtime/Statics.java	/^  public static int avalanche(int h) {$/;"	m	class:Statics
avl	scala/collection/mutable/TreeSet.scala	/^  private var avl: AVLTree[A] = Leaf$/;"	v
awaitUnbounded	scala/concurrent/impl/Promise.scala	/^      def awaitUnbounded(): Boolean = {$/;"	m
awaitUnsafe	scala/concurrent/impl/Promise.scala	/^      def awaitUnsafe(deadline: Deadline, nextWait: FiniteDuration): Boolean = {$/;"	m
b	scala/Array.scala	/^    val b = newBuilder[Int]$/;"	V
b	scala/Array.scala	/^    val b = newBuilder[T]$/;"	V
b	scala/Array.scala	/^ *  val b = Array.ofDim[Int](2)$/;"	V
b	scala/Enumeration.scala	/^      private[this] val b = new mutable.BitSet$/;"	V
b	scala/collection/BitSetLike.scala	/^      val b = u % 64$/;"	V
b	scala/collection/DefaultMap.scala	/^    val b = Map.newBuilder[A, B1]$/;"	V
b	scala/collection/DefaultMap.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/GenSeqLike.scala	/^   *       scala> val b = a :+ 2$/;"	V
b	scala/collection/GenTraversableLike.scala	/^   *      scala> val b = LinkedList(2)$/;"	V
b	scala/collection/GenTraversableOnce.scala	/^   *      scala> val b = (5 \/: a)(_+_)$/;"	V
b	scala/collection/GenTraversableOnce.scala	/^   *      scala> val b = (a :\\ 5)(_+_)$/;"	V
b	scala/collection/GenTraversableOnce.scala	/^   *      scala> val b = (a \/:\\ 5)(_+_)$/;"	V
b	scala/collection/IndexedSeqOptimized.scala	/^      val b = bf(repr)$/;"	V
b	scala/collection/IndexedSeqOptimized.scala	/^    val b     = newBuilder$/;"	V
b	scala/collection/IndexedSeqOptimized.scala	/^    val b = bf(repr)$/;"	V
b	scala/collection/IndexedSeqOptimized.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/IterableLike.scala	/^      val b = newBuilder$/;"	V
b	scala/collection/IterableLike.scala	/^    val b = bf(repr)$/;"	V
b	scala/collection/IterableLike.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/IterableViewLike.scala	/^\/\/ was:    val b = bf(repr)$/;"	V
b	scala/collection/LinearSeqOptimized.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/SeqLike.scala	/^    val b = bf(repr)$/;"	V
b	scala/collection/SeqLike.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/SeqViewLike.scala	/^\/\/ was:    val b = bf(repr)$/;"	V
b	scala/collection/SortedMap.scala	/^      val b = SortedMap.newBuilder[A, B1]$/;"	V
b	scala/collection/SortedMap.scala	/^      val b = newBuilder$/;"	V
b	scala/collection/TraversableLike.scala	/^      val b = bf(repr)$/;"	V
b	scala/collection/TraversableLike.scala	/^      val b = newBuilder$/;"	V
b	scala/collection/TraversableLike.scala	/^    val b = bf(repr)$/;"	V
b	scala/collection/TraversableLike.scala	/^    val b = builder$/;"	V
b	scala/collection/TraversableLike.scala	/^    val b = cbf()$/;"	V
b	scala/collection/TraversableLike.scala	/^    val b = immutable.Map.newBuilder[K, Repr]$/;"	V
b	scala/collection/TraversableLike.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/TraversableOnce.scala	/^    val b = cbf()$/;"	V
b	scala/collection/TraversableOnce.scala	/^    val b = immutable.Map.newBuilder[T, U]$/;"	V
b	scala/collection/TraversableOnce.scala	/^   *      scala> val b = new StringBuilder()$/;"	V
b	scala/collection/TraversableViewLike.scala	/^    val b = bf(underlying)$/;"	V
b	scala/collection/TraversableViewLike.scala	/^\/\/    val b = bf(repr)$/;"	V
b	scala/collection/TraversableViewLike.scala	/^\/\/ was:    val b = bf(repr)$/;"	V
b	scala/collection/generic/GenTraversableFactory.scala	/^    val b = newBuilder[A]$/;"	V
b	scala/collection/generic/GenTraversableFactory.scala	/^    val b = newBuilder[T]$/;"	V
b	scala/collection/generic/GenericClassTagCompanion.scala	/^    val b = newBuilder[A]$/;"	V
b	scala/collection/generic/GenericCompanion.scala	/^      val b = newBuilder[A]$/;"	V
b	scala/collection/generic/GenericOrderedCompanion.scala	/^    val b = newBuilder[A]$/;"	V
b	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b = genericBuilder[B]$/;"	V
b	scala/collection/generic/IsTraversableOnce.scala	/^ *        val b = cbf()$/;"	V
b	scala/collection/immutable/BitSet.scala	/^    private[this] val b = new mutable.BitSet$/;"	V
b	scala/collection/immutable/DefaultMap.scala	/^    val b = Map.newBuilder[A, B1]$/;"	V
b	scala/collection/immutable/DefaultMap.scala	/^    val b = newBuilder$/;"	V
b	scala/collection/immutable/HashMap.scala	/^            val b = thatlsb - 1$/;"	V
b	scala/collection/immutable/HashMap.scala	/^      var b = bm$/;"	v
b	scala/collection/immutable/List.scala	/^          val b = if (mapped eq null) new ListBuffer[B] else mapped$/;"	V
b	scala/collection/immutable/List.scala	/^    val b = bf(this)$/;"	V
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[A]$/;"	V
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[C]$/;"	V
b	scala/collection/immutable/List.scala	/^    val b = new ListBuffer[Int]$/;"	V
b	scala/collection/immutable/MapLike.scala	/^    val b = bf(repr)$/;"	V
b	scala/collection/immutable/SortedMap.scala	/^      val b = SortedMap.newBuilder[A, B1]$/;"	V
b	scala/collection/immutable/SortedMap.scala	/^      val b = newBuilder$/;"	V
b	scala/collection/immutable/Vector.scala	/^      val b = new Array[AnyRef](a.length)$/;"	V
b	scala/collection/mutable/ArrayOps.scala	/^    val b = Array.newBuilder[U]$/;"	V
b	scala/collection/mutable/LinkedList.scala	/^  *     scala> val b = LinkedList(1)$/;"	V
b	scala/collection/mutable/LinkedList.scala	/^  *    scala>     val b = a.collect(addOne)$/;"	V
b	scala/collection/mutable/LinkedListLike.scala	/^   *      scala> val b = LinkedList(1, 2)$/;"	V
b	scala/collection/mutable/LinkedListLike.scala	/^   *    scala> val b = LinkedList(1, 2)$/;"	V
b	scala/collection/mutable/PriorityQueue.scala	/^    val b = bf.apply$/;"	V
b	scala/collection/parallel/ParIterableLike.scala	/^      val b = bf(repr)$/;"	V
b	scala/collection/parallel/ParIterableViewLike.scala	/^    val b = bf(underlying)$/;"	V
b	scala/collection/parallel/ParSeqLike.scala	/^    val b = bf(repr)$/;"	V
b	scala/collection/parallel/ParSeqViewLike.scala	/^    val b = bf(underlying)$/;"	V
b	scala/concurrent/duration/Duration.scala	/^    val b = math.abs(_b)$/;"	V
b	scala/io/BytePickle.scala	/^        var b = 0$/;"	v
b	scala/io/BytePickle.scala	/^        var b = 0;$/;"	v
b	scala/runtime/Tuple2Zipped.scala	/^    val b = cbf(colls._1.repr)$/;"	V
b	scala/runtime/Tuple3Zipped.scala	/^    val b = cbf(colls._1.repr)$/;"	V
b	scala/util/Sorting.scala	/^        var b = a$/;"	v
b	scala/util/Sorting.scala	/^      var b = _b$/;"	v
b	scala/xml/PrettyPrinter.scala	/^      val b = Box(ind, s.substring(0, last.head))$/;"	V
b1	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b1 = genericBuilder[A1]$/;"	V
b1	scala/collection/immutable/List.scala	/^    val b1 = new ListBuffer[A]$/;"	V
b1	scala/runtime/Tuple2Zipped.scala	/^    val b1 = cbf1(colls._1.repr)$/;"	V
b1	scala/runtime/Tuple3Zipped.scala	/^    val b1 = cbf1(colls._1.repr)$/;"	V
b2	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b2 = genericBuilder[A2]$/;"	V
b2	scala/collection/immutable/List.scala	/^    val b2 = new ListBuffer[B]$/;"	V
b2	scala/runtime/Tuple2Zipped.scala	/^    val b2 = cbf2(colls._2.repr)$/;"	V
b2	scala/runtime/Tuple3Zipped.scala	/^    val b2 = cbf2(colls._2.repr)$/;"	V
b3	scala/collection/generic/GenericTraversableTemplate.scala	/^    val b3 = genericBuilder[A3]$/;"	V
b3	scala/runtime/Tuple3Zipped.scala	/^    val b3 = cbf3(colls._3.repr)$/;"	V
ba	scala/util/Marshal.scala	/^    val ba = new ByteArrayOutputStream(512)$/;"	V
balLeft	scala/collection/immutable/RedBlack.scala	/^      def balLeft(x: A, xv: B, tl: Tree[B], tr: Tree[B]) = (tl, tr) match {$/;"	m
balLeft	scala/collection/immutable/RedBlackTree.scala	/^    def balLeft(x: A, xv: B, tl: Tree[A, B], tr: Tree[A, B]) = if (isRedTree(tl)) {$/;"	m
balRight	scala/collection/immutable/RedBlack.scala	/^      def balRight(x: A, xv: B, tl: Tree[B], tr: Tree[B]) = (tl, tr) match {$/;"	m
balRight	scala/collection/immutable/RedBlackTree.scala	/^    def balRight(x: A, xv: B, tl: Tree[A, B], tr: Tree[A, B]) = if (isRedTree(tr)) {$/;"	m
balance	scala/collection/immutable/RedBlack.scala	/^      def balance(x: A, xv: B, tl: Tree[B], tr: Tree[B]) = (tl, tr) match {$/;"	m
balance	scala/collection/immutable/RedBlackTree.scala	/^    def balance(x: A, xv: B, tl: Tree[A, B], tr: Tree[A, B]) = if (isRedTree(tl)) {$/;"	m
balance	scala/collection/mutable/AVLTree.scala	/^  def balance: Int$/;"	m
balance	scala/collection/mutable/AVLTree.scala	/^  override val balance: Int = 0$/;"	V
balance	scala/collection/mutable/AVLTree.scala	/^  override val balance: Int = right.depth - left.depth$/;"	V
base	scala/collection/mutable/TreeSet.scala	/^  private var base: Option[TreeSet[A]] = None$/;"	v
base	scala/util/parsing/combinator/PackratParsers.scala	/^            val base = LR(Failure("Base Failure",in), p, None)$/;"	V
base	scala/xml/Utility.scala	/^    val base = if (hex) 16 else 10$/;"	V
base	scala/xml/include/sax/XIncludeFilter.scala	/^      val base = atts.getValue(NamespaceSupport.XMLNS, "base")$/;"	V
base	scala/xml/include/sax/XIncludeFilter.scala	/^      val base = bases.peek().asInstanceOf[URL]$/;"	V
base	scala/xml/include/sax/XIncludeFilter.scala	/^    val base = locator.getSystemId()$/;"	V
baseURI	scala/xml/Document.scala	/^  var baseURI: String = _$/;"	v
bases	scala/xml/include/sax/XIncludeFilter.scala	/^  private val bases = new Stack[URL]()$/;"	V
basisForHashCode	scala/xml/NamespaceBinding.scala	/^  def basisForHashCode: Seq[Any] = List(prefix, uri, parent)$/;"	m
bb	scala/collection/generic/GenericTraversableTemplate.scala	/^    val bb = genericBuilder[CC[B]]$/;"	V
bb	scala/collection/mutable/ArrayOps.scala	/^    val bb: Builder[Array[U], Array[Array[U]]] = Array.newBuilder(ClassTag[Array[U]](elementClass))$/;"	V
bbp	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val bbp = blockbitpos$/;"	V
bbuffer	scala/io/Codec.scala	/^    val bbuffer = UTF8.charSet encode cbuffer$/;"	V
bbuffer	scala/io/Codec.scala	/^    val bbuffer = java.nio.ByteBuffer.wrap(bytes, offset, len)$/;"	V
bc	scala/collection/immutable/RedBlackTree.scala	/^      val bc = append(tl.right, tr.left)$/;"	V
bc	scala/util/Sorting.scala	/^      val bc = x(b) compare x(c)$/;"	V
beanGetter	scala/annotation/target/package.scala	/^  type beanGetter = scala.annotation.meta.beanGetter$/;"	T
beanSetter	scala/annotation/target/package.scala	/^  type beanSetter = scala.annotation.meta.beanSetter$/;"	T
before	scala/util/matching/Regex.scala	/^    def before(i: Int): java.lang.CharSequence =$/;"	m
before	scala/util/matching/Regex.scala	/^    def before: java.lang.CharSequence =$/;"	m
beforeCombine	scala/collection/parallel/package.scala	/^    def beforeCombine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]) {}$/;"	m
beforePos	scala/collection/parallel/mutable/ParHashSet.scala	/^      val beforePos = blockStart(that.offset + that.howmany)$/;"	V
beforePos	scala/collection/parallel/mutable/ParHashSet.scala	/^      val beforePos = nextBlockStart(block)$/;"	V
beforelast	scala/collection/parallel/Tasks.scala	/^        val beforelast = last$/;"	V
beginsAt	scala/collection/parallel/ParIterableLike.scala	/^    def beginsAt = from$/;"	m
beginsAt	scala/collection/parallel/ParIterableLike.scala	/^    def beginsAt = left.beginsAt$/;"	m
beginsAt	scala/collection/parallel/ParIterableLike.scala	/^    def beginsAt: Int$/;"	m
bf	scala/collection/mutable/BufferLike.scala	/^    val bf = newBuilder$/;"	V
bf	scala/collection/mutable/LinkedListLike.scala	/^    val bf = newBuilder$/;"	V
bf	scala/collection/mutable/MutableList.scala	/^    val bf = newBuilder$/;"	V
bf	scala/collection/mutable/Queue.scala	/^    val bf = newBuilder$/;"	V
bigDecAsIntegral	scala/collection/immutable/Range.scala	/^    implicit val bigDecAsIntegral = scala.math.Numeric.BigDecimalAsIfIntegral$/;"	V
bigDecimal	scala/math/BigDecimal.scala	/^  val bigDecimal: BigDec,$/;"	V
bigInteger	scala/math/BigInt.scala	/^class BigInt(val bigInteger: BigInteger) extends ScalaNumber with ScalaNumericConversions with Serializable {$/;"	V
bigUCS4	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bigUCS4       = "UCS-4"$/;"	V
bigUTF16	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bigUTF16      = "UTF-16BE"$/;"	V
biggerNumbers	scala/Array.scala	/^ *  val biggerNumbers = numbers.map(_ * 2) \/\/ multiply all numbers by two$/;"	V
bin	scala/collection/immutable/IntMap.scala	/^    def bin[S](left: IntMap[S], right: IntMap[S]): IntMap[S] = {$/;"	m
bin	scala/collection/immutable/IntMap.scala	/^  def bin[T](prefix: Int, mask: Int, left: IntMap[T], right: IntMap[T]): IntMap[T] = (left, right) match {$/;"	m
bin	scala/collection/immutable/LongMap.scala	/^    def bin[S](left: LongMap[S], right: LongMap[S]): LongMap[S] = {$/;"	m
bin	scala/collection/immutable/LongMap.scala	/^  def bin[T](prefix: Long, mask: Long, left: LongMap[T], right: LongMap[T]): LongMap[T] = (left, right) match {$/;"	m
bind	scala/collection/mutable/UnrolledBuffer.scala	/^    def bind(thathead: Unrolled[T]) = {$/;"	m
bindersToString	scala/util/parsing/ast/Binders.scala	/^    def bindersToString: List[String] = (for(b <- this.iterator) yield b+"!"+id).toList$/;"	m
binds	scala/util/parsing/ast/Binders.scala	/^    def binds(b: binderType): Boolean = substitution.contains(b)$/;"	m
bitCount	scala/math/BigInt.scala	/^  def bitCount: Int             = this.bigInteger.bitCount()$/;"	m
bitLen	scala/math/BigInt.scala	/^    val bitLen = bitLength$/;"	V
bitLength	scala/math/BigInt.scala	/^  def bitLength: Int            = this.bigInteger.bitLength()$/;"	m
bitString	scala/collection/generic/BitOperations.scala	/^    def bitString(num: Int, sep: String = "")   = bits(num) map (b => if (b) "1" else "0") mkString sep$/;"	m
bitString	scala/collection/generic/BitOperations.scala	/^    def bitString(num: Long, sep: String = "")     = bits(num) map (b => if (b) "1" else "0") mkString sep$/;"	m
bitmap	scala/collection/concurrent/TrieMap.scala	/^private[collection] final class CNode[K, V](val bitmap: Int, val array: Array[BasicNode], val gen: Gen) extends CNodeBase[K, V] {$/;"	V
bitmap	scala/collection/immutable/HashMap.scala	/^      val bitmap = (1 << index0) | (1 << index1)$/;"	V
bitmap	scala/collection/immutable/HashMap.scala	/^      val bitmap = (1 << index0)$/;"	V
bitmap	scala/collection/immutable/HashMap.scala	/^    private[collection] val bitmap: Int,$/;"	V
bitmap	scala/collection/immutable/HashSet.scala	/^      val bitmap = (1 << index0) | (1 << index1)$/;"	V
bitmap	scala/collection/immutable/HashSet.scala	/^      val bitmap = (1 << index0)$/;"	V
bitmap	scala/collection/immutable/HashSet.scala	/^  class HashTrieSet[A](private val bitmap: Int, private[collection] val elems: Array[HashSet[A]], private val size0: Int)$/;"	V
bitmap	scala/collection/parallel/immutable/ParHashMap.scala	/^    var bitmap = 0$/;"	v
bitmap	scala/collection/parallel/immutable/ParHashSet.scala	/^    var bitmap = 0$/;"	v
bitmapNew	scala/collection/immutable/HashMap.scala	/^          val bitmapNew = bitmap ^ mask$/;"	V
bitmapNew	scala/collection/immutable/HashSet.scala	/^          val bitmapNew = bitmap ^ mask$/;"	V
bitmapNew	scala/collection/immutable/HashSet.scala	/^        val bitmapNew = bitmap | mask$/;"	V
bits	scala/collection/generic/BitOperations.scala	/^    def bits(num: Int)                          = 31 to 0 by -1 map (i => (num >>> i & 1) != 0)$/;"	m
bits	scala/collection/generic/BitOperations.scala	/^    def bits(num: Long)                            = 63L to 0L by -1L map (i => (num >>> i & 1L) != 0L)$/;"	m
bitsetCanBuildFrom	scala/collection/generic/BitSetFactory.scala	/^  def bitsetCanBuildFrom = new CanBuildFrom[Coll, Int, Coll] {$/;"	m
bitsplitpoint	scala/collection/immutable/HashMap.scala	/^        val bitsplitpoint = posOf(nodesize \/ 2, bitmap)$/;"	V
black	scala/collection/immutable/RedBlackTree.scala	/^    def black: Tree[A, B]$/;"	m
bldr	scala/StringContext.scala	/^    lazy val bldr = new java.lang.StringBuilder$/;"	V
bldr	scala/StringContext.scala	/^    val bldr = new java.lang.StringBuilder(process(pi.next()))$/;"	V
bldr	scala/collection/TraversableLike.scala	/^      val bldr = m.getOrElseUpdate(key, newBuilder)$/;"	V
blkNewLeft	scala/collection/immutable/RedBlack.scala	/^      val blkNewLeft = blacken(newLeft)$/;"	V
blkNewLeft	scala/collection/immutable/RedBlackTree.scala	/^    val blkNewLeft = blacken(newLeft)$/;"	V
blkNewRight	scala/collection/immutable/RedBlack.scala	/^      val blkNewRight = blacken(newRight)$/;"	V
blkNewRight	scala/collection/immutable/RedBlackTree.scala	/^    val blkNewRight = blacken(newRight)$/;"	V
block	scala/concurrent/ManagedBlocker.scala	/^  def block(): Boolean$/;"	m
blockIndex	scala/collection/immutable/Vector.scala	/^      var blockIndex = (startIndex - 1) & ~31$/;"	v
blockIndex	scala/collection/immutable/Vector.scala	/^      var blockIndex = endIndex & ~31$/;"	v
blockIndex	scala/collection/immutable/Vector.scala	/^    var blockIndex = (cutIndex - 1) & ~31$/;"	v
blockIndex	scala/collection/immutable/Vector.scala	/^    var blockIndex = cutIndex & ~31$/;"	v
blockIndex	scala/collection/immutable/Vector.scala	/^  private var blockIndex = 0$/;"	v
blockIndex	scala/collection/immutable/Vector.scala	/^  private var blockIndex: Int = _startIndex & ~31$/;"	v
blockOn	scala/concurrent/BlockContext.scala	/^  def blockOn[T](thunk: =>T)(implicit permission: CanAwait): T$/;"	m
blockbits	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val blockbits = ((hc >>> bbp) & 0x1f) << (needed - 5)$/;"	V
blocking	scala/concurrent/package.scala	/^  def blocking[T](body: =>T): T = BlockContext.current.blockOn(body)(scala.concurrent.AwaitPermission)$/;"	m
blocksize	scala/collection/parallel/ParIterableLike.scala	/^      val blocksize = scanBlockSize$/;"	V
blocksize	scala/collection/parallel/mutable/ParHashMap.scala	/^      val blocksize = table.length \/ (1 << ParHashMapCombiner.discriminantbits)$/;"	V
blocksize	scala/collection/parallel/mutable/ParHashSet.scala	/^    private val blocksize = table.tableLength >> ParHashSetCombiner.discriminantbits$/;"	V
bm1	scala/collection/immutable/HashMap.scala	/^        val bm1 = bitmap & (-1 << bitsplitpoint)$/;"	V
bm2	scala/collection/immutable/HashMap.scala	/^        val bm2 = bitmap & (-1 >>> (32 - bitsplitpoint))$/;"	V
bmp	scala/collection/concurrent/TrieMap.scala	/^                  val bmp = cn.bitmap$/;"	V
bmp	scala/collection/concurrent/TrieMap.scala	/^        val bmp = cn.bitmap$/;"	V
bmp	scala/collection/concurrent/TrieMap.scala	/^    val bmp = (1 << xidx) | (1 << yidx)$/;"	V
bmp	scala/collection/concurrent/TrieMap.scala	/^    val bmp = bitmap$/;"	V
bmp	scala/collection/concurrent/TrieMap.scala	/^    var bmp = bitmap$/;"	v
body	scala/collection/parallel/Tasks.scala	/^    val body: Task[R, Tp]$/;"	V
body	scala/collection/parallel/Tasks.scala	/^  class WrappedTask[R, Tp](val body: Task[R, Tp])$/;"	V
bool	scala/io/BytePickle.scala	/^  def bool: SPU[Boolean] = {$/;"	m
bottomId	scala/Enumeration.scala	/^  private var bottomId = if(initial < 0) initial else 0$/;"	v
box	scala/Boolean.scala	/^  def box(x: Boolean): java.lang.Boolean = java.lang.Boolean.valueOf(x)$/;"	m
box	scala/Byte.scala	/^  def box(x: Byte): java.lang.Byte = java.lang.Byte.valueOf(x)$/;"	m
box	scala/Char.scala	/^  def box(x: Char): java.lang.Character = java.lang.Character.valueOf(x)$/;"	m
box	scala/Double.scala	/^  def box(x: Double): java.lang.Double = java.lang.Double.valueOf(x)$/;"	m
box	scala/Float.scala	/^  def box(x: Float): java.lang.Float = java.lang.Float.valueOf(x)$/;"	m
box	scala/Int.scala	/^  def box(x: Int): java.lang.Integer = java.lang.Integer.valueOf(x)$/;"	m
box	scala/Long.scala	/^  def box(x: Long): java.lang.Long = java.lang.Long.valueOf(x)$/;"	m
box	scala/Short.scala	/^  def box(x: Short): java.lang.Short = java.lang.Short.valueOf(x)$/;"	m
box	scala/Unit.scala	/^  def box(x: Unit): scala.runtime.BoxedUnit = scala.runtime.BoxedUnit.UNIT$/;"	m
boxDescription	scala/runtime/BoxesRunTime.java	/^    private static String boxDescription(Object a) {$/;"	m	class:BoxesRunTime	file:
boxToBoolean	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Boolean boxToBoolean(boolean b) {$/;"	m	class:BoxesRunTime
boxToByte	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Byte boxToByte(byte b) {$/;"	m	class:BoxesRunTime
boxToCharacter	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Character boxToCharacter(char c) {$/;"	m	class:BoxesRunTime
boxToDouble	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Double boxToDouble(double d) {$/;"	m	class:BoxesRunTime
boxToFloat	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Float boxToFloat(float f) {$/;"	m	class:BoxesRunTime
boxToInteger	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Integer boxToInteger(int i) {$/;"	m	class:BoxesRunTime
boxToLong	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Long boxToLong(long l) {$/;"	m	class:BoxesRunTime
boxToShort	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Short boxToShort(short s) {$/;"	m	class:BoxesRunTime
boxedType	scala/concurrent/Future.scala	/^    def boxedType(c: Class[_]): Class[_] = {$/;"	m
branchMask	scala/collection/immutable/IntMap.scala	/^  def branchMask(i: Int, j: Int) = highestOneBit(i ^ j)$/;"	m
branchMask	scala/collection/immutable/LongMap.scala	/^  def branchMask(i: Long, j: Long) = highestOneBit(i ^ j)$/;"	m
break	scala/text/Document.scala	/^  def break = DocBreak$/;"	m
break	scala/util/control/Breaks.scala	/^  def break(): Nothing = { throw breakException }$/;"	m
breakException	scala/util/control/Breaks.scala	/^  private val breakException = new BreakControl$/;"	V
breakOut	scala/collection/package.scala	/^  def breakOut[From, T, To](implicit b: CanBuildFrom[Nothing, T, To]): CanBuildFrom[From, T, To] =$/;"	m
breakable	scala/util/control/Breaks.scala	/^  def breakable(op: => Unit) {$/;"	m
breaks	scala/collection/Traversable.scala	/^  private[collection] val breaks: Breaks = new Breaks$/;"	V
bs	scala/collection/generic/GenericTraversableTemplate.scala	/^    val bs: IndexedSeq[Builder[B, CC[B]]] = IndexedSeq.fill(headSize)(genericBuilder[B])$/;"	V
bs	scala/collection/mutable/ArrayOps.scala	/^    val bs = asArray(head) map (_ => mkRowBuilder())$/;"	V
bucketidx	scala/collection/mutable/FlatHashTable.scala	/^    var bucketidx = 0$/;"	v
bucketidx	scala/collection/mutable/HashTable.scala	/^    var bucketidx = 0$/;"	v
bucketnumber	scala/collection/parallel/package.scala	/^  (private val bucketnumber: Int)$/;"	V
buckets	scala/collection/parallel/mutable/ParHashMap.scala	/^    val buckets = for (i <- 0 until (table.length \/ sizeMapBucketSize)) yield checkBucket(i)$/;"	V
buckets	scala/collection/parallel/package.scala	/^    protected var buckets: Array[UnrolledBuffer[Buck]] @uncheckedVariance = new Array[UnrolledBuffer[Buck]](bucketnumber)$/;"	v
bucks	scala/collection/parallel/immutable/ParHashMap.scala	/^    val bucks = buckets.filter(_ != null).map(_.headPtr)$/;"	V
bucks	scala/collection/parallel/immutable/ParHashSet.scala	/^    val bucks = buckets.filter(_ != null).map(_.headPtr)$/;"	V
bucks	scala/collection/parallel/mutable/ParHashMap.scala	/^    val bucks = buckets.map(b => if (b ne null) b.headPtr else null)$/;"	V
buf	scala/collection/Iterator.scala	/^      val buf = new ArrayBuffer[A]$/;"	V
buf	scala/collection/SeqLike.scala	/^      val buf = self.newBuilder$/;"	V
buf	scala/collection/SetLike.scala	/^      val buf = self.newBuilder$/;"	V
buf	scala/collection/immutable/List.scala	/^    val buf = new ListBuffer[List[A]]$/;"	V
buf	scala/collection/immutable/PagedSeq.scala	/^    val buf = new StringBuilder$/;"	V
buf	scala/collection/immutable/StringLike.scala	/^    val buf = new StringBuilder$/;"	V
buf	scala/io/BytePickle.scala	/^    val buf = new mutable.ArrayBuffer[Byte]$/;"	V
buf	scala/reflect/NameTransformer.scala	/^    var buf: StringBuilder = null$/;"	v
buf	scala/runtime/Tuple2Zipped.scala	/^        val buf = bf(x._1)$/;"	V
buf	scala/runtime/Tuple3Zipped.scala	/^        val buf = bf(x._1)$/;"	V
buf	scala/util/Random.scala	/^    val buf = new ArrayBuffer[T] ++= xs$/;"	V
buf	scala/xml/parsing/MarkupParserCommon.scala	/^    val buf = new StringBuilder$/;"	V
buff	scala/collection/immutable/TrieIterator.scala	/^      val buff = subIter.toBuffer$/;"	V
buff	scala/collection/mutable/UnrolledBuffer.scala	/^  class Unrolled[T: ClassTag] private[collection] (var size: Int, var array: Array[T], var next: Unrolled[T], val buff: UnrolledBuffer[T] = null) {$/;"	V
buff	scala/collection/parallel/immutable/ParHashMap.scala	/^        val buff = triter.toBuffer$/;"	V
buff	scala/collection/parallel/immutable/ParHashSet.scala	/^        val buff = triter.toBuffer$/;"	V
buff	scala/collection/parallel/mutable/ParHashTable.scala	/^      var buff = mutable.ArrayBuffer[Entry]()$/;"	v
buff	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  val buff = new DoublingUnrolledBuffer[Any]$/;"	V
buffer	scala/collection/Iterator.scala	/^    private[this] var buffer: ArrayBuffer[B] = ArrayBuffer()  \/\/ the buffer$/;"	v
buffer	scala/collection/immutable/IntMap.scala	/^    val buffer = new scala.collection.mutable.ListBuffer[(Int, T)]$/;"	V
buffer	scala/collection/immutable/IntMap.scala	/^  var buffer = new Array[AnyRef](33)$/;"	v
buffer	scala/collection/immutable/LongMap.scala	/^    val buffer = new scala.collection.mutable.ListBuffer[(Long, T)]$/;"	V
buffer	scala/collection/immutable/LongMap.scala	/^  var buffer = new Array[AnyRef](65)$/;"	v
buffer	scala/collection/parallel/package.scala	/^  (private val buffer: scala.collection.mutable.ArrayBuffer[T], private var index: Int, private val until: Int, _sigdel: scala.collection.generic.Signalling)$/;"	V
buffer	scala/sys/process/BasicIO.scala	/^    val buffer = new Array[Byte](BufferSize)$/;"	V
buffer	scala/sys/process/ProcessBuilderImpl.scala	/^      val buffer = new StringBuffer$/;"	V
buffer	scala/sys/process/ProcessLogger.scala	/^      def buffer[T](f: => T): T = f$/;"	m
buffer	scala/sys/process/ProcessLogger.scala	/^  def buffer[T](f: => T): T = f$/;"	m
buffer	scala/sys/process/ProcessLogger.scala	/^  def buffer[T](f: => T): T$/;"	m
buffer	scala/sys/process/package.scala	/^    *   val buffer = new StringBuffer()$/;"	V
buffer	scala/xml/parsing/FactoryAdapter.scala	/^  val buffer      = new StringBuilder()$/;"	V
buffer	scala/xml/pull/XMLEventReader.scala	/^  private[this] var buffer: T = _$/;"	v
bufferToColl	scala/collection/Iterator.scala	/^    def bufferToColl[B](coll: ArrayBuffer[B]) = coll.iterator$/;"	m
bufferToColl	scala/collection/TraversableOnce.scala	/^    def bufferToColl[B](buff: ArrayBuffer[B]) = buff.iterator$/;"	m
bufferToColl	scala/collection/TraversableOnce.scala	/^    def bufferToColl[B](buff: ArrayBuffer[B]): Coll[B]$/;"	m
buffered	scala/collection/Iterator.scala	/^  def buffered: BufferedIterator[A] = new AbstractIterator[A] with BufferedIterator[A] {$/;"	m
bufferedReader	scala/io/BufferedSource.scala	/^  def bufferedReader() = new BufferedReader(reader(), bufferSize)$/;"	m
buffind	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var buffind = 0$/;"	v
buffind	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var buffind = stbuff$/;"	v
build	scala/sys/process/Process.scala	/^    * val build = new File("project\/build.properties")$/;"	V
buildString	scala/collection/package.scala	/^    def buildString(closure: (Any => Unit) => Unit): String = {$/;"	m
buildString	scala/xml/Atom.scala	/^  def buildString(sb: StringBuilder): StringBuilder =$/;"	m
buildString	scala/xml/Group.scala	/^  def buildString(sb: StringBuilder)  = fail("toString(StringBuilder)")$/;"	m
buildString	scala/xml/MetaData.scala	/^  def buildString(sb: StringBuilder): StringBuilder = {$/;"	m
buildString	scala/xml/NamespaceBinding.scala	/^  def buildString(sb: StringBuilder, stop: NamespaceBinding) {$/;"	m
buildString	scala/xml/NamespaceBinding.scala	/^  def buildString(stop: NamespaceBinding): String = sbToString(buildString(_, stop))$/;"	m
buildString	scala/xml/Node.scala	/^  def buildString(stripComments: Boolean): String =$/;"	m
buildString	scala/xml/SpecialNode.scala	/^  def buildString(sb: StringBuilder): StringBuilder$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(c: ContentModel, sb: StringBuilder): StringBuilder = c match {$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(r: RegExp): String = sbToString(buildString(r, _))$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(r: RegExp, sb: StringBuilder): StringBuilder =$/;"	m
buildString	scala/xml/dtd/ContentModel.scala	/^  def buildString(sb: StringBuilder): StringBuilder$/;"	m
buildString	scala/xml/dtd/Decl.scala	/^  def buildString(sb: StringBuilder): StringBuilder = {$/;"	m
buildString	scala/xml/dtd/Decl.scala	/^  def buildString(sb: StringBuilder): StringBuilder$/;"	m
buildString	scala/xml/dtd/ExternalID.scala	/^  def buildString(sb: StringBuilder): StringBuilder =$/;"	m
builder	scala/collection/TraversableLike.scala	/^    def builder = bf(repr) \/\/ extracted to keep method size under 35 bytes, so that it can be JIT-inlined$/;"	m
builder	scala/collection/TraversableLike.scala	/^    def builder = { \/\/ extracted to keep method size under 35 bytes, so that it can be JIT-inlined$/;"	m
builder	scala/collection/mutable/DoubleLinkedList.scala	/^    val builder = newBuilder$/;"	V
bv	scala/util/Sorting.scala	/^          var bv = x(b) compare v$/;"	v
by	scala/collection/immutable/NumericRange.scala	/^  def by(newStep: T): NumericRange[T] = copy(start, end, newStep)$/;"	m
by	scala/collection/immutable/Range.scala	/^    def by(x: T): U = f(x)$/;"	m
by	scala/collection/immutable/Range.scala	/^  def by(step: Int): Range = copy(start, end, step)$/;"	m
by	scala/math/Equiv.scala	/^  def by[T, S: Equiv](f: T => S): Equiv[T] =$/;"	m
by	scala/math/Ordering.scala	/^  def by[T, S](f: T => S)(implicit ord: Ordering[S]): Ordering[T] =$/;"	m
by	scala/util/control/Exception.scala	/^    def by(x: T): R = f(x)$/;"	m
byName	scala/annotation/elidable.scala	/^  val byName: Map[String, Int] = Map($/;"	V
byte	scala/io/BytePickle.scala	/^  def byte: SPU[Byte] = new SPU[Byte] {$/;"	m
byteCount	scala/sys/process/BasicIO.scala	/^      val byteCount = in.read(buffer)$/;"	V
byteValue	scala/math/ScalaNumericConversions.scala	/^  def byteValue(): Byte$/;"	m
byteValue	scala/runtime/ScalaNumberProxy.scala	/^  def byteValue()   = intValue.toByte$/;"	m
bytearray	scala/io/BytePickle.scala	/^  def bytearray: SPU[Array[Byte]] = {$/;"	m
bytes	scala/io/Codec.scala	/^    val bytes = new Array[Byte](bbuffer.remaining())$/;"	V
bytes	scala/reflect/ScalaLongSignature.java	/^    public String[] bytes();$/;"	m	interface:ScalaLongSignature
bytes	scala/reflect/ScalaSignature.java	/^    public String bytes();$/;"	m	interface:ScalaSignature
bytes	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bytes = (in.read, in.read, in.read, in.read)$/;"	V
bytesHash	scala/util/hashing/MurmurHash3.scala	/^  def bytesHash(data: Array[Byte]): Int            = bytesHash(data, arraySeed)$/;"	m
bytesHashing	scala/util/hashing/MurmurHash3.scala	/^  def bytesHashing = new Hashing[Array[Byte]] {$/;"	m
bytesToRead	scala/xml/include/sax/EncodingHeuristics.scala	/^    val bytesToRead = 1024 \/\/ enough to read most XML encoding declarations$/;"	V
byteswap32	scala/util/hashing/package.scala	/^  def byteswap32(v: Int): Int = {$/;"	m
byteswap64	scala/util/hashing/package.scala	/^  def byteswap64(v: Long): Long = {$/;"	m
c	scala/Array.scala	/^ *  val c = Array.concat(a, b)$/;"	V
c	scala/DelayedInit.scala	/^ *      val c = new C$/;"	V
c	scala/Product.scala	/^    private var c: Int = 0$/;"	v
c	scala/annotation/meta/package.scala	/^ * class C(@myAnnot @BeanProperty var c: Int)$/;"	v
c	scala/collection/GenTraversableLike.scala	/^   *      scala> val c = a ++ b$/;"	V
c	scala/collection/GenTraversableOnce.scala	/^   *      scala> val c = (5 \/: a)((x,y) => x + y)$/;"	V
c	scala/collection/GenTraversableOnce.scala	/^   *      scala> val c = (a :\\ 5)((x,y) => x + y)$/;"	V
c	scala/collection/mutable/HashTable.scala	/^    var c = target - 1;$/;"	v
c	scala/collection/mutable/LinkedList.scala	/^  *    scala> val c = LinkedList('a')$/;"	V
c	scala/collection/mutable/LinkedListLike.scala	/^   *    scala> val c = a.append(b)$/;"	V
c	scala/collection/mutable/ListBuffer.scala	/^      var c = count1$/;"	v
c	scala/collection/parallel/mutable/ParArray.scala	/^      val c = count_quick(p, arr, until, i)$/;"	V
c	scala/collection/parallel/mutable/ParHashMap.scala	/^    val c = table.hashTableContents$/;"	V
c	scala/collection/parallel/mutable/ParHashTable.scala	/^      var c = 0$/;"	v
c	scala/reflect/NameTransformer.scala	/^      val c = name charAt i$/;"	V
c	scala/reflect/NameTransformer.scala	/^    val c = (code.charAt(1) - 'a') * 26 + code.charAt(2) - 'a'$/;"	V
c	scala/runtime/ScalaRunTime.scala	/^      private var c: Int = 0$/;"	v
c	scala/util/MurmurHash.scala	/^    var c = 1$/;"	v
c	scala/util/MurmurHash.scala	/^    var c = hiddenMagicA$/;"	v
c	scala/util/MurmurHash.scala	/^  private var c = hiddenMagicA$/;"	v
c	scala/util/Sorting.scala	/^        var c = off + len - 1$/;"	v
c	scala/util/hashing/MurmurHash3.scala	/^    var c = 1$/;"	v
c	scala/xml/Utility.scala	/^      var c = it.next$/;"	v
c	scala/xml/dtd/ExternalID.scala	/^    val c = if (s contains '"') '\\'' else '"'$/;"	V
c	scala/xml/dtd/Scanner.scala	/^  private var c: Char = 'z'$/;"	v
c	scala/xml/include/sax/XIncludeFilter.scala	/^      val c = new Array[Char](1024)$/;"	V
c	scala/xml/include/sax/XIncluder.scala	/^        val c = ch(start+i);$/;"	V
c	scala/xml/parsing/FactoryAdapter.scala	/^        val c = it.next$/;"	V
c	scala/xml/parsing/MarkupParserCommon.scala	/^    var c = it.next$/;"	v
c	scala/xml/persistent/CachedFileStorage.scala	/^    val c   = fos.getChannel()$/;"	V
cache	scala/collection/SeqLike.scala	/^        var cache = new Array[AnyRef](n1-n0)  \/\/ Ring buffer--need a quick way to do a look-behind$/;"	v
cache	scala/math/BigDecimal.scala	/^  private lazy val cache = new Array[BigDecimal](maxCached - minCached + 1)$/;"	V
cache	scala/math/BigInt.scala	/^  private val cache = new Array[BigInt](maxCached - minCached + 1)$/;"	V
cache	scala/util/parsing/combinator/PackratParsers.scala	/^      override private[PackratParsers] val cache = outer.cache$/;"	V
cache	scala/util/parsing/combinator/PackratParsers.scala	/^    private[PackratParsers] val cache = mutable.HashMap.empty[(Parser[_], Position), MemoEntry[_]]$/;"	V
cache	scala/xml/factory/NodeFactory.scala	/^  val cache = new scala.collection.mutable.HashMap[Int, List[A]]$/;"	V
cached	scala/Symbol.scala	/^    def cached(): V = {$/;"	m
cached	scala/util/parsing/combinator/PackratParsers.scala	/^    val cached = in.getFromCache(p)$/;"	V
cachedSize	scala/collection/concurrent/MainNode.java	/^    public abstract int cachedSize(Object ct);$/;"	m	class:MainNode
cachedSize	scala/collection/concurrent/TrieMap.scala	/^  def cachedSize(ct: AnyRef) = {$/;"	m
cachedSize	scala/collection/concurrent/TrieMap.scala	/^  def cachedSize(ct: AnyRef): Int = listmap.size$/;"	m
cachedSize	scala/collection/concurrent/TrieMap.scala	/^  def cachedSize(ct: AnyRef): Int = throw new UnsupportedOperationException$/;"	m
cachedSize	scala/collection/concurrent/TrieMap.scala	/^  def cachedSize(ct: TrieMap[K, V]): Int = {$/;"	m
call	scala/concurrent/ThreadPoolRunner.scala	/^    def call() = fun()$/;"	m
canAddBinder	scala/util/parsing/ast/Binders.scala	/^    def canAddBinder(b: binderType): Boolean = !binds(b)$/;"	m
canBeShared	scala/collection/parallel/Combiner.scala	/^  def canBeShared: Boolean = false$/;"	m
canBuildFrom	scala/collection/SortedSet.scala	/^  def canBuildFrom[A](implicit ord: Ordering[A]): CanBuildFrom[Coll, A, SortedSet[A]] = newCanBuildFrom[A]$/;"	m
canBuildFrom	scala/collection/immutable/SortedSet.scala	/^  def canBuildFrom[A](implicit ord: Ordering[A]): CanBuildFrom[Coll, A, SortedSet[A]] = newCanBuildFrom[A]$/;"	m
canEqual	scala/Equals.scala	/^  def canEqual(that: Any): Boolean$/;"	m
canEqual	scala/collection/parallel/ParIterableLike.scala	/^  def canEqual(other: Any) = true$/;"	m
canPipeTo	scala/sys/process/ProcessBuilder.scala	/^  def canPipeTo: Boolean$/;"	m
canPipeTo	scala/sys/process/ProcessBuilderImpl.scala	/^    def canPipeTo = false$/;"	m
cannotMatch	scala/reflect/ClassManifestDeprecatedApis.scala	/^    def cannotMatch = {$/;"	m
capacity	scala/collection/mutable/ArrayBuilder.scala	/^    private var capacity: Int = 0$/;"	v
capacity	scala/collection/mutable/StringBuilder.scala	/^  def capacity: Int = underlying.capacity()$/;"	m
capacity	scala/collection/mutable/WrappedArrayBuilder.scala	/^  private var capacity: Int = 0$/;"	v
capitalize	scala/collection/immutable/StringLike.scala	/^  def capitalize: String =$/;"	m
capture	scala/xml/parsing/FactoryAdapter.scala	/^  var capture: Boolean = false$/;"	v
captureExceptions	scala/util/continuations/ControlContext.scala	/^          var captureExceptions = true$/;"	v
captureText	scala/xml/parsing/FactoryAdapter.scala	/^  def captureText(): Unit = {$/;"	m
cardinality	scala/collection/mutable/TreeSet.scala	/^  private var cardinality: Int = 0$/;"	v
cat	scala/sys/process/Process.scala	/^  def cat(file: Source, files: Source*): ProcessBuilder = cat(file +: files)$/;"	m
cat	scala/sys/process/Process.scala	/^  def cat(files: Seq[Source]): ProcessBuilder = {$/;"	m
cat	scala/sys/process/ProcessBuilder.scala	/^    def cat = toSource$/;"	m
cat	scala/sys/process/package.scala	/^    *   val cat = Seq("zcat", "name")$/;"	V
catchBreak	scala/util/control/Breaks.scala	/^    def catchBreak(onBreak: =>T) = try {$/;"	m
catchBreak	scala/util/control/Breaks.scala	/^    def catchBreak(onBreak: =>T): T$/;"	m
catching	scala/util/control/Exception.scala	/^  def catching[T](c: Catcher[T]): Catch[T] = new Catch(c)$/;"	m
catching	scala/util/control/Exception.scala	/^  def catching[T](exceptions: Class[_]*): Catch[T] =$/;"	m
catchingPromiscuously	scala/util/control/Exception.scala	/^  def catchingPromiscuously[T](c: Catcher[T]): Catch[T]         = new Catch(c, None, _ => false)$/;"	m
catchingPromiscuously	scala/util/control/Exception.scala	/^  def catchingPromiscuously[T](exceptions: Class[_]*): Catch[T] = catchingPromiscuously(pfFromExceptions(exceptions : _*))$/;"	m
cb	scala/collection/Parallelizable.scala	/^    val cb = parCombiner$/;"	V
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = companion.newCombiner[A]$/;"	V
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = companion.newCombiner[B]$/;"	V
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = mapCompanion.newCombiner[K, V]$/;"	V
cb	scala/collection/generic/GenericParTemplate.scala	/^    val cb = mapCompanion.newCombiner[P, Q]$/;"	V
cb	scala/collection/parallel/ParIterableLike.scala	/^        val cb = bf(repr).asCombiner$/;"	V
cb	scala/collection/parallel/ParIterableLike.scala	/^      val cb = mcf()$/;"	V
cb	scala/collection/parallel/ParIterableLike.scala	/^      val cb = reuse(prev, cbf())$/;"	V
cb	scala/collection/parallel/ParIterableLike.scala	/^    val cb = newCombiner$/;"	V
cb	scala/collection/parallel/RemainsIterator.scala	/^    \/\/val cb = cbf(repr)$/;"	V
cb	scala/collection/parallel/RemainsIterator.scala	/^    \/\/val cb = pbf(repr)$/;"	V
cb	scala/collection/parallel/mutable/ParArray.scala	/^      \/\/val cb = cbf(self.repr)$/;"	V
cb	scala/collection/parallel/mutable/ParArray.scala	/^      \/\/val cb = pbf(self.repr)$/;"	V
cb	scala/collection/parallel/mutable/ParArray.scala	/^    val cb = ParArrayCombiner[T]()$/;"	V
cb	scala/collection/parallel/package.scala	/^      val cb = mutable.ParArrayCombiner[T]()$/;"	V
cbf	scala/collection/parallel/ParIterableLike.scala	/^    val cbf = combinerFactory$/;"	V
cbrt	scala/math/package.scala	/^  def cbrt(x: Double): Double = java.lang.Math.cbrt(x)$/;"	m
cbuf	scala/xml/parsing/MarkupParser.scala	/^  protected val cbuf = new StringBuilder()$/;"	V
cbuffer	scala/io/Codec.scala	/^    val cbuffer = UTF8.charSet decode bbuffer$/;"	V
cbuffer	scala/io/Codec.scala	/^    val cbuffer = java.nio.CharBuffer.wrap(chars, offset, len)$/;"	V
cbuffer	scala/io/Codec.scala	/^    val cbuffer = java.nio.CharBuffer.wrap(cs, 0, cs.length)$/;"	V
cc	scala/util/continuations/ControlContext.scala	/^ *   val cc = new ControlContext[String, String, String]($/;"	V
cc1	scala/util/continuations/ControlContext.scala	/^              val cc1 = pf(t)$/;"	V
ccol	scala/io/Source.scala	/^    var ccol = 1$/;"	v
ce	scala/collection/parallel/mutable/ParHashMap.scala	/^      var ce = olde$/;"	v
ceil	scala/math/package.scala	/^  def ceil(x: Double): Double = java.lang.Math.ceil(x)$/;"	m
ceil	scala/runtime/RichDouble.scala	/^  def ceil: Double  = math.ceil(self)$/;"	m
ceil	scala/runtime/RichFloat.scala	/^  def ceil: Float  = math.ceil(self).toFloat$/;"	m
cell	scala/collection/mutable/Queue.scala	/^      var cell = start$/;"	v
cfactory	scala/collection/parallel/ParIterableLike.scala	/^      val cfactory = combinerFactory(() => pbf(repr))$/;"	V
cfactory	scala/collection/parallel/ParSeqLike.scala	/^      val cfactory = combinerFactory(() => bf(repr).asCombiner)$/;"	V
ch	scala/StringContext.scala	/^          val ch = str(idx)$/;"	V
ch	scala/io/Source.scala	/^      val ch = iter.next$/;"	V
ch	scala/io/Source.scala	/^    var ch: Char = _$/;"	v
ch	scala/io/Source.scala	/^  def ch = positioner.ch$/;"	m
ch	scala/xml/Utility.scala	/^    val ch = if (s contains '"') '\\'' else '"'$/;"	V
ch	scala/xml/parsing/MarkupParser.scala	/^  def ch: Char = {$/;"	m
ch	scala/xml/parsing/MarkupParserCommon.scala	/^  def ch: Char$/;"	m
ch	scala/xml/transform/BasicTransformer.scala	/^        val ch = n.child$/;"	V
ch1	scala/reflect/NameTransformer.scala	/^        val ch1 = name.charAt(i+1)$/;"	V
ch2	scala/reflect/NameTransformer.scala	/^          val ch2 = name.charAt(i+2)$/;"	V
chain	scala/Function.scala	/^  def chain[a](fs: Seq[a => a]): a => a = { x => (x \/: fs) ((x, f) => f(x)) }$/;"	m
chain	scala/collection/parallel/Tasks.scala	/^      var chain = "chain: "$/;"	v
chain	scala/collection/parallel/mutable/LazyCombiner.scala	/^  val chain: ArrayBuffer[Buff]$/;"	V
chain	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    new { val chain = c } with ResizableParArrayCombiner[T] \/\/ was: with EnvironmentPassingCombiner[T, ParArray[T]]$/;"	V
chain	scala/util/hashing/ByteswapHashing.scala	/^  def chain[T](h: Hashing[T]): Hashing[T] = new Chained(h)$/;"	m
chainString	scala/collection/mutable/DefaultEntry.scala	/^  def chainString = {$/;"	m
chainl1	scala/util/parsing/combinator/Parsers.scala	/^  def chainl1[T, U](first: => Parser[T], p: => Parser[U], q: => Parser[(T, U) => T]): Parser[T]$/;"	m
chainl1	scala/util/parsing/combinator/Parsers.scala	/^  def chainl1[T](p: => Parser[T], q: => Parser[(T, T) => T]): Parser[T]$/;"	m
chainr1	scala/util/parsing/combinator/Parsers.scala	/^  def chainr1[T, U](p: => Parser[T], q: => Parser[(T, U) => U], combine: (T, U) => U, first: U): Parser[U]$/;"	m
charAt	scala/collection/mutable/StringBuilder.scala	/^  def charAt(index: Int): Char = underlying charAt index$/;"	m
charAt	scala/runtime/SeqCharSequence.scala	/^  def charAt(index: Int): Char                        = xs(index)$/;"	m
charAt	scala/runtime/SeqCharSequence.scala	/^  def charAt(index: Int): Char = {$/;"	m
charOK	scala/xml/parsing/TokenTests.scala	/^    def charOK(c: Char) = isAlphaDigit(c) || ("._-" contains c)$/;"	m
charReader	scala/io/BufferedSource.scala	/^  private lazy val charReader = {$/;"	V
charReaderCreated	scala/io/BufferedSource.scala	/^  private var charReaderCreated = false$/;"	v
charSeq	scala/util/parsing/json/Lexer.scala	/^  def charSeq: Parser[String] =$/;"	m
charSet	scala/io/Codec.scala	/^class Codec(val charSet: Charset) {$/;"	V
charValue	scala/math/BigDecimal.scala	/^  def charValue   = intValue.toChar$/;"	m
charValue	scala/math/BigInt.scala	/^  def charValue   = intValue.toChar$/;"	m
characters	scala/xml/include/sax/XIncluder.scala	/^  def characters(ch: Array[Char], start: Int, length: Int) {$/;"	m
chars	scala/collection/immutable/StringLike.scala	/^      val chars = toString.toCharArray$/;"	V
chars	scala/io/Codec.scala	/^    val chars   = new Array[Char](cbuffer.remaining())$/;"	V
chars	scala/util/parsing/combinator/token/Tokens.scala	/^    def chars = "*** error: "+msg$/;"	m
chars	scala/util/parsing/combinator/token/Tokens.scala	/^    def chars = "<eof>"$/;"	m
chars	scala/util/parsing/combinator/token/Tokens.scala	/^    def chars: String$/;"	m
charsRead	scala/xml/include/sax/XIncludeFilter.scala	/^      var charsRead: Int = 0  \/\/ bogus init value$/;"	v
check	scala/collection/parallel/mutable/ParHashMap.scala	/^    def check(e: HashEntry[K, DefaultEntry[K, V]]): List[String] = if (e eq null) Nil else$/;"	m
check	scala/xml/dtd/ElementValidator.scala	/^  def check(md: MetaData): Boolean = {$/;"	m
check	scala/xml/dtd/ElementValidator.scala	/^  def check(nodes: Seq[Node]): Boolean = contentModel match {$/;"	m
checkAttributeValue	scala/xml/Utility.scala	/^  def checkAttributeValue(value: String): String = {$/;"	m
checkInitialized	scala/runtime/ScalaRunTime.scala	/^  def checkInitialized[T <: AnyRef](x: T): T =$/;"	m
checkInput	scala/io/Position.scala	/^  def checkInput(line: Int, column: Int) {$/;"	m
checkInput	scala/io/Position.scala	/^  def checkInput(line: Int, column: Int): Unit$/;"	m
checkInput	scala/io/Source.scala	/^    def checkInput(line: Int, column: Int): Unit = ()$/;"	m
checkKeyword	scala/util/parsing/json/Lexer.scala	/^  def checkKeyword(xs : List[Any]) = {$/;"	m
checkLengths	scala/StringContext.scala	/^  def checkLengths(args: Seq[Any]): Unit =$/;"	m
checkPubID	scala/xml/parsing/TokenTests.scala	/^  def checkPubID(s: String) = s forall isPubIDChar$/;"	m
checkSysID	scala/xml/parsing/TokenTests.scala	/^  def checkSysID(s: String) = List('"', '\\'') exists (c => !(s contains c))$/;"	m
child	scala/collection/immutable/HashSet.scala	/^      val child = makeHashTrieSet(hash0, elem0, hash1, elem1, level + 5)$/;"	V
child	scala/xml/Elem.scala	/^  val child: Node*)$/;"	V
child	scala/xml/Node.scala	/^  def child: Seq[Node]$/;"	m
child	scala/xml/dtd/ExternalID.scala	/^  def child = Nil$/;"	m
children	scala/xml/Document.scala	/^  var children: Seq[Node] = _$/;"	v
children	scala/xml/parsing/MarkupParser.scala	/^    var children: NodeSeq = null$/;"	v
choiceRest	scala/xml/dtd/ContentModelParser.scala	/^  def choiceRest( p:RegExp ) = {$/;"	m
chrExcept	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def chrExcept(cs: Char*) = elem("", ch => (cs forall (ch != _)))$/;"	m
chunkarr	scala/collection/mutable/UnrolledBuffer.scala	/^        val chunkarr = unrolled.array$/;"	V
chunkarr	scala/collection/parallel/immutable/ParHashMap.scala	/^        val chunkarr = unrolled.array$/;"	V
chunkarr	scala/collection/parallel/immutable/ParHashSet.scala	/^        val chunkarr = unrolled.array$/;"	V
chunkarr	scala/collection/parallel/mutable/ParHashMap.scala	/^        val chunkarr = unrolled.array$/;"	V
chunkarr	scala/collection/parallel/mutable/ParHashSet.scala	/^        val chunkarr = unrolled.array$/;"	V
chunksize	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^        val chunksize = if (totalleft < (currbuff.size - ind)) totalleft else currbuff.size - ind$/;"	V
chunksz	scala/collection/mutable/UnrolledBuffer.scala	/^        val chunksz = unrolled.size$/;"	V
chunksz	scala/collection/parallel/immutable/ParHashMap.scala	/^        val chunksz = unrolled.size$/;"	V
chunksz	scala/collection/parallel/immutable/ParHashSet.scala	/^        val chunksz = unrolled.size$/;"	V
chunksz	scala/collection/parallel/mutable/ParHashMap.scala	/^        val chunksz = unrolled.size$/;"	V
chunksz	scala/collection/parallel/mutable/ParHashSet.scala	/^        val chunksz = unrolled.size$/;"	V
classManifest	scala/Predef.scala	/^  def classManifest[T](implicit m: ClassManifest[T]) = m$/;"	m
classManifestCompanion	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^  def classManifestCompanion: GenericClassManifestCompanion[CC] = classTagCompanion$/;"	m
classOf	scala/Predef.scala	/^  def classOf[T]: Class[T] = null \/\/ This is a stub method. The actual implementation is filled in by the compiler.$/;"	m
classTag	scala/reflect/package.scala	/^  def classTag[T](implicit ctag: ClassTag[T]) = ctag$/;"	m
classTagCompanion	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^  def classTagCompanion: GenericClassTagCompanion[CC]$/;"	m
classTagCompanion	scala/collection/mutable/UnrolledBuffer.scala	/^  def classTagCompanion = UnrolledBuffer$/;"	m
classType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def classType[T](clazz: jClass[_]): ClassManifest[T] =$/;"	m
classType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def classType[T](clazz: jClass[_], arg1: OptManifest[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
classType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def classType[T](prefix: OptManifest[_], clazz: jClass[_], args: OptManifest[_]*): ClassManifest[T] =$/;"	m
classType	scala/reflect/Manifest.scala	/^  def classType[T](clazz: Predef.Class[T], arg1: Manifest[_], args: Manifest[_]*): Manifest[T] =$/;"	m
classType	scala/reflect/Manifest.scala	/^  def classType[T](clazz: Predef.Class[_]): Manifest[T] =$/;"	m
classType	scala/reflect/Manifest.scala	/^  def classType[T](prefix: Manifest[_], clazz: Predef.Class[_], args: Manifest[_]*): Manifest[T] =$/;"	m
cleanReadOnly	scala/collection/concurrent/TrieMap.scala	/^        def cleanReadOnly(tn: TNode[K, V]) = if (ct.nonReadOnly) {$/;"	m
clear	scala/Enumeration.scala	/^      def clear() = b.clear$/;"	m
clear	scala/collection/convert/Wrappers.scala	/^    def clear() = underlying.clear()$/;"	m
clear	scala/collection/generic/Clearable.scala	/^  def clear(): Unit$/;"	m
clear	scala/collection/generic/Growable.scala	/^  def clear(): Unit$/;"	m
clear	scala/collection/immutable/BitSet.scala	/^    def clear() = b.clear$/;"	m
clear	scala/collection/immutable/ListSet.scala	/^    def clear() = { elems.clear() ; seen.clear() }$/;"	m
clear	scala/collection/immutable/Vector.scala	/^  def clear(): Unit = {$/;"	m
clear	scala/collection/mutable/Builder.scala	/^      def clear() = self.clear()$/;"	m
clear	scala/collection/mutable/DoubleLinkedList.scala	/^      def clear(): Unit = current = emptyList()$/;"	m
clear	scala/collection/mutable/GrowingBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/MapBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/MapLike.scala	/^  def clear() { keysIterator foreach -= }$/;"	m
clear	scala/collection/mutable/PriorityQueue.scala	/^  def clear(): Unit = { resarr.p_size0 = 1 }$/;"	m
clear	scala/collection/mutable/SetBuilder.scala	/^  def clear() { elems = empty }$/;"	m
clear	scala/collection/mutable/SetLike.scala	/^  def clear() { foreach(-=) }$/;"	m
clear	scala/collection/mutable/Stack.scala	/^    def clear() = lbuff.clear()$/;"	m
clear	scala/collection/mutable/Stack.scala	/^  def clear(): Unit = elems = Nil$/;"	m
clear	scala/collection/mutable/StringBuilder.scala	/^  def clear(): Unit = setLength(0)$/;"	m
clear	scala/collection/parallel/immutable/ParVector.scala	/^  def clear() = {$/;"	m
clear	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def clear() = { chain.clear() }$/;"	m
clear	scala/collection/parallel/mutable/ParHashSet.scala	/^  def clear() = clearTable()$/;"	m
clear	scala/collection/parallel/mutable/ParMap.scala	/^    def clear() = underlying.clear()$/;"	m
clear	scala/collection/parallel/mutable/ParMapLike.scala	/^  def clear(): Unit$/;"	m
clear	scala/collection/parallel/package.scala	/^    def clear() = {$/;"	m
clear	scala/ref/Reference.scala	/^  def clear(): Unit$/;"	m
clear	scala/ref/ReferenceWrapper.scala	/^  def clear() = underlying.clear()$/;"	m
clear	scala/sys/Prop.scala	/^  def clear(): Unit$/;"	m
clear	scala/sys/PropImpl.scala	/^  def clear(): Unit = underlying -= key$/;"	m
clearBit	scala/math/BigInt.scala	/^  def clearBit(n: Int): BigInt  = new BigInt(this.bigInteger.clearBit(n))$/;"	m
clearProp	scala/util/Properties.scala	/^  def clearProp(name: String)                   = System.clearProperty(name)$/;"	m
clearw	scala/collection/BitSetLike.scala	/^      var clearw = w+1$/;"	v
cline	scala/io/Source.scala	/^    var cline = 1$/;"	v
clipL	scala/collection/SeqLike.scala	/^    def clipL(x: Int, y: Int) = if (x > y) x else -1$/;"	m
clipR	scala/collection/SeqLike.scala	/^    def clipR(x: Int, y: Int) = if (x < y) x else -1$/;"	m
clippedFrom	scala/collection/SeqLike.scala	/^      val clippedFrom = math.max(0, from)$/;"	V
clippedFrom	scala/collection/SeqLike.scala	/^    val clippedFrom = math.max(0, fromIndex)$/;"	V
clippedFrom	scala/collection/SeqLike.scala	/^    val clippedFrom = math.min(s1 - s0, fromIndex)$/;"	V
clippedL	scala/collection/SeqLike.scala	/^    val clippedL = math.min(l-tl, end)$/;"	V
clone	scala/collection/mutable/TreeSet.scala	/^    val clone = new TreeSet[A](base, from, until)$/;"	V
cloneArray	scala/runtime/ArrayRuntime.java	/^  static Object[] cloneArray(Object[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static boolean[] cloneArray(boolean[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static byte[] cloneArray(byte[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static char[] cloneArray(char[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static double[] cloneArray(double[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static float[] cloneArray(float[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static int[] cloneArray(int[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static long[] cloneArray(long[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneArray	scala/runtime/ArrayRuntime.java	/^  static short[] cloneArray(short[] array) { return array.clone(); }$/;"	m	class:ArrayRuntime
cloneElementNoBoundElements	scala/util/parsing/ast/Binders.scala	/^    def cloneElementNoBoundElements = element.gmap(new Mapper { def apply[t <% Mappable[t]](x :t): t = x match{$/;"	m
cloneElementWithSubst	scala/util/parsing/ast/Binders.scala	/^    def cloneElementWithSubst(subst: Map[NameElement, NameElement]) = element.gmap(new Mapper { def apply[t <% Mappable[t]](x :t): t = x match{$/;"	m
cloneable	scala/annotation/cloneable.scala	/^class cloneable extends scala.annotation.StaticAnnotation$/;"	c
cloneable	scala/package.scala	/^  type cloneable = annotation.cloneable$/;"	T
cloned	scala/collection/mutable/ArraySeq.scala	/^    val cloned = array.clone.asInstanceOf[Array[AnyRef]]$/;"	V
close	scala/sys/process/BasicIO.scala	/^  def close(c: Closeable) = try c.close() catch { case _: IOException => () }$/;"	m
close	scala/sys/process/ProcessLogger.scala	/^  def close(): Unit = writer.close()$/;"	m
closeFunction	scala/io/Source.scala	/^  private[this] var closeFunction: () => Unit = null$/;"	v
cmax	scala/Product.scala	/^    private val cmax = productArity$/;"	V
cmax	scala/runtime/ScalaRunTime.scala	/^      private val cmax = x.productArity$/;"	V
cmb	scala/collection/parallel/immutable/ParHashMap.scala	/^              val cmb: Combiner[V, Repr] = cbf()$/;"	V
cmb	scala/collection/parallel/immutable/ParHashMap.scala	/^          val cmb: Combiner[V, Repr] = trie.get0(kv._1, hc, rootbits) match {$/;"	V
cmd	scala/sys/process/package.scala	/^    *   val cmd = Seq("find", baseDir, "-name", "*.scala", "-type", "f")$/;"	V
cmp	scala/collection/immutable/RedBlackTree.scala	/^    val cmp = ordering.compare(k, tree.key)$/;"	V
cmp	scala/collection/immutable/RedBlackTree.scala	/^    val cmp = ordering.compare(x, tree.key)$/;"	V
cmstr	scala/xml/parsing/MarkupParser.scala	/^    val cmstr = cbuf.toString()$/;"	V
cn	scala/collection/concurrent/TrieMap.scala	/^    val cn = new CNode[K, V](0, new Array(0), gen)$/;"	V
cnd	scala/collection/SeqLike.scala	/^    var cnd = 0$/;"	v
cnt	scala/collection/TraversableOnce.scala	/^    var cnt = 0$/;"	v
cnt	scala/collection/immutable/PagedSeq.scala	/^        val cnt = current.length min len$/;"	V
cnt	scala/collection/parallel/mutable/ParArray.scala	/^      var cnt = 0$/;"	v
cnt	scala/io/BytePickle.scala	/^    private var cnt: Int = 64$/;"	v
cnt	scala/util/parsing/input/Reader.scala	/^    var cnt = n$/;"	v
cntx	scala/collection/parallel/ParIterableLike.scala	/^      val cntx = new DefaultSignalling with AtomicIndexFlag$/;"	V
cntx	scala/collection/parallel/ParIterableLike.scala	/^    val cntx = new DefaultSignalling with AtomicIndexFlag$/;"	V
code	scala/sys/process/ProcessBuilderImpl.scala	/^      val code   = this ! BasicIO(withIn, buffer, log)$/;"	V
code	scala/sys/process/ProcessImpl.scala	/^      val code = new SyncVar[Option[Int]]()$/;"	V
code2op	scala/reflect/NameTransformer.scala	/^  private val code2op = new Array[OpCodes](ncodes)$/;"	V
codec	scala/io/BufferedSource.scala	/^class BufferedSource(inputStream: InputStream, bufferSize: Int)(implicit val codec: Codec) extends Source {$/;"	V
col	scala/io/Source.scala	/^    val col   = Position column pos$/;"	V
col	scala/runtime/WorksheetSupport.scala	/^    private var col = -1$/;"	v
coll	scala/collection/generic/SliceInterval.scala	/^   *  val coll = (1 to 100).view.slice(10, 30).slice(1, 3)$/;"	V
collect	scala/collection/GenTraversableLike.scala	/^  def collect[B, That](pf: PartialFunction[A, B])(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
collect	scala/collection/Iterator.scala	/^  def collect[B](pf: PartialFunction[A, B]): Iterator[B] = {$/;"	m
collect	scala/collection/TraversableLike.scala	/^  def collect[B, That](pf: PartialFunction[A, B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
collect	scala/collection/parallel/ParIterableLike.scala	/^  def collect[S, That](pf: PartialFunction[T, S])(implicit bf: CanBuildFrom[Repr, S, That]): That = if (bf(repr).isCombiner) {$/;"	m
collect	scala/concurrent/Future.scala	/^  def collect[S](pf: PartialFunction[T, S])(implicit executor: ExecutionContext): Future[S] = {$/;"	m
collect2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def collect2combiner[S, That](pf: PartialFunction[T, S], cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
collectFirst	scala/collection/TraversableOnce.scala	/^  def collectFirst[B](pf: PartialFunction[A, B]): Option[B] = {$/;"	m
collectGarbage	scala/compat/Platform.scala	/^  def collectGarbage(): Unit = System.gc()$/;"	m
collectNamespaces	scala/xml/Utility.scala	/^  def collectNamespaces(n: Node, set: mutable.Set[String]) {$/;"	m
collectNamespaces	scala/xml/Utility.scala	/^  def collectNamespaces(nodes: Seq[Node]): mutable.Set[String] =$/;"	m
collection	scala/collection/IndexedSeqOptimized.scala	/^package collection$/;"	p
collection	scala/collection/IterableLike.scala	/^package collection$/;"	p
collection	scala/collection/Iterator.scala	/^package collection$/;"	p
collection	scala/collection/SeqLike.scala	/^package collection$/;"	p
collection	scala/collection/immutable/HashMap.scala	/^package collection$/;"	p
collection	scala/collection/immutable/HashSet.scala	/^package collection$/;"	p
collection	scala/collection/immutable/IntMap.scala	/^package collection$/;"	p
collection	scala/collection/immutable/LongMap.scala	/^package collection$/;"	p
collection	scala/collection/immutable/RedBlack.scala	/^package collection$/;"	p
collection	scala/collection/immutable/RedBlackTree.scala	/^package collection$/;"	p
collection	scala/collection/immutable/Vector.scala	/^package collection$/;"	p
collection	scala/collection/mutable/AVLTree.scala	/^package collection$/;"	p
collection	scala/collection/mutable/ArrayOps.scala	/^package collection$/;"	p
collection	scala/collection/mutable/ArrayStack.scala	/^package collection$/;"	p
collection	scala/collection/mutable/Builder.scala	/^package collection$/;"	p
collection	scala/collection/mutable/OpenHashMap.scala	/^package collection$/;"	p
collection	scala/collection/mutable/ResizableArray.scala	/^package collection$/;"	p
collection	scala/collection/parallel/package.scala	/^package collection$/;"	p
collection.parallel.mutable	scala/collection/parallel/mutable/ParArray.scala	/^package collection.parallel.mutable$/;"	p
colls	scala/runtime/Tuple2Zipped.scala	/^final class Tuple2Zipped[El1, Repr1, El2, Repr2](val colls: (TraversableLike[El1, Repr1], IterableLike[El2, Repr2])) extends AnyVal with ZippedTraversable2[El1, El2] {$/;"	V
colls	scala/runtime/Tuple3Zipped.scala	/^final class Tuple3Zipped[El1, Repr1, El2, Repr2, El3, Repr3](val colls: (TraversableLike[El1, Repr1], IterableLike[El2, Repr2], IterableLike[El3, Repr3]))$/;"	V
column	scala/util/parsing/input/NoPosition.scala	/^  def column = 0$/;"	m
column	scala/util/parsing/input/OffsetPosition.scala	/^  def column: Int = offset - index(line - 1) + 1$/;"	m
column	scala/util/parsing/input/Position.scala	/^  def column: Int$/;"	m
column	scala/util/parsing/input/StreamReader.scala	/^    def column = off + 1$/;"	m
column	scala/xml/include/sax/XIncludeFilter.scala	/^    var column = -1$/;"	v
combinations	scala/collection/SeqLike.scala	/^  def combinations(n: Int): Iterator[Repr] =$/;"	m
combinator	scala/util/parsing/combinator/lexical/Lexical.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/lexical/Scanners.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/lexical/StdLexical.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/token/StdTokens.scala	/^package combinator$/;"	p
combinator	scala/util/parsing/combinator/token/Tokens.scala	/^package combinator$/;"	p
combine	scala/collection/mutable/ArrayStack.scala	/^  def combine(f: (T, T) => T): Unit = push(f(pop, pop))$/;"	m
combine	scala/collection/parallel/Combiner.scala	/^  def combine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]): Combiner[N, NewTo]$/;"	m
combine	scala/collection/parallel/ParIterableView.scala	/^    def combine[N <: T, NewTo >: Nothing](other: Combiner[N, NewTo]) =$/;"	m
combine	scala/collection/parallel/ParSeqView.scala	/^    def combine[N <: T, NewTo >: Nothing](other: Combiner[N, NewTo]) =$/;"	m
combine	scala/collection/parallel/immutable/ParVector.scala	/^  def combine[U <: T, NewTo >: ParVector[T]](other: Combiner[U, NewTo]) = if (other eq this) this else {$/;"	m
combine	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def combine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]): Combiner[N, NewTo] = if (this ne other) {$/;"	m
combine	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def combine[N <: (K, V), NewTo >: ParTrieMap[K, V]](other: Combiner[N, NewTo]): Combiner[N, NewTo] = if (this eq other) this else {$/;"	m
combine	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def combine[N <: T, NewTo >: ParArray[T]](other: Combiner[N, NewTo]): Combiner[N, NewTo] = other match {$/;"	m
combine	scala/collection/parallel/package.scala	/^    def combine[N <: Elem, NewTo >: To](other: Combiner[N, NewTo]): Combiner[N, NewTo] = {$/;"	m
combineResults	scala/collection/parallel/ParIterableLike.scala	/^      def combineResults(fr: R, sr: R2): R3 = resCombiner(fr, sr)$/;"	m
combineResults	scala/collection/parallel/ParIterableLike.scala	/^    def combineResults(fr: FR, sr: SR): R$/;"	m
combiner	scala/collection/parallel/ParIterableLike.scala	/^    val combiner = cbf()$/;"	V
combiner	scala/collection/parallel/ParIterableLike.scala	/^    val combiner = newCombiner$/;"	V
combinerTaskSupport	scala/collection/parallel/Combiner.scala	/^  def combinerTaskSupport = {$/;"	m
combinerTaskSupport_=	scala/collection/parallel/Combiner.scala	/^  def combinerTaskSupport_=(cts: TaskSupport) = _combinerTaskSupport = cts$/;"	m
comment	scala/xml/include/sax/XIncluder.scala	/^  def comment(ch: Array[Char], start: Int, length: Int) {$/;"	m
comment	scala/xml/parsing/ConstructingHandler.scala	/^  def comment(pos: Int, txt: String)  = Comment(txt)$/;"	m
comment	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def comment(pos: Int, comment: String ): NodeSeq = NodeSeq.Empty$/;"	m
comment	scala/xml/parsing/MarkupHandler.scala	/^  def comment(pos: Int, comment: String): NodeSeq$/;"	m
comment	scala/xml/pull/XMLEventReader.scala	/^    def comment(pos: Int, txt: String)                    = setEvent(EvComment(txt))$/;"	m
commit	scala/util/parsing/combinator/Parsers.scala	/^  def commit[T](p: => Parser[T]) = Parser{ in =>$/;"	m
committed	scala/collection/concurrent/TrieMap.scala	/^  @volatile var committed = false$/;"	v
commonUnit	scala/concurrent/duration/Duration.scala	/^    val commonUnit = if (otherUnit.convert(1, unit) == 0) unit else otherUnit$/;"	V
companion	scala/collection/GenTraversable.scala	/^  def companion: GenericCompanion[GenTraversable] = GenTraversable$/;"	m
companion	scala/collection/generic/GenericParTemplate.scala	/^  def companion: GenericCompanion[CC] with GenericParCompanion[CC]$/;"	m
companion	scala/collection/generic/GenericTraversableTemplate.scala	/^  def companion: GenericCompanion[CC]$/;"	m
compare	scala/Enumeration.scala	/^    def compare(x: Value, y: Value): Int = x compare y$/;"	m
compare	scala/collection/generic/Sorted.scala	/^  def compare(k0: K, k1: K): Int = ordering.compare(k0, k1)$/;"	m
compare	scala/collection/mutable/PriorityQueue.scala	/^      def compare(x: A, y: A) = ord.compare(y, x)$/;"	m
compare	scala/concurrent/duration/Deadline.scala	/^    def compare(a: Deadline, b: Deadline) = a compare b$/;"	m
compare	scala/concurrent/duration/Deadline.scala	/^  def compare(other: Deadline) = time compare other.time$/;"	m
compare	scala/concurrent/duration/Duration.scala	/^    def compare(a: Duration, b: Duration) = a compare b$/;"	m
compare	scala/concurrent/duration/Duration.scala	/^    def compare(a: FiniteDuration, b: FiniteDuration) = a compare b$/;"	m
compare	scala/concurrent/duration/Duration.scala	/^    def compare(other: Duration) = if (other eq this) 0 else -1$/;"	m
compare	scala/concurrent/duration/Duration.scala	/^    def compare(other: Duration) = if (other eq this) 0 else 1$/;"	m
compare	scala/concurrent/duration/Duration.scala	/^    def compare(other: Duration) = other match {$/;"	m
compare	scala/concurrent/duration/Duration.scala	/^  def compare(other: Duration) = other match {$/;"	m
compare	scala/math/BigDecimal.scala	/^  def compare (that: BigDecimal): Int = this.bigDecimal compareTo that.bigDecimal$/;"	m
compare	scala/math/BigInt.scala	/^  def compare (that: BigInt): Int = this.bigInteger.compareTo(that.bigInteger)$/;"	m
compare	scala/math/Ordered.scala	/^  def compare(that: A): Int$/;"	m
compare	scala/math/Ordering.scala	/^        def compare(x: CC[T], y: CC[T]): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2), y: (T1, T2)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3), y: (T1, T2, T3)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4), y: (T1, T2, T3, T4)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5), y: Tuple5[T1, T2, T3, T4, T5]): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6), y: (T1, T2, T3, T4, T5, T6)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6, T7), y: (T1, T2, T3, T4, T5, T6, T7)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6, T7, T8), y: (T1, T2, T3, T4, T5, T6, T7, T8)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: (T1, T2, T3, T4, T5, T6, T7, T8, T9), y: (T1, T2, T3, T4, T5, T6, T7, T8, T9)): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^      def compare(x: Iterable[T], y: Iterable[T]): Int = {$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: A, y: A) = cmp.compare(x, y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: A, y: A): Int = x compareTo y$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: BigDecimal, y: BigDecimal) = x.compare(y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: BigInt, y: BigInt) = x.compare(y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Boolean, y: Boolean) = (x, y) match {$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Byte, y: Byte) = x.toInt - y.toInt$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Char, y: Char) = x.toInt - y.toInt$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Double, y: Double) = java.lang.Double.compare(x, y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Float, y: Float) = java.lang.Float.compare(x, y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Int, y: Int) =$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Long, y: Long) =$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Option[T], y: Option[T]) = (x, y) match {$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Short, y: Short) = x.toInt - y.toInt$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: String, y: String) = x.compareTo(y)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: T, y: T) = if (cmp(x, y)) -1 else if (cmp(y, x)) 1 else 0$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: T, y: T) = outer.compare(y, x)$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: U, y: U) = outer.compare(f(x), f(y))$/;"	m
compare	scala/math/Ordering.scala	/^    def compare(x: Unit, y: Unit) = 0$/;"	m
compare	scala/math/Ordering.scala	/^  def compare(x: T, y: T): Int$/;"	m
compare	scala/runtime/ScalaNumberProxy.scala	/^  def compare(y: T) = ord.compare(self, y)$/;"	m
compare1	scala/math/Ordering.scala	/^        val compare1 = ord1.compare(x._1, y._1)$/;"	V
compare2	scala/math/Ordering.scala	/^        val compare2 = ord2.compare(x._2, y._2)$/;"	V
compare3	scala/math/Ordering.scala	/^        val compare3 = ord3.compare(x._3, y._3)$/;"	V
compare4	scala/math/Ordering.scala	/^        val compare4 = ord4.compare(x._4, y._4)$/;"	V
compare5	scala/math/Ordering.scala	/^        val compare5 = ord5.compare(x._5, y._5)$/;"	V
compare6	scala/math/Ordering.scala	/^        val compare6 = ord6.compare(x._6, y._6)$/;"	V
compare7	scala/math/Ordering.scala	/^        val compare7 = ord7.compare(x._7, y._7)$/;"	V
compare8	scala/math/Ordering.scala	/^        val compare8 = ord8.compare(x._8, y._8)$/;"	V
compare9	scala/math/Ordering.scala	/^        val compare9 = ord9.compare(x._9, y._9)$/;"	V
compareBlithely	scala/xml/Equality.scala	/^  def compareBlithely(x1: AnyRef, x2: AnyRef): Boolean = {$/;"	m
compareBlithely	scala/xml/Equality.scala	/^  def compareBlithely(x1: AnyRef, x2: Node): Boolean = x1 match {$/;"	m
compareBlithely	scala/xml/Equality.scala	/^  def compareBlithely(x1: AnyRef, x2: String): Boolean = x1 match {$/;"	m
compareTo	scala/math/Ordered.scala	/^  def compareTo(that: A): Int = compare(that)$/;"	m
complement	scala/collection/generic/BitOperations.scala	/^    def complement(i: Int)                      = (-1) ^ i$/;"	m
complement	scala/collection/generic/BitOperations.scala	/^    def complement(i: Long)                        = (-1L) ^ i$/;"	m
complement	scala/runtime/BoxesRunTime.java	/^    public static Object complement(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
complete	scala/concurrent/DelayedLazyVal.scala	/^  private[this] lazy val complete = f()$/;"	V
complete	scala/concurrent/Promise.scala	/^  def complete(result: Try[T]): this.type =$/;"	m
completeFirst	scala/concurrent/Future.scala	/^    val completeFirst: Try[T] => Unit = p tryComplete _$/;"	V
completed	scala/collection/parallel/Tasks.scala	/^    @volatile var completed = false$/;"	v
completedAs	scala/concurrent/impl/Promise.scala	/^      val completedAs = value.get$/;"	V
complexity	scala/runtime/MethodCache.scala	/^  private[this] val complexity: Int$/;"	V
compose	scala/collection/parallel/ParIterableLike.scala	/^    def compose[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3) = new SeqComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]](tsk, t2) {$/;"	m
compose	scala/collection/parallel/ParIterableLike.scala	/^    def compose[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3): SeqComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]]$/;"	m
compute	scala/collection/parallel/Tasks.scala	/^    def compute() = if (body.shouldSplitFurther) {$/;"	m
computeHash	scala/collection/concurrent/TrieMap.scala	/^  def computeHash(k: K) = hashingobj.hash(k)$/;"	m
concat	scala/Array.scala	/^  def concat[T: ClassTag](xss: Array[T]*): Array[T] = {$/;"	m
concat	scala/collection/generic/GenTraversableFactory.scala	/^  def concat[A](xss: Traversable[A]*): CC[A] = {$/;"	m
concat	scala/collection/mutable/UnrolledBuffer.scala	/^  def concat(that: UnrolledBuffer[T]) = {$/;"	m
concurrent	scala/collection/concurrent/TrieMap.scala	/^package concurrent$/;"	p
cond	scala/PartialFunction.scala	/^  def cond[T](x: T)(pf: PartialFunction[T, Boolean]): Boolean = pf.applyOrElse(x, constFalse)$/;"	m
cond	scala/util/Either.scala	/^  def cond[A, B](test: Boolean, right: => B, left: => A): Either[A, B] =$/;"	m
condOpt	scala/PartialFunction.scala	/^  def condOpt[T,U](x: T)(pf: PartialFunction[T, U]): Option[U] = pf.lift(x)$/;"	m
conforms	scala/reflect/ClassTag.scala	/^      val conforms = runtimeClass.isAssignableFrom(effectiveClass)$/;"	V
connectToIn	scala/sys/process/BasicIO.scala	/^  def connectToIn(o: OutputStream): Unit = transferFully(Uncloseable protect stdin, o)$/;"	m
cons	scala/collection/immutable/Stream.scala	/^  object cons {$/;"	o
cons	scala/util/parsing/combinator/Parsers.scala	/^   * rep1sep(p: Parser[T], q) corresponds to chainr1(p, q ^^ cons, cons, Nil) (where val cons = (x: T, y: List[T]) => x :: y)$/;"	V
cons	scala/xml/factory/NodeFactory.scala	/^    def cons(old: List[A]) = construct(hash, old, pre, name, attrSeq, scope, children)$/;"	m
const	scala/Function.scala	/^  def const[T, U](x: T)(y: U): T = x$/;"	m
constFalse	scala/PartialFunction.scala	/^  private[this] val constFalse: Any => Boolean = { _ => false}$/;"	V
constant	scala/Responder.scala	/^  def constant[A](x: A) = new Responder[A] {$/;"	m
constant	scala/sys/BooleanProp.scala	/^  def constant(key: String, isOn: Boolean): BooleanProp = new ConstantImpl(key, isOn)$/;"	m
contains	scala/Enumeration.scala	/^    def contains(v: Value) = nnIds contains (v.id - bottomId)$/;"	m
contains	scala/collection/BitSetLike.scala	/^  def contains(elem: Int): Boolean =$/;"	m
contains	scala/collection/GenMapLike.scala	/^  def contains(key: A): Boolean$/;"	m
contains	scala/collection/GenSetLike.scala	/^  def contains(elem: A): Boolean$/;"	m
contains	scala/collection/Iterator.scala	/^  def contains(elem: Any): Boolean = exists(_ == elem)$/;"	m
contains	scala/collection/LinearSeqOptimized.scala	/^  def contains(elem: Any): Boolean = {$/;"	m
contains	scala/collection/MapLike.scala	/^    def contains(key : A) = self.contains(key)$/;"	m
contains	scala/collection/MapLike.scala	/^  def contains(key: A): Boolean = get(key).isDefined$/;"	m
contains	scala/collection/SeqLike.scala	/^  def contains(elem: Any): Boolean = exists (_ == elem)$/;"	m
contains	scala/collection/SetLike.scala	/^  def contains(elem: A): Boolean$/;"	m
contains	scala/collection/convert/Wrappers.scala	/^    def contains(elem: A): Boolean = underlying.contains(elem)$/;"	m
contains	scala/collection/immutable/HashSet.scala	/^  def contains(e: A): Boolean = get0(e, computeHash(e), 0)$/;"	m
contains	scala/collection/immutable/ListSet.scala	/^  def contains(elem: A): Boolean = false$/;"	m
contains	scala/collection/immutable/RedBlackTree.scala	/^  def contains[A](tree: Tree[A, _], x: A)(implicit ordering: Ordering[A]): Boolean = lookup(tree, x) ne null$/;"	m
contains	scala/collection/immutable/Set.scala	/^    def contains(elem: A): Boolean =$/;"	m
contains	scala/collection/immutable/Set.scala	/^    def contains(elem: Any): Boolean = false$/;"	m
contains	scala/collection/immutable/TreeSet.scala	/^  def contains(elem: A): Boolean = RB.contains(tree, elem)$/;"	m
contains	scala/collection/mutable/AVLTree.scala	/^  def contains[B >: A](value: B, ordering: Ordering[B]): Boolean = false$/;"	m
contains	scala/collection/mutable/HashSet.scala	/^  def contains(elem: A): Boolean = containsEntry(elem)$/;"	m
contains	scala/collection/mutable/ImmutableSetAdaptor.scala	/^  def contains(elem: A): Boolean = set.contains(elem)$/;"	m
contains	scala/collection/mutable/LinkedHashSet.scala	/^  def contains(elem: A): Boolean = findEntry(elem) ne null$/;"	m
contains	scala/collection/parallel/ParMapLike.scala	/^    def contains(key : K) = self.contains(key)$/;"	m
contains	scala/collection/parallel/ParMapLike.scala	/^  def contains(key: K): Boolean = get(key).isDefined$/;"	m
contains	scala/collection/parallel/immutable/ParHashSet.scala	/^  def contains(e: T): Boolean = trie.contains(e)$/;"	m
contains	scala/collection/parallel/mutable/ParHashSet.scala	/^  def contains(elem: T) = containsEntry(elem)$/;"	m
containsSlice	scala/collection/SeqLike.scala	/^  def containsSlice[B](that: GenSeq[B]): Boolean = indexOfSlice(that) != -1$/;"	m
containsText	scala/xml/dtd/ContentModel.scala	/^  def containsText(cm: ContentModel) = (cm == PCDATA) || isMixed(cm)$/;"	m
containsTyped	scala/collection/immutable/NumericRange.scala	/^  def containsTyped(x: T): Boolean =$/;"	m
content	scala/xml/parsing/MarkupParser.scala	/^  def content(pscope: NamespaceBinding): NodeSeq = {$/;"	m
content1	scala/xml/parsing/MarkupParser.scala	/^  def content1(pscope: NamespaceBinding, ts: NodeBuffer) {$/;"	m
contentModel	scala/xml/dtd/ElementValidator.scala	/^  protected var contentModel: ContentModel           = _$/;"	v
contentType	scala/xml/include/sax/XIncludeFilter.scala	/^      var contentType = uc.getContentType()$/;"	v
contents	scala/collection/parallel/mutable/ParHashSet.scala	/^    val contents = if (size >= ParHashSetCombiner.numblocks * sizeMapBucketSize) parPopulate else seqPopulate$/;"	V
contents	scala/sys/process/ProcessBuilder.scala	/^  * val contents = Process("ls").lines$/;"	V
contentspec	scala/xml/dtd/ContentModelParser.scala	/^  def contentspec: ContentModel = token match {$/;"	m
contextLocal	scala/concurrent/BlockContext.scala	/^  private val contextLocal = new ThreadLocal[BlockContext]()$/;"	V
continually	scala/collection/Iterator.scala	/^  def continually[A](elem: => A): Iterator[A] = new AbstractIterator[A] {$/;"	m
continually	scala/collection/immutable/Stream.scala	/^  def continually[A](elem: => A): Stream[A] = cons(elem, continually(elem))$/;"	m
continue	scala/util/parsing/combinator/Parsers.scala	/^    def continue(in: Input): ParseResult[List[T]] = {$/;"	m
control	scala/util/control/Exception.scala	/^package control$/;"	p
conv	scala/language.scala	/^   *     implicit val conv = (s: String) => s.length$/;"	V
conversion	scala/collection/generic/IsTraversableLike.scala	/^      val conversion = conv$/;"	V
conversion	scala/collection/generic/IsTraversableLike.scala	/^      val conversion = implicitly[String => GenTraversableLike[Char, String]]$/;"	V
conversion	scala/collection/generic/IsTraversableLike.scala	/^  val conversion: Repr => GenTraversableLike[A, Repr]$/;"	V
conversion	scala/collection/generic/IsTraversableLike.scala	/^ *     val conversion = implicitly[String => GenTraversableLike[Char, String]]$/;"	V
conversion	scala/collection/generic/IsTraversableOnce.scala	/^      val conversion = conv$/;"	V
conversion	scala/collection/generic/IsTraversableOnce.scala	/^      val conversion = implicitly[String => GenTraversableOnce[Char]]$/;"	V
conversion	scala/collection/generic/IsTraversableOnce.scala	/^  val conversion: Repr => GenTraversableOnce[A]$/;"	V
convert	scala/collection/convert/DecorateAsJava.scala	/^package convert$/;"	p
convert	scala/collection/convert/DecorateAsScala.scala	/^package convert$/;"	p
convert	scala/collection/convert/Decorators.scala	/^package convert$/;"	p
convert	scala/collection/convert/WrapAsJava.scala	/^package convert$/;"	p
convert	scala/collection/convert/WrapAsScala.scala	/^package convert$/;"	p
convert	scala/collection/convert/Wrappers.scala	/^package convert$/;"	p
convert	scala/concurrent/duration/DurationConversions.scala	/^    def convert(d: FiniteDuration) = Deadline.now + d$/;"	m
convert	scala/concurrent/duration/DurationConversions.scala	/^    def convert(d: FiniteDuration) = d$/;"	m
convert	scala/concurrent/duration/DurationConversions.scala	/^    def convert(d: FiniteDuration): R$/;"	m
convert.Wrappers._	scala/collection/mutable/WeakHashMap.scala	/^import convert.Wrappers._$/;"	i
convert._	scala/collection/JavaConversions.scala	/^import convert._$/;"	i
convert._	scala/collection/JavaConverters.scala	/^import convert._$/;"	i
copy	scala/Array.scala	/^  def copy(src: AnyRef, srcPos: Int, dest: AnyRef, destPos: Int, length: Int) {$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^      def copy(start: A, end: A, step: A): NumericRange[A] =$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^    def copy(start: T, end: T, step: T): Exclusive[T] =$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^    def copy(start: T, end: T, step: T): Inclusive[T] =$/;"	m
copy	scala/collection/immutable/NumericRange.scala	/^  def copy(start: T, end: T, step: T): NumericRange[T]$/;"	m
copy	scala/xml/Attribute.scala	/^  def copy(next: MetaData): Attribute$/;"	m
copy	scala/xml/MetaData.scala	/^  def copy(next: MetaData): MetaData$/;"	m
copy	scala/xml/Null.scala	/^  def copy(next: MetaData) = next$/;"	m
copy	scala/xml/PrefixedAttribute.scala	/^  def copy(next: MetaData) =$/;"	m
copy	scala/xml/UnprefixedAttribute.scala	/^  def copy(next: MetaData) = new UnprefixedAttribute(key, value, next)$/;"	m
copy2builder	scala/collection/parallel/RemainsIterator.scala	/^  def copy2builder[U >: T, Coll, Bld <: Builder[U, Coll]](b: Bld): Bld = {$/;"	m
copyToArray	scala/collection/GenTraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B]): Unit$/;"	m
copyToArray	scala/collection/GenTraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int): Unit$/;"	m
copyToArray	scala/collection/GenTraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit$/;"	m
copyToArray	scala/collection/IndexedSeqOptimized.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int) {$/;"	m
copyToArray	scala/collection/Iterator.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit = {$/;"	m
copyToArray	scala/collection/TraversableLike.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int) {$/;"	m
copyToArray	scala/collection/TraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B]): Unit =$/;"	m
copyToArray	scala/collection/TraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int): Unit =$/;"	m
copyToArray	scala/collection/TraversableOnce.scala	/^  def copyToArray[B >: A](xs: Array[B], start: Int, len: Int): Unit$/;"	m
copyToArray	scala/collection/parallel/ParIterableLike.scala	/^  def copyToArray[U >: T](xs: Array[U]) = copyToArray(xs, 0)$/;"	m
copyToArray	scala/collection/parallel/ParIterableLike.scala	/^  def copyToArray[U >: T](xs: Array[U], start: Int) = copyToArray(xs, start, xs.length - start)$/;"	m
copyToArray	scala/collection/parallel/ParIterableLike.scala	/^  def copyToArray[U >: T](xs: Array[U], start: Int, len: Int) = if (len > 0) {$/;"	m
copyToBuffer	scala/collection/TraversableOnce.scala	/^  def copyToBuffer[B >: A](dest: Buffer[B]): Unit = dest ++= seq$/;"	m
copyToGen	scala/collection/concurrent/TrieMap.scala	/^  def copyToGen(ngen: Gen, ct: TrieMap[K, V]) = {$/;"	m
copyall	scala/collection/parallel/ParIterableLike.scala	/^      val copyall = (copyxs parallel copyys) {$/;"	V
copyend	scala/collection/parallel/ParSeqLike.scala	/^      val copyend = new Copy[U, That](cfactory, pits(2))$/;"	V
copymiddle	scala/collection/parallel/ParSeqLike.scala	/^      val copymiddle = wrap {$/;"	V
copyright	scala/util/matching/Regex.scala	/^   *  val copyright: String = "Date of this document: 2011-07-15" match {$/;"	V
copyright	scala/util/matching/Regex.scala	/^ *  val copyright: Option[String] = for {$/;"	V
copyright	scala/util/matching/Regex.scala	/^ *  val copyright: String = dateP1 findFirstIn "Date of this document: 2011-07-15" match {$/;"	V
copyrightString	scala/util/Properties.scala	/^  val copyrightString       = scalaPropOrElse("copyright.string", "Copyright 2002-2013, LAMP\/EPFL")$/;"	V
copystart	scala/collection/parallel/ParSeqLike.scala	/^      val copystart = new Copy[U, That](cfactory, pits(0))$/;"	V
copythat	scala/collection/parallel/ParIterableLike.scala	/^      val copythat = wrap {$/;"	V
copythis	scala/collection/parallel/ParIterableLike.scala	/^      val copythis = new Copy(cfactory, splitter)$/;"	V
copythis	scala/collection/parallel/ParIterableLike.scala	/^      val copythis = new Copy(combinerFactory(() => bf(repr).asCombiner), splitter)$/;"	V
copyxs	scala/collection/parallel/ParIterableLike.scala	/^      val copyxs = new Copy(combinerFactory, xs.splitter) mapResult { _.resultWithTaskSupport }$/;"	V
copyys	scala/collection/parallel/ParIterableLike.scala	/^      val copyys = new Copy(combinerFactory, ys.splitter) mapResult { _.resultWithTaskSupport }$/;"	V
coresize	scala/collection/parallel/Tasks.scala	/^        val coresize = executor.getCorePoolSize$/;"	V
corresponds	scala/collection/GenSeqLike.scala	/^  def corresponds[B](that: GenSeq[B])(p: (A, B) => Boolean): Boolean$/;"	m
corresponds	scala/collection/Iterator.scala	/^  def corresponds[B](that: GenTraversableOnce[B])(p: (A, B) => Boolean): Boolean = {$/;"	m
corresponds	scala/collection/SeqLike.scala	/^  def corresponds[B](that: GenSeq[B])(p: (A,B) => Boolean): Boolean = {$/;"	m
corresponds	scala/collection/parallel/ParSeqLike.scala	/^  def corresponds[S](that: GenSeq[S])(p: (T, S) => Boolean): Boolean = that ifParSeq { pthat =>$/;"	m
corresponds	scala/collection/parallel/RemainsIterator.scala	/^  def corresponds[S](corr: (T, S) => Boolean)(that: Iterator[S]): Boolean = {$/;"	m
cos	scala/math/package.scala	/^  def cos(x: Double): Double = java.lang.Math.cos(x)$/;"	m
cosh	scala/math/package.scala	/^  def cosh(x: Double): Double = java.lang.Math.cosh(x)$/;"	m
count	scala/collection/GenTraversableOnce.scala	/^  def count(p: A => Boolean): Int$/;"	m
count	scala/collection/Iterator.scala	/^    private var count = 0$/;"	v
count	scala/collection/LinearSeqOptimized.scala	/^    var count = from max 0$/;"	v
count	scala/collection/LinearSeqOptimized.scala	/^    var count = n$/;"	v
count	scala/collection/TraversableOnce.scala	/^  def count(p: A => Boolean): Int = {$/;"	m
count	scala/collection/immutable/List.scala	/^    var count = n$/;"	v
count	scala/collection/immutable/NumericRange.scala	/^    var count = 0$/;"	v
count	scala/collection/immutable/NumericRange.scala	/^  def count[T](start: T, end: T, step: T, isInclusive: Boolean)(implicit num: Integral[T]): Int = {$/;"	m
count	scala/collection/immutable/PagedSeq.scala	/^      val count = more(data, filled, PageSize - filled)$/;"	V
count	scala/collection/immutable/Range.scala	/^      var count = 0$/;"	v
count	scala/collection/immutable/Range.scala	/^  def count(start: Int, end: Int, step: Int): Int =$/;"	m
count	scala/collection/immutable/Range.scala	/^  def count(start: Int, end: Int, step: Int, isInclusive: Boolean): Int = {$/;"	m
count	scala/collection/immutable/RedBlack.scala	/^    def count : Int$/;"	m
count	scala/collection/immutable/RedBlack.scala	/^    def count = 0$/;"	m
count	scala/collection/immutable/RedBlack.scala	/^    def count = 1 + left.count + right.count$/;"	m
count	scala/collection/immutable/RedBlackTree.scala	/^    @(inline @getter) final val count: Int = 1 + RedBlackTree.count(left) + RedBlackTree.count(right)$/;"	V
count	scala/collection/immutable/RedBlackTree.scala	/^    val count = this.count(tree.left)$/;"	V
count	scala/collection/immutable/RedBlackTree.scala	/^  def count(tree: Tree[_, _]) = if (tree eq null) 0 else tree.count$/;"	m
count	scala/collection/parallel/ParIterableLike.scala	/^  def count(p: T => Boolean): Int = {$/;"	m
count	scala/collection/parallel/RemainsIterator.scala	/^    var count = from1$/;"	v
count	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      var count = 0$/;"	v
count	scala/collection/parallel/mutable/ParHashMap.scala	/^    def count(e: HashEntry[K, DefaultEntry[K, V]]): Int = if (e eq null) 0 else 1 + count(e.next)$/;"	m
count	scala/sys/process/package.scala	/^    *   var count = 0$/;"	v
count1	scala/collection/mutable/ListBuffer.scala	/^    val count1 = count min (len - n1)$/;"	V
countLogger	scala/sys/process/ProcessLogger.scala	/^  * val countLogger = ProcessLogger(line => normalLines += 1,$/;"	V
counted	scala/collection/immutable/NumericRange.scala	/^    var counted = 0$/;"	v
counted	scala/collection/immutable/Range.scala	/^    var counted = 0$/;"	v
cpa	scala/xml/parsing/ConstructingParser.scala	/^  *     val cpa = scala.xml.parsing.ConstructingParser.fromSource(src, false) \/\/ fromSource initializes automatically$/;"	V
cps	scala/util/continuations/package.scala	/^  type cps[A] = cpsParam[A,A]$/;"	T
cpsParam	scala/util/continuations/ControlContext.scala	/^class cpsParam[-B,+C] extends StaticAnnotation with TypeConstraint$/;"	c
create	scala/collection/immutable/package.scala	/^    def create(_start: Int, _end: Int, _step: Int, _inclusive: Boolean): Repr$/;"	m
create	scala/concurrent/duration/Duration.scala	/^  def create(length: Double, unit: TimeUnit): Duration     = apply(length, unit)$/;"	m
create	scala/concurrent/duration/Duration.scala	/^  def create(length: Long, unit: String): FiniteDuration   = apply(length, unit)$/;"	m
create	scala/concurrent/duration/Duration.scala	/^  def create(length: Long, unit: TimeUnit): FiniteDuration = apply(length, unit)$/;"	m
create	scala/concurrent/duration/Duration.scala	/^  def create(s: String): Duration                          = apply(s)$/;"	m
createArray	scala/compat/Platform.scala	/^  def createArray(elemClass: Class[_], length: Int): AnyRef =$/;"	m
createExecutorService	scala/concurrent/impl/ExecutionContextImpl.scala	/^  def createExecutorService: ExecutorService = {$/;"	m
createFromCopy	scala/collection/parallel/mutable/ParArray.scala	/^  def createFromCopy[T <: AnyRef : ClassTag](arr: Array[T]): ParArray[T] = {$/;"	m
createNewEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^      def createNewEntry[E](key: K, entry: E): Entry = entry.asInstanceOf[Entry]$/;"	m
createNode	scala/xml/parsing/FactoryAdapter.scala	/^  def createNode(pre: String, elemName: String, attribs: MetaData,$/;"	m
createNode	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def createNode(pre: String, label: String, attrs: MetaData, scope: NamespaceBinding, children: List[Node]): Elem =$/;"	m
createProcInstr	scala/xml/parsing/FactoryAdapter.scala	/^  def createProcInstr(target: String, data: String): Seq[ProcInstr]$/;"	m
createProcInstr	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def createProcInstr(target: String, data: String) = makeProcInstr(target, data)$/;"	m
createText	scala/xml/parsing/FactoryAdapter.scala	/^  def createText(text: String): Text \/\/ abstract$/;"	m
createText	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def createText(text: String) = Text(text)$/;"	m
cs	scala/collection/SeqLike.scala	/^      val cs = new Array[Int](m.size)$/;"	V
csize	scala/collection/concurrent/CNodeBase.java	/^    public volatile int csize = -1;$/;"	f	class:CNodeBase
ctr	scala/collection/concurrent/TrieMap.scala	/^    val ctr = ct.readRoot(true)$/;"	V
ctrie	scala/collection/parallel/mutable/ParTrieMap.scala	/^final class ParTrieMap[K, V] private[collection] (private val ctrie: TrieMap[K, V])$/;"	V
cts	scala/collection/parallel/Combiner.scala	/^    val cts = _combinerTaskSupport$/;"	V
ctx	scala/collection/parallel/ParSeqLike.scala	/^      val ctx = new DefaultSignalling with VolatileAbort$/;"	V
ctx	scala/collection/parallel/ParSeqLike.scala	/^    val ctx = new DefaultSignalling with AtomicIndexFlag$/;"	V
ctx	scala/collection/parallel/ParSeqLike.scala	/^    val ctx = new DefaultSignalling with VolatileAbort$/;"	V
ctxR	scala/util/continuations/ControlContext.scala	/^            val ctxR = f(x)$/;"	V
ctxR	scala/util/continuations/package.scala	/^    val ctxR = reify[A,A,C](ctx)$/;"	V
ctxR	scala/util/continuations/package.scala	/^    val ctxR = reify[Any,Unit,A](ctx)$/;"	V
cur	scala/StringContext.scala	/^    var cur = 0$/;"	v
cur	scala/collection/Iterator.scala	/^    private var cur : Iterator[B] = self$/;"	v
cur	scala/collection/Iterator.scala	/^    private var cur: Iterator[B] = empty$/;"	v
cur	scala/collection/immutable/ListMap.scala	/^      var cur: ListMap[A, B1] = this$/;"	v
cur	scala/collection/immutable/Stream.scala	/^      val cur    = these.v$/;"	V
cur	scala/collection/mutable/LinkedHashMap.scala	/^    private var cur = firstEntry$/;"	v
cur	scala/collection/mutable/LinkedHashMap.scala	/^    var cur = firstEntry$/;"	v
cur	scala/collection/mutable/LinkedHashSet.scala	/^    private var cur = firstEntry$/;"	v
cur	scala/collection/mutable/LinkedHashSet.scala	/^    var cur = firstEntry$/;"	v
cur	scala/concurrent/impl/Promise.scala	/^              val cur = raw.asInstanceOf[List[CallbackRunnable[T]]]$/;"	V
cur	scala/xml/PrettyPrinter.scala	/^    var cur = 0$/;"	v
cur	scala/xml/PrettyPrinter.scala	/^  protected var cur = 0$/;"	v
curInput	scala/xml/parsing/MarkupParser.scala	/^  protected var curInput: Source = input$/;"	v
curTag	scala/xml/parsing/FactoryAdapter.scala	/^  var curTag : String = null$/;"	v
curr	scala/collection/mutable/ObservableBuffer.scala	/^    var curr = n - 1$/;"	v
curr	scala/collection/mutable/UnrolledBuffer.scala	/^      var curr = this$/;"	v
curr	scala/collection/parallel/RemainsIterator.scala	/^      val curr = next$/;"	V
curr	scala/collection/parallel/RemainsIterator.scala	/^    protected var curr: IterableSplitter[U] = self$/;"	v
curr	scala/collection/parallel/RemainsIterator.scala	/^    var curr = startValue$/;"	v
curr	scala/collection/parallel/Tasks.scala	/^      var curr = this$/;"	v
curr	scala/collection/parallel/mutable/ParArray.scala	/^        val curr = a(j).asInstanceOf[T]$/;"	V
curr	scala/collection/parallel/mutable/ParArray.scala	/^        var curr = a(j).asInstanceOf[T]$/;"	v
curr	scala/collection/parallel/mutable/ParArray.scala	/^      var curr = startval$/;"	v
curr	scala/collection/parallel/mutable/ParHashTable.scala	/^      var curr = chainhead$/;"	v
curr	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var curr = startnode$/;"	v
currbucketsize	scala/collection/mutable/HashTable.scala	/^      var currbucketsize = 0$/;"	v
currbucketsz	scala/collection/mutable/FlatHashTable.scala	/^      var currbucketsz = 0$/;"	v
currbuff	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^        val currbuff = chain(buffind)$/;"	V
current	scala/collection/BitSetLike.scala	/^    private var current = 0$/;"	v
current	scala/collection/concurrent/TrieMap.scala	/^  private var current: KVNode[K, V] = null$/;"	v
current	scala/collection/immutable/List.scala	/^    var current: ::[B] = this$/;"	v
current	scala/collection/immutable/NumericRange.scala	/^    var current = start$/;"	v
current	scala/collection/immutable/PagedSeq.scala	/^    var current: String = ""$/;"	v
current	scala/collection/immutable/PagedSeq.scala	/^  private var current: Page[T] = first1$/;"	v
current	scala/collection/immutable/Range.scala	/^    var current = start$/;"	v
current	scala/collection/mutable/DoubleLinkedList.scala	/^      var current = emptyList()$/;"	v
current	scala/collection/mutable/ListBuffer.scala	/^      var current = new ::(elem, Nil)$/;"	v
current	scala/concurrent/BlockContext.scala	/^  def current: BlockContext = contextLocal.get match {$/;"	m
current	scala/runtime/WorksheetSupport.scala	/^      val current = System.nanoTime$/;"	V
current	scala/util/automata/Inclusion.scala	/^    var current = encode(q1, q2)$/;"	v
currentBase	scala/xml/include/sax/XIncludeFilter.scala	/^      var currentBase = parentBase$/;"	v
currentId	scala/util/parsing/ast/Binders.scala	/^    private var currentId = 0$/;"	v
currentIndex	scala/collection/mutable/ArrayStack.scala	/^    var currentIndex = index$/;"	v
currentOffset	scala/runtime/WorksheetSupport.scala	/^  private var currentOffset = 0$/;"	v
currentSink	scala/sys/process/ProcessImpl.scala	/^      val currentSink = new SyncVar[Option[OutputStream]]$/;"	V
currentSource	scala/sys/process/ProcessImpl.scala	/^      val currentSource = new SyncVar[Option[InputStream]]$/;"	V
currentTime	scala/compat/Platform.scala	/^  def currentTime: Long = System.currentTimeMillis()$/;"	m
currsz	scala/collection/concurrent/TrieMap.scala	/^    val currsz = READ_SIZE()$/;"	V
cursor	scala/collection/mutable/ListBuffer.scala	/^      var cursor = start$/;"	v
cursor	scala/collection/mutable/ListBuffer.scala	/^    var cursor = start$/;"	v
cursor	scala/collection/mutable/ListBuffer.scala	/^    var cursor: List[A] = null$/;"	v
cv	scala/util/Sorting.scala	/^          var cv = x(c) compare v$/;"	v
d	scala/collection/GenTraversableLike.scala	/^   *      scala> val d = LinkedList('a')$/;"	V
d	scala/collection/concurrent/TrieMap.scala	/^    var d = 0$/;"	v
d	scala/collection/immutable/Vector.scala	/^    val d = requiredDepth(xor)$/;"	V
d	scala/collection/mutable/FlatHashTable.scala	/^      val d = table.length >> 1$/;"	V
d	scala/collection/mutable/LinkedList.scala	/^  *    scala> val d = a ++ c$/;"	V
d	scala/collection/mutable/MapLike.scala	/^      case None => val d = op; this(key) = d; d$/;"	V
d	scala/concurrent/duration/Duration.scala	/^ * val d = Duration("1.2 µs")$/;"	V
d	scala/concurrent/duration/package.scala	/^  implicit final class DurationDouble(val d: Double) extends AnyVal with DurationConversions {$/;"	V
d	scala/math/BigDecimal.scala	/^    val d = toDouble$/;"	V
d	scala/util/Sorting.scala	/^        var d = c$/;"	v
d	scala/util/parsing/combinator/lexical/StdLexical.scala	/^    val d = new Array[String](delimiters.size)$/;"	V
d2	scala/concurrent/duration/Duration.scala	/^ * val d2 = d * 2.5$/;"	V
d3	scala/concurrent/duration/Duration.scala	/^ * val d3 = d2 + 1.millisecond$/;"	V
d_per_ns	scala/concurrent/duration/Duration.scala	/^  private[this] final val   d_per_ns =   h_per_ns * 24$/;"	V
daemonizeThreads	scala/sys/process/ProcessIO.scala	/^  val daemonizeThreads: Boolean$/;"	V
daemonized	scala/sys/process/ProcessBuilderImpl.scala	/^    def daemonized(): ProcessBuilder = new DaemonBuilder(this)$/;"	m
daemonized	scala/sys/process/ProcessIO.scala	/^  def daemonized(): ProcessIO = new ProcessIO(writeInput, processOutput, processError, true)$/;"	m
dashR	scala/xml/include/sax/Main.scala	/^    def dashR = args.size >= 2 && args(0) == "-r"$/;"	m
data	scala/collection/immutable/PagedSeq.scala	/^  final val data = new Array[T](PageSize)$/;"	V
data	scala/collection/mutable/AVLTree.scala	/^private case class Node[A](val data: A, val left: AVLTree[A], val right: AVLTree[A]) extends AVLTree[A] {$/;"	V
data	scala/io/BytePickle.scala	/^  def data[a](tag: a => Int, ps: List[()=>SPU[a]]): SPU[a] =$/;"	m
data	scala/util/hashing/MurmurHash3.scala	/^      val data = (str.charAt(i) << 16) + str.charAt(i + 1)$/;"	V
data	scala/xml/Atom.scala	/^class Atom[+A](val data: A) extends SpecialNode with Serializable {$/;"	V
data	scala/xml/include/sax/EncodingHeuristics.scala	/^      val data = new Array[Byte](bytesToRead - 4)$/;"	V
dateP1	scala/util/matching/Regex.scala	/^   *  val dateP1 = """(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)""".r.unanchored$/;"	V
dateP1	scala/util/matching/Regex.scala	/^ *  val dateP1 = """(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)""".r$/;"	V
dateP2	scala/util/matching/Regex.scala	/^ *  val dateP2 = new scala.util.matching.Regex("""(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)""", "year", "month", "day")$/;"	V
datePattern	scala/util/matching/Regex.scala	/^   *  val datePattern = """(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)""".r$/;"	V
datePattern	scala/util/matching/Regex.scala	/^   * val datePattern = new Regex("""(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)""", "year", "month", "day")$/;"	V
day	scala/concurrent/duration/DurationConversions.scala	/^  def day          = days$/;"	m
day	scala/concurrent/duration/DurationConversions.scala	/^  def day[C](c: C)(implicit ev: Classifier[C]): ev.R = days(c)$/;"	m
day	scala/util/matching/Regex.scala	/^   *  val day = datePattern replaceAllIn(text, _ match { case Groups(year, month, day) => month+"\/"+day })$/;"	V
days	scala/collection/immutable/List.scala	/^ *  val days = List("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")$/;"	V
days	scala/concurrent/duration/DurationConversions.scala	/^  def days         = durationIn(DAYS)$/;"	m
days	scala/concurrent/duration/DurationConversions.scala	/^  def days[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(days)$/;"	m
dbbuff	scala/collection/parallel/ParIterableLike.scala	/^  \/\/ private val dbbuff = ArrayBuffer[String]()$/;"	V
dbg	scala/sys/process/package.scala	/^      def dbg(msgs: Any*) = if (processDebug) {$/;"	m
deadline	scala/concurrent/duration/package.scala	/^   * val deadline = 3 seconds fromNow$/;"	V
debugBuffer	scala/collection/parallel/ParIterableLike.scala	/^  def debugBuffer: ArrayBuffer[String] = null$/;"	m
debugMessages	scala/collection/parallel/Tasks.scala	/^  private[parallel] val debugMessages = scala.collection.mutable.ArrayBuffer[String]()$/;"	V
decimalNumber	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def decimalNumber: Parser[String] =$/;"	m
decl	scala/xml/parsing/ValidatingMarkupHandler.scala	/^    val decl = lookupElemDecl(label);$/;"	V
declCurrent	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var declCurrent: ElemDecl = null$/;"	v
declStack	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var declStack: List[ElemDecl] = Nil$/;"	v
declaration	scala/xml/include/sax/EncodingHeuristics.scala	/^      val declaration = new String(data, 0, length, "ISO-8859-1")$/;"	V
decls	scala/xml/dtd/DTD.scala	/^  var decls: List[Decl]                 = Nil$/;"	v
decls	scala/xml/parsing/MarkupHandler.scala	/^  var decls: List[Decl] = Nil$/;"	v
decode	scala/reflect/NameTransformer.scala	/^  def decode(name0: String): String = {$/;"	m
decode	scala/xml/Xhtml.scala	/^    def decode(er: EntityRef) = XhtmlEntities.entMap.get(er.entityName) match {$/;"	m
decode1	scala/util/automata/Inclusion.scala	/^    def decode1(c: Int) = (c-1) % (dfa1.nstates)$/;"	m
decode2	scala/util/automata/Inclusion.scala	/^    def decode2(c: Int) = (c-1) \/ (dfa1.nstates) \/\/integer division$/;"	m
decoder	scala/io/Codec.scala	/^  def decoder =$/;"	m
decodingReplaceWith	scala/io/Codec.scala	/^  def decodingReplaceWith(newReplacement: String): this.type = { _decodingReplacement = newReplacement ; this }$/;"	m
decorateAll	scala/collection/convert/package.scala	/^  val decorateAll     = new DecorateAsJava with DecorateAsScala { }$/;"	V
decorateAsJava	scala/collection/convert/package.scala	/^  val decorateAsJava  = new DecorateAsJava { }$/;"	V
decorateAsScala	scala/collection/convert/package.scala	/^  val decorateAsScala = new DecorateAsScala { }$/;"	V
deep	scala/collection/mutable/ArrayLike.scala	/^  def deep: scala.collection.IndexedSeq[Any] = new scala.collection.AbstractSeq[Any] with scala.collection.IndexedSeq[Any] {$/;"	m
default	scala/collection/GenMapLike.scala	/^  def default(key: A): B$/;"	m
default	scala/collection/MapLike.scala	/^  def default(key: A): B =$/;"	m
default	scala/collection/parallel/ParMapLike.scala	/^  def default(key: K): V = throw new NoSuchElementException("key not found: " + key)$/;"	m
default	scala/io/Codec.scala	/^  def default                               = defaultCharsetCodec$/;"	m
default	scala/util/automata/DetWordAutom.scala	/^  val default: Array[Int]$/;"	V
default	scala/util/automata/NondetWordAutom.scala	/^  val default: Array[immutable.BitSet]$/;"	V
default	scala/util/automata/SubsetConstruction.scala	/^      val default = defaultR$/;"	V
default	scala/util/automata/WordBerrySethi.scala	/^          val default  = defaultArr$/;"	V
default	scala/xml/include/sax/EncodingHeuristics.scala	/^    val default       = utf8$/;"	V
defaultArr	scala/util/automata/WordBerrySethi.scala	/^        val defaultArr  = (0 until pos map (k => immutable.BitSet(defaultq(k): _*))).toArray$/;"	V
defaultCharsetCodec	scala/io/Codec.scala	/^  def defaultCharsetCodec                   = apply(Charset.defaultCharset)$/;"	m
defaultCharsetName	scala/compat/Platform.scala	/^  def defaultCharsetName: String = java.nio.charset.Charset.defaultCharset.name$/;"	m
defaultForkJoinPool	scala/collection/parallel/Tasks.scala	/^  val defaultForkJoinPool: ForkJoinPool = new ForkJoinPool() \/\/ scala.parallel.forkjoinpool$/;"	V
defaultFormatter	scala/util/parsing/json/Parser.scala	/^  val defaultFormatter : ValueFormatter = (x : Any) => x match {$/;"	V
defaultLoadFactor	scala/collection/mutable/FlatHashTable.scala	/^  def defaultLoadFactor: Int = 450$/;"	m
defaultMathContext	scala/math/BigDecimal.scala	/^  val defaultMathContext = MathContext.DECIMAL128$/;"	V
defaultMerger	scala/collection/immutable/HashMap.scala	/^  private[this] val defaultMerger : Merger[Any, Any] = liftMerger0((a,b) => a)$/;"	V
defaultNumberParser	scala/util/parsing/json/Parser.scala	/^  protected var defaultNumberParser : NumericParser = {_.toDouble}$/;"	v
defaultOrdering	scala/collection/immutable/NumericRange.scala	/^  private[collection] val defaultOrdering = Map[Numeric[_], Ordering[_]]($/;"	V
defaultR	scala/util/automata/SubsetConstruction.scala	/^    val defaultR = new Array[Int](nstatesR)$/;"	V
defaultReporter	scala/concurrent/ExecutionContext.scala	/^  def defaultReporter: Throwable => Unit = (t: Throwable) => t.printStackTrace()$/;"	m
defaultRunner	scala/concurrent/ops.scala	/^  val defaultRunner: FutureTaskRunner = TaskRunners.threadRunner$/;"	V
defaultTaskSupport	scala/collection/parallel/package.scala	/^  val defaultTaskSupport: TaskSupport = getTaskSupport$/;"	V
defaultThreadPool	scala/collection/parallel/Tasks.scala	/^  val defaultThreadPool = Executors.newCachedThreadPool()$/;"	V
defaultThreadPool	scala/collection/parallel/Tasks.scala	/^  val defaultThreadPool = new ThreadPoolExecutor($/;"	V
defaultq	scala/util/automata/WordBerrySethi.scala	/^  protected var defaultq: Array[List[Int]]                         = _ \/\/ default transitions$/;"	v
defdecl	scala/xml/parsing/MarkupParser.scala	/^      val defdecl: DefaultDecl = ch match {$/;"	V
deftrans	scala/util/automata/SubsetConstruction.scala	/^    var deftrans = mutable.Map(q0 -> sink, sink -> sink)  \/\/ initial transitions$/;"	v
del	scala/collection/immutable/RedBlack.scala	/^    def del(k: A): Tree[B] = {$/;"	m
del	scala/collection/immutable/RedBlack.scala	/^    def del(k: A): Tree[B]$/;"	m
del	scala/collection/immutable/RedBlack.scala	/^    def del(k: A): Tree[Nothing] = this$/;"	m
delLeft	scala/collection/immutable/RedBlack.scala	/^      def delLeft = left match {$/;"	m
delLeft	scala/collection/immutable/RedBlackTree.scala	/^    def delLeft = if (isBlackTree(tree.left)) balLeft(tree.key, tree.value, del(tree.left, k), tree.right) else RedTree(tree.key, tree.value, del(tree.left, k), tree.right)$/;"	m
delRight	scala/collection/immutable/RedBlack.scala	/^      def delRight = right match {$/;"	m
delRight	scala/collection/immutable/RedBlackTree.scala	/^    def delRight = if (isBlackTree(tree.right)) balRight(tree.key, tree.value, tree.left, del(tree.right, k)) else RedTree(tree.key, tree.value, tree.left, del(tree.right, k))$/;"	m
delayedInit	scala/DelayedInit.scala	/^  def delayedInit(x: => Unit): Unit$/;"	m
delete	scala/collection/immutable/RedBlack.scala	/^    def delete(k: A): Tree[B] = blacken(del(k))$/;"	m
delete	scala/collection/immutable/RedBlackTree.scala	/^  def delete[A, B](tree: Tree[A, B], k: A)(implicit ordering: Ordering[A]): Tree[A, B] = blacken(del(tree, k))$/;"	m
delete	scala/collection/mutable/StringBuilder.scala	/^  def delete(start: Int, end: Int): StringBuilder = {$/;"	m
deleteCharAt	scala/collection/mutable/StringBuilder.scala	/^  def deleteCharAt(index: Int): StringBuilder = {$/;"	m
deleted	scala/collection/mutable/OpenHashMap.scala	/^  private var deleted = 0$/;"	v
delimiters	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  val delimiters = new mutable.HashSet[String]$/;"	V
deliver	scala/collection/Iterator.scala	/^      def deliver(howMany: Int) = {$/;"	m
delivered	scala/collection/mutable/ListBuffer.scala	/^    var delivered = 0$/;"	v
delta	scala/collection/SeqLike.scala	/^        private[this] val delta = if (forward) 1 else -1$/;"	V
delta	scala/collection/SeqLike.scala	/^        val delta = if (forward) 1 else -1$/;"	V
delta	scala/util/automata/DetWordAutom.scala	/^  val delta: Array[mutable.Map[T, Int]]$/;"	V
delta	scala/util/automata/NondetWordAutom.scala	/^  val delta: Array[mutable.Map[T, immutable.BitSet]]$/;"	V
delta	scala/util/automata/SubsetConstruction.scala	/^      val delta = deltaR$/;"	V
delta	scala/util/automata/SubsetConstruction.scala	/^    val delta    = new mutable.HashMap[immutable.BitSet, mutable.HashMap[T, immutable.BitSet]]$/;"	V
delta	scala/util/automata/WordBerrySethi.scala	/^          val delta    = deltaArr$/;"	V
delta1	scala/util/automata/WordBerrySethi.scala	/^        val delta1      = immutable.Map(deltaq.zipWithIndex map (_.swap): _*)$/;"	V
deltaArr	scala/util/automata/WordBerrySethi.scala	/^        val deltaArr: Array[mutable.Map[_labelT, immutable.BitSet]] =$/;"	V
deltaR	scala/util/automata/SubsetConstruction.scala	/^    val deltaR = new Array[mutable.Map[T, Int]](nstatesR)$/;"	V
deltaString	scala/util/automata/NondetWordAutom.scala	/^    val deltaString = (0 until nstates) $/;"	V
deltaq	scala/util/automata/WordBerrySethi.scala	/^  protected var deltaq: Array[mutable.HashMap[_labelT, List[Int]]] = _ \/\/ delta$/;"	v
deprecated	scala/deprecated.scala	/^class deprecated(message: String = "", since: String = "") extends scala.annotation.StaticAnnotation$/;"	c
deprecated	scala/package.scala	/^  type deprecated = annotation.deprecated$/;"	T
deprecatedInheritance	scala/deprecatedInheritance.scala	/^class deprecatedInheritance(message: String = "", since: String = "") extends scala.annotation.StaticAnnotation$/;"	c
deprecatedName	scala/deprecatedName.scala	/^class deprecatedName(name: Symbol) extends scala.annotation.StaticAnnotation$/;"	c
deprecatedName	scala/package.scala	/^  type deprecatedName = annotation.deprecatedName$/;"	T
deprecatedOverriding	scala/deprecatedOverriding.scala	/^class deprecatedOverriding(message: String = "", since: String = "") extends scala.annotation.StaticAnnotation$/;"	c
depth	scala/collection/concurrent/TrieMap.scala	/^  private var depth = -1$/;"	v
depth	scala/collection/immutable/TrieIterator.scala	/^  private[this] var depth                                     = initDepth$/;"	v
depth	scala/collection/immutable/Vector.scala	/^    private[immutable] var depth: Int = _$/;"	v
depth	scala/collection/mutable/AVLTree.scala	/^  def depth: Int$/;"	m
depth	scala/collection/mutable/AVLTree.scala	/^  override val depth: Int = -1$/;"	V
depth	scala/collection/mutable/AVLTree.scala	/^  override val depth: Int = math.max(left.depth, right.depth) + 1$/;"	V
depth	scala/xml/include/sax/XIncludeFilter.scala	/^  private var depth = 0;$/;"	v
dequeue	scala/collection/immutable/Queue.scala	/^  def dequeue: (A, Queue[A]) = out match {$/;"	m
dequeue	scala/collection/mutable/PriorityQueue.scala	/^  def dequeue(): A =$/;"	m
dequeue	scala/collection/mutable/Queue.scala	/^  def dequeue(): A =$/;"	m
dequeueAll	scala/collection/mutable/PriorityQueue.scala	/^  def dequeueAll[A1 >: A, That](implicit bf: CanBuildFrom[_, A1, That]): That = {$/;"	m
dequeueAll	scala/collection/mutable/Queue.scala	/^  def dequeueAll(p: A => Boolean): Seq[A] = {$/;"	m
dequeueFirst	scala/collection/mutable/Queue.scala	/^  def dequeueFirst(p: A => Boolean): Option[A] =$/;"	m
desc	scala/collection/concurrent/TrieMap.scala	/^    val desc = RDCSS_Descriptor(ov, expectedmain, nv)$/;"	V
desc	scala/util/control/Exception.scala	/^    def desc = _desc$/;"	m
descendant	scala/xml/Node.scala	/^  def descendant: List[Node] =$/;"	m
descendant_or_self	scala/xml/Node.scala	/^  def descendant_or_self: List[Node] = this :: descendant$/;"	m
descr	scala/collection/immutable/NumericRange.scala	/^        val descr = List(start, word, end, "by", step) mkString " "$/;"	V
descr	scala/io/Source.scala	/^  var descr: String = ""$/;"	v
description	scala/beans/BeanDescription.scala	/^class BeanDescription(val description: String) extends scala.annotation.Annotation$/;"	V
desiredParallelism	scala/concurrent/impl/ExecutionContextImpl.scala	/^    val desiredParallelism = range($/;"	V
dest	scala/runtime/ScalaRunTime.scala	/^      val dest = new Array[Object](length)$/;"	V
destroy	scala/sys/process/Process.scala	/^  def destroy(): Unit$/;"	m
destroy	scala/sys/process/ProcessImpl.scala	/^    def destroy()   = destroyer()$/;"	m
determinize	scala/util/automata/SubsetConstruction.scala	/^  def determinize: DetWordAutom[T] = {$/;"	m
developmentVersion	scala/util/Properties.scala	/^  val developmentVersion = $/;"	V
dfa	scala/xml/dtd/ContentModel.scala	/^  lazy val dfa: DetWordAutom[ElemName] = {$/;"	V
dfa	scala/xml/dtd/ElementValidator.scala	/^  protected var dfa:          DetWordAutom[ElemName] = _$/;"	v
diff	scala/collection/GenSeqLike.scala	/^  def diff[B >: A](that: GenSeq[B]): Repr$/;"	m
diff	scala/collection/GenSetLike.scala	/^  def diff(that: GenSet[A]): Repr$/;"	m
diff	scala/collection/SeqLike.scala	/^    var diff = len - length$/;"	v
diff	scala/collection/SeqLike.scala	/^  def diff[B >: A](that: GenSeq[B]): Repr = {$/;"	m
diff	scala/collection/SetLike.scala	/^  def diff(that: GenSet[A]): This = this -- that$/;"	m
diff	scala/collection/immutable/NumericRange.scala	/^      val diff      = num.minus(end, start)$/;"	V
diff	scala/collection/parallel/ParIterableLike.scala	/^      val diff = len - pit.remaining$/;"	V
diff	scala/collection/parallel/ParSeqLike.scala	/^  def diff[U >: T](that: GenSeq[U]): Repr = sequentially {$/;"	m
diff	scala/collection/parallel/ParSetLike.scala	/^  def diff(that: GenSet[T]): Repr = sequentially {$/;"	m
digit	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def digit = elem("digit", _.isDigit)$/;"	m
dirContents	scala/sys/process/package.scala	/^    * val dirContents = "ls".!!$/;"	V
dirty	scala/collection/immutable/Vector.scala	/^  private[immutable] var dirty = false$/;"	v
dirty	scala/xml/persistent/CachedFileStorage.scala	/^  protected var dirty = false$/;"	v
disable	scala/sys/BooleanProp.scala	/^    def disable() = this.clear()$/;"	m
disable	scala/sys/BooleanProp.scala	/^  def disable(): Unit$/;"	m
discriminantbits	scala/collection/parallel/mutable/ParHashMap.scala	/^  private[mutable] val discriminantbits = 5$/;"	V
discriminantbits	scala/collection/parallel/mutable/ParHashSet.scala	/^  private[mutable] val discriminantbits = 5$/;"	V
discriminantmask	scala/collection/parallel/mutable/ParHashMap.scala	/^  private[mutable] val discriminantmask = ((1 << discriminantbits) - 1);$/;"	V
discriminantmask	scala/collection/parallel/mutable/ParHashSet.scala	/^  private[mutable] val discriminantmask = ((1 << discriminantbits) - 1);$/;"	V
dispatch	scala/sys/process/Process.scala	/^    * val dispatch = new URL("http:\/\/databinder.net\/dispatch\/About")$/;"	V
dispatchOrAddCallback	scala/concurrent/impl/Promise.scala	/^      def dispatchOrAddCallback(): Unit =$/;"	m
display0	scala/collection/immutable/Vector.scala	/^    private[immutable] var display0: Array[AnyRef] = _$/;"	v
display1	scala/collection/immutable/Vector.scala	/^    private[immutable] var display1: Array[AnyRef] = _$/;"	v
display2	scala/collection/immutable/Vector.scala	/^    private[immutable] var display2: Array[AnyRef] = _$/;"	v
display3	scala/collection/immutable/Vector.scala	/^    private[immutable] var display3: Array[AnyRef] = _$/;"	v
display4	scala/collection/immutable/Vector.scala	/^    private[immutable] var display4: Array[AnyRef] = _$/;"	v
display5	scala/collection/immutable/Vector.scala	/^    private[immutable] var display5: Array[AnyRef] = _$/;"	v
distinct	scala/collection/GenSeqLike.scala	/^  def distinct: Repr$/;"	m
distinct	scala/collection/SeqLike.scala	/^  def distinct: Repr = {$/;"	m
distinct	scala/collection/parallel/ParSeqLike.scala	/^  def distinct: Repr = sequentially {$/;"	m
div	scala/concurrent/duration/Duration.scala	/^  def div(divisor: Double)    = this \/ divisor$/;"	m
div	scala/concurrent/duration/Duration.scala	/^  def div(other: Duration)   = this \/ other$/;"	m
div	scala/concurrent/duration/Duration.scala	/^ def div(divisor: Long) = this \/ divisor$/;"	m
div	scala/math/Fractional.scala	/^  def div(x: T, y: T): T$/;"	m
div	scala/math/Numeric.scala	/^    def div(x: BigDecimal, y: BigDecimal): BigDecimal = x \/ y$/;"	m
div	scala/math/Numeric.scala	/^    def div(x: Double, y: Double): Double = x \/ y$/;"	m
div	scala/math/Numeric.scala	/^    def div(x: Float, y: Float): Float = x \/ y$/;"	m
divide	scala/runtime/BoxesRunTime.java	/^    public static Object divide(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
dividend	scala/util/Try.scala	/^ *     val dividend = Try(Console.readLine("Enter an Int that you'd like to divide:\\n").toInt)$/;"	V
divisor	scala/util/Try.scala	/^ *     val divisor = Try(Console.readLine("Enter an Int that you'd like to divide by:\\n").toInt)$/;"	V
divpt	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val divpt = (until + idx) \/ 2$/;"	V
divsz	scala/collection/parallel/mutable/ParHashTable.scala	/^        val divsz = (until - idx) \/ 2$/;"	V
divsz	scala/collection/parallel/package.scala	/^      val divsz = (until - index) \/ 2$/;"	V
doCollectNamespaces	scala/xml/Node.scala	/^  def doCollectNamespaces = true  \/\/ if (tag >= 0) DO collect namespaces$/;"	m
doIgnore	scala/xml/parsing/MarkupParser.scala	/^    def doIgnore() = {$/;"	m
doInclude	scala/xml/parsing/MarkupParser.scala	/^    def doInclude() = {$/;"	m
doSpaces	scala/xml/Xhtml.scala	/^    val doSpaces = children forall isAtomAndNotText \/\/ interleave spaces$/;"	V
doTransform	scala/xml/Node.scala	/^  def doTransform         = true  \/\/ if (tag < 0) DO NOT transform$/;"	m
doc	scala/xml/factory/LoggedNodeFactory.scala	/^  val doc = x.load(new java.net.URL("http:\/\/example.com\/file.xml"))$/;"	V
doc	scala/xml/parsing/ConstructingParser.scala	/^  *     val doc = cpa.document()$/;"	V
doc	scala/xml/parsing/MarkupParser.scala	/^  protected var doc: Document = null$/;"	v
docElem	scala/xml/Document.scala	/^  var docElem: Node = _$/;"	v
document	scala/xml/parsing/MarkupParser.scala	/^  def document(): Document = {$/;"	m
doesShareCombiners	scala/collection/parallel/ParIterableLike.scala	/^      def doesShareCombiners = false$/;"	m
doesShareCombiners	scala/collection/parallel/ParIterableLike.scala	/^      def doesShareCombiners = true$/;"	m
doesShareCombiners	scala/collection/parallel/package.scala	/^    def doesShareCombiners: Boolean$/;"	m
done	scala/collection/SeqLike.scala	/^        private[this] val done = if (forward) n1-n0 else -1$/;"	V
done	scala/sys/process/BasicIO.scala	/^    val    done: Int => Unit,$/;"	V
done	scala/util/Sorting.scala	/^        var done = false$/;"	v
done	scala/util/continuations/ControlContext.scala	/^          var done = false$/;"	v
done	scala/util/control/TailCalls.scala	/^  def done[A](result: A): TailRec[A] = new Done(result)$/;"	m
done	scala/xml/parsing/MarkupParser.scala	/^    def done = new NodeSeq { val theSeq = ts.toList }$/;"	m
doubleAsIntegral	scala/collection/immutable/Range.scala	/^    implicit val doubleAsIntegral = scala.math.Numeric.DoubleAsIfIntegral$/;"	V
doubleHash	scala/runtime/Statics.java	/^  public static int doubleHash(double dv) {$/;"	m	class:Statics
doubleLeftRotation	scala/collection/mutable/AVLTree.scala	/^  def doubleLeftRotation[B >: A]: Node[B] = sys.error("Should not happen.")$/;"	m
doubleRightRotation	scala/collection/mutable/AVLTree.scala	/^  def doubleRightRotation[B >: A]: Node[B] = sys.error("Should not happen.")$/;"	m
doubleValue	scala/math/BigDecimal.scala	/^  def doubleValue = this.bigDecimal.doubleValue$/;"	m
doubleValue	scala/math/BigInt.scala	/^  def doubleValue = this.bigInteger.doubleValue$/;"	m
doubleValue	scala/math/ScalaNumericConversions.scala	/^  def doubleValue(): Double$/;"	m
doubleValue	scala/runtime/ScalaNumberProxy.scala	/^  def doubleValue() = num.toDouble(self)$/;"	m
down	scala/collection/immutable/List.scala	/^    val down = step(start) < start$/;"	V
dr	scala/math/BigInt.scala	/^    val dr = this.bigInteger.divideAndRemainder(that.bigInteger)$/;"	V
drain	scala/collection/mutable/ArrayStack.scala	/^  def drain(f: T => Unit) = while (!isEmpty) f(pop)$/;"	m
driver	scala/collection/parallel/Tasks.scala	/^  val driver: Tasks = executionContext match {$/;"	V
drop	scala/collection/GenTraversableLike.scala	/^  def drop(n: Int): Repr$/;"	m
drop	scala/collection/IndexedSeqOptimized.scala	/^  def drop(n: Int): Repr = slice(n, length)$/;"	m
drop	scala/collection/Iterator.scala	/^  def drop(n: Int): Iterator[A] = slice(n, Int.MaxValue)$/;"	m
drop	scala/collection/LinearSeqOptimized.scala	/^  def drop(n: Int): Repr = {$/;"	m
drop	scala/collection/TraversableLike.scala	/^  def drop(n: Int): Repr =$/;"	m
drop	scala/collection/immutable/RedBlackTree.scala	/^  def drop[A: Ordering, B](tree: Tree[A, B], n: Int): Tree[A, B] = blacken(doDrop(tree, n))$/;"	m
drop	scala/collection/parallel/ParIterableLike.scala	/^  def drop(n: Int): Repr = {$/;"	m
drop	scala/util/parsing/input/Reader.scala	/^  def drop(n: Int): Reader[T] = {$/;"	m
drop2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def drop2combiner[U >: T, This](n: Int, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
dropRight	scala/collection/IndexedSeqOptimized.scala	/^  def dropRight(n: Int): Repr = slice(0, length - n)$/;"	m
dropRight	scala/collection/IterableLike.scala	/^  def dropRight(n: Int): Repr = {$/;"	m
dropRight	scala/collection/LinearSeqOptimized.scala	/^  def dropRight(n: Int): Repr = {$/;"	m
dropWhile	scala/collection/GenTraversableLike.scala	/^  def dropWhile(pred: A => Boolean): Repr$/;"	m
dropWhile	scala/collection/IndexedSeqOptimized.scala	/^  def dropWhile(p: A => Boolean): Repr = drop(prefixLength(p))$/;"	m
dropWhile	scala/collection/Iterator.scala	/^  def dropWhile(p: A => Boolean): Iterator[A] = {$/;"	m
dropWhile	scala/collection/TraversableLike.scala	/^  def dropWhile(p: A => Boolean): Repr = {$/;"	m
dropWhile	scala/collection/parallel/ParIterableLike.scala	/^  def dropWhile(pred: T => Boolean): Repr = {$/;"	m
dropped	scala/collection/Iterator.scala	/^      var dropped = false$/;"	v
dtd	scala/xml/Document.scala	/^  var dtd: scala.xml.dtd.DTD = _$/;"	v
dtd	scala/xml/dtd/ContentModel.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ContentModelParser.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/DTD.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/Decl.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/DocType.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ElementValidator.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ExternalID.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/Scanner.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/Tokens.scala	/^package dtd$/;"	p
dtd	scala/xml/dtd/ValidationException.scala	/^package dtd$/;"	p
dtd	scala/xml/parsing/MarkupParser.scala	/^  var dtd: DTD = null$/;"	v
dual	scala/collection/concurrent/TrieMap.scala	/^  def dual[K, V](x: SNode[K, V], xhc: Int, y: SNode[K, V], yhc: Int, lev: Int, gen: Gen): MainNode[K, V] = if (lev < 35) {$/;"	m
dump	scala/util/Marshal.scala	/^  def dump[A](o: A)(implicit t: ClassTag[A]): Array[Byte] = {$/;"	m
dup	scala/collection/mutable/ArrayStack.scala	/^  def dup() = push(top)$/;"	m
dup	scala/collection/parallel/ParMapLike.scala	/^      def dup = keysIterator(iter.dup)$/;"	m
dup	scala/collection/parallel/ParMapLike.scala	/^      def dup = valuesIterator(iter.dup)$/;"	m
dup	scala/collection/parallel/ParSeqLike.scala	/^    def dup = new Elements(i, end) {}$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup = self.dup.patchParSeq(from, patch, replaced)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[(T, S)] = self.dup.zipParSeq(that)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[(U, S)] = self.dup.zipAllParSeq(that, thiselem, thatelem)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[S] = self.dup map f$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[T] = self.dup.take(taken)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^    def dup: IterableSplitter[U] = self.dup.appendParIterable[U, PI](that)$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^  def dup: IterableSplitter[T]$/;"	m
dup	scala/collection/parallel/RemainsIterator.scala	/^  def dup: SeqSplitter[T]$/;"	m
dup	scala/collection/parallel/immutable/ParHashMap.scala	/^    def dup = triter match {$/;"	m
dup	scala/collection/parallel/immutable/ParHashSet.scala	/^    def dup = triter match {$/;"	m
dup	scala/collection/parallel/immutable/ParRange.scala	/^    def dup = new ParRangeIterator(rangeleft)$/;"	m
dup	scala/collection/parallel/immutable/ParVector.scala	/^    def dup: SeqSplitter[T] = (new ParVector(remainingVector)).splitter$/;"	m
dup	scala/collection/parallel/immutable/package.scala	/^      def dup = new ParIterator(i, until, elem)$/;"	m
dup	scala/collection/parallel/mutable/ParArray.scala	/^    def dup = new ParArrayIterator(i, until, arr)$/;"	m
dup	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def dup = newIterator(idx, until, totalsize)$/;"	m
dup	scala/collection/parallel/mutable/ParHashTable.scala	/^    def dup = newIterator(idx, until, totalsize, es)$/;"	m
dup	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def dup = {$/;"	m
dup	scala/collection/parallel/package.scala	/^    def dup = new BufferSplitter(buffer, index, until, signalDelegate)$/;"	m
dupIterator	scala/collection/immutable/TrieIterator.scala	/^  def dupIterator: TrieIterator[T] = new DupIterator(elems)$/;"	m
duplicate	scala/collection/Iterator.scala	/^  def duplicate: (Iterator[A], Iterator[A]) = {$/;"	m
duration	scala/concurrent/duration/Duration.scala	/^ * val duration = 100 millis$/;"	V
duration	scala/concurrent/duration/Duration.scala	/^ * val duration = Duration(100, "millis")$/;"	V
duration	scala/concurrent/duration/Duration.scala	/^ * val duration = Duration(100, MILLISECONDS)$/;"	V
duration	scala/concurrent/duration/package.scala	/^   * val duration = 2 seconds span$/;"	V
dynamicClass	scala/reflect/ClassTag.scala	/^      val dynamicClass = x.getClass$/;"	V
dynamics	scala/language.scala	/^  implicit lazy val dynamics: dynamics = languageFeature.dynamics$/;"	V
dynamics	scala/languageFeature.scala	/^  object dynamics extends dynamics$/;"	o
e	scala/collection/GenTraversableLike.scala	/^   *      scala> val e = c ++ d$/;"	V
e	scala/collection/Iterator.scala	/^          val e = self.next()$/;"	V
e	scala/collection/Iterator.scala	/^      val e = next()$/;"	V
e	scala/collection/convert/Wrappers.scala	/^        val e = ui.next()$/;"	V
e	scala/collection/convert/Wrappers.scala	/^      def next = { val e = ui.next; prev = Some(e); e }$/;"	V
e	scala/collection/convert/Wrappers.scala	/^      def next() = { val e = ui.next(); (e.getKey, e.getValue) }$/;"	V
e	scala/collection/immutable/HashSet.scala	/^        val e = in.readObject().asInstanceOf[A]$/;"	V
e	scala/collection/immutable/PagedSeq.scala	/^    val e = if (_end == UndeterminedEnd) _end else start + _end$/;"	V
e	scala/collection/mutable/DefaultMapModel.scala	/^    val e = findEntry(key)$/;"	V
e	scala/collection/mutable/HashMap.scala	/^    val e = findEntry(key)$/;"	V
e	scala/collection/mutable/HashMap.scala	/^    val e = findOrAddEntry(key, value)$/;"	V
e	scala/collection/mutable/HashMap.scala	/^    val e = findOrAddEntry(kv._1, kv._2)$/;"	V
e	scala/collection/mutable/HashMap.scala	/^    val e = removeEntry(key)$/;"	V
e	scala/collection/mutable/HashTable.scala	/^        var e = tbl(tableidx)$/;"	v
e	scala/collection/mutable/HashTable.scala	/^      var e = oldTable(i)$/;"	v
e	scala/collection/mutable/HashTable.scala	/^    val e = findEntry0(key, h)$/;"	V
e	scala/collection/mutable/HashTable.scala	/^    var e = table(h).asInstanceOf[Entry]$/;"	v
e	scala/collection/mutable/LinkedHashMap.scala	/^    val e = findEntry(key)$/;"	V
e	scala/collection/mutable/LinkedHashMap.scala	/^    val e = findOrAddEntry(key, value)$/;"	V
e	scala/collection/mutable/LinkedHashMap.scala	/^    val e = new Entry(key, value.asInstanceOf[B])$/;"	V
e	scala/collection/mutable/LinkedHashMap.scala	/^    val e = removeEntry(key)$/;"	V
e	scala/collection/mutable/LinkedHashSet.scala	/^    val e = new Entry(key)$/;"	V
e	scala/collection/mutable/LinkedHashSet.scala	/^    val e = removeEntry(elem)$/;"	V
e	scala/collection/mutable/LinkedList.scala	/^  *    scala> val e = d.collect(addOne)$/;"	V
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = findEntry(key)$/;"	V
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = findOrAddEntry(key, value)$/;"	V
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = findOrAddEntry(kv._1, kv._2)$/;"	V
e	scala/collection/parallel/mutable/ParHashMap.scala	/^    val e = removeEntry(key)$/;"	V
e1	scala/collection/mutable/HashTable.scala	/^        val e1 = e.next$/;"	V
e1	scala/collection/mutable/HashTable.scala	/^        var e1 = e.next$/;"	v
earlier	scala/collection/mutable/LinkedEntry.scala	/^  var earlier: LinkedEntry[A, B] = null$/;"	v
earlier	scala/collection/mutable/LinkedHashSet.scala	/^    var earlier: Entry[A] = null$/;"	v
effectiveClass	scala/reflect/ClassTag.scala	/^      val effectiveClass = if (staticClass.isPrimitive) staticClass else dynamicClass$/;"	V
either	scala/util/control/Exception.scala	/^    def either[U >: T](body: => U): Either[Throwable, U] = toEither(Right(body))$/;"	m
either2mergeable	scala/util/Either.scala	/^  def either2mergeable[A](x: Either[A, A]): MergeableEither[A] = new MergeableEither(x)$/;"	m
el	scala/collection/immutable/TrieIterator.scala	/^      val el = subIter.next$/;"	V
el	scala/util/parsing/ast/Binders.scala	/^  class UnboundElement[N <: NameElement](private val el: N) extends NameElement {$/;"	V
el	scala/xml/factory/NodeFactory.scala	/^    val el = create(pre, name, attrSeq, scope, children)$/;"	V
el2	scala/runtime/Tuple2Zipped.scala	/^        val el2 = elems2.next$/;"	V
el2	scala/runtime/Tuple3Zipped.scala	/^        val el2 = elems2.next$/;"	V
el3	scala/runtime/Tuple3Zipped.scala	/^        val el3 = elems3.next$/;"	V
elapsed	scala/concurrent/SyncVar.scala	/^      val elapsed = waitMeasuringElapsed(rest)$/;"	V
elapsed	scala/concurrent/SyncVar.scala	/^    val elapsed = System.currentTimeMillis - start$/;"	V
ele	scala/xml/parsing/ConstructingParser.scala	/^  *     val ele = doc.docElem$/;"	V
elem	scala/collection/Iterator.scala	/^    var elem = z$/;"	v
elem	scala/collection/SeqLike.scala	/^    while (it.hasNext && { val elem = it.next; (i > end || !p(elem)) }) i -= 1$/;"	V
elem	scala/collection/immutable/ListMap.scala	/^        val elem = lst.head$/;"	V
elem	scala/collection/mutable/FlatHashTable.scala	/^      val elem = in.readObject().asInstanceOf[A]$/;"	V
elem	scala/collection/mutable/HashSet.scala	/^      val elem = table(i)$/;"	V
elem	scala/collection/mutable/LinkedListLike.scala	/^  var elem: A = _$/;"	v
elem	scala/collection/mutable/ListBuffer.scala	/^    var elem: A = in.readObject.asInstanceOf[A]$/;"	v
elem	scala/collection/mutable/UnrolledBuffer.scala	/^          val elem = chunkarr(i)$/;"	V
elem	scala/collection/parallel/ParIterableLike.scala	/^        val elem = pit.next$/;"	V
elem	scala/collection/parallel/mutable/ParArray.scala	/^        val elem = a(j).asInstanceOf[T]$/;"	V
elem	scala/collection/parallel/mutable/ParArray.scala	/^      val elem = arr(i)$/;"	V
elem	scala/collection/parallel/mutable/ParHashMap.scala	/^          val elem = chunkarr(i)$/;"	V
elem	scala/collection/parallel/mutable/ParHashSet.scala	/^          val elem = chunkarr(i)$/;"	V
elem	scala/collection/parallel/mutable/ParHashSet.scala	/^      \/\/   val elem = it.next$/;"	V
elem	scala/concurrent/Channel.scala	/^    var elem: A = _$/;"	v
elem	scala/runtime/BooleanRef.java	/^    public boolean elem;$/;"	f	class:BooleanRef
elem	scala/runtime/ByteRef.java	/^    public byte elem;$/;"	f	class:ByteRef
elem	scala/runtime/CharRef.java	/^    public char elem;$/;"	f	class:CharRef
elem	scala/runtime/DoubleRef.java	/^    public double elem;$/;"	f	class:DoubleRef
elem	scala/runtime/FloatRef.java	/^    public float elem;$/;"	f	class:FloatRef
elem	scala/runtime/IntRef.java	/^    public int elem;$/;"	f	class:IntRef
elem	scala/runtime/LongRef.java	/^    public long elem;$/;"	f	class:LongRef
elem	scala/runtime/ObjectRef.java	/^    public T elem;$/;"	f	class:ObjectRef
elem	scala/runtime/ShortRef.java	/^    public short elem;$/;"	f	class:ShortRef
elem	scala/runtime/VolatileBooleanRef.java	/^    volatile public boolean elem;$/;"	f	class:VolatileBooleanRef
elem	scala/runtime/VolatileByteRef.java	/^    volatile public byte elem;$/;"	f	class:VolatileByteRef
elem	scala/runtime/VolatileCharRef.java	/^    volatile public char elem;$/;"	f	class:VolatileCharRef
elem	scala/runtime/VolatileDoubleRef.java	/^    volatile public double elem;$/;"	f	class:VolatileDoubleRef
elem	scala/runtime/VolatileFloatRef.java	/^    volatile public float elem;$/;"	f	class:VolatileFloatRef
elem	scala/runtime/VolatileIntRef.java	/^    volatile public int elem;$/;"	f	class:VolatileIntRef
elem	scala/runtime/VolatileLongRef.java	/^    volatile public long elem;$/;"	f	class:VolatileLongRef
elem	scala/runtime/VolatileObjectRef.java	/^    volatile public T elem;$/;"	f	class:VolatileObjectRef
elem	scala/runtime/VolatileShortRef.java	/^    volatile public short elem;$/;"	f	class:VolatileShortRef
elem	scala/util/parsing/combinator/Parsers.scala	/^  def elem(e: Elem): Parser[Elem] = accept(e)$/;"	m
elem	scala/util/parsing/combinator/Parsers.scala	/^  def elem(kind: String, p: Elem => Boolean) = acceptIf(p)(inEl => kind+" expected")$/;"	m
elem	scala/xml/dtd/DTD.scala	/^  var elem: mutable.Map[String, ElemDecl]    = new mutable.HashMap[String, ElemDecl]()$/;"	v
elem	scala/xml/parsing/ConstructingHandler.scala	/^  def elem(pos: Int, pre: String, label: String, attrs: MetaData,$/;"	m
elem	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def elem(pos: Int, pre: String, label: String, attrs: MetaData,$/;"	m
elem	scala/xml/parsing/MarkupHandler.scala	/^  def elem(pos: Int, pre: String, label: String, attrs: MetaData, scope: NamespaceBinding, empty: Boolean, args: NodeSeq): NodeSeq$/;"	m
elemCount	scala/xml/parsing/MarkupParser.scala	/^    var elemCount = 0$/;"	v
elemDecl	scala/xml/parsing/MarkupHandler.scala	/^  def elemDecl(n: String, cmstr: String): Unit = ()$/;"	m
elemEnd	scala/xml/parsing/MarkupHandler.scala	/^  def elemEnd(pos: Int, pre: String, label: String): Unit = ()$/;"	m
elemManifest	scala/collection/mutable/WrappedArray.scala	/^  def elemManifest: ClassManifest[T] = ClassManifest.fromClass[T](arrayElementClass(elemTag).asInstanceOf[Class[T]])$/;"	m
elemStart	scala/xml/parsing/MarkupHandler.scala	/^  def elemStart(pos: Int, pre: String, label: String, attrs: MetaData, scope: NamespaceBinding): Unit = ()$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Boolean$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Byte$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Char$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Double$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Float$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Int$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Long$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Short$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    def elemTag = ClassTag.Unit$/;"	m
elemTag	scala/collection/mutable/WrappedArray.scala	/^    lazy val elemTag = ClassTag[T](arrayElementClass(array.getClass))$/;"	V
elemTag	scala/collection/mutable/WrappedArray.scala	/^  def elemTag: ClassTag[T]$/;"	m
element	scala/xml/parsing/MarkupParser.scala	/^  def element(pscope: NamespaceBinding): NodeSeq = {$/;"	m
element1	scala/xml/parsing/MarkupParser.scala	/^  def element1(pscope: NamespaceBinding): NodeSeq = {$/;"	m
elementToString	scala/util/parsing/ast/Binders.scala	/^    def elementToString: String = element.toString$/;"	m
elements	scala/collection/convert/Wrappers.scala	/^    def elements: ju.Enumeration[B] = asJavaEnumeration(underlying.valuesIterator)$/;"	m
elemleft	scala/collection/parallel/immutable/ParRange.scala	/^      val elemleft = rleft.length$/;"	V
elems	scala/collection/IndexedSeqOptimized.scala	/^    val elems = math.max(hi - lo, 0)$/;"	V
elems	scala/collection/IterableLike.scala	/^    val elems = until - lo$/;"	V
elems	scala/collection/TraversableOnce.scala	/^    var elems: List[A] = Nil$/;"	v
elems	scala/collection/concurrent/TrieMap.scala	/^    val elems = collectLocalElems$/;"	V
elems	scala/collection/generic/SliceInterval.scala	/^    val elems = scala.math.min(_until - lo, width)$/;"	V
elems	scala/collection/immutable/BitSet.scala	/^  class BitSet1(val elems: Long) extends BitSet {$/;"	V
elems	scala/collection/immutable/BitSet.scala	/^  class BitSetN(val elems: Array[Long]) extends BitSet {$/;"	V
elems	scala/collection/immutable/HashMap.scala	/^        val elems = new Array[HashMap[A,B]](2)$/;"	V
elems	scala/collection/immutable/HashMap.scala	/^      val elems = new Array[HashMap[A,B]](1)$/;"	V
elems	scala/collection/immutable/HashMap.scala	/^      val elems = new Array[HashMap[A,B]](2)$/;"	V
elems	scala/collection/immutable/HashMap.scala	/^    private[collection] val elems: Array[HashMap[A, B @uV]],$/;"	V
elems	scala/collection/immutable/HashSet.scala	/^      val elems = new Array[HashSet[A]](1)$/;"	V
elems	scala/collection/immutable/HashSet.scala	/^      val elems = new Array[HashSet[A]](2)$/;"	V
elems	scala/collection/immutable/ListSet.scala	/^    protected val elems = (new mutable.ListBuffer[Elem] ++= initial).reverse$/;"	V
elems	scala/collection/immutable/Stack.scala	/^class Stack[+A] protected (protected val elems: List[A])$/;"	V
elems	scala/collection/immutable/Vector.scala	/^      val elems = new Array[AnyRef](32)$/;"	V
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Boolean] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Byte] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Char] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Double] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Float] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Int] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Long] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Short] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[T] = _$/;"	v
elems	scala/collection/mutable/ArrayBuilder.scala	/^    private var elems: Array[Unit] = _$/;"	v
elems	scala/collection/mutable/BitSet.scala	/^class BitSet(protected var elems: Array[Long]) extends AbstractSet[Int]$/;"	v
elems	scala/collection/mutable/GrowingBuilder.scala	/^  protected var elems: To = empty$/;"	v
elems	scala/collection/mutable/LinkedListLike.scala	/^    var elems = self$/;"	v
elems	scala/collection/mutable/ListBuffer.scala	/^    var elems = seq.toList.reverse$/;"	v
elems	scala/collection/mutable/ListMap.scala	/^  private var elems: List[(A, B)] = List()$/;"	v
elems	scala/collection/mutable/MapBuilder.scala	/^  protected var elems: Coll = empty$/;"	v
elems	scala/collection/mutable/SetBuilder.scala	/^  protected var elems: Coll = empty$/;"	v
elems	scala/collection/mutable/Stack.scala	/^class Stack[A] private (var elems: List[A])$/;"	v
elems	scala/collection/mutable/WrappedArrayBuilder.scala	/^  private var elems: WrappedArray[A] = _$/;"	v
elems	scala/collection/parallel/mutable/ParHashMap.scala	/^    val elems = for (i <- 0 until table.length) yield checkEntry(i)$/;"	V
elems	scala/util/hashing/MurmurHash3.scala	/^    var elems = xs$/;"	v
elems	scala/util/parsing/combinator/Parsers.scala	/^      val elems = new ListBuffer[T]$/;"	V
elems	scala/util/parsing/combinator/Parsers.scala	/^    val elems = new ListBuffer[T]$/;"	V
elems0	scala/collection/immutable/BitSet.scala	/^  class BitSet2(val elems0: Long, elems1: Long) extends BitSet {$/;"	V
elems1	scala/collection/mutable/BitSet.scala	/^      val elems1 = new Array[Long](newlen)$/;"	V
elems1	scala/collection/mutable/BitSet.scala	/^    val elems1 = new Array[Long](elems.length)$/;"	V
elems2	scala/runtime/Tuple2Zipped.scala	/^    val elems2 = colls._2.iterator$/;"	V
elems2	scala/runtime/Tuple3Zipped.scala	/^    val elems2 = colls._2.iterator$/;"	V
elems3	scala/runtime/Tuple3Zipped.scala	/^    val elems3 = colls._3.iterator$/;"	V
elemsNew	scala/collection/immutable/HashMap.scala	/^            val elemsNew = new Array[HashMap[A,B]](elems.length - 1)$/;"	V
elemsNew	scala/collection/immutable/HashMap.scala	/^          val elemsNew = new Array[HashMap[A,B1]](elems.length)$/;"	V
elemsNew	scala/collection/immutable/HashMap.scala	/^          val elemsNew = new Array[HashMap[A,B]](elems.length)$/;"	V
elemsNew	scala/collection/immutable/HashMap.scala	/^        val elemsNew = new Array[HashMap[A,B1]](elems.length + 1)$/;"	V
elemsNew	scala/collection/immutable/HashSet.scala	/^            val elemsNew = new Array[HashSet[A]](elems.length - 1)$/;"	V
elemsNew	scala/collection/immutable/HashSet.scala	/^          val elemsNew = new Array[HashSet[A]](elems.length)$/;"	V
elemsNew	scala/collection/immutable/HashSet.scala	/^        val elemsNew = new Array[HashSet[A]](elems.length + 1)$/;"	V
elidable	scala/annotation/elidable.scala	/^object elidable {$/;"	o
elms	scala/collection/SetLike.scala	/^    private val elms = self.toIndexedSeq$/;"	V
els	scala/collection/mutable/ArrayStack.scala	/^    val els: Array[AnyRef] = elems.reverseMap(_.asInstanceOf[AnyRef])(breakOut)$/;"	V
empty	scala/Array.scala	/^  def empty[T: ClassTag]: Array[T] = new Array[T](0)$/;"	m
empty	scala/Enumeration.scala	/^    val empty = new ValueSet(immutable.BitSet.empty)$/;"	V
empty	scala/Option.scala	/^  def empty[A] : Option[A] = None$/;"	m
empty	scala/PartialFunction.scala	/^  def empty[A, B] : PartialFunction[A, B] = empty_pf$/;"	m
empty	scala/collection/BitSet.scala	/^  val empty: BitSet = immutable.BitSet.empty$/;"	V
empty	scala/collection/BitSetLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/GenMap.scala	/^  def empty[A, B]: immutable.Map[A, B] = immutable.Map.empty$/;"	m
empty	scala/collection/Iterator.scala	/^  val empty: Iterator[Nothing] = new AbstractIterator[Nothing] {$/;"	V
empty	scala/collection/Map.scala	/^  def empty: Map[A, B] = Map.empty$/;"	m
empty	scala/collection/Map.scala	/^  def empty[A, B]: immutable.Map[A, B] = immutable.Map.empty$/;"	m
empty	scala/collection/MapLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/SetLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/SetProxyLike.scala	/^  def empty: This$/;"	m
empty	scala/collection/SortedMap.scala	/^  def empty[A, B](implicit ord: Ordering[A]): SortedMap[A, B] = immutable.SortedMap.empty[A, B](ord)$/;"	m
empty	scala/collection/SortedSet.scala	/^  def empty[A](implicit ord: Ordering[A]): immutable.SortedSet[A] = immutable.SortedSet.empty[A](ord)$/;"	m
empty	scala/collection/TraversableViewLike.scala	/^      var empty = true$/;"	v
empty	scala/collection/concurrent/TrieMap.scala	/^  def empty[K, V]: TrieMap[K, V] = new TrieMap[K, V]$/;"	m
empty	scala/collection/generic/BitSetFactory.scala	/^  def empty: Coll$/;"	m
empty	scala/collection/generic/GenMapFactory.scala	/^  def empty[A, B]: CC[A, B]$/;"	m
empty	scala/collection/generic/GenericClassTagCompanion.scala	/^  def empty[A: ClassTag]: CC[A] = newBuilder[A].result$/;"	m
empty	scala/collection/generic/GenericCompanion.scala	/^  def empty[A]: CC[A] = newBuilder[A].result$/;"	m
empty	scala/collection/generic/GenericOrderedCompanion.scala	/^  def empty[A: Ordering]: CC[A] = newBuilder[A].result$/;"	m
empty	scala/collection/generic/GenericSetTemplate.scala	/^  def empty: CC[A] = companion.empty[A]$/;"	m
empty	scala/collection/generic/MapFactory.scala	/^  def empty[A, B]: CC[A, B]$/;"	m
empty	scala/collection/generic/SortedMapFactory.scala	/^  def empty[A, B](implicit ord: Ordering[A]): CC[A, B]$/;"	m
empty	scala/collection/generic/SortedSetFactory.scala	/^  def empty[A](implicit ord: Ordering[A]): CC[A]$/;"	m
empty	scala/collection/immutable/BitSet.scala	/^  val empty: BitSet = new BitSet1(0L)$/;"	V
empty	scala/collection/immutable/HashMap.scala	/^  def empty[A, B]: HashMap[A, B] = EmptyHashMap.asInstanceOf[HashMap[A, B]]$/;"	m
empty	scala/collection/immutable/IntMap.scala	/^  def empty[T] : IntMap[T]  = IntMap.Nil;$/;"	m
empty	scala/collection/immutable/ListMap.scala	/^  def empty[A, B]: ListMap[A, B] = EmptyListMap.asInstanceOf[ListMap[A, B]]$/;"	m
empty	scala/collection/immutable/LongMap.scala	/^  def empty[T]: LongMap[T]  = LongMap.Nil$/;"	m
empty	scala/collection/immutable/Map.scala	/^  def empty[A, B]: Map[A, B] = EmptyMap.asInstanceOf[Map[A, B]]$/;"	m
empty	scala/collection/immutable/SortedMap.scala	/^  def empty[A, B](implicit ord: Ordering[A]): SortedMap[A, B] = TreeMap.empty[A, B]$/;"	m
empty	scala/collection/immutable/SortedSet.scala	/^  def empty[A](implicit ord: Ordering[A]): SortedSet[A] = TreeSet.empty[A]$/;"	m
empty	scala/collection/immutable/TreeMap.scala	/^  def empty[A, B](implicit ord: Ordering[A]) = new TreeMap[A, B]()(ord)$/;"	m
empty	scala/collection/immutable/TreeSet.scala	/^  def empty[A](implicit ordering: Ordering[A]) = new TreeSet[A]$/;"	m
empty	scala/collection/mutable/ArrayStack.scala	/^  def empty: ArrayStack[Nothing] = new ArrayStack()$/;"	m
empty	scala/collection/mutable/BitSet.scala	/^  def empty: BitSet = new BitSet$/;"	m
empty	scala/collection/mutable/HashMap.scala	/^  def empty[A, B]: HashMap[A, B] = new HashMap[A, B]$/;"	m
empty	scala/collection/mutable/LinkedHashMap.scala	/^  def empty[A, B] = new LinkedHashMap[A, B]$/;"	m
empty	scala/collection/mutable/ListMap.scala	/^  def empty[A, B]: ListMap[A, B] = new ListMap[A, B]$/;"	m
empty	scala/collection/mutable/Map.scala	/^  def empty[A, B]: Map[A, B] = new HashMap[A, B]$/;"	m
empty	scala/collection/mutable/OpenHashMap.scala	/^  def empty[K, V] = new OpenHashMap[K, V]$/;"	m
empty	scala/collection/mutable/SortedSet.scala	/^  def empty[A](implicit ord: Ordering[A]): SortedSet[A] = TreeSet.empty[A]$/;"	m
empty	scala/collection/mutable/Stack.scala	/^  val empty: Stack[Nothing] = new Stack(Nil)$/;"	V
empty	scala/collection/mutable/TreeSet.scala	/^  def empty[A](implicit ordering: Ordering[A]) = new TreeSet[A]()$/;"	m
empty	scala/collection/mutable/WeakHashMap.scala	/^  def empty[A, B]: WeakHashMap[A, B] = new WeakHashMap[A, B]$/;"	m
empty	scala/collection/mutable/WrappedArray.scala	/^  def empty[T <: AnyRef]: WrappedArray[T] = EmptyWrappedArray.asInstanceOf[WrappedArray[T]]$/;"	m
empty	scala/collection/parallel/ParMap.scala	/^  def empty: ParMap[K, V] = new mutable.ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/ParMap.scala	/^  def empty[K, V]: ParMap[K, V] = new mutable.ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/ParMapLike.scala	/^  def empty: Repr$/;"	m
empty	scala/collection/parallel/ParSetLike.scala	/^  def empty: Repr$/;"	m
empty	scala/collection/parallel/Splitter.scala	/^  def empty[T]: Splitter[T] = new Splitter[T] {$/;"	m
empty	scala/collection/parallel/immutable/ParHashMap.scala	/^  def empty[K, V]: ParHashMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/immutable/ParMap.scala	/^  def empty[K, V]: ParMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/mutable/ParHashMap.scala	/^  def empty[K, V]: ParHashMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/mutable/ParMap.scala	/^  def empty[K, V]: ParMap[K, V] = new ParHashMap[K, V]$/;"	m
empty	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def empty[K, V]: ParTrieMap[K, V] = new ParTrieMap[K, V]$/;"	m
empty	scala/text/Document.scala	/^  def empty = DocNil$/;"	m
emptyBooleanArray	scala/Array.scala	/^  val emptyBooleanArray = new Array[Boolean](0)$/;"	V
emptyByteArray	scala/Array.scala	/^  val emptyByteArray    = new Array[Byte](0)$/;"	V
emptyCharArray	scala/Array.scala	/^  val emptyCharArray    = new Array[Char](0)$/;"	V
emptyDoubleArray	scala/Array.scala	/^  val emptyDoubleArray  = new Array[Double](0)$/;"	V
emptyFloatArray	scala/Array.scala	/^  val emptyFloatArray   = new Array[Float](0)$/;"	V
emptyIntArray	scala/Array.scala	/^  val emptyIntArray     = new Array[Int](0)$/;"	V
emptyList	scala/collection/mutable/DoubleLinkedList.scala	/^      def emptyList() = new DoubleLinkedList[A]()$/;"	m
emptyLongArray	scala/Array.scala	/^  val emptyLongArray    = new Array[Long](0)$/;"	V
emptyObjectArray	scala/Array.scala	/^  val emptyObjectArray  = new Array[Object](0)$/;"	V
emptySet	scala/util/automata/BaseBerrySethi.scala	/^  final val emptySet: Set[Int] = Set()$/;"	V
emptyShortArray	scala/Array.scala	/^  val emptyShortArray   = new Array[Short](0)$/;"	V
emptyTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  val emptyTrie = HashMap.empty[K, V]$/;"	V
emptyTrie	scala/collection/parallel/immutable/ParHashSet.scala	/^  val emptyTrie = HashSet.empty[T]$/;"	V
empty_pf	scala/PartialFunction.scala	/^  private[this] val empty_pf: PartialFunction[Any, Nothing] = new PartialFunction[Any, Nothing] {$/;"	V
enable	scala/sys/BooleanProp.scala	/^    def enable()  = this setValue true$/;"	m
enable	scala/sys/BooleanProp.scala	/^  def enable(): Unit$/;"	m
encode	scala/reflect/NameTransformer.scala	/^  def encode(name: String): String = {$/;"	m
encode	scala/util/automata/Inclusion.scala	/^    def encode(q1: Int, q2: Int) = 1 + q1 + q2 * dfa1.nstates$/;"	m
encoder	scala/io/Codec.scala	/^  def encoder =$/;"	m
encoding	scala/xml/Document.scala	/^  var encoding: Option[String] = _$/;"	v
encoding	scala/xml/XML.scala	/^  val encoding  = "ISO-8859-1"$/;"	V
encoding	scala/xml/include/sax/XIncludeFilter.scala	/^          val encoding = atts getValue "encoding"$/;"	V
encoding	scala/xml/include/sax/XIncludeFilter.scala	/^    var encoding = encoding1$/;"	v
encodingFromHeader	scala/xml/include/sax/XIncludeFilter.scala	/^      var encodingFromHeader = uc.getContentEncoding()$/;"	v
encodingReplaceWith	scala/io/Codec.scala	/^  def encodingReplaceWith(newReplacement: Array[Byte]): this.type = { _encodingReplacement = newReplacement ; this }$/;"	m
encodingString	scala/util/Properties.scala	/^  def encodingString        = propOrElse("file.encoding", "UTF-8")$/;"	m
end	scala/collection/BitSetLike.scala	/^    private val end = nwords * WordLength$/;"	V
end	scala/collection/IndexedSeqOptimized.scala	/^    val end = length min len min (xs.length - start)$/;"	V
end	scala/collection/IterableLike.scala	/^    val end = (start + len) min xs.length$/;"	V
end	scala/collection/Iterator.scala	/^    val end = start + math.min(len, xs.length - start)$/;"	V
end	scala/collection/TraversableLike.scala	/^    val end = (start + len) min xs.length$/;"	V
end	scala/collection/immutable/StringLike.scala	/^    val end   = until min length$/;"	V
end	scala/collection/immutable/StringOps.scala	/^    val end = if (until > length) length else until$/;"	V
end	scala/collection/immutable/WrappedString.scala	/^    val end = if (until > length) length else until$/;"	V
end	scala/collection/immutable/package.scala	/^    def end: Int$/;"	m
end	scala/collection/parallel/ParSeqLike.scala	/^  protected abstract class Elements(start: Int, val end: Int) extends SeqSplitter[T] with BufferedIterator[T] {$/;"	V
end	scala/collection/parallel/mutable/ParArray.scala	/^        val end = (traversed + sz) min until$/;"	V
end	scala/util/matching/Regex.scala	/^    def end(i: Int) = ends(i)$/;"	m
end	scala/util/matching/Regex.scala	/^    def end(i: Int): Int = matcher.end(i)$/;"	m
end	scala/util/matching/Regex.scala	/^    def end(i: Int): Int$/;"	m
end	scala/util/matching/Regex.scala	/^    def end: Int = matcher.end$/;"	m
end	scala/util/matching/Regex.scala	/^    def end: Int$/;"	m
end	scala/util/matching/Regex.scala	/^    val end = matcher.end$/;"	V
endDTD	scala/xml/parsing/MarkupHandler.scala	/^  def endDTD(n: String): Unit = ()$/;"	m
endElement	scala/xml/include/sax/XIncluder.scala	/^  def endElement(namespaceURI: String, localName:String, qualifiedName: String) {$/;"	m
endEntity	scala/xml/include/sax/XIncluder.scala	/^  def endEntity(name: String) {$/;"	m
endIndex	scala/collection/immutable/Vector.scala	/^  private var endIndex: Int = _endIndex$/;"	v
endLo	scala/collection/immutable/Vector.scala	/^  private var endLo = math.min(endIndex - blockIndex, 32)$/;"	v
endPrefixMapping	scala/xml/include/sax/XIncluder.scala	/^  def endPrefixMapping(prefix: String) {}$/;"	m
endStr	scala/collection/immutable/NumericRange.scala	/^    val endStr = if (length > Range.MAX_PRINT) ", ... )" else ")"$/;"	V
endStr	scala/collection/immutable/Range.scala	/^    val endStr = if (numRangeElements > Range.MAX_PRINT) ", ... )" else ")"$/;"	V
endch	scala/xml/parsing/MarkupParser.scala	/^    val endch = ch$/;"	V
endpoints	scala/collection/GenTraversableViewLike.scala	/^    protected[this] val endpoints: SliceInterval$/;"	V
endpoints	scala/collection/IterableViewLike.scala	/^  protected override def newSliced(_endpoints: SliceInterval): Transformed[A] = new { val endpoints = _endpoints } with AbstractTransformed[A] with Sliced$/;"	V
endpoints	scala/collection/SeqViewLike.scala	/^  protected override def newSliced(_endpoints: SliceInterval): Transformed[A] = new { val endpoints = _endpoints } with AbstractTransformed[A] with Sliced$/;"	V
endpoints	scala/collection/TraversableViewLike.scala	/^  protected def newSliced(_endpoints: SliceInterval): Transformed[A] = new { val endpoints = _endpoints } with AbstractTransformed[A] with Sliced$/;"	V
endpoints	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newSliced(_endpoints: SliceInterval): Transformed[A] = new { val endpoints = _endpoints } with AbstractTransformed[A] with Sliced$/;"	V
endpoints	scala/collection/mutable/IndexedSeqView.scala	/^  protected override def newSliced(_endpoints: SliceInterval): Transformed[A] = new { val endpoints = _endpoints } with AbstractTransformed[A] with Sliced$/;"	V
endpoints	scala/collection/parallel/ParIterableViewLike.scala	/^  protected def newSliced(_endpoints: SliceInterval): Transformed[T] = new { val endpoints = _endpoints } with Sliced$/;"	V
endpoints	scala/collection/parallel/ParSeqViewLike.scala	/^  protected override def newSliced(_endpoints: SliceInterval): Transformed[T] = new { val endpoints = _endpoints } with Sliced$/;"	V
endpos	scala/collection/parallel/mutable/ParArray.scala	/^      var endpos = ntil$/;"	v
ends	scala/util/matching/Regex.scala	/^    private lazy val ends: Array[Int] =$/;"	V
endsWith	scala/collection/GenSeqLike.scala	/^  def endsWith[B](that: GenSeq[B]): Boolean$/;"	m
endsWith	scala/collection/IndexedSeqOptimized.scala	/^  def endsWith[B](that: GenSeq[B]): Boolean = that match {$/;"	m
endsWith	scala/collection/SeqLike.scala	/^  def endsWith[B](that: GenSeq[B]): Boolean = {$/;"	m
endsWith	scala/collection/parallel/ParSeqLike.scala	/^  def endsWith[S](that: GenSeq[S]): Boolean = that ifParSeq { pthat =>$/;"	m
enqueue	scala/collection/immutable/Queue.scala	/^  def enqueue[B >: A](elem: B) = new Queue(elem :: in, out)$/;"	m
enqueue	scala/collection/immutable/Queue.scala	/^  def enqueue[B >: A](iter: Iterable[B]) =$/;"	m
enqueue	scala/collection/mutable/PriorityQueue.scala	/^  def enqueue(elems: A*): Unit = { this ++= elems }$/;"	m
enqueue	scala/collection/mutable/Queue.scala	/^  def enqueue(elems: A*): Unit = this ++= elems$/;"	m
enqueue	scala/ref/Reference.scala	/^  def enqueue(): Boolean$/;"	m
enqueue	scala/ref/ReferenceWrapper.scala	/^  def enqueue = underlying.enqueue$/;"	m
ensureAccessible	scala/runtime/ScalaRunTime.scala	/^  def ensureAccessible(m: JMethod): JMethod = {$/;"	m
ensureCapacity	scala/collection/mutable/StringBuilder.scala	/^  def ensureCapacity(newCapacity: Int) { underlying ensureCapacity newCapacity }$/;"	m
ensureNewLine	scala/runtime/WorksheetSupport.scala	/^    def ensureNewLine() = if (col > 0) writeOne('\\n')$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: A => Boolean): A = { assert(cond(__resultOfEnsuring)); __resultOfEnsuring }$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: A => Boolean, msg: => Any): A = { assert(cond(__resultOfEnsuring), msg); __resultOfEnsuring }$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: Boolean): A = { assert(cond); __resultOfEnsuring }$/;"	m
ensuring	scala/Predef.scala	/^    def ensuring(cond: Boolean, msg: => Any): A = { assert(cond, msg); __resultOfEnsuring }$/;"	m
ent	scala/xml/dtd/DTD.scala	/^  var ent:  mutable.Map[String, EntityDecl]  = new mutable.HashMap[String, EntityDecl]()$/;"	v
ent	scala/xml/parsing/MarkupHandler.scala	/^  var ent: mutable.Map[String, EntityDecl] = new mutable.HashMap[String, EntityDecl]()$/;"	v
ent	scala/xml/parsing/MarkupParser.scala	/^              val ent = xName$/;"	V
ent	scala/xml/parsing/MarkupParser.scala	/^      val ent = xName$/;"	V
entList	scala/xml/parsing/XhtmlEntities.scala	/^  val entList = List(("quot",34), ("amp",38), ("lt",60), ("gt",62), ("nbsp",160), ("iexcl",161), ("cent",162), ("pound",163), ("curren",164), ("yen",165),$/;"	V
entMap	scala/xml/parsing/XhtmlEntities.scala	/^  val entMap: Map[String, Char] = Map.empty[String, Char] ++ entList.map { case (name, value) => (name, value.toChar)}$/;"	V
entdef	scala/xml/parsing/MarkupParser.scala	/^    var entdef: EntityDef = null$/;"	v
entities	scala/xml/include/sax/XIncluder.scala	/^  private val entities = new mutable.Stack[String]()$/;"	V
entities	scala/xml/parsing/XhtmlEntities.scala	/^  val entities = entList.$/;"	V
entityDecl	scala/xml/parsing/MarkupParser.scala	/^  def entityDecl() = {$/;"	m
entityRef	scala/xml/parsing/ConstructingHandler.scala	/^  def entityRef(pos: Int, n: String)  = EntityRef(n)$/;"	m
entityRef	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def entityRef(pos: Int, n: String) = NodeSeq.Empty$/;"	m
entityRef	scala/xml/parsing/MarkupHandler.scala	/^  def entityRef(pos: Int, n: String): NodeSeq$/;"	m
entityRef	scala/xml/pull/XMLEventReader.scala	/^    def entityRef(pos: Int, n: String)                    = setEvent(EvEntityRef(n))$/;"	m
entry	scala/collection/mutable/FlatHashTable.scala	/^      val entry = oldtable(i)$/;"	V
entry	scala/collection/mutable/FlatHashTable.scala	/^    val entry = findEntryImpl(elem)$/;"	V
entry	scala/collection/mutable/FlatHashTable.scala	/^    var entry = table(h)$/;"	v
entry	scala/collection/mutable/OpenHashMap.scala	/^    val entry = table(index)$/;"	V
entry	scala/collection/mutable/OpenHashMap.scala	/^    var entry = table(index)$/;"	v
entry	scala/collection/parallel/mutable/ParHashSet.scala	/^      var entry = table(h)$/;"	v
entry2item	scala/collection/parallel/mutable/ParHashMap.scala	/^    def entry2item(entry: DefaultEntry[K, V]) = (entry.key, entry.value);$/;"	m
entry2item	scala/collection/parallel/mutable/ParHashTable.scala	/^    def entry2item(e: Entry): T$/;"	m
entryExists	scala/collection/mutable/MultiMap.scala	/^  def entryExists(key: A, p: B => Boolean): Boolean = get(key) match {$/;"	m
enum	scala/Enumeration.scala	/^      val enum = thisenum.readResolve().asInstanceOf[Enumeration]$/;"	V
env	scala/sys/package.scala	/^  def env: immutable.Map[String, String] = immutable.Map(System.getenv().asScala.toSeq: _*)$/;"	m
envOrElse	scala/util/Properties.scala	/^  def envOrElse(name: String, alt: String)      = Option(System getenv name) getOrElse alt$/;"	m
envOrNone	scala/util/Properties.scala	/^  def envOrNone(name: String)                   = Option(System getenv name)$/;"	m
environment	scala/collection/parallel/TaskSupport.scala	/^class ExecutionContextTaskSupport(val environment: ExecutionContext = scala.concurrent.ExecutionContext.global)$/;"	V
environment	scala/collection/parallel/TaskSupport.scala	/^class ForkJoinTaskSupport(val environment: ForkJoinPool = ForkJoinTasks.defaultForkJoinPool)$/;"	V
environment	scala/collection/parallel/TaskSupport.scala	/^class ThreadPoolTaskSupport(val environment: ThreadPoolExecutor = ThreadPoolTasks.defaultThreadPool)$/;"	V
environment	scala/collection/parallel/Tasks.scala	/^  val environment: AnyRef = FutureThreadPoolTasks.defaultThreadPool$/;"	V
environment	scala/collection/parallel/Tasks.scala	/^  val environment: AnyRef$/;"	V
environment	scala/collection/parallel/Tasks.scala	/^  val environment: ExecutionContext$/;"	V
environment	scala/collection/parallel/Tasks.scala	/^  val environment: ForkJoinPool$/;"	V
environment	scala/collection/parallel/Tasks.scala	/^  val environment: ThreadPoolExecutor$/;"	V
eof	scala/xml/parsing/MarkupParser.scala	/^  def eof: Boolean = { ch; reachedEof }$/;"	m
eof	scala/xml/parsing/MarkupParserCommon.scala	/^  def eof: Boolean$/;"	m
eolPos	scala/util/parsing/input/StreamReader.scala	/^    val eolPos = nextEol$/;"	V
eqElements	scala/xml/factory/NodeFactory.scala	/^  def eqElements(ch1: Seq[Node], ch2: Seq[Node]): Boolean =$/;"	m
equality	scala/collection/concurrent/TrieMap.scala	/^  def equality = equalityobj$/;"	m
equalityobj	scala/collection/concurrent/TrieMap.scala	/^  private var equalityobj = ef$/;"	v
equals	scala/Equals.scala	/^  def equals(that: Any): Boolean$/;"	m
equals	scala/math/BigDecimal.scala	/^  def equals (that: BigDecimal): Boolean = compare(that) == 0$/;"	m
equals	scala/math/BigInt.scala	/^  def equals (that: BigInt): Boolean = compare(that) == 0$/;"	m
equals	scala/runtime/BoxedUnit.java	/^    public boolean equals(java.lang.Object other) {$/;"	m	class:BoxedUnit
equals	scala/runtime/BoxesRunTime.java	/^    public static boolean equals(Object x, Object y) {$/;"	m	class:BoxesRunTime
equals2	scala/runtime/BoxesRunTime.java	/^    public static boolean equals2(Object x, Object y) {$/;"	m	class:BoxesRunTime
equalsCharObject	scala/runtime/BoxesRunTime.java	/^    public static boolean equalsCharObject(java.lang.Character xc, Object y) {$/;"	m	class:BoxesRunTime
equalsNumChar	scala/runtime/BoxesRunTime.java	/^    private static boolean equalsNumChar(java.lang.Number xn, java.lang.Character yc) {$/;"	m	class:BoxesRunTime	file:
equalsNumNum	scala/runtime/BoxesRunTime.java	/^    public static boolean equalsNumNum(java.lang.Number xn, java.lang.Number yn) {$/;"	m	class:BoxesRunTime
equalsNumObject	scala/runtime/BoxesRunTime.java	/^    public static boolean equalsNumObject(java.lang.Number xn, Object y) {$/;"	m	class:BoxesRunTime
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = cmp(x, y)$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = cmp.compare(x, y) == 0$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = x == y$/;"	m
equiv	scala/math/Equiv.scala	/^    def equiv(x: T, y: T) = x eq y$/;"	m
equiv	scala/math/Equiv.scala	/^  def equiv(x: T, y: T): Boolean$/;"	m
equiv	scala/math/Ordering.scala	/^    def equiv(rhs: T) = Ordering.this.equiv(lhs, rhs)$/;"	m
equiv	scala/math/PartialOrdering.scala	/^  def equiv(x: T, y: T): Boolean = lteq(x,y) && lteq(y,x)$/;"	m
erasure	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def erasure: jClass[_] = runtimeClass$/;"	m
err	scala/Console.scala	/^  def err = errVar.value$/;"	m
err	scala/sys/process/ProcessLogger.scala	/^      def err(s: => String): Unit = ferr(s)$/;"	m
err	scala/sys/process/ProcessLogger.scala	/^  def err(s: => String): Unit = writer println s$/;"	m
err	scala/sys/process/ProcessLogger.scala	/^  def err(s: => String): Unit$/;"	m
err	scala/util/parsing/combinator/Parsers.scala	/^  def err(msg: String) = Parser{ in => Error(msg, in) }$/;"	m
errToDevNull	scala/sys/process/BasicIO.scala	/^    * val errToDevNull = BasicIO(false, println(_), None)$/;"	V
errVar	scala/Console.scala	/^  private val errVar = new DynamicVariable[PrintStream](java.lang.System.err)$/;"	V
error	scala/Predef.scala	/^  def error(message: String): Nothing = sys.error(message)$/;"	m
error	scala/sys/package.scala	/^  def error(message: String): Nothing = throw new RuntimeException(message)$/;"	m
errorLines	scala/sys/process/ProcessLogger.scala	/^  * var errorLines = 0$/;"	v
errorNoEnd	scala/xml/parsing/MarkupParser.scala	/^  def errorNoEnd(tag: String) = throw FatalError("expected closing tag of " + tag)$/;"	m
errorNoEnd	scala/xml/parsing/MarkupParserCommon.scala	/^  def errorNoEnd(tag: String): Nothing$/;"	m
errorThread	scala/sys/process/ProcessBuilderImpl.scala	/^      val errorThread =$/;"	V
errorToken	scala/util/parsing/combinator/lexical/Scanners.scala	/^  def errorToken(msg: String): Token$/;"	m
errorToken	scala/util/parsing/combinator/token/Tokens.scala	/^  def errorToken(msg: String): Token = new ErrorToken(msg)$/;"	m
es	scala/collection/mutable/HashTable.scala	/^    var es        = iterTable(idx)$/;"	v
es	scala/collection/parallel/mutable/ParHashTable.scala	/^      var es: Entry = null$/;"	v
es	scala/util/control/Exception.scala	/^    classes exists (_ isAssignableFrom x.getClass)$/;"	c
escMap	scala/xml/Utility.scala	/^    val escMap    = pairs map { case (s, c) => c-> ("&%s;" format s) }$/;"	V
etcFiles	scala/sys/process/ProcessBuilder.scala	/^  * val etcFiles = "find \/etc" lines_! ProcessLogger(line => ())$/;"	V
etg	scala/xml/PrettyPrinter.scala	/^          val etg = endTag(node)$/;"	V
evaledkvs	scala/collection/parallel/immutable/ParHashMap.scala	/^        val evaledkvs = hmc.kvs map { p => (p._1, p._2.result) }$/;"	V
evaledvalue	scala/collection/parallel/immutable/ParHashMap.scala	/^        val evaledvalue = hm1.value.result$/;"	V
evenNumbers	scala/PartialFunction.scala	/^ *  val evenNumbers = sample collect isEven$/;"	V
events	scala/collection/mutable/History.scala	/^  def events: Iterator[Evt] = log.iterator map (_._2)$/;"	m
everywhere	scala/util/parsing/ast/Binders.scala	/^    def everywhere(f: Mapper)(implicit c: T => Mappable[T]): T =$/;"	m
ex	scala/xml/include/sax/XIncludeFilter.scala	/^          val ex = new UnavailableResourceException("Unresolvable URL " + url + getLocation())$/;"	V
ex	scala/xml/include/sax/XIncludeFilter.scala	/^        val ex = new UnavailableResourceException("Unresolvable URL " + url$/;"	V
exc	scala/xml/dtd/ElementValidator.scala	/^  private var exc: List[ValidationException] = Nil$/;"	v
exception	scala/util/Try.scala	/^final case class Failure[+T](val exception: Throwable) extends Try[T] {$/;"	V
exclusive	scala/collection/immutable/NumericRange.scala	/^    def exclusive: Exclusive[T] = NumericRange(start, end, step)$/;"	m
exclusively	scala/sys/SystemProperties.scala	/^  def exclusively[T](body: => T) = this synchronized body$/;"	m
exec	scala/Responder.scala	/^  def exec[A](x: => Unit): Boolean = { x; true }$/;"	m
exec	scala/concurrent/TaskRunners.scala	/^    val exec = new ThreadPoolExecutor(numCores,$/;"	V
exec	scala/concurrent/impl/ExecutionContextImpl.scala	/^        val exec = new ThreadPoolExecutor($/;"	V
execute	scala/collection/parallel/Tasks.scala	/^  def execute[R, Tp](fjtask: Task[R, Tp]): () => R$/;"	m
execute	scala/collection/parallel/Tasks.scala	/^  def execute[R, Tp](task: Task[R, Tp]): () => R = driver execute task$/;"	m
execute	scala/collection/parallel/Tasks.scala	/^  def execute[R, Tp](task: Task[R, Tp]): () => R = {$/;"	m
execute	scala/concurrent/ExecutionContext.scala	/^  def execute(runnable: Runnable): Unit$/;"	m
execute	scala/concurrent/JavaConversions.scala	/^      def execute[S](task: Task[S]) {$/;"	m
execute	scala/concurrent/TaskRunner.scala	/^  def execute[S](task: Task[S]): Unit$/;"	m
execute	scala/concurrent/ThreadPoolRunner.scala	/^  def execute[S](task: Task[S]) {$/;"	m
execute	scala/concurrent/ThreadRunner.scala	/^  def execute[S](task: Task[S]) {$/;"	m
execute	scala/concurrent/impl/ExecutionContextImpl.scala	/^  def execute(runnable: Runnable): Unit = executor match {$/;"	m
executeAndWaitResult	scala/collection/parallel/Tasks.scala	/^  def executeAndWaitResult[R, Tp](task: Task[R, Tp]): R = driver executeAndWaitResult task$/;"	m
executeAndWaitResult	scala/collection/parallel/Tasks.scala	/^  def executeAndWaitResult[R, Tp](task: Task[R, Tp]): R = {$/;"	m
executeAndWaitResult	scala/collection/parallel/Tasks.scala	/^  def executeAndWaitResult[R, Tp](task: Task[R, Tp]): R$/;"	m
executeWithValue	scala/concurrent/impl/Promise.scala	/^  def executeWithValue(v: Try[T]): Unit = {$/;"	m
executionContext	scala/collection/parallel/Tasks.scala	/^  def executionContext = environment$/;"	m
executionStart	scala/App.scala	/^  val executionStart: Long = currentTime$/;"	V
executionStart	scala/Application.scala	/^  val executionStart: Long = currentTime$/;"	V
executor	scala/collection/parallel/Tasks.scala	/^  def executor = environment.asInstanceOf[ThreadPoolExecutor]$/;"	m
executor	scala/concurrent/impl/ExecutionContextImpl.scala	/^  val executor: Executor = es match {$/;"	V
executor	scala/concurrent/impl/Promise.scala	/^private class CallbackRunnable[T](val executor: ExecutionContext, val onComplete: Try[T] => Any) extends Runnable with OnCompleteRunnable {$/;"	V
existentials	scala/language.scala	/^  implicit lazy val existentials: existentials = languageFeature.existentials$/;"	V
existentials	scala/languageFeature.scala	/^  object existentials extends existentials$/;"	o
exists	scala/collection/GenTraversableOnce.scala	/^  def exists(pred: A => Boolean): Boolean$/;"	m
exists	scala/collection/IndexedSeqOptimized.scala	/^  def exists(p: A => Boolean): Boolean = prefixLength(!p(_)) != length$/;"	m
exists	scala/collection/Iterator.scala	/^  def exists(p: A => Boolean): Boolean = {$/;"	m
exists	scala/collection/LinearSeqOptimized.scala	/^  def exists(p: A => Boolean): Boolean = {$/;"	m
exists	scala/collection/TraversableLike.scala	/^  def exists(p: A => Boolean): Boolean = {$/;"	m
exists	scala/collection/TraversableOnce.scala	/^  def exists(p: A => Boolean): Boolean$/;"	m
exists	scala/collection/parallel/ParIterableLike.scala	/^  def exists(pred: T => Boolean): Boolean = {$/;"	m
exists	scala/runtime/Tuple2Zipped.scala	/^  def exists(f: (El1, El2) => Boolean): Boolean = {$/;"	m
exists	scala/runtime/Tuple3Zipped.scala	/^  def exists(f: (El1, El2, El3) => Boolean): Boolean = {$/;"	m
exists	scala/util/Either.scala	/^    def exists(f: A => Boolean) = e match {$/;"	m
exists	scala/util/Either.scala	/^    def exists(f: B => Boolean) = e match {$/;"	m
exists2	scala/collection/immutable/List.scala	/^  def exists2[A,B](xs: List[A], ys: List[B])(f: (A, B) => Boolean): Boolean = {$/;"	m
exit	scala/Predef.scala	/^  def exit(): Nothing = sys.exit()$/;"	m
exit	scala/Predef.scala	/^  def exit(status: Int): Nothing = sys.exit(status)$/;"	m
exit	scala/sys/package.scala	/^  def exit(): Nothing = exit(0)$/;"	m
exit	scala/sys/package.scala	/^  def exit(status: Int): Nothing = {$/;"	m
exit	scala/xml/parsing/MarkupParser.scala	/^    var exit = eof$/;"	v
exit	scala/xml/parsing/MarkupParser.scala	/^    var exit = false$/;"	v
exit1	scala/sys/process/ProcessImpl.scala	/^          val exit1 = first.exitValue$/;"	V
exit2	scala/sys/process/ProcessImpl.scala	/^          val exit2 = second.exitValue$/;"	V
exitCode	scala/sys/process/ProcessImpl.scala	/^    private[this] val exitCode = Future(action)$/;"	V
exitValue	scala/sys/process/Process.scala	/^  def exitValue(): Int$/;"	m
exitValue	scala/sys/process/ProcessImpl.scala	/^    def exitValue() = getExitValue() getOrElse scala.sys.error("No exit code: process destroyed.")$/;"	m
exp	scala/math/package.scala	/^  def exp(x: Double): Double = java.lang.Math.exp(x)$/;"	m
expPart	scala/util/parsing/json/Lexer.scala	/^  def expPart = exponent ~ opt(sign) ~ rep1(digit) ^^ { case e ~ s ~ d =>$/;"	m
expected	scala/collection/parallel/mutable/ParHashMap.scala	/^    val expected = sizemap(i)$/;"	V
expensiveComputation	scala/annotation/elidable.scala	/^     def expensiveComputation(): Int = { Thread.sleep(1000) ; 172 }$/;"	m
experimental	scala/language.scala	/^  object experimental {$/;"	o
experimental	scala/languageFeature.scala	/^  object experimental {$/;"	o
expm1	scala/math/package.scala	/^  def expm1(x: Double): Double = java.lang.Math.expm1(x)$/;"	m
expmain	scala/collection/concurrent/TrieMap.scala	/^    val expmain = r.gcasRead(this)$/;"	V
exponent	scala/util/parsing/json/Lexer.scala	/^  def exponent = elem("exponent character", d => d == 'e' || d == 'E')$/;"	m
exported	scala/collection/mutable/ListBuffer.scala	/^  private var exported: Boolean = false$/;"	v
extID	scala/xml/parsing/MarkupParser.scala	/^        val extID = externalID()$/;"	V
extID	scala/xml/parsing/MarkupParser.scala	/^    val extID = if (ch == 'S') {$/;"	V
extID	scala/xml/parsing/MarkupParser.scala	/^    var extID: ExternalID = null$/;"	v
extIndex	scala/xml/parsing/MarkupParser.scala	/^  var extIndex = -1$/;"	v
extSubset	scala/xml/parsing/MarkupParser.scala	/^  def extSubset(): Unit = {$/;"	m
extend	scala/util/parsing/ast/Binders.scala	/^    def extend[a <: NameElement](v : a, x : Scope[a]) = new BinderEnv {$/;"	m
extendHash	scala/util/MurmurHash.scala	/^  def extendHash(hash: Int, value: Int, magicA: Int, magicB: Int) = {$/;"	m
externalID	scala/xml/dtd/DTD.scala	/^  var externalID: ExternalID            = null$/;"	v
externalID	scala/xml/parsing/MarkupParser.scala	/^  def externalID(): ExternalID = ch match {$/;"	m
externalSource	scala/xml/parsing/ExternalSources.scala	/^  def externalSource(systemId: String): Source = {$/;"	m
externalSource	scala/xml/parsing/MarkupParser.scala	/^  def externalSource(systemLiteral: String): Source$/;"	m
extract	scala/util/parsing/ast/Binders.scala	/^    def extract(subst: Map[NameElement, NameElement]): elementT = cloneElementWithSubst(subst)$/;"	m
extract	scala/util/parsing/ast/Binders.scala	/^    def extract: elementT = cloneElementNoBoundElements$/;"	m
extractFirst	scala/collection/mutable/Queue.scala	/^  def extractFirst(start: LinkedList[A], p: A => Boolean): Option[LinkedList[A]] = {$/;"	m
f	scala/PartialFunction.scala	/^ *  val f: PartialFunction[Int, Any] = { case _ => 1\/0 }$/;"	V
f	scala/StringContext.scala	/^  def f(args: Any*): String = ??? \/\/ macro$/;"	m
f	scala/collection/BitSetLike.scala	/^      var f = from.get$/;"	v
f	scala/collection/immutable/PagedSeq.scala	/^    var f = first1$/;"	v
f	scala/collection/parallel/ParIterableLike.scala	/^        val f = (from max untilp) - untilp$/;"	V
f	scala/concurrent/Future.scala	/^   *  val f = future { -5 }$/;"	V
f	scala/concurrent/Future.scala	/^   *  val f = future { 5 }$/;"	V
f	scala/concurrent/Future.scala	/^   *  val f = future { Int.MaxValue }$/;"	V
f	scala/concurrent/Future.scala	/^   *  val f = future { sys.error("failed") }$/;"	V
f	scala/concurrent/Future.scala	/^ *  val f = future { 5 }$/;"	V
f	scala/concurrent/Future.scala	/^ *  val f: Future[String] = future {$/;"	V
f	scala/concurrent/duration/package.scala	/^  implicit final class DoubleMult(val f: Double) extends AnyVal {$/;"	V
f	scala/math/BigDecimal.scala	/^    val f = toFloat$/;"	V
f	scala/xml/Utility.scala	/^      val f = it.next$/;"	V
f	scala/xml/factory/XMLLoader.scala	/^    val f = SAXParserFactory.newInstance()$/;"	V
factory	scala/xml/factory/Binder.scala	/^package factory$/;"	p
factory	scala/xml/factory/LoggedNodeFactory.scala	/^package factory$/;"	p
factory	scala/xml/factory/NodeFactory.scala	/^package factory$/;"	p
factory	scala/xml/factory/XMLLoader.scala	/^package factory$/;"	p
factory.NodeFactory	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^import factory.NodeFactory$/;"	i
factory.XMLLoader	scala/xml/XML.scala	/^import factory.XMLLoader$/;"	i
fail	scala/collection/generic/GenericTraversableTemplate.scala	/^    def fail = throw new IllegalArgumentException("transpose requires all collections have the same size")$/;"	m
fail	scala/xml/NodeSeq.scala	/^    def fail = throw new IllegalArgumentException(that)$/;"	m
fail	scala/xml/include/sax/Main.scala	/^    def fail(msg: String) = System.err.println(msg)$/;"	m
failAsValue	scala/util/control/Exception.scala	/^  def failAsValue[T](exceptions: Class[_]*)(value: => T): Catch[T] =$/;"	m
failed	scala/concurrent/Future.scala	/^  def failed: Future[Throwable] = {$/;"	m
failed	scala/concurrent/Future.scala	/^  def failed[T](exception: Throwable): Future[T] = Promise.failed(exception).future$/;"	m
failed	scala/concurrent/Promise.scala	/^  def failed[T](exception: Throwable): Promise[T] = new impl.Promise.KeptPromise[T](Failure(exception))$/;"	m
failed	scala/util/Try.scala	/^  def failed: Try[Throwable] = Failure(new UnsupportedOperationException("Success.failed"))$/;"	m
failed	scala/util/Try.scala	/^  def failed: Try[Throwable] = Success(exception)$/;"	m
failed	scala/util/Try.scala	/^  def failed: Try[Throwable]$/;"	m
failing	scala/util/control/Exception.scala	/^  def failing[T](exceptions: Class[_]*): Catch[Option[T]] =$/;"	m
failure	scala/concurrent/Promise.scala	/^  def failure(t: Throwable): this.type = complete(Failure(t))$/;"	m
failure	scala/util/parsing/combinator/Parsers.scala	/^  def failure(msg: String) = Parser{ in => Failure(msg, in) }$/;"	m
fallbackTo	scala/concurrent/Future.scala	/^  def fallbackTo[U >: T](that: Future[U]): Future[U] = {$/;"	m
fallback_pf	scala/PartialFunction.scala	/^  private[this] val fallback_pf: PartialFunction[Any, Any] = { case _ => fallback_pf }$/;"	V
fb	scala/concurrent/Future.scala	/^      val fb = fn(a.asInstanceOf[A])$/;"	V
fbcount	scala/collection/parallel/mutable/package.scala	/^        val fbcount = countElems(from, fbuntil)$/;"	V
fbindex	scala/collection/parallel/mutable/package.scala	/^      val fbindex = from \/ sizeMapBucketSize$/;"	V
fbuntil	scala/collection/parallel/mutable/package.scala	/^        val fbuntil = ((fbindex + 1) * sizeMapBucketSize) min tableLength$/;"	V
fes	scala/collection/parallel/mutable/ParHashTable.scala	/^        val fes = es$/;"	V
fib	scala/collection/immutable/Stream.scala	/^ *  lazy val fib: Stream[Int] = {$/;"	V
fibVec	scala/collection/immutable/Stream.scala	/^   * val fibVec: Stream[Vector[Int]] = Vector(0) #:: Vector(0, 1) #:: fibVec.zip(fibVec.tail).map(n => {$/;"	V
fibs	scala/collection/immutable/Stream.scala	/^ *    val fibs: Stream[BigInt] = BigInt(0) #:: BigInt(1) #:: fibs.zip($/;"	V
fibs	scala/collection/immutable/Stream.scala	/^ *    val fibs: Stream[BigInt] = BigInt(0) #:: BigInt(1) #:: fibs.zip(fibs.tail).map { n => n._1 + n._2 }$/;"	V
fidx	scala/collection/parallel/mutable/ParHashTable.scala	/^        val fidx = idx$/;"	V
field	scala/annotation/target/package.scala	/^  type field = scala.annotation.meta.field$/;"	T
fields	scala/Enumeration.scala	/^    val fields = getClass.getDeclaredFields$/;"	V
file1	scala/xml/persistent/CachedFileStorage.scala	/^abstract class CachedFileStorage(private val file1: File) extends Thread with Logged {$/;"	V
file2	scala/xml/persistent/CachedFileStorage.scala	/^  private val file2 = new File(file1.getParent, file1.getName+"$")$/;"	V
fileEncodingCodec	scala/io/Codec.scala	/^  def fileEncodingCodec                     = apply(scala.util.Properties.encodingString)$/;"	m
fileStr	scala/xml/parsing/ExternalSources.scala	/^    val fileStr: String = input.descr match {$/;"	V
fill	scala/Array.scala	/^  def fill[T: ClassTag](n1: Int, n2: Int)(elem: => T): Array[Array[T]] =$/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int)(elem: => T): Array[Array[Array[T]]] =$/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(elem: => T): Array[Array[Array[Array[T]]]] =$/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: => T): Array[Array[Array[Array[Array[T]]]]] =$/;"	m
fill	scala/Array.scala	/^  def fill[T: ClassTag](n: Int)(elem: => T): Array[T] = {$/;"	m
fill	scala/collection/Iterator.scala	/^  def fill[A](len: Int)(elem: => A): Iterator[A] = new AbstractIterator[A] {$/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int)(elem: => A): CC[CC[A]] =$/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int, n3: Int)(elem: => A): CC[CC[CC[A]]] =$/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int, n3: Int, n4: Int)(elem: => A): CC[CC[CC[CC[A]]]] =$/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(elem: => A): CC[CC[CC[CC[CC[A]]]]] =$/;"	m
fill	scala/collection/generic/GenTraversableFactory.scala	/^  def fill[A](n: Int)(elem: => A): CC[A] = {$/;"	m
filled	scala/collection/Iterator.scala	/^    private[this] var filled = false                          \/\/ whether the buffer is "hot"$/;"	v
filled	scala/collection/immutable/PagedSeq.scala	/^  var filled: Int = 0$/;"	v
filt	scala/xml/NodeSeq.scala	/^    def filt(cond: (Node) => Boolean) = this flatMap (_.descendant_or_self) filter cond$/;"	m
filter	scala/Responder.scala	/^  def filter(p: A => Boolean) = new Responder[A] {$/;"	m
filter	scala/collection/GenTraversableLike.scala	/^  def filter(pred: A => Boolean): Repr$/;"	m
filter	scala/collection/Iterator.scala	/^  def filter(p: A => Boolean): Iterator[A] = new AbstractIterator[A] {$/;"	m
filter	scala/collection/TraversableLike.scala	/^  def filter(p: A => Boolean): Repr = {$/;"	m
filter	scala/collection/TraversableOnce.scala	/^    def filter(p: A => Boolean): TraversableOnce[A] = withFilter(p)$/;"	m
filter	scala/collection/parallel/ParIterableLike.scala	/^  def filter(pred: T => Boolean): Repr = {$/;"	m
filter	scala/concurrent/Future.scala	/^  def filter(pred: T => Boolean)(implicit executor: ExecutionContext): Future[T] = {$/;"	m
filter	scala/runtime/Tuple2Zipped.scala	/^  def filter[To1, To2](f: (El1, El2) => Boolean)(implicit cbf1: CBF[Repr1, El1, To1], cbf2: CBF[Repr2, El2, To2]): (To1, To2) = {$/;"	m
filter	scala/runtime/Tuple3Zipped.scala	/^  def filter[To1, To2, To3](f: (El1, El2, El3) => Boolean)($/;"	m
filter	scala/util/Either.scala	/^    def filter[X](p: B => Boolean): Option[Either[X, B]] = e match {$/;"	m
filter	scala/util/Either.scala	/^    def filter[Y](p: A => Boolean): Option[Either[A, Y]] = e match {$/;"	m
filter	scala/util/Try.scala	/^  def filter(p: T => Boolean): Try[T] = this$/;"	m
filter	scala/util/Try.scala	/^  def filter(p: T => Boolean): Try[T] = {$/;"	m
filter	scala/util/Try.scala	/^  def filter(p: T => Boolean): Try[T]$/;"	m
filter	scala/util/parsing/combinator/Parsers.scala	/^    def filter(p: T => Boolean): Parser[T]$/;"	m
filter	scala/xml/include/sax/XIncluder.scala	/^  private var filter: XIncludeFilter = null$/;"	v
filter2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def filter2combiner[U >: T, This](pred: T => Boolean, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
filterKeys	scala/collection/GenMapLike.scala	/^  def filterKeys(p: A => Boolean): GenMap[A, B]$/;"	m
filterKeys	scala/collection/MapLike.scala	/^  def filterKeys(p: A => Boolean): Map[A, B] = new FilteredKeys(p)$/;"	m
filterKeys	scala/collection/parallel/ParMapLike.scala	/^  def filterKeys(p: K => Boolean): ParMap[K, V] = new ParMap[K, V] {$/;"	m
filterMap	scala/collection/TraversableLike.scala	/^  def filterMap[B, That](f: A => Option[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
filterNot	scala/collection/GenTraversableLike.scala	/^  def filterNot(pred: A => Boolean): Repr$/;"	m
filterNot	scala/collection/Iterator.scala	/^  def filterNot(p: A => Boolean): Iterator[A] = filter(!p(_))$/;"	m
filterNot	scala/collection/TraversableLike.scala	/^  def filterNot(p: A => Boolean): Repr = filter(!p(_))$/;"	m
filterNot	scala/collection/parallel/ParIterableLike.scala	/^  def filterNot(pred: T => Boolean): Repr = {$/;"	m
filterNot2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def filterNot2combiner[U >: T, This](pred: T => Boolean, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
filterWithError	scala/util/parsing/combinator/Parsers.scala	/^    def filterWithError(p: Nothing => Boolean, error: Nothing => String, position: Input): ParseResult[Nothing] = this$/;"	m
filterWithError	scala/util/parsing/combinator/Parsers.scala	/^    def filterWithError(p: T => Boolean, error: T => String, position: Input): ParseResult[T] =$/;"	m
filterWithError	scala/util/parsing/combinator/Parsers.scala	/^    def filterWithError(p: T => Boolean, error: T => String, position: Input): ParseResult[T]$/;"	m
filtered	scala/collection/parallel/ParMapLike.scala	/^    lazy val filtered = self.filter(kv => p(kv._1))$/;"	V
filters	scala/collection/mutable/Publisher.scala	/^  private val filters = new HashMap[Sub, Set[Filter]] with MultiMap[Sub, Filter]$/;"	V
fin	scala/util/control/Exception.scala	/^    val fin: Option[Finally] = None,$/;"	V
finalMixer1	scala/util/MurmurHash.scala	/^  final private val finalMixer1 = 0x85ebca6b$/;"	V
finalMixer2	scala/util/MurmurHash.scala	/^  final private val finalMixer2 = 0xc2b2ae35$/;"	V
finalString	scala/util/automata/NondetWordAutom.scala	/^    val finalString = Map(finalStates map (j => j -> finals(j)) : _*).toString$/;"	V
finalTag	scala/util/automata/BaseBerrySethi.scala	/^  protected var finalTag: Int = _$/;"	v
finalizeHash	scala/runtime/Statics.java	/^  public static int finalizeHash(int hash, int length) {$/;"	m	class:Statics
finalizeHash	scala/util/MurmurHash.scala	/^  def finalizeHash(hash: Int) = {$/;"	m
finals	scala/util/automata/BaseBerrySethi.scala	/^  protected var finals: immutable.Map[Int, Int] = _     \/\/ final states$/;"	v
finals	scala/util/automata/DetWordAutom.scala	/^  val finals: Array[Int]$/;"	V
finals	scala/util/automata/NondetWordAutom.scala	/^  val finals: Array[Int] \/\/ 0 means not final$/;"	V
finals	scala/util/automata/SubsetConstruction.scala	/^      val finals = finalsR$/;"	V
finals	scala/util/automata/SubsetConstruction.scala	/^    var finals: mutable.Map[immutable.BitSet, Int]  = mutable.Map()$/;"	v
finals	scala/util/automata/WordBerrySethi.scala	/^          val finals   = finalsArr$/;"	V
finalsArr	scala/util/automata/WordBerrySethi.scala	/^        val finalsArr   = (0 until pos map (k => finals.getOrElse(k, 0))).toArray  \/\/ 0 == not final$/;"	V
finalsR	scala/util/automata/SubsetConstruction.scala	/^    val finalsR = new Array[Int](nstatesR)$/;"	V
find	scala/collection/GenTraversableOnce.scala	/^  def find(pred: A => Boolean): Option[A]$/;"	m
find	scala/collection/IndexedSeqOptimized.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/Iterator.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/LinearSeqOptimized.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/TraversableLike.scala	/^  def find(p: A => Boolean): Option[A] = {$/;"	m
find	scala/collection/TraversableOnce.scala	/^  def find(p: A => Boolean): Option[A]$/;"	m
find	scala/collection/parallel/ParIterableLike.scala	/^  def find(pred: T => Boolean): Option[T] = {$/;"	m
find	scala/concurrent/Future.scala	/^  def find[T](futurestravonce: TraversableOnce[Future[T]])(predicate: T => Boolean)(implicit executor: ExecutionContext): Future[Option[T]] = {$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod = findInternal(forReceiver)$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod = null$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod =$/;"	m
find	scala/runtime/MethodCache.scala	/^  def find(forReceiver: JClass[_]): JMethod$/;"	m
find	scala/xml/dtd/ElementValidator.scala	/^      def find(Key: String): Boolean =$/;"	m
find	scala/xml/dtd/ElementValidator.scala	/^      def find(Key: String): Option[AttrDecl] = {$/;"	m
findAllIn	scala/util/matching/Regex.scala	/^  def findAllIn(source: java.lang.CharSequence) = new Regex.MatchIterator(source, this, groupNames)$/;"	m
findAllMatchIn	scala/util/matching/Regex.scala	/^  def findAllMatchIn(source: java.lang.CharSequence): Iterator[Match] = {$/;"	m
findDepth	scala/collection/immutable/RedBlack.scala	/^      def  findDepth(zipper: List[NonEmpty[B]], depth: Int): List[NonEmpty[B]] = zipper match {$/;"	m
findDepth	scala/collection/immutable/RedBlackTree.scala	/^    def  findDepth(zipper: List[Tree[A, B]], depth: Int): List[Tree[A, B]] = zipper match {$/;"	m
findFirstIn	scala/util/matching/Regex.scala	/^  def findFirstIn(source: java.lang.CharSequence): Option[String] = {$/;"	m
findFirstMatchIn	scala/util/matching/Regex.scala	/^  def findFirstMatchIn(source: java.lang.CharSequence): Option[Match] = {$/;"	m
findPrefixMatchOf	scala/util/matching/Regex.scala	/^  def findPrefixMatchOf(source: java.lang.CharSequence): Option[Match] = {$/;"	m
findPrefixOf	scala/util/matching/Regex.scala	/^  def findPrefixOf(source: java.lang.CharSequence): Option[String] = {$/;"	m
finish	scala/collection/Iterator.scala	/^      def finish() = {$/;"	m
first	scala/Array.scala	/^ *  val first = numbers(0) \/\/ read the first element$/;"	V
first	scala/collection/Iterator.scala	/^    private[this] var first = true$/;"	v
first	scala/collection/TraversableOnce.scala	/^    var first = true$/;"	v
first	scala/collection/TraversableViewLike.scala	/^    var first = true$/;"	v
first	scala/collection/immutable/RedBlack.scala	/^    def first : A$/;"	m
first	scala/collection/immutable/RedBlack.scala	/^    def first = if (left .isEmpty) key else left.first$/;"	m
first	scala/collection/immutable/RedBlack.scala	/^    def first = throw new NoSuchElementException("empty map")$/;"	m
first	scala/sys/process/ProcessImpl.scala	/^      val first = a.run(firstIO)$/;"	V
first	scala/sys/process/ProcessImpl.scala	/^      val first = a.run(io)$/;"	V
first	scala/util/automata/BaseBerrySethi.scala	/^        val first = compFollow1(fol, p)$/;"	V
first	scala/util/continuations/package.scala	/^ *       val first = ask("Please give me a number")$/;"	V
first	scala/util/parsing/combinator/PackratParsers.scala	/^    def first: T = underlying.first$/;"	m
first	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def first = tok$/;"	m
first	scala/util/parsing/input/CharSequenceReader.scala	/^  def first =$/;"	m
first	scala/util/parsing/input/PagedSeqReader.scala	/^  def first =$/;"	m
first	scala/util/parsing/input/Reader.scala	/^  def first: T$/;"	m
first0	scala/collection/mutable/MutableList.scala	/^  protected var first0: LinkedList[A] = new LinkedList[A]$/;"	v
firstCompletedOf	scala/concurrent/Future.scala	/^  def firstCompletedOf[T](futures: TraversableOnce[Future[T]])(implicit executor: ExecutionContext): Future[T] = {$/;"	m
firstEntry	scala/collection/mutable/LinkedHashMap.scala	/^  @transient protected var firstEntry: Entry = null$/;"	v
firstEntry	scala/collection/mutable/LinkedHashSet.scala	/^  @transient protected var firstEntry: Entry = null$/;"	v
firstIO	scala/sys/process/ProcessImpl.scala	/^      val firstIO =$/;"	V
firstKey	scala/collection/SortedMapLike.scala	/^  def firstKey : A = head._1$/;"	m
firstKey	scala/collection/generic/Sorted.scala	/^  def firstKey: K$/;"	m
firstObject	scala/collection/immutable/List.scala	/^    val firstObject = in.readObject()$/;"	V
fits	scala/text/Document.scala	/^    def fits(w: Int, state: List[FmtState]): Boolean = state match {$/;"	m
fitsFlat	scala/text/Document.scala	/^        val fitsFlat = fits(width - k, (i, false, d) :: z)$/;"	V
fixedList	scala/io/BytePickle.scala	/^  def fixedList[a](pa: SPU[a])(n: Int): SPU[List[a]] = {$/;"	m
fixed_s1	scala/collection/SeqLike.scala	/^    val fixed_s1    = math.min(s1, s0 + clippedFrom + (t1 - t0) - 1)$/;"	V
fjt	scala/concurrent/impl/ExecutionContextImpl.scala	/^      val fjt = runnable match {$/;"	V
fjtask	scala/collection/parallel/Tasks.scala	/^    val fjtask = newWrappedTask(task)$/;"	V
flag	scala/collection/concurrent/TrieMap.scala	/^                  val flag = 1 << idx$/;"	V
flag	scala/collection/concurrent/TrieMap.scala	/^        val flag = 1 << idx$/;"	V
flatMap	scala/Option.scala	/^    def flatMap[B](f: A => Option[B]): Option[B] = self filter p flatMap f$/;"	m
flatMap	scala/Responder.scala	/^  def flatMap[B](f: A => Responder[B]) = new Responder[B] {$/;"	m
flatMap	scala/collection/GenTraversableLike.scala	/^  def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
flatMap	scala/collection/Iterator.scala	/^  def flatMap[B](f: A => GenTraversableOnce[B]): Iterator[B] = new AbstractIterator[B] {$/;"	m
flatMap	scala/collection/TraversableLike.scala	/^    def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
flatMap	scala/collection/TraversableLike.scala	/^  def flatMap[B, That](f: A => GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
flatMap	scala/collection/TraversableOnce.scala	/^    def flatMap[B](f: A => GenTraversableOnce[B]): TraversableOnce[B] = trav.toIterator flatMap f$/;"	m
flatMap	scala/collection/generic/FilterMonadic.scala	/^  def flatMap[B, That](f: A => scala.collection.GenTraversableOnce[B])(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
flatMap	scala/collection/parallel/ParIterableLike.scala	/^  def flatMap[S, That](f: T => GenTraversableOnce[S])(implicit bf: CanBuildFrom[Repr, S, That]): That = if (bf(repr).isCombiner) {$/;"	m
flatMap	scala/concurrent/Future.scala	/^  def flatMap[S](f: T => Future[S])(implicit executor: ExecutionContext): Future[S] = {$/;"	m
flatMap	scala/runtime/Tuple2Zipped.scala	/^  def flatMap[B, To](f: (El1, El2) => TraversableOnce[B])(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
flatMap	scala/runtime/Tuple3Zipped.scala	/^  def flatMap[B, To](f: (El1, El2, El3) => TraversableOnce[B])(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
flatMap	scala/util/Either.scala	/^    def flatMap[AA >: A, Y](f: B => Either[AA, Y]) = e match {$/;"	m
flatMap	scala/util/Either.scala	/^    def flatMap[BB >: B, X](f: A => Either[X, BB]) = e match {$/;"	m
flatMap	scala/util/Try.scala	/^  def flatMap[U](f: T => Try[U]): Try[U] = this.asInstanceOf[Try[U]]$/;"	m
flatMap	scala/util/Try.scala	/^  def flatMap[U](f: T => Try[U]): Try[U] =$/;"	m
flatMap	scala/util/Try.scala	/^  def flatMap[U](f: T => Try[U]): Try[U]$/;"	m
flatMap	scala/util/parsing/combinator/Parsers.scala	/^    def flatMap[U](f: T => Parser[U]): Parser[U]$/;"	m
flatMapWithNext	scala/util/parsing/combinator/Parsers.scala	/^    def flatMapWithNext[U](f: Nothing => Input => ParseResult[U]): ParseResult[U]$/;"	m
flatMapWithNext	scala/util/parsing/combinator/Parsers.scala	/^    def flatMapWithNext[U](f: T => Input => ParseResult[U]): ParseResult[U]$/;"	m
flatmap2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def flatmap2combiner[S, That](f: T => GenTraversableOnce[S], cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
flatten	scala/Option.scala	/^  def flatten[B](implicit ev: A <:< Option[B]): Option[B] =$/;"	m
flatten	scala/collection/TraversableOnce.scala	/^    def flatten: Iterator[A] = new AbstractIterator[A] {$/;"	m
flatten	scala/collection/generic/GenericTraversableTemplate.scala	/^  def flatten[B](implicit asTraversable: A => \/*<:<!!!*\/ GenTraversableOnce[B]): CC[B] = {$/;"	m
flatten	scala/collection/immutable/List.scala	/^  def flatten[A](xss: List[List[A]]): List[A] = {$/;"	m
flatten	scala/collection/mutable/ArrayOps.scala	/^  def flatten[U](implicit asTrav: T => scala.collection.Traversable[U], m: ClassTag[U]): Array[U] = {$/;"	m
flatten	scala/util/Try.scala	/^  def flatten[U](implicit ev: T <:< Try[U]): Try[U] = this.asInstanceOf[Try[U]]$/;"	m
flatten	scala/util/Try.scala	/^  def flatten[U](implicit ev: T <:< Try[U]): Try[U] = value$/;"	m
flatten	scala/util/Try.scala	/^  def flatten[U](implicit ev: T <:< Try[U]): Try[U]$/;"	m
flatten1	scala/collection/immutable/Stream.scala	/^    def flatten1(t: Traversable[B]): Stream[B] =$/;"	m
flipBit	scala/math/BigInt.scala	/^  def flipBit (n: Int): BigInt  = new BigInt(this.bigInteger.flipBit(n))$/;"	m
floatHash	scala/runtime/Statics.java	/^  public static int floatHash(float fv) {$/;"	m	class:Statics
floatValue	scala/math/BigDecimal.scala	/^  def floatValue  = this.bigDecimal.floatValue$/;"	m
floatValue	scala/math/BigInt.scala	/^  def floatValue  = this.bigInteger.floatValue$/;"	m
floatValue	scala/math/ScalaNumericConversions.scala	/^  def floatValue(): Float$/;"	m
floatValue	scala/runtime/ScalaNumberProxy.scala	/^  def floatValue()  = num.toFloat(self)$/;"	m
floatingPointNumber	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def floatingPointNumber: Parser[String] =$/;"	m
floor	scala/math/package.scala	/^  def floor(x: Double): Double = java.lang.Math.floor(x)$/;"	m
floor	scala/runtime/RichDouble.scala	/^  def floor: Double = math.floor(self)$/;"	m
floor	scala/runtime/RichFloat.scala	/^  def floor: Float = math.floor(self).toFloat$/;"	m
flush	scala/sys/process/ProcessLogger.scala	/^  def flush(): Unit = writer.flush()$/;"	m
flush	scala/xml/persistent/CachedFileStorage.scala	/^  def flush() = {$/;"	m
flushedOut	scala/runtime/WorksheetSupport.scala	/^  private val flushedOut = new FlushedOutputStream(System.out)$/;"	V
fmt	scala/text/Document.scala	/^    def fmt(k: Int, state: List[FmtState]): Unit = state match {$/;"	m
fold	scala/collection/GenTraversableOnce.scala	/^  def fold[A1 >: A](z: A1)(op: (A1, A1) => A1): A1$/;"	m
fold	scala/collection/TraversableOnce.scala	/^  def fold[A1 >: A](z: A1)(op: (A1, A1) => A1): A1 = foldLeft(z)(op)$/;"	m
fold	scala/collection/parallel/ParIterableLike.scala	/^  def fold[U >: T](z: U)(op: (U, U) => U): U = {$/;"	m
fold	scala/concurrent/Future.scala	/^  def fold[T, R](futures: TraversableOnce[Future[T]])(zero: R)(foldFun: (R, T) => R)(implicit executor: ExecutionContext): Future[R] = {$/;"	m
fold	scala/util/Either.scala	/^  def fold[X](fa: A => X, fb: B => X) = this match {$/;"	m
foldLeft	scala/collection/GenTraversableOnce.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B$/;"	m
foldLeft	scala/collection/IndexedSeqOptimized.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B =$/;"	m
foldLeft	scala/collection/LinearSeqOptimized.scala	/^  def foldLeft[B](z: B)(f: (B, A) => B): B = {$/;"	m
foldLeft	scala/collection/TraversableOnce.scala	/^  def foldLeft[B](z: B)(op: (B, A) => B): B = {$/;"	m
foldLeft	scala/collection/parallel/ParIterableLike.scala	/^  def foldLeft[S](z: S)(op: (S, T) => S): S = seq.foldLeft(z)(op)$/;"	m
foldRight	scala/collection/GenTraversableOnce.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B$/;"	m
foldRight	scala/collection/IndexedSeqOptimized.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B =$/;"	m
foldRight	scala/collection/LinearSeqOptimized.scala	/^  def foldRight[B](z: B)(f: (A, B) => B): B =$/;"	m
foldRight	scala/collection/TraversableOnce.scala	/^  def foldRight[B](z: B)(op: (A, B) => B): B =$/;"	m
foldRight	scala/collection/parallel/ParIterableLike.scala	/^  def foldRight[S](z: S)(op: (T, S) => S): S = seq.foldRight(z)(op)$/;"	m
follow	scala/collection/TraversableLike.scala	/^    var follow = false$/;"	v
follow	scala/util/automata/BaseBerrySethi.scala	/^  protected var follow: mutable.HashMap[Int, Set[Int]] = _$/;"	v
forName	scala/runtime/MethodCache.scala	/^  private[this] val forName: String,$/;"	V
forParameterTypes	scala/runtime/MethodCache.scala	/^  private[this] val forParameterTypes: Array[JClass[_]]$/;"	V
forall	scala/collection/GenTraversableOnce.scala	/^  def forall(pred: A => Boolean): Boolean$/;"	m
forall	scala/collection/IndexedSeqOptimized.scala	/^  def forall(p: A => Boolean): Boolean = prefixLength(p(_)) == length$/;"	m
forall	scala/collection/Iterator.scala	/^  def forall(p: A => Boolean): Boolean = {$/;"	m
forall	scala/collection/LinearSeqOptimized.scala	/^  def forall(p: A => Boolean): Boolean = {$/;"	m
forall	scala/collection/TraversableLike.scala	/^  def forall(p: A => Boolean): Boolean = {$/;"	m
forall	scala/collection/TraversableOnce.scala	/^  def forall(p: A => Boolean): Boolean$/;"	m
forall	scala/collection/parallel/ParIterableLike.scala	/^  def forall(pred: T => Boolean): Boolean = {$/;"	m
forall	scala/runtime/Tuple2Zipped.scala	/^  def forall(f: (El1, El2) => Boolean): Boolean =$/;"	m
forall	scala/runtime/Tuple3Zipped.scala	/^  def forall(f: (El1, El2, El3) => Boolean): Boolean =$/;"	m
forall	scala/util/Either.scala	/^    def forall(f: A => Boolean) = e match {$/;"	m
forall	scala/util/Either.scala	/^    def forall(f: B => Boolean) = e match {$/;"	m
forall2	scala/collection/immutable/List.scala	/^  def forall2[A,B](xs: List[A], ys: List[B])(f: (A, B) => Boolean): Boolean = {$/;"	m
force	scala/collection/GenTraversableViewLike.scala	/^  def force[B >: A, That](implicit bf: CanBuildFrom[Coll, B, That]): That$/;"	m
force	scala/collection/TraversableViewLike.scala	/^  def force[B >: A, That](implicit bf: CanBuildFrom[Coll, B, That]) = {$/;"	m
force	scala/collection/immutable/Stream.scala	/^  def force: Stream[A] = {$/;"	m
force	scala/util/matching/Regex.scala	/^    def force: this.type = { starts; ends; this }$/;"	m
forced	scala/collection/GenTraversableViewLike.scala	/^    protected[this] val forced: GenSeq[B]$/;"	V
forced	scala/collection/IterableViewLike.scala	/^  protected override def newForced[B](xs: => GenSeq[B]): Transformed[B] = new { val forced = xs } with AbstractTransformed[B] with Forced[B]$/;"	V
forced	scala/collection/SeqViewLike.scala	/^  protected override def newForced[B](xs: => GenSeq[B]): Transformed[B] = new { val forced = xs } with AbstractTransformed[B] with Forced[B]$/;"	V
forced	scala/collection/TraversableViewLike.scala	/^  protected def newForced[B](xs: => GenSeq[B]): Transformed[B] = new { val forced = xs } with AbstractTransformed[B] with Forced[B]$/;"	V
forced	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newForced[B](xs: => scala.collection.GenSeq[B]): Transformed[B] = new { val forced = xs } with AbstractTransformed[B] with Forced[B]$/;"	V
forced	scala/collection/parallel/ParIterableViewLike.scala	/^  protected def newForced[S](xs: => GenSeq[S]): Transformed[S] = new Forced[S] { val forced = xs }$/;"	V
forced	scala/collection/parallel/ParSeqViewLike.scala	/^    else new Forced[S] { val forced = mutable.ParArray.fromTraversables(xs) }$/;"	V
forced	scala/collection/parallel/ParSeqViewLike.scala	/^    if (xs.isParSeq) new Forced[S] { val forced = xs }$/;"	V
forcedElms	scala/collection/SeqLike.scala	/^      val forcedElms = new mutable.ArrayBuffer[A](elms.size) ++= elms$/;"	V
forcedPar	scala/collection/parallel/ParIterableViewLike.scala	/^    def forcedPar: ParIterable[S] = forced.asParIterable$/;"	m
foreach	scala/Option.scala	/^    def foreach[U](f: A => U): Unit = self filter p foreach f$/;"	m
foreach	scala/Responder.scala	/^  def foreach(k: A => Unit) { respond(k) }$/;"	m
foreach	scala/collection/GenTraversableLike.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/GenTraversableOnce.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: A => U) {$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: B => U) = forced foreach f$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: B => U) {$/;"	m
foreach	scala/collection/GenTraversableViewLike.scala	/^    def foreach[U](f: B => U): Unit$/;"	m
foreach	scala/collection/IndexedSeqOptimized.scala	/^  def foreach[U](f: A => U): Unit = {$/;"	m
foreach	scala/collection/IterableLike.scala	/^  def foreach[U](f: A => U): Unit =$/;"	m
foreach	scala/collection/Iterator.scala	/^  def foreach[U](f: A =>  U) { while (hasNext) f(next()) }$/;"	m
foreach	scala/collection/LinearSeqOptimized.scala	/^  def foreach[B](f: A => B) {$/;"	m
foreach	scala/collection/TraversableLike.scala	/^    def foreach[U](f: A => U): Unit =$/;"	m
foreach	scala/collection/TraversableLike.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/TraversableOnce.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/TraversableViewLike.scala	/^    def foreach[U](f: B => U): Unit$/;"	m
foreach	scala/collection/generic/FilterMonadic.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/generic/GenericTraversableTemplate.scala	/^  def foreach[U](f: A => U): Unit$/;"	m
foreach	scala/collection/immutable/List.scala	/^  def foreach[B](f: A => B) {$/;"	m
foreach	scala/collection/immutable/RedBlack.scala	/^    def foreach[U](f: (A, B) =>  U)$/;"	m
foreach	scala/collection/immutable/RedBlack.scala	/^    def foreach[U](f: (A, B) => U) {$/;"	m
foreach	scala/collection/immutable/RedBlack.scala	/^    def foreach[U](f: (A, Nothing) => U) {}$/;"	m
foreach	scala/collection/immutable/RedBlackTree.scala	/^  def foreach[A, B, U](tree: Tree[A, B], f: ((A, B)) => U): Unit = if (tree ne null) {$/;"	m
foreach	scala/collection/mutable/UnrolledBuffer.scala	/^    def foreach[U](f: T => U) {$/;"	m
foreach	scala/collection/parallel/ParIterableLike.scala	/^  def foreach[U](f: T => U) = {$/;"	m
foreach	scala/concurrent/Future.scala	/^  def foreach[U](f: T => U)(implicit executor: ExecutionContext): Unit = onComplete {$/;"	m
foreach	scala/runtime/Tuple2Zipped.scala	/^      def foreach[U](f: ((El1, El2)) => U): Unit = zz foreach Function.untupled(f)$/;"	m
foreach	scala/runtime/Tuple2Zipped.scala	/^  def foreach[U](f: (El1, El2) => U): Unit = {$/;"	m
foreach	scala/runtime/Tuple2Zipped.scala	/^  def foreach[U](f: (El1, El2) => U): Unit$/;"	m
foreach	scala/runtime/Tuple3Zipped.scala	/^      def foreach[U](f: ((El1, El2, El3)) => U): Unit = zz foreach Function.untupled(f)$/;"	m
foreach	scala/runtime/Tuple3Zipped.scala	/^  def foreach[U](f: (El1, El2, El3) => U): Unit = {$/;"	m
foreach	scala/runtime/Tuple3Zipped.scala	/^  def foreach[U](f: (El1, El2, El3) => U): Unit$/;"	m
foreach	scala/util/Either.scala	/^    def foreach[U](f: A => U) = e match {$/;"	m
foreach	scala/util/Either.scala	/^    def foreach[U](f: B => U) = e match {$/;"	m
foreach	scala/util/Try.scala	/^  def foreach[U](f: T => U): Unit = ()$/;"	m
foreach	scala/util/Try.scala	/^  def foreach[U](f: T => U): Unit = f(value)$/;"	m
foreach	scala/util/Try.scala	/^  def foreach[U](f: T => U): Unit$/;"	m
foreachFull	scala/util/continuations/ControlContext.scala	/^  def foreachFull(f: A => B, g: Exception => B): C = {$/;"	m
foreachKey	scala/collection/immutable/RedBlackTree.scala	/^  def foreachKey[A, U](tree: Tree[A, _], f: A => U): Unit = if (tree ne null) {$/;"	m
forkJoinPool	scala/collection/parallel/Tasks.scala	/^  def forkJoinPool: ForkJoinPool = environment.asInstanceOf[ForkJoinPool]$/;"	m
forkJoinPool	scala/collection/parallel/Tasks.scala	/^  def forkJoinPool: ForkJoinPool$/;"	m
format	scala/Predef.scala	/^  def format(text: String, xs: Any*) = augmentString(text).format(xs: _*)$/;"	m
format	scala/collection/immutable/StringLike.scala	/^  def format(args : Any*): String =$/;"	m
format	scala/text/Document.scala	/^  def format(width: Int, writer: Writer) {$/;"	m
format	scala/xml/PrettyPrinter.scala	/^  def format(n: Node, pscope: NamespaceBinding = null): String =$/;"	m
format	scala/xml/PrettyPrinter.scala	/^  def format(n: Node, pscope: NamespaceBinding, sb: StringBuilder) { \/\/ entry point$/;"	m
format	scala/xml/PrettyPrinter.scala	/^  def format(n: Node, sb: StringBuilder) { \/\/ entry point$/;"	m
formatLocal	scala/collection/immutable/StringLike.scala	/^  def formatLocal(l: java.util.Locale, args: Any*): String =$/;"	m
formatNodes	scala/xml/PrettyPrinter.scala	/^  def formatNodes(nodes: Seq[Node], pscope: NamespaceBinding = null): String =$/;"	m
formatNodes	scala/xml/PrettyPrinter.scala	/^  def formatNodes(nodes: Seq[Node], pscope: NamespaceBinding, sb: StringBuilder): Unit =$/;"	m
forwardThrowable	scala/collection/parallel/Tasks.scala	/^  def forwardThrowable() = if (throwable != null) throw throwable$/;"	m
fos	scala/xml/XML.scala	/^    val fos = new FileOutputStream(filename)$/;"	V
fos	scala/xml/persistent/CachedFileStorage.scala	/^    val fos = new FileOutputStream(theFile)$/;"	V
found	scala/collection/Iterator.scala	/^    var found = false$/;"	v
found	scala/collection/parallel/mutable/ParHashMap.scala	/^    val found = ((i * sizeMapBucketSize) until ((i + 1) * sizeMapBucketSize)).foldLeft(0) {$/;"	V
found	scala/util/Marshal.scala	/^    val found = in.readObject.asInstanceOf[ClassTag[_]]$/;"	V
found	scala/util/parsing/combinator/RegexParsers.scala	/^          val found = if (start == source.length()) "end of source" else "`"+source.charAt(start)+"'"$/;"	V
found	scala/util/parsing/combinator/RegexParsers.scala	/^        val found = if (start == source.length()) "end of source" else "`"+source.charAt(start)+"'"$/;"	V
fp	scala/collection/parallel/ParSeqLike.scala	/^      val fp = len \/ 2$/;"	V
fp	scala/collection/parallel/ParSeqLike.scala	/^      val fp = pit.remaining \/ 2$/;"	V
fp	scala/collection/parallel/immutable/ParHashMap.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/immutable/ParHashSet.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/mutable/ParArray.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/mutable/ParHashMap.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/mutable/ParHashSet.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/mutable/ParTrieMap.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      val fp = howmany \/ 2$/;"	V
fp	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      val fp = howmany \/ 2$/;"	V
fracPart	scala/util/parsing/json/Lexer.scala	/^  def fracPart = '.' ~> rep(digit) ^^ { _ mkString "" }$/;"	m
freeSpace	scala/collection/immutable/Vector.scala	/^        val freeSpace = ((1<<5*(depth)) - endIndex) \/\/ free space at the right given the current tree-structure depth$/;"	V
from	scala/collection/GenSeqViewLike.scala	/^    protected[this] val from: Int$/;"	V
from	scala/collection/Iterator.scala	/^  def from(start: Int): Iterator[Int] = from(start, 1)$/;"	m
from	scala/collection/Iterator.scala	/^  def from(start: Int, step: Int): Iterator[Int] = new AbstractIterator[Int] {$/;"	m
from	scala/collection/SeqViewLike.scala	/^    val from = _from$/;"	V
from	scala/collection/generic/SliceInterval.scala	/^private[collection] class SliceInterval private (val from: Int, val until: Int) {$/;"	V
from	scala/collection/generic/Sorted.scala	/^  def from(from: K): This = rangeImpl(Some(from), None)$/;"	m
from	scala/collection/immutable/RedBlackTree.scala	/^  def from[A: Ordering, B](tree: Tree[A, B], from: A): Tree[A, B] = blacken(doFrom(tree, from))$/;"	m
from	scala/collection/immutable/Stream.scala	/^  def from(start: Int): Stream[Int] = from(start, 1)$/;"	m
from	scala/collection/immutable/Stream.scala	/^  def from(start: Int, step: Int): Stream[Int] =$/;"	m
from	scala/collection/immutable/StreamViewLike.scala	/^    new { val from = _from; val patch = _patch; val replaced = _replaced } with AbstractTransformed[B] with Patched[B]$/;"	V
from	scala/collection/mutable/TreeSet.scala	/^  private var from: Option[A] = None$/;"	v
from	scala/collection/parallel/ParIterableLike.scala	/^    val from = unc_from min size max 0$/;"	V
from	scala/collection/parallel/ParSeqLike.scala	/^    val from = 0 max fromarg$/;"	V
from	scala/collection/parallel/ParSeqViewLike.scala	/^    val from = _from;$/;"	V
fromArray	scala/collection/immutable/BitSet.scala	/^  def fromArray(elems: Array[Long]): BitSet = fromBitMaskNoCopy(elems)$/;"	m
fromArray	scala/collection/immutable/List.scala	/^  def fromArray[A](arr: Array[A]): List[A] = fromArray(arr, 0, arr.length)$/;"	m
fromArray	scala/collection/immutable/List.scala	/^  def fromArray[A](arr: Array[A], start: Int, len: Int): List[A] = {$/;"	m
fromBitMask	scala/Enumeration.scala	/^    def fromBitMask(elems: Array[Long]): ValueSet = new ValueSet(immutable.BitSet.fromBitMask(elems))$/;"	m
fromBitMask	scala/collection/immutable/BitSet.scala	/^  def fromBitMask(elems: Array[Long]): BitSet = {$/;"	m
fromBitMask	scala/collection/mutable/BitSet.scala	/^  def fromBitMask(elems: Array[Long]): BitSet = {$/;"	m
fromBitMaskNoCopy	scala/collection/immutable/BitSet.scala	/^  def fromBitMaskNoCopy(elems: Array[Long]): BitSet = {$/;"	m
fromBitMaskNoCopy	scala/collection/mutable/BitSet.scala	/^  def fromBitMaskNoCopy(elems: Array[Long]): BitSet = new BitSet(elems)$/;"	m
fromBytes	scala/io/Source.scala	/^  def fromBytes(bytes: Array[Byte])(implicit codec: Codec): Source =$/;"	m
fromBytes	scala/io/Source.scala	/^  def fromBytes(bytes: Array[Byte], enc: String): Source =$/;"	m
fromChar	scala/io/Source.scala	/^  def fromChar(c: Char): Source = fromIterable(Array(c))$/;"	m
fromChars	scala/io/Source.scala	/^  def fromChars(chars: Array[Char]): Source = fromIterable(chars)$/;"	m
fromClass	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def fromClass[T](clazz: jClass[T]): ClassManifest[T] = clazz match {$/;"	m
fromComparator	scala/math/Equiv.scala	/^  def fromComparator[T](cmp: Comparator[T]): Equiv[T] = new Equiv[T] {$/;"	m
fromEnum	scala/io/BytePickle.scala	/^    def fromEnum(n: Int) = if (n == 0) false else true$/;"	m
fromExecutor	scala/concurrent/ExecutionContext.scala	/^  def fromExecutor(e: Executor): ExecutionContextExecutor = fromExecutor(e, defaultReporter)$/;"	m
fromExecutor	scala/concurrent/ExecutionContext.scala	/^  def fromExecutor(e: Executor, reporter: Throwable => Unit): ExecutionContextExecutor =$/;"	m
fromExecutor	scala/concurrent/impl/ExecutionContextImpl.scala	/^  def fromExecutor(e: Executor, reporter: Throwable => Unit = ExecutionContext.defaultReporter): ExecutionContextImpl = new ExecutionContextImpl(e, reporter)$/;"	m
fromExecutorService	scala/concurrent/ExecutionContext.scala	/^  def fromExecutorService(e: ExecutorService): ExecutionContextExecutorService = fromExecutorService(e, defaultReporter)$/;"	m
fromExecutorService	scala/concurrent/ExecutionContext.scala	/^  def fromExecutorService(e: ExecutorService, reporter: Throwable => Unit): ExecutionContextExecutorService =$/;"	m
fromExecutorService	scala/concurrent/impl/ExecutionContextImpl.scala	/^  def fromExecutorService(es: ExecutorService, reporter: Throwable => Unit = ExecutionContext.defaultReporter): ExecutionContextImpl with ExecutionContextExecutorService =$/;"	m
fromFile	scala/collection/immutable/PagedSeq.scala	/^  def fromFile(source: File): PagedSeq[Char] =$/;"	m
fromFile	scala/collection/immutable/PagedSeq.scala	/^  def fromFile(source: String): PagedSeq[Char] =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile)(implicit codec: Codec): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile, bufferSize: Int)(implicit codec: Codec): BufferedSource = {$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile, enc: String): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(file: JFile, enc: String, bufferSize: Int): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(name: String)(implicit codec: Codec): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(name: String, enc: String): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(uri: URI)(implicit codec: Codec): BufferedSource =$/;"	m
fromFile	scala/io/Source.scala	/^  def fromFile(uri: URI, enc: String): BufferedSource =$/;"	m
fromFile	scala/xml/XML.scala	/^  def fromFile(fd: FileDescriptor)      = new InputSource(new FileInputStream(fd))$/;"	m
fromFile	scala/xml/XML.scala	/^  def fromFile(file: File)              = new InputSource(new FileInputStream(file))$/;"	m
fromFile	scala/xml/XML.scala	/^  def fromFile(name: String)            = new InputSource(new FileInputStream(name))$/;"	m
fromFile	scala/xml/parsing/ConstructingParser.scala	/^  def fromFile(inp: File, preserveWS: Boolean) =$/;"	m
fromFixedAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromFixedAttribute(k: String, value: String, actual: String) =$/;"	m
fromFunction	scala/math/Equiv.scala	/^  def fromFunction[T](cmp: (T, T) => Boolean): Equiv[T] = new Equiv[T] {$/;"	m
fromFunction	scala/util/hashing/Hashing.scala	/^  def fromFunction[T](f: T => Int) = new Hashing[T] {$/;"	m
fromInputStream	scala/io/Source.scala	/^  def fromInputStream(is: InputStream)(implicit codec: Codec): BufferedSource =$/;"	m
fromInputStream	scala/io/Source.scala	/^  def fromInputStream(is: InputStream, enc: String): BufferedSource =$/;"	m
fromInputStream	scala/xml/XML.scala	/^  def fromInputStream(is: InputStream)  = new InputSource(is)$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): BigDecimal = BigDecimal(x)$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): BigInt = BigInt(x)$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Byte = x.toByte$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Char = x.toChar$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Double = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Float = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Int = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Long = x$/;"	m
fromInt	scala/math/Numeric.scala	/^    def fromInt(x: Int): Short = x.toShort$/;"	m
fromInt	scala/math/Numeric.scala	/^  def fromInt(x: Int): T$/;"	m
fromIterable	scala/collection/immutable/PagedSeq.scala	/^  def fromIterable[T: ClassTag](source: Iterable[T]): PagedSeq[T] =$/;"	m
fromIterable	scala/io/Source.scala	/^  def fromIterable(iterable: Iterable[Char]): Source = new Source {$/;"	m
fromIterator	scala/collection/immutable/List.scala	/^  def fromIterator[A](it: Iterator[A]): List[A] = it.toList$/;"	m
fromIterator	scala/collection/immutable/PagedSeq.scala	/^  def fromIterator[T: ClassTag](source: Iterator[T]): PagedSeq[T] =$/;"	m
fromLessThan	scala/math/Ordering.scala	/^  def fromLessThan[T](cmp: (T, T) => Boolean): Ordering[T] = new Ordering[T] {$/;"	m
fromLines	scala/collection/immutable/PagedSeq.scala	/^  def fromLines(source: Iterable[String]): PagedSeq[Char] =$/;"	m
fromLines	scala/collection/immutable/PagedSeq.scala	/^  def fromLines(source: Iterator[String]): PagedSeq[Char] = {$/;"	m
fromMissingAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromMissingAttribute(allKeys: Set[String]) = {$/;"	m
fromMissingAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromMissingAttribute(key: String, tpe: String) =$/;"	m
fromNanos	scala/concurrent/duration/Duration.scala	/^  def fromNanos(nanos: Double): Duration = {$/;"	m
fromNanos	scala/concurrent/duration/Duration.scala	/^  def fromNanos(nanos: Long): FiniteDuration = {$/;"	m
fromNonEmptyElement	scala/xml/dtd/ValidationException.scala	/^  def fromNonEmptyElement() =$/;"	m
fromNow	scala/concurrent/duration/Duration.scala	/^  def fromNow: Deadline = Deadline.now + this$/;"	m
fromNow	scala/concurrent/duration/package.scala	/^  object fromNow$/;"	o
fromRawBytes	scala/io/Source.scala	/^  def fromRawBytes(bytes: Array[Byte]): Source =$/;"	m
fromReader	scala/collection/immutable/PagedSeq.scala	/^  def fromReader(source: Reader): PagedSeq[Char] =$/;"	m
fromReader	scala/xml/XML.scala	/^  def fromReader(reader: Reader)        = new InputSource(reader)$/;"	m
fromSeq	scala/xml/NodeSeq.scala	/^  def fromSeq(s: Seq[Node]): NodeSeq = new NodeSeq {$/;"	m
fromSource	scala/collection/immutable/PagedSeq.scala	/^  def fromSource(source: scala.io.Source) =$/;"	m
fromSource	scala/xml/parsing/ConstructingParser.scala	/^  def fromSource(inp: Source, preserveWS: Boolean) =$/;"	m
fromString	scala/io/Source.scala	/^  def fromString(s: String): Source = fromIterable(s)$/;"	m
fromString	scala/xml/TextBuffer.scala	/^  def fromString(str: String): TextBuffer = new TextBuffer() append str$/;"	m
fromString	scala/xml/XML.scala	/^  def fromString(string: String)        = fromReader(new StringReader(string))$/;"	m
fromStrings	scala/collection/immutable/PagedSeq.scala	/^  def fromStrings(source: Iterable[String]): PagedSeq[Char] =$/;"	m
fromStrings	scala/collection/immutable/PagedSeq.scala	/^  def fromStrings(source: Iterator[String]): PagedSeq[Char] = {$/;"	m
fromSysId	scala/xml/XML.scala	/^  def fromSysId(sysID: String)          = new InputSource(sysID)$/;"	m
fromTraversables	scala/collection/parallel/mutable/ParArray.scala	/^  def fromTraversables[T](xss: GenTraversableOnce[T]*) = {$/;"	m
fromTrie	scala/collection/parallel/immutable/ParHashMap.scala	/^  def fromTrie[K, V](t: HashMap[K, V]) = new ParHashMap(t)$/;"	m
fromTrie	scala/collection/parallel/immutable/ParHashSet.scala	/^  def fromTrie[T](t: HashSet[T]) = new ParHashSet(t)$/;"	m
fromURI	scala/io/Source.scala	/^  def fromURI(uri: URI)(implicit codec: Codec): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(s: String)(implicit codec: Codec): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(s: String, enc: String): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(url: URL)(implicit codec: Codec): BufferedSource =$/;"	m
fromURL	scala/io/Source.scala	/^  def fromURL(url: URL, enc: String): BufferedSource =$/;"	m
fromUTF8	scala/io/Codec.scala	/^  def fromUTF8(bytes: Array[Byte]): Array[Char] = fromUTF8(bytes, 0, bytes.length)$/;"	m
fromUTF8	scala/io/Codec.scala	/^  def fromUTF8(bytes: Array[Byte], offset: Int, len: Int): Array[Char] = {$/;"	m
fromUndefinedAttribute	scala/xml/dtd/ValidationException.scala	/^  def fromUndefinedAttribute(key: String) =$/;"	m
fromUndefinedElement	scala/xml/dtd/ValidationException.scala	/^  def fromUndefinedElement(label: String) =$/;"	m
front	scala/collection/immutable/Queue.scala	/^  def front: A = head$/;"	m
front	scala/collection/mutable/Queue.scala	/^  def front: A = head$/;"	m
fronttaken	scala/collection/parallel/immutable/ParRange.scala	/^        val fronttaken = rleft.take(sz)$/;"	V
fst	scala/collection/GenSeqViewLike.scala	/^    protected[this] val fst: B$/;"	V
fst	scala/collection/SeqViewLike.scala	/^  protected def newPrepended[B >: A](elem: B): Transformed[B] = new { protected[this] val fst = elem } with AbstractTransformed[B] with Prepended[B]$/;"	V
fst	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newPrepended[B >: A](elem: B): Transformed[B] = new { protected[this] val fst = elem } with AbstractTransformed[B] with Prepended[B]$/;"	V
fst	scala/io/BytePickle.scala	/^    def fst(p: (a,b)): a = p._1$/;"	m
fst	scala/io/BytePickle.scala	/^    def fst(p: (a,b,c)): a = p._1$/;"	m
fstidx	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fstidx = idx$/;"	V
fstit	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fstit = newIterator(fstidx, fstuntil, fsttotal)$/;"	V
fsttotal	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fsttotal = calcNumElems(idx, divpt, itertable.length, sizeMapBucketSize)$/;"	V
fstuntil	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val fstuntil = divpt$/;"	V
ft	scala/collection/parallel/ParIterableLike.scala	/^    (val ft: First, val st: Second)$/;"	V
ftfuture	scala/collection/parallel/ParIterableLike.scala	/^      val ftfuture = tasksupport.execute(ft)$/;"	V
ftotal	scala/collection/parallel/mutable/ParHashTable.scala	/^        val ftotal = totalsize - stotal$/;"	V
fun	scala/util/continuations/ControlContext.scala	/^final class ControlContext[+A,-B,+C](val fun: (A => B, Exception => B) => C, val x: A) extends Serializable {$/;"	V
fun	scala/util/control/Exception.scala	/^    def fun(f: Throwable => T) = catching(exceptions: _*) withApply f$/;"	m
fun1	scala/util/continuations/ControlContext.scala	/^      val fun1 = (ret1: A => B, thr1: Exception => B) => {$/;"	V
fun1	scala/util/continuations/ControlContext.scala	/^      val fun1 = (ret1: A1 => B1, thr1: Exception => B1) => {$/;"	V
funtil	scala/collection/parallel/mutable/ParHashTable.scala	/^        val funtil = idx + divsz$/;"	V
future	scala/collection/parallel/Tasks.scala	/^    @volatile var future: Future[_] = null$/;"	v
future	scala/collection/parallel/Tasks.scala	/^    \/\/ utb: var future: Future[_] = null$/;"	v
future	scala/concurrent/Promise.scala	/^  def future: Future[T]$/;"	m
future	scala/concurrent/impl/Promise.scala	/^  def future: this.type = this$/;"	m
future	scala/concurrent/ops.scala	/^  def future[A](p: => A)(implicit runner: FutureTaskRunner = defaultRunner): () => A = {$/;"	m
future	scala/concurrent/package.scala	/^  def future[T](body: =>T)(implicit execctx: ExecutionContext): Future[T] = Future[T](body)$/;"	m
futures	scala/concurrent/Future.scala	/^    val futures = futurestravonce.toBuffer$/;"	V
fv	scala/runtime/ScalaRunTime.scala	/^    val fv = dv.toFloat$/;"	V
g	scala/concurrent/Future.scala	/^   *  val g = f collect {$/;"	V
g	scala/concurrent/Future.scala	/^   *  val g = f filter { _ % 2 == 1 }$/;"	V
g	scala/concurrent/Future.scala	/^   *  val g = future { 5 }$/;"	V
g	scala/concurrent/Future.scala	/^ *  val g = future { 3 }$/;"	V
gap	scala/collection/Iterator.scala	/^    val gap = new scala.collection.mutable.Queue[A]$/;"	V
gap	scala/collection/immutable/Range.scala	/^      val gap: Long    = end.toLong - start.toLong$/;"	V
gcasRead	scala/collection/concurrent/TrieMap.scala	/^  def gcasRead(ct: TrieMap[K, V]): MainNode[K, V] = GCAS_READ(ct)$/;"	m
gcd	scala/math/BigInt.scala	/^  def gcd (that: BigInt): BigInt = new BigInt(this.bigInteger.gcd(that.bigInteger))$/;"	m
gen	scala/collection/concurrent/INodeBase.java	/^    public final Gen gen;$/;"	f	class:INodeBase
gen	scala/collection/concurrent/TrieMap.scala	/^    val gen = new Gen$/;"	V
generic	scala/collection/generic/BitOperations.scala	/^package generic$/;"	p
generic	scala/collection/generic/BitSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/CanBuildFrom.scala	/^package generic$/;"	p
generic	scala/collection/generic/CanCombineFrom.scala	/^package generic$/;"	p
generic	scala/collection/generic/ClassTagTraversableFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/Clearable.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenSeqFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenTraversableFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericClassTagCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericOrderedCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericSeqCompanion.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericSetTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/GenericTraversableTemplate.scala	/^package generic$/;"	p
generic	scala/collection/generic/Growable.scala	/^package generic$/;"	p
generic	scala/collection/generic/HasNewBuilder.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableSortedMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/ImmutableSortedSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/IsTraversableLike.scala	/^package generic$/;"	p
generic	scala/collection/generic/IsTraversableOnce.scala	/^package generic$/;"	p
generic	scala/collection/generic/MapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/MutableMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/MutableSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/MutableSortedSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/OrderedTraversableFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/SeqFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/SetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/Shrinkable.scala	/^package generic$/;"	p
generic	scala/collection/generic/SliceInterval.scala	/^package generic$/;"	p
generic	scala/collection/generic/Sorted.scala	/^package generic$/;"	p
generic	scala/collection/generic/SortedMapFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/SortedSetFactory.scala	/^package generic$/;"	p
generic	scala/collection/generic/Subtractable.scala	/^package generic$/;"	p
generic	scala/collection/generic/TraversableFactory.scala	/^package generic$/;"	p
generic.BitOperations.Int.highestOneBit	scala/collection/mutable/OpenHashMap.scala	/^  import generic.BitOperations.Int.highestOneBit$/;"	i
generic.CanBuildFrom	scala/Enumeration.scala	/^    import generic.CanBuildFrom$/;"	i
generic.CanBuildFrom	scala/LowPriorityImplicits.scala	/^import generic.CanBuildFrom$/;"	i
generic.CanBuildFrom	scala/Predef.scala	/^import generic.CanBuildFrom$/;"	i
generic.CanBuildFrom	scala/collection/TraversableOnce.scala	/^import generic.CanBuildFrom$/;"	i
generic.CanBuildFrom	scala/collection/generic/package.scala	/^import generic.CanBuildFrom$/;"	i
generic._	scala/collection/BitSet.scala	/^import generic._$/;"	i
generic._	scala/collection/BitSetLike.scala	/^import generic._$/;"	i
generic._	scala/collection/DefaultMap.scala	/^import generic._$/;"	i
generic._	scala/collection/GenIterable.scala	/^import generic._$/;"	i
generic._	scala/collection/GenIterableView.scala	/^import generic._$/;"	i
generic._	scala/collection/GenIterableViewLike.scala	/^import generic._$/;"	i
generic._	scala/collection/GenMap.scala	/^import generic._$/;"	i
generic._	scala/collection/GenSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/GenSeqLike.scala	/^import generic._$/;"	i
generic._	scala/collection/GenSeqView.scala	/^import generic._$/;"	i
generic._	scala/collection/GenSet.scala	/^import generic._$/;"	i
generic._	scala/collection/GenTraversable.scala	/^import generic._$/;"	i
generic._	scala/collection/GenTraversableLike.scala	/^import generic._$/;"	i
generic._	scala/collection/GenTraversableView.scala	/^import generic._$/;"	i
generic._	scala/collection/GenTraversableViewLike.scala	/^import generic._$/;"	i
generic._	scala/collection/IndexedSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/IndexedSeqLike.scala	/^import generic._$/;"	i
generic._	scala/collection/IndexedSeqOptimized.scala	/^import generic._$/;"	i
generic._	scala/collection/Iterable.scala	/^import generic._$/;"	i
generic._	scala/collection/IterableLike.scala	/^import generic._$/;"	i
generic._	scala/collection/IterableProxy.scala	/^import generic._$/;"	i
generic._	scala/collection/IterableProxyLike.scala	/^import generic._$/;"	i
generic._	scala/collection/IterableView.scala	/^import generic._$/;"	i
generic._	scala/collection/IterableViewLike.scala	/^import generic._$/;"	i
generic._	scala/collection/LinearSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/LinearSeqLike.scala	/^import generic._$/;"	i
generic._	scala/collection/LinearSeqOptimized.scala	/^import generic._$/;"	i
generic._	scala/collection/Map.scala	/^import generic._$/;"	i
generic._	scala/collection/MapLike.scala	/^import generic._$/;"	i
generic._	scala/collection/MapProxyLike.scala	/^import generic._$/;"	i
generic._	scala/collection/Seq.scala	/^import generic._$/;"	i
generic._	scala/collection/SeqLike.scala	/^import generic._$/;"	i
generic._	scala/collection/SeqProxyLike.scala	/^import generic._$/;"	i
generic._	scala/collection/SeqView.scala	/^import generic._$/;"	i
generic._	scala/collection/SeqViewLike.scala	/^import generic._$/;"	i
generic._	scala/collection/Set.scala	/^import generic._$/;"	i
generic._	scala/collection/SetLike.scala	/^import generic._$/;"	i
generic._	scala/collection/SetProxyLike.scala	/^import generic._$/;"	i
generic._	scala/collection/SortedMap.scala	/^import generic._$/;"	i
generic._	scala/collection/SortedMapLike.scala	/^import generic._$/;"	i
generic._	scala/collection/SortedSet.scala	/^import generic._$/;"	i
generic._	scala/collection/SortedSetLike.scala	/^import generic._$/;"	i
generic._	scala/collection/Traversable.scala	/^import generic._$/;"	i
generic._	scala/collection/TraversableLike.scala	/^import generic._$/;"	i
generic._	scala/collection/TraversableProxyLike.scala	/^import generic._$/;"	i
generic._	scala/collection/TraversableView.scala	/^import generic._$/;"	i
generic._	scala/collection/TraversableViewLike.scala	/^import generic._$/;"	i
generic._	scala/collection/concurrent/TrieMap.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/BitSet.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/DefaultMap.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/HashMap.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/HashSet.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/IndexedSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Iterable.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/LinearSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/List.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/ListMap.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/ListSet.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Map.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/MapLike.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/NumericRange.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Queue.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Seq.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Set.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/SortedMap.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/SortedSet.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Stack.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Stream.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/StreamViewLike.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/StringLike.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/Traversable.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/TreeMap.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/TreeSet.scala	/^import generic._$/;"	i
generic._	scala/collection/immutable/WrappedString.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ArrayBuffer.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ArrayBuilder.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ArrayLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ArraySeq.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ArrayStack.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/BitSet.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Buffer.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/BufferLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/BufferProxy.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Builder.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/DoubleLinkedList.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/GrowingBuilder.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/HashMap.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/HashSet.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/IndexedSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/IndexedSeqLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/IndexedSeqOptimized.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/IndexedSeqView.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Iterable.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/LinearSeq.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/LinkedHashMap.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/LinkedHashSet.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/LinkedList.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/LinkedListLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ListBuffer.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ListMap.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Map.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/MapLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/MutableList.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/PriorityQueue.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Queue.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/ResizableArray.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Seq.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/SeqLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Set.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/SetBuilder.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/SetLike.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/SortedSet.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Stack.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/Traversable.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/TreeSet.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/WeakHashMap.scala	/^import generic._$/;"	i
generic._	scala/collection/mutable/WrappedArrayBuilder.scala	/^import generic._$/;"	i
generic.{ CanBuildFrom => CBF, _ }	scala/collection/GenIterableLike.scala	/^import generic.{ CanBuildFrom => CBF, _ }$/;"	i
generic.{ CanBuildFrom }	scala/xml/NodeSeq.scala	/^import generic.{ CanBuildFrom }$/;"	i
genericBuilder	scala/collection/generic/GenericTraversableTemplate.scala	/^  def genericBuilder[B]: Builder[B, CC[B]] = companion.newBuilder[B]$/;"	m
genericClassManifestBuilder	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^  def genericClassManifestBuilder[B](implicit manifest: ClassManifest[B]): Builder[B, CC[B]] = genericClassTagBuilder[B](manifest)$/;"	m
genericClassTagBuilder	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^  def genericClassTagBuilder[B](implicit tag: ClassTag[B]): Builder[B, CC[B]] = classTagCompanion.newBuilder[B]$/;"	m
genericCombiner	scala/collection/generic/GenericParTemplate.scala	/^  def genericCombiner[B]: Combiner[B, CC[B]] = {$/;"	m
genericMapCombiner	scala/collection/generic/GenericParTemplate.scala	/^  def genericMapCombiner[P, Q]: Combiner[(P, Q), CC[P, Q]] = {$/;"	m
genericOrderedBuilder	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^  def genericOrderedBuilder[B](implicit ord: Ordering[B]): Builder[B, CC[B]] = orderedCompanion.newBuilder[B]$/;"	m
get	scala/Option.scala	/^  def get = throw new NoSuchElementException("None.get")$/;"	m
get	scala/Option.scala	/^  def get = x$/;"	m
get	scala/Option.scala	/^  def get: A$/;"	m
get	scala/collection/GenMapLike.scala	/^  def get(key: A): Option[B]$/;"	m
get	scala/collection/Map.scala	/^    def get(key: A)                 = underlying.get(key) \/\/ removed in 2.9: orElse Some(default(key))$/;"	m
get	scala/collection/MapLike.scala	/^    def get(key: A) = if (!p(key)) None else self.get(key)$/;"	m
get	scala/collection/MapLike.scala	/^    def get(key: A) = self.get(key).map(f)$/;"	m
get	scala/collection/MapLike.scala	/^  def get(key: A): Option[B]$/;"	m
get	scala/collection/concurrent/TrieMap.scala	/^  def get(k: K) = listmap.get(k)$/;"	m
get	scala/collection/concurrent/TrieMap.scala	/^  def get(k: K): Option[V] = {$/;"	m
get	scala/collection/convert/Wrappers.scala	/^    def get(i: Int) = underlying(i)$/;"	m
get	scala/collection/convert/Wrappers.scala	/^    def get(k: A) = {$/;"	m
get	scala/collection/convert/Wrappers.scala	/^    def get(k: String) = {$/;"	m
get	scala/collection/convert/Wrappers.scala	/^    def get(key: AnyRef) = try {$/;"	m
get	scala/collection/immutable/HashMap.scala	/^  def get(key: A): Option[B] =$/;"	m
get	scala/collection/immutable/ListMap.scala	/^  def get(key: A): Option[B] = None$/;"	m
get	scala/collection/immutable/Map.scala	/^    def get(key: A): Option[B] =$/;"	m
get	scala/collection/immutable/Map.scala	/^    def get(key: Any): Option[Nothing] = None$/;"	m
get	scala/collection/immutable/RedBlackTree.scala	/^  def get[A, B](tree: Tree[A, B], x: A)(implicit ordering: Ordering[A]): Option[B] = lookup(tree, x) match {$/;"	m
get	scala/collection/mutable/DefaultMapModel.scala	/^  def get(key: A): Option[B] = {$/;"	m
get	scala/collection/mutable/HashMap.scala	/^  def get(key: A): Option[B] = {$/;"	m
get	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  def get(key: A): Option[B] = imap.get(key)$/;"	m
get	scala/collection/mutable/LinkedHashMap.scala	/^  def get(key: A): Option[B] = {$/;"	m
get	scala/collection/mutable/LinkedListLike.scala	/^  def get(n: Int): Option[A] = {$/;"	m
get	scala/collection/mutable/ListMap.scala	/^  def get(key: A): Option[B] = elems find (_._1 == key) map (_._2)$/;"	m
get	scala/collection/mutable/Map.scala	/^    def get(key: A) = self.get(key)$/;"	m
get	scala/collection/mutable/MutableList.scala	/^  def get(n: Int): Option[A] = first0.get(n)$/;"	m
get	scala/collection/mutable/OpenHashMap.scala	/^  def get(key : Key) : Option[Value] = {$/;"	m
get	scala/collection/parallel/ParMap.scala	/^    def get(key: A)                 = underlying.get(key)$/;"	m
get	scala/collection/parallel/ParMapLike.scala	/^    def get(key: K) = if (!p(key)) None else self.get(key)$/;"	m
get	scala/collection/parallel/ParMapLike.scala	/^    def get(key: K) = self.get(key).map(f)$/;"	m
get	scala/collection/parallel/immutable/ParHashMap.scala	/^  def get(k: K) = trie.get(k)$/;"	m
get	scala/collection/parallel/mutable/ParHashMap.scala	/^  def get(key: K): Option[V] = {$/;"	m
get	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def get(key: K): Option[V] = ctrie.get(key)$/;"	m
get	scala/concurrent/SyncVar.scala	/^  def get(timeout: Long): Option[A] = synchronized {$/;"	m
get	scala/concurrent/SyncVar.scala	/^  def get: A = synchronized {$/;"	m
get	scala/ref/Reference.scala	/^  def get: Option[T]$/;"	m
get	scala/sys/BooleanProp.scala	/^    def get: String = "" + value$/;"	m
get	scala/sys/Prop.scala	/^  def get: String$/;"	m
get	scala/sys/PropImpl.scala	/^  def get: String =$/;"	m
get	scala/sys/SystemProperties.scala	/^  def get(key: String) =$/;"	m
get	scala/util/Either.scala	/^    def get = e match {$/;"	m
get	scala/util/Try.scala	/^  def get = value$/;"	m
get	scala/util/Try.scala	/^  def get: T = throw exception$/;"	m
get	scala/util/Try.scala	/^  def get: T$/;"	m
get	scala/util/parsing/combinator/Parsers.scala	/^    def get: Nothing = scala.sys.error("No result when parsing failed")$/;"	m
get	scala/util/parsing/combinator/Parsers.scala	/^    def get: T = result$/;"	m
get	scala/util/parsing/combinator/Parsers.scala	/^    def get: T$/;"	m
getClass	scala/AnyVal.scala	/^  def getClass(): Class[_ <: AnyVal] = null$/;"	m
getClassForName	scala/compat/Platform.scala	/^  def getClassForName(name: String): Class[_] = java.lang.Class.forName(name)$/;"	m
getContentModel	scala/xml/dtd/ElementValidator.scala	/^  def getContentModel = contentModel$/;"	m
getDirectionality	scala/runtime/RichChar.scala	/^  def getDirectionality: Byte           = Character.getDirectionality(self)$/;"	m
getElementFor	scala/util/parsing/ast/Binders.scala	/^    def getElementFor(b: binderType): Element = substitution(b)$/;"	m
getErr	scala/sys/process/BasicIO.scala	/^  def getErr(log: Option[ProcessLogger]) = log match {$/;"	m
getHead	scala/util/parsing/combinator/PackratParsers.scala	/^    def getHead = headParser$/;"	m
getInt	scala/concurrent/impl/ExecutionContextImpl.scala	/^    def getInt(name: String, f: String => Int): Int =$/;"	m
getIterable	scala/xml/dtd/ElementValidator.scala	/^  def getIterable(nodes: Seq[Node], skipPCDATA: Boolean): Iterable[ElemName] = {$/;"	m
getKey	scala/collection/convert/Wrappers.scala	/^            def getKey = k$/;"	m
getLabels	scala/xml/dtd/ContentModel.scala	/^  def getLabels(r: RegExp): Set[String] = {$/;"	m
getLines	scala/io/Source.scala	/^  def getLines(): Iterator[String] = new LineIterator()$/;"	m
getName	scala/xml/Utility.scala	/^  def getName(s: String, index: Int): String = {$/;"	m
getNamespace	scala/xml/Attribute.scala	/^  def getNamespace(owner: Node): String$/;"	m
getNamespace	scala/xml/MetaData.scala	/^  def getNamespace(owner: Node): String$/;"	m
getNamespace	scala/xml/Node.scala	/^  def getNamespace(pre: String): String = if (scope eq null) null else scope.getURI(pre)$/;"	m
getNamespace	scala/xml/Null.scala	/^  def getNamespace(owner: Node) = null$/;"	m
getNamespace	scala/xml/PrefixedAttribute.scala	/^  def getNamespace(owner: Node) =$/;"	m
getNumericValue	scala/runtime/RichChar.scala	/^  def getNumericValue: Int              = Character.getNumericValue(self)$/;"	m
getOrElse	scala/collection/GenMapLike.scala	/^  def getOrElse[B1 >: B](key: A, default: => B1): B1$/;"	m
getOrElse	scala/collection/MapLike.scala	/^  def getOrElse[B1 >: B](key: A, default: => B1): B1 = get(key) match {$/;"	m
getOrElse	scala/collection/parallel/ParMapLike.scala	/^  def getOrElse[U >: V](key: K, default: => U): U = get(key) match {$/;"	m
getOrElse	scala/util/Either.scala	/^    def getOrElse[AA >: A](or: => AA) = e match {$/;"	m
getOrElse	scala/util/Either.scala	/^    def getOrElse[BB >: B](or: => BB) = e match {$/;"	m
getOrElse	scala/util/Try.scala	/^  def getOrElse[U >: T](default: => U): U =$/;"	m
getOrElse	scala/util/parsing/combinator/Parsers.scala	/^    def getOrElse[B >: T](default: => B): B =$/;"	m
getOrElseUpdate	scala/collection/mutable/MapLike.scala	/^  def getOrElseUpdate(key: A, op: => B): B =$/;"	m
getPos	scala/util/parsing/combinator/PackratParsers.scala	/^    def getPos: Position = getPosFromResult(seed)$/;"	m
getPrefix	scala/xml/NamespaceBinding.scala	/^  def getPrefix(_uri: String): String =$/;"	m
getProperty	scala/collection/convert/Wrappers.scala	/^    def getProperty(key: String) = underlying.getProperty(key)$/;"	m
getProperty	scala/collection/convert/Wrappers.scala	/^    def getProperty(key: String, defaultValue: String) =$/;"	m
getResult	scala/util/parsing/combinator/PackratParsers.scala	/^    def getResult: ParseResult[T] = r match {$/;"	m
getRootCause	scala/xml/include/XIncludeException.scala	/^  def getRootCause(): Throwable = this.rootCause$/;"	m
getStackTraceString	scala/runtime/RichException.scala	/^  def getStackTraceString = exc.getStackTrace().mkString("", EOL, EOL)$/;"	m
getState	scala/concurrent/impl/AbstractPromise.java	/^    protected final Object getState() {$/;"	m	class:AbstractPromise
getType	scala/runtime/RichChar.scala	/^  def getType: Int                      = Character.getType(self)$/;"	m
getURI	scala/xml/NamespaceBinding.scala	/^  def getURI(_prefix: String): String =$/;"	m
getUniversalKey	scala/xml/MetaData.scala	/^  def getUniversalKey(attrib: MetaData, scope: NamespaceBinding) = attrib match {$/;"	m
getValue	scala/collection/convert/Wrappers.scala	/^            def getValue = v$/;"	m
getc	scala/io/Source.scala	/^    def getc() = iter.hasNext && {$/;"	m
getter	scala/annotation/target/package.scala	/^  type getter = scala.annotation.meta.getter$/;"	T
global	scala/concurrent/ExecutionContext.scala	/^    implicit lazy val global: ExecutionContextExecutor = impl.ExecutionContextImpl.fromExecutor(null: Executor)$/;"	V
global	scala/concurrent/ExecutionContext.scala	/^  def global: ExecutionContextExecutor = Implicits.global$/;"	m
globalNumberParser	scala/util/parsing/json/JSON.scala	/^  def globalNumberParser : NumericParser = defaultNumberParser$/;"	m
globalNumberParser_=	scala/util/parsing/json/JSON.scala	/^  def globalNumberParser_=(f: NumericParser) { defaultNumberParser = f }$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): List[t] = (for (x <- xs) yield f(x)).toList$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): Option[t] = (for (x <- xs) yield f(x))$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): Scope[bt] = { val newScope = new Scope[bt]()$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): String = f(s)$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): UnderBinder[bt, st] = UnderBinder(f(ub.scope), f(ub.element))$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^    def gmap(f: Mapper): NameElement = self match {$/;"	m
gmap	scala/util/parsing/ast/Binders.scala	/^    def gmap(f: Mapper): T$/;"	m
go	scala/collection/GenTraversableViewLike.scala	/^      var go = false$/;"	v
go	scala/collection/IterableLike.scala	/^    var go = false$/;"	v
go	scala/collection/TraversableLike.scala	/^    var go = false$/;"	v
got	scala/sys/package.scala	/^    val got    = Thread.enumerate(tarray)$/;"	V
greater	scala/xml/Utility.scala	/^    val greater = sort(md.filter { m => m.key > key })$/;"	V
greatest	scala/collection/immutable/RedBlackTree.scala	/^  def greatest[A, B](tree: Tree[A, B]): Tree[A, B] = {$/;"	m
greatest	scala/collection/immutable/TreeMap.scala	/^    val greatest = RB.greatest(tree)$/;"	V
group	scala/text/Document.scala	/^  def group(d: Document): Document = DocGroup(d)$/;"	m
group	scala/util/matching/Regex.scala	/^    def group(i: Int): String =$/;"	m
group	scala/util/matching/Regex.scala	/^    def group(id: String): String = nameToIndex.get(id) match {$/;"	m
groupBy	scala/collection/GenTraversableLike.scala	/^  def groupBy[K](f: A => K): GenMap[K, Repr]$/;"	m
groupBy	scala/collection/TraversableLike.scala	/^  def groupBy[K](f: A => K): immutable.Map[K, Repr] = {$/;"	m
groupBy	scala/collection/parallel/ParIterableLike.scala	/^  def groupBy[K](f: T => K): immutable.ParMap[K, Repr] = {$/;"	m
groupByKey	scala/collection/parallel/immutable/ParHashMap.scala	/^  def groupByKey[Repr](cbf: () => Combiner[V, Repr]): ParHashMap[K, Repr] = {$/;"	m
groupCount	scala/util/matching/Regex.scala	/^    def groupCount = matcher.groupCount$/;"	m
groupCount	scala/util/matching/Regex.scala	/^    def groupCount: Int$/;"	m
groupNames	scala/util/matching/Regex.scala	/^              val groupNames: Seq[String]) extends MatchData {$/;"	V
groupNames	scala/util/matching/Regex.scala	/^    val groupNames: Seq[String]$/;"	V
grouped	scala/collection/IterableLike.scala	/^  def grouped(size: Int): Iterator[Repr] =$/;"	m
grouped	scala/collection/Iterator.scala	/^  def grouped[B >: A](size: Int): GroupedIterator[B] =$/;"	m
gt	scala/concurrent/duration/Duration.scala	/^  def gt(other: Duration)    = this > other$/;"	m
gt	scala/math/PartialOrdering.scala	/^  def gt(x: T, y: T): Boolean = gteq(x, y) && !equiv(x, y)$/;"	m
gteq	scala/concurrent/duration/Duration.scala	/^  def gteq(other: Duration)  = this >= other$/;"	m
gteq	scala/math/PartialOrdering.scala	/^  def gteq(x: T, y: T): Boolean = lteq(y, x)$/;"	m
guard	scala/util/parsing/combinator/Parsers.scala	/^  def guard[T](p: => Parser[T]): Parser[T] = Parser { in =>$/;"	m
h	scala/collection/TraversableOnce.scala	/^   *      scala> val h = a.addString(b)$/;"	V
h	scala/collection/immutable/HashMap.scala	/^    var h: Int = hcode + ~(hcode << 9)$/;"	v
h	scala/collection/immutable/HashSet.scala	/^    var h: Int = hcode + ~(hcode << 9)$/;"	v
h	scala/collection/mutable/FlatHashTable.scala	/^      \/\/var h: Int = hcode + ~(hcode << 9)$/;"	v
h	scala/collection/mutable/FlatHashTable.scala	/^    var h = index(elemHashCode(elem))$/;"	v
h	scala/collection/mutable/HashTable.scala	/^        val h = index(elemHashCode(e.key))$/;"	V
h	scala/collection/mutable/HashTable.scala	/^      \/\/ var h = hcode + (hcode << 12)$/;"	v
h	scala/collection/mutable/HashTable.scala	/^      \/\/ var h: Int = hcode + ~(hcode << 9)$/;"	v
h	scala/collection/mutable/HashTable.scala	/^    val h = index(elemHashCode(key))$/;"	V
h	scala/collection/mutable/OpenHashMap.scala	/^    var h = key.##$/;"	v
h	scala/collection/mutable/PriorityQueue.scala	/^        val h = as(k)$/;"	V
h	scala/collection/mutable/ResizableArray.scala	/^    val h = array(a)$/;"	V
h	scala/collection/parallel/mutable/ParHashMap.scala	/^      var h = index(elemHashCode(e.key))$/;"	v
h	scala/collection/parallel/mutable/ParHashSet.scala	/^      var h = insertAt$/;"	v
h	scala/concurrent/Future.scala	/^   *  val h = f collect {$/;"	V
h	scala/concurrent/Future.scala	/^   *  val h = f fallbackTo g$/;"	V
h	scala/concurrent/Future.scala	/^   *  val h = f filter { _ % 2 == 0 }$/;"	V
h	scala/concurrent/Future.scala	/^ *  val h = for {$/;"	V
h	scala/util/MurmurHash.scala	/^      val h = i.##$/;"	V
h	scala/util/MurmurHash.scala	/^    var h = startHash(a.length * seedArray)$/;"	v
h	scala/util/MurmurHash.scala	/^    var h = startHash(s.length * seedString)$/;"	v
h	scala/util/MurmurHash.scala	/^    var h = startHash(seed * n)$/;"	v
h	scala/util/MurmurHash.scala	/^  private var h = startHash(seed)$/;"	v
h	scala/util/hashing/MurmurHash3.scala	/^      val h = x.##$/;"	V
h	scala/util/hashing/MurmurHash3.scala	/^      var h = seed$/;"	v
h	scala/util/hashing/MurmurHash3.scala	/^    var h = hash$/;"	v
h	scala/util/hashing/MurmurHash3.scala	/^    var h = mixLast(hash, data)$/;"	v
h	scala/util/hashing/MurmurHash3.scala	/^    var h = seed$/;"	v
h0	scala/collection/mutable/FlatHashTable.scala	/^        var h0 = h$/;"	v
h1	scala/collection/mutable/FlatHashTable.scala	/^        var h1 = (h0 + 1) % table.length$/;"	v
h2	scala/collection/mutable/FlatHashTable.scala	/^          val h2 = index(elemHashCode(table(h1).asInstanceOf[A]))$/;"	V
hStack	scala/xml/parsing/FactoryAdapter.scala	/^  val hStack      = new mutable.Stack[Node]   \/\/ [ element ] contains siblings$/;"	V
h_per_ns	scala/concurrent/duration/Duration.scala	/^  private[this] final val   h_per_ns = min_per_ns * 60$/;"	V
half	scala/collection/parallel/ParIterableLike.scala	/^      val half = howmany \/ 2$/;"	V
handle	scala/xml/parsing/MarkupParser.scala	/^  private val handle: MarkupHandler = this$/;"	V
handleOutOrError	scala/sys/process/ProcessImpl.scala	/^      def handleOutOrError(fromOutput: InputStream) = currentSource put Some(fromOutput)$/;"	m
handling	scala/util/control/Exception.scala	/^  def handling[T](exceptions: Class[_]*) = {$/;"	m
handoff	scala/collection/parallel/mutable/ParArray.scala	/^  def handoff[T](arr: Array[T]): ParArray[T] = wrapOrRebuild(arr, arr.length)$/;"	m
handoff	scala/collection/parallel/mutable/ParArray.scala	/^  def handoff[T](arr: Array[T], sz: Int): ParArray[T] = wrapOrRebuild(arr, sz)$/;"	m
hasDefiniteSize	scala/collection/GenTraversableOnce.scala	/^  def hasDefiniteSize: Boolean$/;"	m
hasDefiniteSize	scala/collection/Iterator.scala	/^  def hasDefiniteSize = isEmpty$/;"	m
hasDefiniteSize	scala/collection/TraversableLike.scala	/^  def hasDefiniteSize = true$/;"	m
hasDefiniteSize	scala/collection/TraversableOnce.scala	/^  def hasDefiniteSize: Boolean$/;"	m
hasDefiniteSize	scala/collection/parallel/ParIterableLike.scala	/^  def hasDefiniteSize = true$/;"	m
hasExitValue	scala/sys/process/ProcessBuilder.scala	/^  def hasExitValue: Boolean$/;"	m
hasExitValue	scala/sys/process/ProcessBuilderImpl.scala	/^    def hasExitValue = true$/;"	m
hasMatch	scala/collection/generic/BitOperations.scala	/^    def hasMatch(key: Int, prefix: Int, m: Int) = mask(key, m) == prefix$/;"	m
hasMatch	scala/collection/generic/BitOperations.scala	/^    def hasMatch(key: Long, prefix: Long, m: Long) = mask(key, m) == prefix$/;"	m
hasMoreElements	scala/collection/convert/Wrappers.scala	/^    def hasMoreElements = underlying.hasNext$/;"	m
hasNext	scala/Product.scala	/^    def hasNext = c < cmax$/;"	m
hasNext	scala/collection/BitSetLike.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/IndexedSeqLike.scala	/^    def hasNext: Boolean = index < end$/;"	m
hasNext	scala/collection/IndexedSeqOptimized.scala	/^    def hasNext: Boolean = 0 < i$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = !lookahead.isEmpty || { skip(); self.hasNext }$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = it.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = lookahead.nonEmpty || advance()$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = remaining > 0 && self.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext = { skip(); self.hasNext }$/;"	m
hasNext	scala/collection/Iterator.scala	/^      def hasNext: Boolean = self.synchronized {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = cur.hasNext || (!selfExhausted && {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = filled || fill()$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = hdDefined || tail.hasNext && {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext && that.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext || count < len$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext || that.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = self.hasNext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext = true$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext =$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = (step <= 0 || i < end) && (step >= 0 || i > end)$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = false$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = hasnext$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = hdDefined || {$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = i < end$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = i < len$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean = true$/;"	m
hasNext	scala/collection/Iterator.scala	/^    def hasNext: Boolean =$/;"	m
hasNext	scala/collection/Iterator.scala	/^    var hasNext = true$/;"	v
hasNext	scala/collection/Iterator.scala	/^  def hasNext: Boolean$/;"	m
hasNext	scala/collection/LinearSeqLike.scala	/^    def hasNext: Boolean = !these.isEmpty$/;"	m
hasNext	scala/collection/MapLike.scala	/^    def hasNext = iter.hasNext$/;"	m
hasNext	scala/collection/SeqLike.scala	/^    def hasNext = _hasNext$/;"	m
hasNext	scala/collection/SetLike.scala	/^    def hasNext = _hasNext$/;"	m
hasNext	scala/collection/SetLike.scala	/^    def hasNext = len <= elms.size || itr.hasNext$/;"	m
hasNext	scala/collection/TraversableOnce.scala	/^      def hasNext: Boolean = it.hasNext || its.hasNext && { it = its.next.toIterator; hasNext }$/;"	m
hasNext	scala/collection/concurrent/TrieMap.scala	/^  def hasNext = (current ne null) || (subiter ne null)$/;"	m
hasNext	scala/collection/convert/Wrappers.scala	/^        def hasNext = ui.hasNext$/;"	m
hasNext	scala/collection/convert/Wrappers.scala	/^      def hasNext = ui.hasNext$/;"	m
hasNext	scala/collection/convert/Wrappers.scala	/^    def hasNext = underlying.hasMoreElements$/;"	m
hasNext	scala/collection/convert/Wrappers.scala	/^    def hasNext = underlying.hasNext$/;"	m
hasNext	scala/collection/immutable/IntMap.scala	/^  def hasNext = index != 0$/;"	m
hasNext	scala/collection/immutable/ListMap.scala	/^      def hasNext = !self.isEmpty$/;"	m
hasNext	scala/collection/immutable/ListSet.scala	/^    def hasNext = that.nonEmpty$/;"	m
hasNext	scala/collection/immutable/LongMap.scala	/^  def hasNext = index != 0$/;"	m
hasNext	scala/collection/immutable/Stream.scala	/^  def hasNext: Boolean = these.v.nonEmpty$/;"	m
hasNext	scala/collection/immutable/StringLike.scala	/^    def hasNext: Boolean = index < len$/;"	m
hasNext	scala/collection/immutable/TrieIterator.scala	/^  def hasNext = (subIter ne null) || depth >= 0$/;"	m
hasNext	scala/collection/immutable/Vector.scala	/^    def hasNext: Boolean = 0 < i$/;"	m
hasNext	scala/collection/immutable/Vector.scala	/^  def hasNext = _hasNext$/;"	m
hasNext	scala/collection/mutable/ArrayStack.scala	/^    def hasNext = currentIndex > 0$/;"	m
hasNext	scala/collection/mutable/FlatHashTable.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/mutable/HashMap.scala	/^    def hasNext = iter.hasNext$/;"	m
hasNext	scala/collection/mutable/HashTable.scala	/^    def hasNext = es != null$/;"	m
hasNext	scala/collection/mutable/LinkedHashMap.scala	/^    def hasNext = cur ne null$/;"	m
hasNext	scala/collection/mutable/LinkedHashSet.scala	/^    def hasNext = cur ne null$/;"	m
hasNext	scala/collection/mutable/LinkedListLike.scala	/^    def hasNext = elems.nonEmpty$/;"	m
hasNext	scala/collection/mutable/ListBuffer.scala	/^    def hasNext: Boolean = delivered < ListBuffer.this.length$/;"	m
hasNext	scala/collection/mutable/OpenHashMap.scala	/^    def hasNext = {advance(); index <= mask }$/;"	m
hasNext	scala/collection/mutable/PriorityQueue.scala	/^    def hasNext: Boolean = i < resarr.p_size0$/;"	m
hasNext	scala/collection/mutable/PriorityQueue.scala	/^    def hasNext: Boolean = i >= 1$/;"	m
hasNext	scala/collection/mutable/UnrolledBuffer.scala	/^    def hasNext = node ne null$/;"	m
hasNext	scala/collection/parallel/ParMapLike.scala	/^      def hasNext = iter.hasNext$/;"	m
hasNext	scala/collection/parallel/ParSeqLike.scala	/^    def hasNext = i < end$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = if (curr.hasNext) true else if (curr eq self) {$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = remaining > 0$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = self.hasNext && that.hasNext$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = self.hasNext || that.hasNext$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = self.hasNext$/;"	m
hasNext	scala/collection/parallel/RemainsIterator.scala	/^    def hasNext = trio.hasNext$/;"	m
hasNext	scala/collection/parallel/Splitter.scala	/^    def hasNext = false$/;"	m
hasNext	scala/collection/parallel/immutable/ParHashMap.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/parallel/immutable/ParHashSet.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/collection/parallel/immutable/package.scala	/^      def hasNext = i < until$/;"	m
hasNext	scala/collection/parallel/mutable/ParArray.scala	/^    def hasNext = i < until$/;"	m
hasNext	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def hasNext = traversed < totalsize$/;"	m
hasNext	scala/collection/parallel/mutable/ParHashTable.scala	/^    def hasNext = {$/;"	m
hasNext	scala/collection/parallel/package.scala	/^    def hasNext = index < until$/;"	m
hasNext	scala/io/Source.scala	/^    def hasNext = iter.hasNext$/;"	m
hasNext	scala/io/Source.scala	/^  def hasNext = iter.hasNext$/;"	m
hasNext	scala/runtime/ScalaRunTime.scala	/^      def hasNext = c < cmax$/;"	m
hasNext	scala/util/matching/Regex.scala	/^      def hasNext = matchIterator.hasNext$/;"	m
hasNext	scala/util/matching/Regex.scala	/^      def hasNext = self.hasNext$/;"	m
hasNext	scala/util/matching/Regex.scala	/^    def hasNext: Boolean = {$/;"	m
hasNext	scala/xml/MetaData.scala	/^  def hasNext = (Null != next)$/;"	m
hasNext	scala/xml/parsing/MarkupParser.scala	/^        def hasNext = underlying.hasNext$/;"	m
hasNext	scala/xml/parsing/MarkupParser.scala	/^      def hasNext = underlying.hasNext || !queue.isEmpty$/;"	m
hasNext	scala/xml/pull/XMLEventReader.scala	/^  def hasNext = !eos && (buffer != null || fillBuffer)$/;"	m
hasStub	scala/collection/immutable/Range.scala	/^      val hasStub      = isInclusive || (gap % step != 0)$/;"	V
hasTimeLeft	scala/concurrent/duration/Deadline.scala	/^  def hasTimeLeft(): Boolean = !isOverdue()$/;"	m
hash	scala/collection/concurrent/TrieMap.scala	/^    def hash(k: K)= scala.util.hashing.byteswap32(k.##)$/;"	m
hash	scala/collection/immutable/HashMap.scala	/^  private[collection] class HashMapCollision1[A, +B](private[collection] val hash: Int, val kvs: ListMap[A, B @uV])$/;"	V
hash	scala/collection/immutable/HashSet.scala	/^  private[immutable] class HashSetCollision1[A](private[HashSet] val hash: Int, val ks: ListSet[A])$/;"	V
hash	scala/collection/mutable/OpenHashMap.scala	/^                                            val hash: Int,$/;"	V
hash	scala/collection/mutable/OpenHashMap.scala	/^    val hash = hashOf(key)$/;"	V
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(dv: Double): Int = {$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(fv: Float): Int = {$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(lv: Long): Int = {$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Any): Int =$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Boolean): Int = if (x) true.hashCode else false.hashCode$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Byte): Int = x.toInt$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Char): Int = x.toInt$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Int): Int = x$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Number): Int  = runtime.BoxesRunTime.hashFromNumber(x)$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Short): Int = x.toInt$/;"	m
hash	scala/runtime/ScalaRunTime.scala	/^  def hash(x: Unit): Int = 0$/;"	m
hash	scala/util/MurmurHash.scala	/^  def hash = {$/;"	m
hash	scala/util/hashing/ByteswapHashing.scala	/^    def hash(v: T) = byteswap32(h.hash(v))$/;"	m
hash	scala/util/hashing/ByteswapHashing.scala	/^  def hash(v: T) = byteswap32(v.##)$/;"	m
hash	scala/util/hashing/Hashing.scala	/^    def hash(x: T) = f(x)$/;"	m
hash	scala/util/hashing/Hashing.scala	/^    def hash(x: T) = x.##$/;"	m
hash	scala/util/hashing/Hashing.scala	/^  def hash(x: T): Int$/;"	m
hash	scala/util/hashing/MurmurHash3.scala	/^    def hash(a: Array[T]) = arrayHash(a)$/;"	m
hash	scala/util/hashing/MurmurHash3.scala	/^    def hash(data: Array[Byte]) = bytesHash(data)$/;"	m
hash	scala/util/hashing/MurmurHash3.scala	/^    def hash(x: Product) = productHash(x)$/;"	m
hash	scala/util/hashing/MurmurHash3.scala	/^    def hash(x: String) = stringHash(x)$/;"	m
hash	scala/util/hashing/MurmurHash3.scala	/^    def hash(xs: TraversableOnce[Any]) = orderedHash(xs)$/;"	m
hash	scala/util/hashing/MurmurHash3.scala	/^    def hash(xs: TraversableOnce[Any]) = unorderedHash(xs)$/;"	m
hash	scala/xml/factory/LoggedNodeFactory.scala	/^    val hash = Utility.hashCode(pre, label, attrSeq.##, scope.##, children)$/;"	V
hash	scala/xml/factory/NodeFactory.scala	/^    val hash = Utility.hashCode( pre, name, attrSeq.##, scope.##, children)$/;"	V
hashCode	scala/collection/immutable/NumericRange.scala	/^  override lazy val hashCode = super.hashCode()$/;"	V
hashCode	scala/reflect/Manifest.scala	/^    override val hashCode = System.identityHashCode(this)$/;"	V
hashCode	scala/reflect/Manifest.scala	/^  override val hashCode = System.identityHashCode(this)$/;"	V
hashCode	scala/runtime/BoxedUnit.java	/^    public int hashCode() {$/;"	m	class:BoxedUnit
hashCode	scala/xml/Utility.scala	/^  def hashCode(pre: String, label: String, attribHashCode: Int, scpeHash: Int, children: Seq[Node]) =$/;"	m
hashFromDouble	scala/runtime/BoxesRunTime.java	/^    public static int hashFromDouble(java.lang.Double n) {$/;"	m	class:BoxesRunTime
hashFromFloat	scala/runtime/BoxesRunTime.java	/^    public static int hashFromFloat(java.lang.Float n) {$/;"	m	class:BoxesRunTime
hashFromLong	scala/runtime/BoxesRunTime.java	/^    public static int hashFromLong(java.lang.Long n) {$/;"	m	class:BoxesRunTime
hashFromNumber	scala/runtime/BoxesRunTime.java	/^    public static int hashFromNumber(java.lang.Number n) {$/;"	m	class:BoxesRunTime
hashFromObject	scala/runtime/BoxesRunTime.java	/^    public static int hashFromObject(Object a) {$/;"	m	class:BoxesRunTime
hashed	scala/util/MurmurHash.scala	/^  private var hashed = false$/;"	v
hashing	scala/collection/concurrent/TrieMap.scala	/^  def hashing = hashingobj$/;"	m
hashingobj	scala/collection/concurrent/TrieMap.scala	/^  private var hashingobj = if (hashf.isInstanceOf[Hashing.Default[_]]) new TrieMap.MangledHashing[K] else hashf$/;"	v
hashvalue	scala/util/MurmurHash.scala	/^  private var hashvalue = h$/;"	v
hasnext	scala/collection/Iterator.scala	/^    private var hasnext = true$/;"	v
hc	scala/collection/concurrent/TrieMap.scala	/^    val hc = computeHash(k)$/;"	V
hc	scala/collection/concurrent/TrieMap.scala	/^    val hc = computeHash(key)$/;"	V
hc	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val hc = improve(hcode)$/;"	V
hc	scala/collection/parallel/immutable/ParHashMap.scala	/^          val hc = trie.computeHash(kv._1)$/;"	V
hc	scala/collection/parallel/immutable/ParHashMap.scala	/^    val hc = emptyTrie.computeHash(elem._1)$/;"	V
hc	scala/collection/parallel/immutable/ParHashSet.scala	/^          val hc = trie.computeHash(v)$/;"	V
hc	scala/collection/parallel/immutable/ParHashSet.scala	/^    val hc = emptyTrie.computeHash(elem)$/;"	V
hc	scala/collection/parallel/mutable/ParHashMap.scala	/^      val hc = improve(elemHashCode(k), seedvalue)$/;"	V
hc	scala/collection/parallel/mutable/ParHashMap.scala	/^    val hc = improve(elemHashCode(elem._1), seedvalue)$/;"	V
hc	scala/collection/parallel/mutable/ParHashSet.scala	/^    val hc = improve(elemHashCode(elem), seedvalue)$/;"	V
hc	scala/util/hashing/package.scala	/^    var hc = v * 0x9e3775cd$/;"	v
hc	scala/util/hashing/package.scala	/^    var hc = v * 0x9e3775cd9e3775cdL$/;"	v
hd	scala/collection/Iterator.scala	/^    private var hd: A = _$/;"	v
hd	scala/collection/immutable/List.scala	/^final case class ::[B](private var hd: B, private[scala] var tl: List[B]) extends List[B] {$/;"	v
hd	scala/concurrent/duration/Duration.scala	/^    val hd :: rest = words(labels)$/;"	V
hdDefined	scala/collection/Iterator.scala	/^    private var hdDefined: Boolean = false$/;"	v
head	scala/collection/BufferedIterator.scala	/^  def head: A$/;"	m
head	scala/collection/GenTraversableLike.scala	/^  def head: A$/;"	m
head	scala/collection/IndexedSeqLike.scala	/^    def head = {$/;"	m
head	scala/collection/IndexedSeqOptimized.scala	/^  def head: A = if (isEmpty) super.head else this(0)$/;"	m
head	scala/collection/Iterator.scala	/^    def head: A = {$/;"	m
head	scala/collection/LinearSeqOptimized.scala	/^  def head: A$/;"	m
head	scala/collection/TraversableLike.scala	/^  def head: A = {$/;"	m
head	scala/collection/generic/GenericTraversableTemplate.scala	/^  def head: A$/;"	m
head	scala/collection/immutable/List.scala	/^  def head: A$/;"	m
head	scala/collection/immutable/ListSet.scala	/^  protected class Node(override val head: A) extends ListSet[A] with Serializable {$/;"	V
head	scala/collection/immutable/Stream.scala	/^        var head: A = null.asInstanceOf[A]$/;"	v
head	scala/collection/immutable/Stream.scala	/^  def head: A$/;"	m
head	scala/collection/parallel/ParIterableLike.scala	/^  def head = iterator.next$/;"	m
head	scala/collection/parallel/ParSeqLike.scala	/^    def head = self(i)$/;"	m
head	scala/collection/parallel/Tasks.scala	/^      var head: WrappedTask[R, Tp] = this$/;"	v
head	scala/util/hashing/MurmurHash3.scala	/^      val head = elems.head$/;"	V
head	scala/util/parsing/combinator/PackratParsers.scala	/^    val head = in.recursionHeads.get(in.pos)$/;"	V
head	scala/xml/parsing/MarkupParserCommon.scala	/^    val head = until.head$/;"	V
head0	scala/collection/immutable/List.scala	/^        val head0 = pending.head$/;"	V
head1	scala/collection/immutable/List.scala	/^        val head1 = f(head0)$/;"	V
headOption	scala/collection/GenTraversableLike.scala	/^  def headOption: Option[A]$/;"	m
headOption	scala/collection/TraversableLike.scala	/^  def headOption: Option[A] = if (isEmpty) None else Some(head)$/;"	m
headOption	scala/collection/parallel/ParIterableLike.scala	/^  def headOption = if (nonEmpty) Some(head) else None$/;"	m
headParser	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class Head(var headParser: Parser[_], var involvedSet: List[Parser[_]], var evalSet: List[Parser[_]]){$/;"	v
headSize	scala/collection/generic/GenericTraversableTemplate.scala	/^    val headSize = asTraversable(head).size$/;"	V
headless	scala/sys/SystemProperties.scala	/^  lazy val headless            = bool("java.awt.headless", "system should not utilize a display device")$/;"	V
headptr	scala/collection/mutable/UnrolledBuffer.scala	/^  @transient private var headptr = newUnrolled$/;"	v
height	scala/StringContext.scala	/^   *    val height = 1.9d$/;"	V
help	scala/sys/SystemProperties.scala	/^  def help(key: String) = propertyHelp.getOrElse(key, "")$/;"	m
hex	scala/reflect/NameTransformer.scala	/^            val hex = name.substring(i+2, i+6)$/;"	V
hex	scala/xml/Utility.scala	/^    val hex  = (ch() == 'x') && { nextch(); true }$/;"	V
hexDigit	scala/util/parsing/json/Lexer.scala	/^  def hexDigit = elem("hex digit", hexDigits.contains(_))$/;"	m
hexDigits	scala/util/parsing/json/Lexer.scala	/^  val hexDigits = Set[Char]() ++ "0123456789abcdefABCDEF".toArray$/;"	V
hi	scala/collection/IndexedSeqOptimized.scala	/^    val hi    = math.min(math.max(until, 0), length)$/;"	V
hi	scala/collection/generic/SliceInterval.scala	/^    val hi = until max 0$/;"	V
hi	scala/util/parsing/input/OffsetPosition.scala	/^    var hi = index.length - 1$/;"	v
hiddenMagicA	scala/util/MurmurHash.scala	/^  final private val hiddenMagicA = 0x95543787$/;"	V
hiddenMagicB	scala/util/MurmurHash.scala	/^  final private val hiddenMagicB = 0x2ad7eb25$/;"	V
hiddenMixerA	scala/util/MurmurHash.scala	/^  final private val hiddenMixerA = 0x7b7d159c$/;"	V
hiddenMixerB	scala/util/MurmurHash.scala	/^  final private val hiddenMixerB = 0x6bce6396$/;"	V
high	scala/runtime/ScalaRunTime.scala	/^    val high = (lv >>> 32).toInt$/;"	V
high	scala/util/Random.scala	/^    val high = 127$/;"	V
higherKinds	scala/language.scala	/^  implicit lazy val higherKinds: higherKinds = languageFeature.higherKinds$/;"	V
higherKinds	scala/languageFeature.scala	/^  object higherKinds extends higherKinds$/;"	o
highestOneBit	scala/collection/generic/BitOperations.scala	/^    def highestOneBit(j: Int) = {$/;"	m
highestOneBit	scala/collection/generic/BitOperations.scala	/^    def highestOneBit(j: Long) = {$/;"	m
hm1	scala/collection/immutable/HashMap.scala	/^        val hm1 = new HashTrieMap(bm1, e1, e1.foldLeft(0)(_ + _.size))$/;"	V
hm2	scala/collection/immutable/HashMap.scala	/^        val hm2 = new HashTrieMap(bm2, e2, e2.foldLeft(0)(_ + _.size))$/;"	V
hookNameCount	scala/sys/ShutdownHookThread.scala	/^  private var hookNameCount: Int = 0$/;"	v
hour	scala/concurrent/duration/DurationConversions.scala	/^  def hour         = hours$/;"	m
hour	scala/concurrent/duration/DurationConversions.scala	/^  def hour[C](c: C)(implicit ev: Classifier[C]): ev.R = hours(c)$/;"	m
hours	scala/concurrent/duration/DurationConversions.scala	/^  def hours        = durationIn(HOURS)$/;"	m
hours	scala/concurrent/duration/DurationConversions.scala	/^  def hours[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(hours)$/;"	m
href	scala/xml/include/sax/XIncludeFilter.scala	/^        val href = atts.getValue("href")$/;"	V
hypot	scala/math/package.scala	/^  def hypot(x: Double, y: Double): Double = java.lang.Math.hypot(x, y)$/;"	m
i	scala/Array.scala	/^      var i = 1$/;"	v
i	scala/Array.scala	/^    var i = 0$/;"	v
i	scala/Array.scala	/^    var i = 1$/;"	v
i	scala/Array.scala	/^    var i = srcPos$/;"	v
i	scala/Array.scala	/^    var i = start$/;"	v
i	scala/Console.scala	/^    var i: Int = a.length - 1$/;"	v
i	scala/beans/ScalaBeanInfo.scala	/^    var i = 0;$/;"	v
i	scala/collection/BitSetLike.scala	/^    var i = a.length$/;"	v
i	scala/collection/BitSetLike.scala	/^    var i = nwords$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^        var i = 0$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^      var i = 0$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^      var i = length - 1$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^      var i = offset$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^    private var i = self.length$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^    val i = prefixLength(!p(_))$/;"	V
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = 0$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = end$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = from$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = length$/;"	v
i	scala/collection/IndexedSeqOptimized.scala	/^    var i = lo$/;"	v
i	scala/collection/IterableLike.scala	/^      var i = 0$/;"	v
i	scala/collection/IterableLike.scala	/^    var i = 0$/;"	v
i	scala/collection/IterableLike.scala	/^    var i = start$/;"	v
i	scala/collection/Iterator.scala	/^      var i = 0$/;"	v
i	scala/collection/Iterator.scala	/^    private var i = 0$/;"	v
i	scala/collection/Iterator.scala	/^    private var i = start$/;"	v
i	scala/collection/Iterator.scala	/^    var i = 0$/;"	v
i	scala/collection/Iterator.scala	/^    var i = start$/;"	v
i	scala/collection/LinearSeqOptimized.scala	/^    var i = 0$/;"	v
i	scala/collection/LinearSeqOptimized.scala	/^    var i = from$/;"	v
i	scala/collection/SeqLike.scala	/^        var i = if (forward) 0 else (n1-n0-1)$/;"	v
i	scala/collection/SeqLike.scala	/^      var i = 0$/;"	v
i	scala/collection/SeqLike.scala	/^      var i = from$/;"	v
i	scala/collection/SeqLike.scala	/^      var i = idxs.length - 2$/;"	v
i	scala/collection/SeqLike.scala	/^    val i = this.iterator drop offset$/;"	V
i	scala/collection/SeqLike.scala	/^    val i = this.iterator$/;"	V
i	scala/collection/SeqLike.scala	/^    val i = this.iterator.drop(length - that.length)$/;"	V
i	scala/collection/SeqLike.scala	/^    var i = 0$/;"	v
i	scala/collection/SeqLike.scala	/^    var i = from$/;"	v
i	scala/collection/SeqLike.scala	/^    var i = length - 1$/;"	v
i	scala/collection/SetLike.scala	/^      var i = len - 1$/;"	v
i	scala/collection/TraversableLike.scala	/^    var i = 0$/;"	v
i	scala/collection/TraversableLike.scala	/^    var i = start$/;"	v
i	scala/collection/concurrent/TrieMap.scala	/^    var i = 0$/;"	v
i	scala/collection/generic/BitOperations.scala	/^      var i = j$/;"	v
i	scala/collection/generic/GenTraversableFactory.scala	/^      var i = 1$/;"	v
i	scala/collection/generic/GenTraversableFactory.scala	/^    var i = 0$/;"	v
i	scala/collection/generic/GenTraversableFactory.scala	/^    var i = start$/;"	v
i	scala/collection/generic/GenericTraversableTemplate.scala	/^      var i = 0$/;"	v
i	scala/collection/generic/Sorted.scala	/^    val i = keySet.from(to).iterator$/;"	V
i	scala/collection/generic/Sorted.scala	/^    val i = keySet.iterator$/;"	V
i	scala/collection/immutable/HashMap.scala	/^        var i = 0$/;"	v
i	scala/collection/immutable/HashMap.scala	/^      var i = -1$/;"	v
i	scala/collection/immutable/HashMap.scala	/^      var i = 0;$/;"	v
i	scala/collection/immutable/HashSet.scala	/^      var i = 0;$/;"	v
i	scala/collection/immutable/List.scala	/^    var i = 0$/;"	v
i	scala/collection/immutable/List.scala	/^    var i = start + len$/;"	v
i	scala/collection/immutable/List.scala	/^    var i = start$/;"	v
i	scala/collection/immutable/PagedSeq.scala	/^      var i = 0$/;"	v
i	scala/collection/immutable/Range.scala	/^      var i = start$/;"	v
i	scala/collection/immutable/Stream.scala	/^ *    var i = -1$/;"	v
i	scala/collection/immutable/Vector.scala	/^    private var i = self.length$/;"	v
i	scala/collection/immutable/Vector.scala	/^    var i = 0; while (i < index) { array(i) = null; i+=1 }$/;"	v
i	scala/collection/immutable/Vector.scala	/^    var i = index; while (i < array.length) { array(i) = null; i+=1 }$/;"	v
i	scala/collection/immutable/package.scala	/^      var i = start$/;"	v
i	scala/collection/mutable/ArrayOps.scala	/^      var i = 0$/;"	v
i	scala/collection/mutable/ArraySeq.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/ArrayStack.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/BufferLike.scala	/^    val i = indexOf(x)$/;"	V
i	scala/collection/mutable/FlatHashTable.scala	/^    private var i = 0$/;"	v
i	scala/collection/mutable/FlatHashTable.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/FlatHashTable.scala	/^    var i = table.length - 1$/;"	v
i	scala/collection/mutable/HashSet.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/HashTable.scala	/^      val i= scala.util.hashing.byteswap32(hcode)$/;"	V
i	scala/collection/mutable/HashTable.scala	/^    var i = oldTable.length - 1$/;"	v
i	scala/collection/mutable/HashTable.scala	/^    var i = table.length - 1$/;"	v
i	scala/collection/mutable/LinkedListLike.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/ListBuffer.scala	/^      var i = 1$/;"	v
i	scala/collection/mutable/PriorityQueue.scala	/^    private var i = 1$/;"	v
i	scala/collection/mutable/PriorityQueue.scala	/^    private var i = resarr.p_size0 - 1$/;"	v
i	scala/collection/mutable/ResizableArray.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/SeqLike.scala	/^    var i = 0$/;"	v
i	scala/collection/mutable/UnrolledBuffer.scala	/^      var i = 0$/;"	v
i	scala/collection/mutable/UnrolledBuffer.scala	/^      var i = leftb$/;"	v
i	scala/collection/mutable/UnrolledBuffer.scala	/^      var i = size - 1$/;"	v
i	scala/collection/mutable/UnrolledBuffer.scala	/^    var i = 0$/;"	v
i	scala/collection/parallel/ParIterableLike.scala	/^      var i = from$/;"	v
i	scala/collection/parallel/ParSeqLike.scala	/^    private var i = start$/;"	v
i	scala/collection/parallel/RemainsIterator.scala	/^    var i = 0$/;"	v
i	scala/collection/parallel/RemainsIterator.scala	/^    var i = from$/;"	v
i	scala/collection/parallel/RemainsIterator.scala	/^    var i = howmany - 1$/;"	v
i	scala/collection/parallel/immutable/ParHashMap.scala	/^        var i = 0$/;"	v
i	scala/collection/parallel/immutable/ParHashMap.scala	/^      var i = 0$/;"	v
i	scala/collection/parallel/immutable/ParHashMap.scala	/^      var i = offset$/;"	v
i	scala/collection/parallel/immutable/ParHashMap.scala	/^    var i = 0$/;"	v
i	scala/collection/parallel/immutable/ParHashSet.scala	/^      var i = 0$/;"	v
i	scala/collection/parallel/immutable/ParHashSet.scala	/^      var i = offset$/;"	v
i	scala/collection/parallel/immutable/ParHashSet.scala	/^    var i = 0$/;"	v
i	scala/collection/parallel/immutable/package.scala	/^    class ParIterator(var i: Int = 0, val until: Int = length, elem: T = self.elem) extends SeqSplitter[T] {$/;"	v
i	scala/collection/parallel/mutable/ParArray.scala	/^      var i = from$/;"	v
i	scala/collection/parallel/mutable/ParArray.scala	/^      var i = offset$/;"	v
i	scala/collection/parallel/mutable/ParArray.scala	/^  class ParArrayIterator(var i: Int = 0, val until: Int = length, val arr: Array[Any] = array)$/;"	v
i	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      var i = from$/;"	v
i	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      var i = frombucket$/;"	v
i	scala/collection/parallel/mutable/ParHashMap.scala	/^      var i = 0$/;"	v
i	scala/collection/parallel/mutable/ParHashMap.scala	/^      var i = offset$/;"	v
i	scala/collection/parallel/mutable/ParHashMap.scala	/^    var i = 0$/;"	v
i	scala/collection/parallel/mutable/ParHashSet.scala	/^      var i = 0$/;"	v
i	scala/collection/parallel/mutable/ParHashSet.scala	/^      var i = offset$/;"	v
i	scala/collection/parallel/mutable/ParTrieMap.scala	/^      var i = offset$/;"	v
i	scala/collection/parallel/package.scala	/^          var i = 0$/;"	v
i	scala/collection/script/Message.scala	/^    var i = 1$/;"	v
i	scala/concurrent/duration/package.scala	/^  implicit final class IntMult(val i: Int) extends AnyVal {$/;"	V
i	scala/concurrent/duration/package.scala	/^  implicit final class LongMult(val i: Long) extends AnyVal {$/;"	V
i	scala/reflect/NameTransformer.scala	/^    var i = 0$/;"	v
i	scala/runtime/RichFloat.scala	/^  override def isValidInt = { val i = self.toInt; i.toFloat == self && i != Int.MaxValue }$/;"	V
i	scala/runtime/ScalaRunTime.scala	/^    var i = 0$/;"	v
i	scala/runtime/ScalaRunTime.scala	/^    var i = 22$/;"	v
i	scala/testing/Benchmark.scala	/^      var i = 0; while (i < multiplier) {$/;"	v
i	scala/util/MurmurHash.scala	/^      val i = (s.charAt(j)<<16) + s.charAt(j+1);$/;"	V
i	scala/util/MurmurHash.scala	/^    var i = (hash ^ (hash>>>16))$/;"	v
i	scala/util/Sorting.scala	/^        var i = off$/;"	v
i	scala/util/Sorting.scala	/^      var i = 0$/;"	v
i	scala/util/hashing/MurmurHash3.scala	/^      var i = 0$/;"	v
i	scala/util/hashing/MurmurHash3.scala	/^    var i = 0$/;"	v
i	scala/util/parsing/combinator/RegexParsers.scala	/^      var i = 0$/;"	v
i	scala/util/parsing/input/StreamReader.scala	/^    var i = off$/;"	v
i	scala/xml/NodeSeq.scala	/^          val i = that indexOf '}'$/;"	V
i	scala/xml/PrettyPrinter.scala	/^    var i = 0$/;"	v
i	scala/xml/PrettyPrinter.scala	/^    var i = s indexOf ' '$/;"	v
i	scala/xml/Utility.scala	/^    var i = 0$/;"	v
i	scala/xml/include/sax/XIncluder.scala	/^      var  i = 0; while (i < length) {$/;"	v
i	scala/xml/include/sax/XIncluder.scala	/^      var i = 0; while (i < atts.getLength()) {$/;"	v
ia	scala/Dynamic.scala	/^ *  foo.varia = 10      ~~> foo.updateDynamic("varia")(10)$/;"	v
iant	scala/collection/GenTraversableLike.scala	/^   *  of all elements `x` which satisfy the invariant:$/;"	v
iant	scala/concurrent/Future.scala	/^    \/\/ invariant: if "_tasksLocal.get ne null" then we are inside BatchingRunnable.run; if it is null, we are outside$/;"	v
iant	scala/util/Sorting.scala	/^        \/\/ Establish Invariant: v* (<v)* (>v)* v*$/;"	v
iants	scala/collection/generic/SliceInterval.scala	/^ *  The constructor is private to enforce the invariants:$/;"	v
iants	scala/collection/parallel/ParIterableLike.scala	/^  private[parallel] def brokenInvariants = Seq[String]()$/;"	v
iants	scala/collection/parallel/mutable/ParHashMap.scala	/^  private[parallel] override def brokenInvariants = {$/;"	v
id	scala/Enumeration.scala	/^        val id = Int.unbox(classOf[Val] getMethod "id" invoke value)$/;"	V
id	scala/Enumeration.scala	/^    def id = i$/;"	m
id	scala/Enumeration.scala	/^    def id: Int$/;"	m
id	scala/util/continuations/package.scala	/^ *         val id = uuidGen$/;"	V
id	scala/util/parsing/ast/Binders.scala	/^    val id: Int = _Binder.genId$/;"	V
id	scala/xml/include/sax/XIncluder.scala	/^      var id = ""$/;"	v
ident	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def ident: Parser[String] =$/;"	m
ident	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  def ident: Parser[String] =$/;"	m
ident	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val ident: Parser[Any] = """[a-zA-Z_]\\w*""".r ^^ (s => Ident(s))$/;"	V
identChar	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  def identChar = letter | elem('_')$/;"	m
identity	scala/Predef.scala	/^  def identity[A](x: A): A         = x    \/\/ @see `conforms` for the implicit version$/;"	m
idx	scala/StringContext.scala	/^    var idx = 0$/;"	v
idx	scala/collection/Iterator.scala	/^    var idx = 0$/;"	v
idx	scala/collection/SeqLike.scala	/^      var idx = nums.length - 1$/;"	v
idx	scala/collection/concurrent/TrieMap.scala	/^                  val idx = (hc >>> (lev - 5)) & 0x1f$/;"	V
idx	scala/collection/concurrent/TrieMap.scala	/^        val idx = (hc >>> lev) & 0x1f$/;"	V
idx	scala/collection/immutable/BitSet.scala	/^      val idx = elem >> LogWL$/;"	V
idx	scala/collection/immutable/Vector.scala	/^    val idx = checkRangeConvert(index)$/;"	V
idx	scala/collection/immutable/Vector.scala	/^    val idx = index + startIndex$/;"	V
idx	scala/collection/mutable/BitSet.scala	/^      val idx = elem >> LogWL$/;"	V
idx	scala/collection/mutable/HashTable.scala	/^    var idx       = lastPopulatedIndex$/;"	v
idx	scala/collection/mutable/HashTable.scala	/^    var idx = table.length - 1$/;"	v
idx	scala/collection/mutable/UnrolledBuffer.scala	/^      var idx = from$/;"	v
idx	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^  abstract class ParFlatHashTableIterator(var idx: Int, val until: Int, val totalsize: Int)$/;"	v
idx	scala/collection/parallel/mutable/ParHashTable.scala	/^      var idx = from$/;"	v
idx	scala/collection/parallel/mutable/ParHashTable.scala	/^      var idx = fromBucket$/;"	v
idx	scala/collection/parallel/mutable/ParHashTable.scala	/^  (private var idx: Int, private val until: Int, private val totalsize: Int, private var es: Entry)$/;"	v
idx	scala/xml/parsing/FactoryAdapter.scala	/^    val idx = s indexOf ':'$/;"	V
idx1	scala/collection/TraversableLike.scala	/^    val idx1 = string.lastIndexOf('.' : Int)$/;"	V
idx1	scala/collection/immutable/HashMap.scala	/^        val idx1 = (m1.hash >>> level) & 0x1f$/;"	V
idx2	scala/collection/TraversableLike.scala	/^    val idx2 = string.indexOf('$')$/;"	V
idx2	scala/collection/immutable/HashMap.scala	/^        val idx2 = (m2.hash >>> level) & 0x1f$/;"	V
idxs	scala/collection/SetLike.scala	/^    private val idxs = Array.range(0, len+1)$/;"	V
ifIs	scala/collection/parallel/ParIterableLike.scala	/^    def ifIs[Cmb](isbody: Cmb => Unit) = new Otherwise[Cmb] {$/;"	m
ifIs	scala/collection/parallel/ParIterableLike.scala	/^    def ifIs[Cmb](isbody: Cmb => Unit): Otherwise[Cmb]$/;"	m
ifParSeq	scala/collection/parallel/package.scala	/^    def ifParSeq[R](isbody: ParSeq[T] => R) = new Otherwise[R] {$/;"	m
ifParSeq	scala/collection/parallel/package.scala	/^    def ifParSeq[R](isbody: ParSeq[T] => R): Otherwise[R]$/;"	m
ifParallel	scala/collection/parallel/package.scala	/^    def ifParallel[R](isbody: CanCombineFrom[From, Elem, To] => R) = new Otherwise[R] {$/;"	m
ifParallel	scala/collection/parallel/package.scala	/^    def ifParallel[R](isbody: CanCombineFrom[From, Elem, To] => R): Otherwise[R]$/;"	m
ignorableWhitespace	scala/xml/include/sax/XIncluder.scala	/^  def  ignorableWhitespace(ch: Array[Char], start: Int , length: Int) {$/;"	m
ignoreComments	scala/xml/factory/NodeFactory.scala	/^  val ignoreComments  = false$/;"	V
ignoreProcInstr	scala/xml/factory/NodeFactory.scala	/^  val ignoreProcInstr = false$/;"	V
ignoreWritten	scala/xml/pull/XMLEventReader.scala	/^    private var ignoreWritten = false$/;"	v
ignoring	scala/util/control/Exception.scala	/^  def ignoring(exceptions: Class[_]*): Catch[Unit] =$/;"	m
ilen	scala/xml/parsing/MarkupParser.scala	/^        val ilen = inpStack.length;$/;"	V
illegalArgument	scala/collection/package.scala	/^    def illegalArgument(msg: String) = throw new IllegalArgumentException(msg)$/;"	m
imap	scala/collection/mutable/ImmutableMapAdaptor.scala	/^class ImmutableMapAdaptor[A, B](protected var imap: immutable.Map[A, B])$/;"	v
immutable	scala/collection/immutable/BitSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/DefaultMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/HashMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/HashSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/IndexedSeq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/IntMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Iterable.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/LinearSeq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/List.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/ListMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/ListSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/LongMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Map.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/MapLike.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/MapProxy.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/NumericRange.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/PagedSeq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Queue.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/RedBlack.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/RedBlackTree.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Seq.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Set.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/SetProxy.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/SortedMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/SortedSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Stack.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Stream.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StreamView.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StreamViewLike.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StringLike.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/StringOps.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Traversable.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/TreeMap.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/TreeSet.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/TrieIterator.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/Vector.scala	/^package immutable$/;"	p
immutable	scala/collection/immutable/WrappedString.scala	/^package immutable$/;"	p
immutable.HashMapCombiner	scala/collection/parallel/ParIterableLike.scala	/^import immutable.HashMapCombiner$/;"	i
immutable.List	scala/collection/LinearSeqLike.scala	/^import immutable.List$/;"	i
immutable.List	scala/collection/LinearSeqOptimized.scala	/^import immutable.List$/;"	i
immutable.NumericRange	scala/runtime/ScalaNumberProxy.scala	/^import immutable.NumericRange$/;"	i
immutable.Stream	scala/collection/IterableViewLike.scala	/^import immutable.Stream$/;"	i
immutable.Stream	scala/collection/Iterator.scala	/^import immutable.Stream$/;"	i
immutable.StringLike	scala/collection/mutable/StringBuilder.scala	/^import immutable.StringLike$/;"	i
immutable.StringOps	scala/Predef.scala	/^import immutable.StringOps$/;"	i
immutable.Vector	scala/collection/parallel/immutable/ParVector.scala	/^import immutable.Vector$/;"	i
immutable.VectorBuilder	scala/collection/parallel/immutable/ParVector.scala	/^import immutable.VectorBuilder$/;"	i
immutable.VectorIterator	scala/collection/parallel/immutable/ParVector.scala	/^import immutable.VectorIterator$/;"	i
immutable.WrappedString	scala/LowPriorityImplicits.scala	/^import immutable.WrappedString$/;"	i
immutable.{ List, Range }	scala/collection/SeqLike.scala	/^import immutable.{ List, Range }$/;"	i
immutable.{ List, Stream }	scala/collection/IterableLike.scala	/^import immutable.{ List, Stream }$/;"	i
immutable.{ List, Stream }	scala/collection/generic/TraversableForwarder.scala	/^import immutable.{ List, Stream }$/;"	i
immutable.{List, Nil}	scala/collection/mutable/MutableList.scala	/^import immutable.{List, Nil}$/;"	i
immutable.{RedBlackTree => RB}	scala/collection/immutable/TreeMap.scala	/^import immutable.{RedBlackTree => RB}$/;"	i
immutable.{RedBlackTree => RB}	scala/collection/immutable/TreeSet.scala	/^import immutable.{RedBlackTree => RB}$/;"	i
implicitConversions	scala/language.scala	/^  implicit lazy val implicitConversions: implicitConversions = languageFeature.implicitConversions$/;"	V
implicitConversions	scala/languageFeature.scala	/^  object implicitConversions extends implicitConversions$/;"	o
improved	scala/collection/mutable/FlatHashTable.scala	/^      val improved= scala.util.hashing.byteswap32(hcode)$/;"	V
improved	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val improved = blockbits | (rest & restmask)$/;"	V
improved	scala/collection/mutable/FlatHashTable.scala	/^    val improved = improve(hcode, seedvalue)$/;"	V
improved	scala/collection/mutable/HashTable.scala	/^    val improved = improve(hcode, seedvalue)$/;"	V
in	scala/Console.scala	/^  def in = inVar.value$/;"	m
in	scala/collection/generic/Sorted.scala	/^    var in = i.next;$/;"	v
in	scala/collection/immutable/Queue.scala	/^class Queue[+A] protected(protected val in: List[A], protected val out: List[A])$/;"	V
in	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val in = ctrie.readRoot()$/;"	V
in	scala/throws.scala	/^ *   private val in = new BufferedReader(new FileReader(fname))$/;"	V
in	scala/util/Either.scala	/^ *  val in = Console.readLine("Type Either a string or an Int: ")$/;"	V
in	scala/util/Marshal.scala	/^    val in = new ObjectInputStream(new ByteArrayInputStream(buffer))$/;"	V
in	scala/util/parsing/combinator/testing/RegexTest.scala	/^    val in = args mkString " "$/;"	V
in	scala/xml/include/sax/XIncludeFilter.scala	/^      val in = new BufferedInputStream(uc.getInputStream())$/;"	V
inDTD	scala/xml/include/sax/XIncluder.scala	/^  private var inDTD: Boolean = false$/;"	v
inMem	scala/util/parsing/combinator/PackratParsers.scala	/^        val inMem = in.asInstanceOf[PackratReader[Elem]]$/;"	V
inThread	scala/sys/process/ProcessBuilderImpl.scala	/^      val inThread  = Spawn(writeInput(process.getOutputStream), true)$/;"	V
inVar	scala/Console.scala	/^  private val inVar = new DynamicVariable[BufferedReader]($/;"	V
inbetween	scala/collection/parallel/mutable/package.scala	/^        val inbetween = countBucketSizes(fbindex + 1, lbindex)$/;"	V
inclast	scala/collection/immutable/package.scala	/^          val inclast = inclusiveLast$/;"	V
include	scala/xml/include/CircularIncludeException.scala	/^package include$/;"	p
include	scala/xml/include/UnavailableResourceException.scala	/^package include$/;"	p
include	scala/xml/include/XIncludeException.scala	/^package include$/;"	p
include.sax	scala/xml/include/sax/EncodingHeuristics.scala	/^package include.sax$/;"	p
include.sax	scala/xml/include/sax/Main.scala	/^package include.sax$/;"	p
include.sax	scala/xml/include/sax/XIncludeFilter.scala	/^package include.sax$/;"	p
include.sax	scala/xml/include/sax/XIncluder.scala	/^package include.sax$/;"	p
includer	scala/xml/include/sax/Main.scala	/^        val includer = new XIncludeFilter()$/;"	V
includer	scala/xml/include/sax/XIncludeFilter.scala	/^ *  val includer = new XIncludeFilter(base)$/;"	V
inclusion	scala/util/automata/Inclusion.scala	/^  def inclusion(dfa1: DetWordAutom[A], dfa2: DetWordAutom[A]) = {$/;"	m
inclusive	scala/collection/immutable/NumericRange.scala	/^    def inclusive: Inclusive[T] = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/NumericRange.scala	/^  def inclusive[T](start: T, end: T, step: T)(implicit num: Integral[T]): Inclusive[T] =$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: BigDecimal, end: BigDecimal, step: BigDecimal) =$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: BigInt, end: BigInt, step: BigInt) = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: Double, end: Double, step: Double) =$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: Int, end: Int, step: Int) = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^    def inclusive(start: Long, end: Long, step: Long) = NumericRange.inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^  def inclusive =$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^  def inclusive(start: Int, end: Int): Range.Inclusive = new Inclusive(start, end, 1)$/;"	m
inclusive	scala/collection/immutable/Range.scala	/^  def inclusive(start: Int, end: Int, step: Int): Range.Inclusive = new Inclusive(start, end, step)$/;"	m
inclusive	scala/collection/immutable/package.scala	/^    def inclusive: Boolean$/;"	m
incomplete	scala/collection/Iterator.scala	/^      lazy val incomplete = len < count$/;"	V
incr	scala/collection/parallel/ParSeqLike.scala	/^      val incr = sizes.scanLeft(0)(_ + _)$/;"	V
incr	scala/collection/parallel/immutable/package.scala	/^        val incr = sizes.scanLeft(0)(_ + _)$/;"	V
ind	scala/collection/parallel/immutable/ParRange.scala	/^    private var ind = 0$/;"	v
ind	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var ind = stind$/;"	v
index	scala/collection/GenSeqViewLike.scala	/^      val index = new Array[Int](self.length + 1)$/;"	V
index	scala/collection/GenSeqViewLike.scala	/^    protected[this] lazy val index = {$/;"	V
index	scala/collection/GenTraversableViewLike.scala	/^      var index = 0$/;"	v
index	scala/collection/IndexedSeqLike.scala	/^    private var index = start$/;"	v
index	scala/collection/immutable/HashMap.scala	/^      val index = (hash >>> level) & 0x1f$/;"	V
index	scala/collection/immutable/HashSet.scala	/^      val index = (hash >>> level) & 0x1f$/;"	V
index	scala/collection/immutable/IntMap.scala	/^  var index = 0$/;"	v
index	scala/collection/immutable/LongMap.scala	/^  var index = 0$/;"	v
index	scala/collection/immutable/RedBlackTree.scala	/^    private[this] var index = 0$/;"	v
index	scala/collection/immutable/StringLike.scala	/^      var index = 0$/;"	v
index	scala/collection/immutable/StringLike.scala	/^    private var index = 0$/;"	v
index	scala/collection/mutable/ArrayStack.scala	/^                            private var index : Int)$/;"	v
index	scala/collection/mutable/FlatHashTable.scala	/^    var index = 0$/;"	v
index	scala/collection/mutable/HashTable.scala	/^    var index = 0$/;"	v
index	scala/collection/mutable/OpenHashMap.scala	/^    val index = findIndex(key)$/;"	V
index	scala/collection/mutable/OpenHashMap.scala	/^    val index = findIndex(key, hash)$/;"	V
index	scala/collection/mutable/OpenHashMap.scala	/^    var index = 0$/;"	v
index	scala/collection/mutable/OpenHashMap.scala	/^    var index = hash & mask$/;"	v
index	scala/collection/parallel/package.scala	/^  (private val buffer: scala.collection.mutable.ArrayBuffer[T], private var index: Int, private val until: Int, _sigdel: scala.collection.generic.Signalling)$/;"	v
index	scala/util/parsing/input/OffsetPosition.scala	/^  private lazy val index: Array[Int] = {$/;"	V
index0	scala/collection/immutable/HashMap.scala	/^    val index0 = (hash0 >>> level) & 0x1f$/;"	V
index0	scala/collection/immutable/HashSet.scala	/^    val index0 = (hash0 >>> level) & 0x1f$/;"	V
index1	scala/collection/immutable/HashMap.scala	/^    val index1 = (hash1 >>> level) & 0x1f$/;"	V
index1	scala/collection/immutable/HashSet.scala	/^    val index1 = (hash1 >>> level) & 0x1f$/;"	V
indexFlag	scala/collection/generic/Signalling.scala	/^  def indexFlag = -1$/;"	m
indexFlag	scala/collection/generic/Signalling.scala	/^  def indexFlag = signalDelegate.indexFlag$/;"	m
indexFlag	scala/collection/generic/Signalling.scala	/^  def indexFlag: Int$/;"	m
indexFor	scala/util/parsing/ast/Binders.scala	/^    def indexFor(b: binderType): Option[Int] = {$/;"	m
indexMap	scala/util/automata/SubsetConstruction.scala	/^    var indexMap    = scala.collection.Map[immutable.BitSet, Int]()$/;"	v
indexOf	scala/collection/GenSeqLike.scala	/^  def indexOf[B >: A](elem: B): Int = indexOf(elem, 0)$/;"	m
indexOf	scala/collection/GenSeqLike.scala	/^  def indexOf[B >: A](elem: B, from: Int): Int = indexWhere(elem == _, from)$/;"	m
indexOf	scala/collection/Iterator.scala	/^  def indexOf[B >: A](elem: B): Int = {$/;"	m
indexOf	scala/collection/mutable/StringBuilder.scala	/^  def indexOf(str: String): Int = underlying.indexOf(str)$/;"	m
indexOf	scala/collection/mutable/StringBuilder.scala	/^  def indexOf(str: String, fromIndex: Int): Int = underlying.indexOf(str, fromIndex)$/;"	m
indexOfSlice	scala/collection/SeqLike.scala	/^  def indexOfSlice[B >: A](that: GenSeq[B]): Int = indexOfSlice(that, 0)$/;"	m
indexOfSlice	scala/collection/SeqLike.scala	/^  def indexOfSlice[B >: A](that: GenSeq[B], from: Int): Int =$/;"	m
indexOutOfBounds	scala/collection/package.scala	/^    def indexOutOfBounds(index: Int) = throw new IndexOutOfBoundsException(index.toString)$/;"	m
indexWhere	scala/collection/GenSeqLike.scala	/^  def indexWhere(p: A => Boolean): Int = indexWhere(p, 0)$/;"	m
indexWhere	scala/collection/GenSeqLike.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int$/;"	m
indexWhere	scala/collection/IndexedSeqOptimized.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int = {$/;"	m
indexWhere	scala/collection/Iterator.scala	/^  def indexWhere(p: A => Boolean): Int = {$/;"	m
indexWhere	scala/collection/LinearSeqOptimized.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int = {$/;"	m
indexWhere	scala/collection/SeqLike.scala	/^  def indexWhere(p: A => Boolean, from: Int): Int = {$/;"	m
indexWhere	scala/collection/parallel/ParSeqLike.scala	/^  def indexWhere(p: T => Boolean, from: Int): Int = if (from >= length) -1 else {$/;"	m
indexedSeqHash	scala/util/hashing/MurmurHash3.scala	/^  def indexedSeqHash(xs: scala.collection.IndexedSeq[_], seed: Int): Int = {$/;"	m
indices	scala/collection/SeqLike.scala	/^  def indices: Range = 0 until length$/;"	m
info_enc	scala/xml/parsing/MarkupParser.scala	/^    var info_enc: Option[String] = None$/;"	v
info_prolog	scala/xml/parsing/MarkupParser.scala	/^    var info_prolog: (Option[String], Option[String], Option[Boolean]) = (None, None, None)$/;"	v
info_stdl	scala/xml/parsing/MarkupParser.scala	/^    var info_stdl: Option[Boolean] = None$/;"	v
info_ver	scala/xml/parsing/MarkupParser.scala	/^    var info_ver: Option[String] = None$/;"	v
init	scala/collection/GenTraversableLike.scala	/^  def init: Repr$/;"	m
init	scala/collection/IndexedSeqOptimized.scala	/^  def init: Repr = if (length > 0) slice(0, length - 1) else super.init$/;"	m
init	scala/collection/TraversableLike.scala	/^  def init: Repr = {$/;"	m
init	scala/collection/parallel/ParIterableLike.scala	/^  def init = take(size - 1)$/;"	m
initArrayD	scala/collection/immutable/TrieIterator.scala	/^    override val initArrayD: Array[Iterable[T @uV]]            = outer.arrayD$/;"	V
initArrayD	scala/collection/immutable/TrieIterator.scala	/^  def initArrayD: Array[Iterable[T @uV]]            = elems$/;"	m
initArrayStack	scala/collection/immutable/TrieIterator.scala	/^    override val initArrayStack: Array[Array[Iterable[T @uV]]] = outer.arrayStack$/;"	V
initArrayStack	scala/collection/immutable/TrieIterator.scala	/^  def initArrayStack: Array[Array[Iterable[T @uV]]] = new Array[Array[Iterable[T]]](6)$/;"	m
initCode	scala/App.scala	/^  private val initCode = new ListBuffer[() => Unit]$/;"	V
initDepth	scala/collection/immutable/TrieIterator.scala	/^    override val initDepth                                     = outer.depth$/;"	V
initDepth	scala/collection/immutable/TrieIterator.scala	/^  def initDepth                                     = 0$/;"	m
initPosD	scala/collection/immutable/TrieIterator.scala	/^    override val initPosD                                      = outer.posD$/;"	V
initPosD	scala/collection/immutable/TrieIterator.scala	/^  def initPosD                                      = 0$/;"	m
initPosStack	scala/collection/immutable/TrieIterator.scala	/^    override val initPosStack                                  = outer.posStack$/;"	V
initPosStack	scala/collection/immutable/TrieIterator.scala	/^  def initPosStack                                  = new Array[Int](6)$/;"	m
initSubIter	scala/collection/immutable/TrieIterator.scala	/^    override val initSubIter                                   = outer.subIter$/;"	V
initSubIter	scala/collection/immutable/TrieIterator.scala	/^  def initSubIter: Iterator[T]                      = null \/\/ to traverse collision nodes$/;"	m
initalText	scala/Option.scala	/^   * val initalText: Option[String] = getInitialText$/;"	V
initial	scala/concurrent/Future.scala	/^    private class Batch(val initial: List[Runnable]) extends Runnable with BlockContext {$/;"	V
initialModCount	scala/collection/mutable/OpenHashMap.scala	/^    val initialModCount = modCount$/;"	V
initialResult	scala/collection/parallel/ParIterableLike.scala	/^      val initialResult = tasksupport.executeAndWaitResult(inner)$/;"	V
initialSize	scala/collection/mutable/ArrayBuffer.scala	/^class ArrayBuffer[A](override protected val initialSize: Int)$/;"	V
initialSize	scala/collection/mutable/FlatHashTable.scala	/^  def initialSize: Int = 32$/;"	m
initialize	scala/xml/parsing/MarkupParser.scala	/^  def initialize: this.type = {$/;"	m
initials	scala/util/automata/WordBerrySethi.scala	/^          val initials = initialsArr$/;"	V
initials	scala/util/automata/WordBerrySethi.scala	/^  protected var initials: Set[Int]                                 = _$/;"	v
initialsArr	scala/util/automata/WordBerrySethi.scala	/^        val initialsArr = initials.toArray$/;"	V
inits	scala/collection/TraversableLike.scala	/^  def inits: Iterator[Repr] = iterateUntilEmpty(_.init)$/;"	m
inline	scala/inline.scala	/^class inline extends scala.annotation.StaticAnnotation$/;"	c
inline	scala/package.scala	/^  type inline = annotation.inline$/;"	T
inner	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] abstract class ResultMapping[R, Tp, R1](val inner: StrictSplitterCheckTask[R, Tp])$/;"	V
inner	scala/runtime/ScalaRunTime.scala	/^    def inner(arg: Any): String = arg match {$/;"	m
inodemain	scala/collection/concurrent/TrieMap.scala	/^          val inodemain = in.gcasRead(ct)$/;"	V
inodeupdater	scala/collection/concurrent/TrieMap.scala	/^  val inodeupdater = AtomicReferenceFieldUpdater.newUpdater(classOf[INodeBase[_, _]], classOf[MainNode[_, _]], "mainnode")$/;"	V
inpStack	scala/xml/parsing/MarkupParser.scala	/^  var inpStack: List[Source] = Nil$/;"	v
input	scala/sys/process/BasicIO.scala	/^  def input(connect: Boolean): OutputStream => Unit = { outputToProcess =>$/;"	m
input	scala/xml/parsing/ConstructingParser.scala	/^class ConstructingParser(val input: Source, val preserveWS: Boolean)$/;"	V
input	scala/xml/parsing/MarkupParser.scala	/^  val input: Source$/;"	V
input	scala/xml/parsing/XhtmlParser.scala	/^class XhtmlParser(val input: Source) extends ConstructingHandler with MarkupParser with ExternalSources  {$/;"	V
input	scala/xml/pull/XMLEventReader.scala	/^  private class Parser(val input: Source) extends MarkupHandler with MarkupParser with ExternalSources with Runnable {$/;"	V
input.CharArrayReader.EofCh	scala/util/parsing/combinator/lexical/Lexical.scala	/^import input.CharArrayReader.EofCh$/;"	i
input.CharArrayReader.EofCh	scala/util/parsing/combinator/lexical/StdLexical.scala	/^import input.CharArrayReader.EofCh$/;"	i
input._	scala/util/parsing/combinator/lexical/Scanners.scala	/^import input._$/;"	i
inputStream	scala/io/Source.scala	/^    val inputStream = new FileInputStream(file)$/;"	V
ins	scala/collection/convert/Wrappers.scala	/^      val ins = underlying.subList(0, i)$/;"	V
insert	scala/collection/immutable/TreeMap.scala	/^  def insert [B1 >: B](key: A, value: B1): TreeMap[A, B1] = {$/;"	m
insert	scala/collection/immutable/TreeSet.scala	/^  def insert(elem: A): TreeSet[A] = {$/;"	m
insert	scala/collection/mutable/AVLTree.scala	/^  def insert[B >: A](value: B, ordering: Ordering[B]): AVLTree[B] = Node(value, Leaf, Leaf)$/;"	m
insert	scala/collection/mutable/BufferLike.scala	/^  def insert(n: Int, elems: A*) { insertAll(n, elems) }$/;"	m
insert	scala/collection/mutable/LinkedListLike.scala	/^  def insert(that: This): Unit = {$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Any): StringBuilder = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Boolean): StringBuilder = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Byte): StringBuilder    = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Char): StringBuilder    = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Double): StringBuilder  = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Float): StringBuilder   = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Int): StringBuilder     = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Long): StringBuilder    = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: Short): StringBuilder   = insert(index, String.valueOf(x))$/;"	m
insert	scala/collection/mutable/StringBuilder.scala	/^  def insert(index: Int, x: String): StringBuilder = {$/;"	m
insertAll	scala/collection/convert/Wrappers.scala	/^    def insertAll(i: Int, elems: Traversable[A]) = {$/;"	m
insertAll	scala/collection/mutable/ArrayBuffer.scala	/^  def insertAll(n: Int, seq: Traversable[A]) {$/;"	m
insertAll	scala/collection/mutable/BufferLike.scala	/^  def insertAll(n: Int, elems: scala.collection.Traversable[A])$/;"	m
insertAll	scala/collection/mutable/BufferProxy.scala	/^  def insertAll(n: Int, iter: scala.collection.Iterable[A]) {$/;"	m
insertAll	scala/collection/mutable/ListBuffer.scala	/^  def insertAll(n: Int, seq: Traversable[A]) {$/;"	m
insertAll	scala/collection/mutable/StringBuilder.scala	/^  def insertAll(index: Int, str: Array[Char], offset: Int, len: Int): StringBuilder = {$/;"	m
insertAll	scala/collection/mutable/StringBuilder.scala	/^  def insertAll(index: Int, xs: Array[Char]): StringBuilder = {$/;"	m
insertAll	scala/collection/mutable/StringBuilder.scala	/^  def insertAll(index: Int, xs: TraversableOnce[Char]): StringBuilder = insertAll(index, xs.toArray)$/;"	m
insertAll	scala/collection/mutable/UnrolledBuffer.scala	/^  def insertAll(idx: Int, elems: scala.collection.Traversable[T]) =$/;"	m
insertEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^      def insertEntry(e: Entry) { super.findOrAddEntry(e.key, e) }$/;"	m
insertEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^    def insertEntry(\/*block: Int, *\/e: DefaultEntry[K, V]) = {$/;"	m
insertEntry	scala/collection/parallel/mutable/ParHashSet.scala	/^    def insertEntry(insertAt: Int, comesBefore: Int, elem: T): Int = {$/;"	m
insertcount	scala/collection/parallel/mutable/ParHashMap.scala	/^      var insertcount = 0$/;"	v
insertcount	scala/collection/parallel/mutable/ParHashMap.scala	/^    val insertcount = combinerTaskSupport.executeAndWaitResult(new FillBlocks(bucks, table, 0, bucks.length))$/;"	V
inserted	scala/collection/concurrent/TrieMap.scala	/^  def inserted(k: K, v: V) = new LNode(listmap + ((k, v)))$/;"	m
inserted	scala/collection/parallel/mutable/ParHashSet.scala	/^      var inserted = 0$/;"	v
insertedAt	scala/collection/concurrent/TrieMap.scala	/^  def insertedAt(pos: Int, flag: Int, nn: BasicNode, gen: Gen) = {$/;"	m
insertln	scala/collection/concurrent/TrieMap.scala	/^        def insertln() = {$/;"	m
insideIncludeElement	scala/xml/include/sax/XIncludeFilter.scala	/^  def insideIncludeElement(): Boolean = level != 0$/;"	m
intList	scala/util/parsing/json/Lexer.scala	/^  def intList = nonzero ~ rep(digit) ^^ {case x ~ y => (x :: y) mkString ""}$/;"	m
intPart	scala/util/parsing/json/Lexer.scala	/^  def intPart = zero | intList$/;"	m
intString	scala/xml/dtd/DocType.scala	/^    def intString =$/;"	m
intValue	scala/math/BigDecimal.scala	/^  def intValue    = this.bigDecimal.intValue$/;"	m
intValue	scala/math/BigInt.scala	/^  def intValue    = this.bigInteger.intValue$/;"	m
intValue	scala/math/ScalaNumericConversions.scala	/^  def intValue(): Int$/;"	m
intValue	scala/runtime/ScalaNumberProxy.scala	/^  def intValue()    = num.toInt(self)$/;"	m
internal	scala/collection/parallel/Tasks.scala	/^    def internal() = {$/;"	m
internal	scala/reflect/macros/internal/macroImpl.scala	/^package internal$/;"	p
internalArray	scala/collection/parallel/mutable/package.scala	/^    def internalArray = array$/;"	m
interruptibly	scala/xml/pull/XMLEventReader.scala	/^  def interruptibly[T](body: => T): Option[T] = try Some(body) catch {$/;"	m
intersect	scala/collection/GenSeqLike.scala	/^  def intersect[B >: A](that: GenSeq[B]): Repr$/;"	m
intersect	scala/collection/GenSetLike.scala	/^  def intersect(that: GenSet[A]): Repr = this filter that$/;"	m
intersect	scala/collection/SeqLike.scala	/^  def intersect[B >: A](that: GenSeq[B]): Repr = {$/;"	m
intersect	scala/collection/parallel/ParSeqLike.scala	/^  def intersect[U >: T](that: GenSeq[U]) = sequentially {$/;"	m
intersection	scala/collection/immutable/IntMap.scala	/^  def intersection[R](that: IntMap[R]): IntMap[T] =$/;"	m
intersection	scala/collection/immutable/LongMap.scala	/^  def intersection[R](that: LongMap[R]): LongMap[T] =$/;"	m
intersectionType	scala/reflect/Manifest.scala	/^  def intersectionType[T](parents: Manifest[_]*): Manifest[T] =$/;"	m
intersectionWith	scala/collection/immutable/IntMap.scala	/^  def intersectionWith[S, R](that: IntMap[S], f: (Int, T, S) => R): IntMap[R] = (this, that) match {$/;"	m
intersectionWith	scala/collection/immutable/LongMap.scala	/^  def intersectionWith[S, R](that: LongMap[S], f: (Long, T, S) => R): LongMap[R] = (this, that) match {$/;"	m
interval	scala/xml/persistent/CachedFileStorage.scala	/^  protected val interval = 1000$/;"	V
intflag	scala/collection/generic/Signalling.scala	/^  private val intflag: AtomicInteger = new AtomicInteger(-1)$/;"	V
into	scala/util/parsing/combinator/Parsers.scala	/^    def into[U](fq: T => Parser[U]): Parser[U] = flatMap(fq)$/;"	m
invIndexMap	scala/util/automata/SubsetConstruction.scala	/^    var invIndexMap = scala.collection.Map[Int, immutable.BitSet]()$/;"	v
invert	scala/collection/immutable/HashMap.scala	/^      def invert: Merger[A1, B1] = self$/;"	m
invert	scala/collection/immutable/HashMap.scala	/^    def invert: Merger[A, B]$/;"	m
invert	scala/collection/immutable/HashMap.scala	/^    val invert: Merger[A1, B1] = new Merger[A1, B1] {$/;"	V
invert	scala/runtime/Tuple2Zipped.scala	/^    def invert[El1, CC1[X] <: TraversableOnce[X], El2, CC2[X] <: TraversableOnce[X], That]$/;"	m
invert	scala/runtime/Tuple3Zipped.scala	/^    def invert[El1, CC1[X] <: TraversableOnce[X], El2, CC2[X] <: TraversableOnce[X], El3, CC3[X] <: TraversableOnce[X], That]$/;"	m
io._	scala/sys/process/ProcessBuilderImpl.scala	/^      import io._$/;"	i
ioFailure	scala/sys/process/package.scala	/^      def ioFailure[T](handler: IOException => T): Throwable =?> T = {$/;"	m
isAborted	scala/collection/generic/Signalling.scala	/^  def isAborted = signalDelegate.isAborted$/;"	m
isAborted	scala/collection/generic/Signalling.scala	/^  def isAborted: Boolean$/;"	m
isAllWhitespace	scala/xml/dtd/ElementValidator.scala	/^    def isAllWhitespace(a: Atom[_]) = cond(a.data) { case s: String if s.trim == "" => true }$/;"	m
isAlpha	scala/xml/parsing/TokenTests.scala	/^  def isAlpha(c: Char) = (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')$/;"	m
isAlphaDigit	scala/xml/parsing/TokenTests.scala	/^  def isAlphaDigit(c: Char) = isAlpha(c) || (c >= '0' && c <= '9')$/;"	m
isAlphaNum	scala/util/Random.scala	/^    def isAlphaNum(c: Char) = (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')$/;"	m
isAnyVal	scala/runtime/ScalaRunTime.scala	/^  def isAnyVal(x: Any) = x match {$/;"	m
isApproxSubType	scala/reflect/Manifest.scala	/^  def isApproxSubType[T: Manifest, U: Manifest] = manifest[T] <:< manifest[U]$/;"	m
isArray	scala/runtime/ScalaRunTime.scala	/^  def isArray(x: Any, atLevel: Int): Boolean =$/;"	m
isArray	scala/runtime/ScalaRunTime.scala	/^  def isArray(x: AnyRef): Boolean = isArray(x, 1)$/;"	m
isAtom	scala/xml/Node.scala	/^  def isAtom = this.isInstanceOf[Atom[_]]$/;"	m
isBefore	scala/collection/parallel/RemainsIterator.scala	/^    var isBefore = true$/;"	v
isBlack	scala/collection/immutable/RedBlack.scala	/^    def isBlack = false$/;"	m
isBlack	scala/collection/immutable/RedBlack.scala	/^    def isBlack = true$/;"	m
isBlack	scala/collection/immutable/RedBlack.scala	/^    def isBlack: Boolean$/;"	m
isBlack	scala/collection/immutable/RedBlackTree.scala	/^  def isBlack(tree: Tree[_, _]) = (tree eq null) || isBlackTree(tree)$/;"	m
isBoxedNumber	scala/runtime/BoxesRunTime.java	/^    public static boolean isBoxedNumber(Object arg) {$/;"	m	class:BoxesRunTime
isBoxedNumberOrBoolean	scala/runtime/BoxesRunTime.java	/^    public static boolean isBoxedNumberOrBoolean(Object arg) {$/;"	m	class:BoxesRunTime
isCombiner	scala/collection/parallel/ParIterableLike.scala	/^    def isCombiner = cb.isInstanceOf[Combiner[_, _]]$/;"	m
isCombiner	scala/collection/parallel/ParIterableLike.scala	/^    def isCombiner: Boolean$/;"	m
isCompleted	scala/concurrent/Future.scala	/^  def isCompleted: Boolean$/;"	m
isCompleted	scala/concurrent/Promise.scala	/^  def isCompleted: Boolean$/;"	m
isControl	scala/runtime/RichChar.scala	/^  def isControl: Boolean                = Character.isISOControl(self)$/;"	m
isDefined	scala/Option.scala	/^  def isDefined: Boolean = !isEmpty$/;"	m
isDefined	scala/concurrent/SyncVar.scala	/^  private var isDefined: Boolean = false$/;"	v
isDefinedAt	scala/PartialFunction.scala	/^    def isDefinedAt(x: A) = f1.isDefinedAt(x) || f2.isDefinedAt(x)$/;"	m
isDefinedAt	scala/PartialFunction.scala	/^    def isDefinedAt(x: A) = pf.isDefinedAt(x)$/;"	m
isDefinedAt	scala/PartialFunction.scala	/^    def isDefinedAt(x: A): Boolean = f(x).isDefined$/;"	m
isDefinedAt	scala/PartialFunction.scala	/^    def isDefinedAt(x: Any) = false$/;"	m
isDefinedAt	scala/PartialFunction.scala	/^  def isDefinedAt(x: A): Boolean$/;"	m
isDefinedAt	scala/collection/GenMapLike.scala	/^  def isDefinedAt(key: A): Boolean$/;"	m
isDefinedAt	scala/collection/GenSeqLike.scala	/^  def isDefinedAt(idx: Int): Boolean = (idx >= 0) && (idx < length)$/;"	m
isDefinedAt	scala/collection/LinearSeqOptimized.scala	/^  def isDefinedAt(x: Int): Boolean = x >= 0 && lengthCompare(x) > 0$/;"	m
isDefinedAt	scala/collection/MapLike.scala	/^  def isDefinedAt(key: A) = contains(key)$/;"	m
isDefinedAt	scala/collection/parallel/ParMapLike.scala	/^  def isDefinedAt(key: K): Boolean = contains(key)$/;"	m
isDefinedAt	scala/util/control/Exception.scala	/^        def isDefinedAt(x: Throwable) = pf isDefinedAt x$/;"	m
isDefinedAt	scala/util/control/Exception.scala	/^    def isDefinedAt(x: Throwable) = downcast(x) exists isDef$/;"	m
isDigit	scala/runtime/RichChar.scala	/^  def isDigit: Boolean                  = Character.isDigit(self)$/;"	m
isDone	scala/collection/Iterator.scala	/^      private var isDone = false$/;"	v
isDone	scala/concurrent/DelayedLazyVal.scala	/^  def isDone = _isDone$/;"	m
isDone	scala/parallel/Future.scala	/^  def isDone(): Boolean$/;"	m
isEmpty	scala/Option.scala	/^  def isEmpty = false$/;"	m
isEmpty	scala/Option.scala	/^  def isEmpty = true$/;"	m
isEmpty	scala/Option.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/GenTraversableOnce.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/IndexedSeqOptimized.scala	/^  def isEmpty: Boolean = { length == 0 }$/;"	m
isEmpty	scala/collection/Iterator.scala	/^  def isEmpty: Boolean = !hasNext$/;"	m
isEmpty	scala/collection/LinearSeqOptimized.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/TraversableLike.scala	/^  def isEmpty: Boolean = {$/;"	m
isEmpty	scala/collection/TraversableOnce.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/convert/Wrappers.scala	/^    def isEmpty: Boolean = underlying.isEmpty$/;"	m
isEmpty	scala/collection/generic/GenericTraversableTemplate.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/immutable/List.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/immutable/Range.scala	/^    val isEmpty = ($/;"	V
isEmpty	scala/collection/immutable/Range.scala	/^  override final val isEmpty = ($/;"	V
isEmpty	scala/collection/immutable/RedBlack.scala	/^    def isEmpty = false$/;"	m
isEmpty	scala/collection/immutable/RedBlack.scala	/^    def isEmpty = true$/;"	m
isEmpty	scala/collection/immutable/RedBlack.scala	/^    def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/immutable/RedBlackTree.scala	/^  def isEmpty(tree: Tree[_, _]): Boolean = tree eq null$/;"	m
isEmpty	scala/collection/immutable/Stream.scala	/^  def isEmpty: Boolean$/;"	m
isEmpty	scala/collection/parallel/ParIterableLike.scala	/^  def isEmpty = size == 0$/;"	m
isEmpty	scala/util/parsing/combinator/Parsers.scala	/^    def isEmpty = !successful$/;"	m
isEnqueued	scala/ref/Reference.scala	/^  def isEnqueued(): Boolean$/;"	m
isEnqueued	scala/ref/ReferenceWrapper.scala	/^  def isEnqueued = underlying.isEnqueued$/;"	m
isEven	scala/PartialFunction.scala	/^ *  val isEven: PartialFunction[Int, String] = {$/;"	V
isFailure	scala/util/Try.scala	/^  def isFailure: Boolean = false$/;"	m
isFailure	scala/util/Try.scala	/^  def isFailure: Boolean = true$/;"	m
isFailure	scala/util/Try.scala	/^  def isFailure: Boolean$/;"	m
isFinal	scala/util/automata/DetWordAutom.scala	/^  def isFinal(q: Int)        = finals(q) != 0$/;"	m
isFinite	scala/concurrent/duration/Duration.scala	/^  def isFinite(): Boolean$/;"	m
isFirst	scala/collection/Iterator.scala	/^      def isFirst = prevSize == 0$/;"	m
isFirst	scala/collection/immutable/PagedSeq.scala	/^    var isFirst = true$/;"	v
isHighSurrogate	scala/runtime/RichChar.scala	/^  def isHighSurrogate: Boolean          = Character.isHighSurrogate(self)$/;"	m
isIdentifierIgnorable	scala/runtime/RichChar.scala	/^  def isIdentifierIgnorable: Boolean    = Character.isIdentifierIgnorable(self)$/;"	m
isInclusive	scala/collection/immutable/Range.scala	/^  def isInclusive = false$/;"	m
isInfinity	scala/runtime/RichDouble.scala	/^  def isInfinity: Boolean = java.lang.Double.isInfinite(self)$/;"	m
isInfinity	scala/runtime/RichFloat.scala	/^  def isInfinity: Boolean = java.lang.Float.isInfinite(self)$/;"	m
isJavaAtLeast	scala/util/Properties.scala	/^  def isJavaAtLeast(version: String) = {$/;"	m
isLast	scala/collection/immutable/PagedSeq.scala	/^  var isLast: Boolean = false$/;"	v
isLeaf	scala/xml/PrettyPrinter.scala	/^    def isLeaf(l: Node) = l match {$/;"	m
isLeft	scala/util/Either.scala	/^  def isLeft = false$/;"	m
isLeft	scala/util/Either.scala	/^  def isLeft = true$/;"	m
isLeft	scala/util/Either.scala	/^  def isLeft: Boolean$/;"	m
isLetter	scala/runtime/RichChar.scala	/^  def isLetter: Boolean                 = Character.isLetter(self)$/;"	m
isLetterOrDigit	scala/runtime/RichChar.scala	/^  def isLetterOrDigit: Boolean          = Character.isLetterOrDigit(self)$/;"	m
isLowSurrogate	scala/runtime/RichChar.scala	/^  def isLowSurrogate: Boolean           = Character.isLowSurrogate(self)$/;"	m
isLower	scala/runtime/RichChar.scala	/^  def isLower: Boolean                  = Character.isLowerCase(self)$/;"	m
isMac	scala/util/Properties.scala	/^  def isMac                 = javaVendor startsWith "Apple"$/;"	m
isMirrored	scala/runtime/RichChar.scala	/^  def isMirrored: Boolean               = Character.isMirrored(self)$/;"	m
isMixed	scala/xml/dtd/ContentModel.scala	/^  def isMixed(cm: ContentModel) = cond(cm) { case _: MIXED => true }$/;"	m
isName	scala/xml/parsing/TokenTests.scala	/^  def isName(s: String) =$/;"	m
isNameChar	scala/xml/parsing/TokenTests.scala	/^  def isNameChar(ch: Char) = {$/;"	m
isNameStart	scala/xml/parsing/TokenTests.scala	/^  def isNameStart(ch: Char) = {$/;"	m
isNegInfinity	scala/runtime/RichDouble.scala	/^  def isNegInfinity: Boolean = isInfinity && self < 0.0$/;"	m
isNegInfinity	scala/runtime/RichFloat.scala	/^  def isNegInfinity: Boolean = isInfinity && self < 0.0f$/;"	m
isNewline	scala/io/Source.scala	/^    def isNewline(ch: Char) = ch == '\\r' || ch == '\\n'$/;"	m
isNullInode	scala/collection/concurrent/TrieMap.scala	/^  def isNullInode(ct: TrieMap[K, V]) = GCAS_READ(ct) eq null$/;"	m
isNullable	scala/util/regexp/Base.scala	/^    final lazy val isNullable = true$/;"	V
isNullable	scala/util/regexp/Base.scala	/^    final val isNullable = r1.isNullable$/;"	V
isNullable	scala/util/regexp/Base.scala	/^    final val isNullable = rs exists (_.isNullable)$/;"	V
isNullable	scala/util/regexp/Base.scala	/^    final val isNullable = rs forall (_.isNullable)$/;"	V
isNullable	scala/util/regexp/Base.scala	/^    val isNullable: Boolean$/;"	V
isNullable	scala/util/regexp/PointedHedgeExp.scala	/^    final val isNullable = false$/;"	V
isNullable	scala/util/regexp/PointedHedgeExp.scala	/^    final val isNullable = r1.isNullable && r2.isNullable \/\/?$/;"	V
isNullable	scala/util/regexp/WordExp.scala	/^    final lazy val isNullable = false$/;"	V
isOdd	scala/PartialFunction.scala	/^ *  val isOdd: PartialFunction[Int, String] = {$/;"	V
isOkToRun	scala/collection/parallel/Tasks.scala	/^      var isOkToRun = false$/;"	v
isOverdue	scala/concurrent/duration/Deadline.scala	/^  def isOverdue(): Boolean = (time.toNanos - System.nanoTime()) < 0$/;"	m
isOverflow	scala/collection/immutable/NumericRange.scala	/^      val isOverflow = longCount == 0 && num.lt(num.plus(start, step), end) == upward$/;"	V
isParIterable	scala/collection/parallel/package.scala	/^    def isParIterable = t.isInstanceOf[ParIterable[_]]$/;"	m
isParIterable	scala/collection/parallel/package.scala	/^    def isParIterable: Boolean$/;"	m
isParSeq	scala/collection/parallel/package.scala	/^    def isParSeq = t.isInstanceOf[ParSeq[_]]$/;"	m
isParSeq	scala/collection/parallel/package.scala	/^    def isParSeq: Boolean$/;"	m
isParallel	scala/collection/parallel/package.scala	/^    def isParallel = bf.isInstanceOf[Parallel]$/;"	m
isParallel	scala/collection/parallel/package.scala	/^    def isParallel = t.isInstanceOf[Parallel]$/;"	m
isParallel	scala/collection/parallel/package.scala	/^    def isParallel: Boolean$/;"	m
isParameterEntity	scala/xml/parsing/MarkupParser.scala	/^    var isParameterEntity = false$/;"	v
isPosInfinity	scala/runtime/RichDouble.scala	/^  def isPosInfinity: Boolean = isInfinity && self > 0.0$/;"	m
isPosInfinity	scala/runtime/RichFloat.scala	/^  def isPosInfinity: Boolean = isInfinity && self > 0.0f$/;"	m
isPrefixed	scala/xml/Attribute.scala	/^  def isPrefixed: Boolean = pre != null$/;"	m
isPrefixed	scala/xml/MetaData.scala	/^  def isPrefixed: Boolean$/;"	m
isPrefixed	scala/xml/Null.scala	/^  def isPrefixed = false$/;"	m
isProbablePrime	scala/math/BigInt.scala	/^  def isProbablePrime(certainty: Int) = this.bigInteger.isProbablePrime(certainty)$/;"	m
isPubIDChar	scala/xml/parsing/TokenTests.scala	/^  def isPubIDChar(ch: Char): Boolean =$/;"	m
isReadOnly	scala/collection/concurrent/TrieMap.scala	/^  def isReadOnly = rootupdater eq null$/;"	m
isReleasable	scala/concurrent/ManagedBlocker.scala	/^  def isReleasable: Boolean$/;"	m
isRemainingCheap	scala/collection/parallel/RemainsIterator.scala	/^  def isRemainingCheap = true$/;"	m
isRight	scala/util/Either.scala	/^  def isRight = false$/;"	m
isRight	scala/util/Either.scala	/^  def isRight = true$/;"	m
isRight	scala/util/Either.scala	/^  def isRight: Boolean$/;"	m
isScalaClass	scala/runtime/ScalaRunTime.scala	/^    def isScalaClass(x: AnyRef)         = packageOf(x) startsWith "scala."$/;"	m
isScalaCompilerClass	scala/runtime/ScalaRunTime.scala	/^    def isScalaCompilerClass(x: AnyRef) = packageOf(x) startsWith "scala.tools.nsc."$/;"	m
isSet	scala/concurrent/SyncVar.scala	/^  def isSet: Boolean = synchronized {$/;"	m
isSet	scala/sys/BooleanProp.scala	/^    val isSet = value$/;"	V
isSet	scala/sys/Prop.scala	/^  def isSet: Boolean$/;"	m
isSet	scala/sys/PropImpl.scala	/^  def isSet    = underlying contains key$/;"	m
isSink	scala/util/automata/DetWordAutom.scala	/^  def isSink(q: Int)         = delta(q).isEmpty && default(q) == q$/;"	m
isSmaller	scala/collection/immutable/RedBlack.scala	/^  def isSmaller(x: A, y: A): Boolean$/;"	m
isSmaller	scala/collection/immutable/TreeMap.scala	/^  def isSmaller(x: A, y: A) = ordering.lt(x, y)$/;"	m
isSmaller	scala/collection/immutable/TreeSet.scala	/^  def isSmaller(x: A, y: A) = compare(x,y) < 0$/;"	m
isSpace	scala/xml/parsing/FactoryAdapter.scala	/^        val isSpace = c.isWhitespace$/;"	V
isSpaceChar	scala/runtime/RichChar.scala	/^  def isSpaceChar: Boolean              = Character.isSpaceChar(self)$/;"	m
isStrictSplitterCollection	scala/collection/parallel/ParIterableLike.scala	/^  def isStrictSplitterCollection = true$/;"	m
isSuccess	scala/util/Try.scala	/^  def isSuccess: Boolean = false$/;"	m
isSuccess	scala/util/Try.scala	/^  def isSuccess: Boolean = true$/;"	m
isSuccess	scala/util/Try.scala	/^  def isSuccess: Boolean$/;"	m
isSurrogate	scala/runtime/RichChar.scala	/^  def isSurrogate: Boolean              = isHighSurrogate || isLowSurrogate$/;"	m
isTitleCase	scala/runtime/RichChar.scala	/^  def isTitleCase: Boolean              = Character.isTitleCase(self)$/;"	m
isTraversableAgain	scala/collection/GenTraversableLike.scala	/^  def isTraversableAgain: Boolean$/;"	m
isTraversableAgain	scala/collection/GenTraversableOnce.scala	/^  def isTraversableAgain: Boolean$/;"	m
isTraversableAgain	scala/collection/Iterator.scala	/^  def isTraversableAgain = false$/;"	m
isTuple	scala/runtime/ScalaRunTime.scala	/^  def isTuple(x: Any) = x != null && tupleNames(x.getClass.getName)$/;"	m
isUnicodeIdentifierPart	scala/runtime/RichChar.scala	/^  def isUnicodeIdentifierPart: Boolean  = Character.isUnicodeIdentifierPart(self)$/;"	m
isUnicodeIdentifierStart	scala/runtime/RichChar.scala	/^  def isUnicodeIdentifierStart: Boolean = Character.isUnicodeIdentifierStart(self)$/;"	m
isUpper	scala/runtime/RichChar.scala	/^  def isUpper: Boolean                  = Character.isUpperCase(self)$/;"	m
isValDef	scala/Enumeration.scala	/^    def isValDef(m: JMethod) = fields exists (fd => fd.getName == m.getName && fd.getType == m.getReturnType)$/;"	m
isValidByte	scala/math/ScalaNumericConversions.scala	/^  def isValidByte  = isWhole && (toInt == toByte)$/;"	m
isValidChar	scala/math/ScalaNumericConversions.scala	/^  def isValidChar  = isWhole && (toInt >= Char.MinValue && toInt <= Char.MaxValue)$/;"	m
isValidDouble	scala/math/BigDecimal.scala	/^  def isValidDouble = {$/;"	m
isValidDouble	scala/math/BigInt.scala	/^  def isValidDouble = {$/;"	m
isValidFloat	scala/math/BigDecimal.scala	/^  def isValidFloat = {$/;"	m
isValidFloat	scala/math/BigInt.scala	/^  def isValidFloat = {$/;"	m
isValidIANAEncoding	scala/xml/parsing/TokenTests.scala	/^  def isValidIANAEncoding(ianaEncoding: Seq[Char]) = {$/;"	m
isValidInt	scala/math/ScalaNumericConversions.scala	/^  def isValidInt   = isWhole && (toLong == toInt)$/;"	m
isValidLong	scala/math/BigDecimal.scala	/^  def isValidLong  = noArithmeticException(toLongExact)$/;"	m
isValidLong	scala/math/BigInt.scala	/^           def isValidLong  = this >= Long.MinValue && this <= Long.MaxValue$/;"	m
isValidShort	scala/math/ScalaNumericConversions.scala	/^  def isValidShort = isWhole && (toInt == toShort)$/;"	m
isValidating	scala/xml/parsing/MarkupHandler.scala	/^  val isValidating: Boolean = false$/;"	V
isValidating	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  final override val isValidating = true$/;"	V
isValueClass	scala/runtime/ScalaRunTime.scala	/^  def isValueClass(clazz: jClass[_]) = clazz.isPrimitive()$/;"	m
isWhitespace	scala/runtime/RichChar.scala	/^  def isWhitespace: Boolean             = Character.isWhitespace(self)$/;"	m
isWhole	scala/math/BigDecimal.scala	/^  def isWhole() = (this remainder 1) == BigDecimal(0)$/;"	m
isWhole	scala/math/BigInt.scala	/^  def isWhole() = true$/;"	m
isWhole	scala/math/ScalaNumber.java	/^  protected abstract boolean isWhole();$/;"	m	class:ScalaNumber
isWhole	scala/math/ScalaNumericConversions.scala	/^  def isWhole(): Boolean$/;"	m
isWhole	scala/runtime/RichInt.scala	/^  def isWhole() = true$/;"	m
isWhole	scala/runtime/ScalaNumberProxy.scala	/^  def isWhole() = false$/;"	m
isWhole	scala/runtime/ScalaNumberProxy.scala	/^  def isWhole() = true$/;"	m
isWin	scala/util/Properties.scala	/^  def isWin                 = osName startsWith "Windows"$/;"	m
isdone	scala/concurrent/impl/ExecutionContextImpl.scala	/^          @volatile var isdone = false$/;"	v
it	scala/collection/IterableLike.scala	/^      val it = iterator drop lo$/;"	V
it	scala/collection/IterableLike.scala	/^      val it = iterator$/;"	V
it	scala/collection/IterableLike.scala	/^    val it = iterator$/;"	V
it	scala/collection/Iterator.scala	/^      private lazy val it = {$/;"	V
it	scala/collection/Iterator.scala	/^    \/\/ if "val it = that" is inside the block, then hasNext on an empty$/;"	V
it	scala/collection/Iterator.scala	/^    lazy val it = that.toIterator$/;"	V
it	scala/collection/SeqLike.scala	/^      val it = iterator$/;"	V
it	scala/collection/SeqLike.scala	/^    val it = reverseIterator$/;"	V
it	scala/collection/SeqLike.scala	/^    var it = iterator.drop(from)$/;"	v
it	scala/collection/TraversableLike.scala	/^    val it = Iterator.iterate(thisCollection)(f) takeWhile (x => !x.isEmpty)$/;"	V
it	scala/collection/TraversableOnce.scala	/^      private var it: Iterator[A] = Iterator.empty$/;"	v
it	scala/collection/concurrent/TrieMap.scala	/^        val it = newIterator(level + 1, ct, false)$/;"	V
it	scala/collection/concurrent/TrieMap.scala	/^    val it = iterator$/;"	V
it	scala/collection/concurrent/TrieMap.scala	/^    val it = subiter$/;"	V
it	scala/collection/immutable/TreeMap.scala	/^    val it = iterator$/;"	V
it	scala/collection/immutable/TreeSet.scala	/^    val it = iterator$/;"	V
it	scala/collection/mutable/OpenHashMap.scala	/^    val it = new OpenHashMap[Key, Value]$/;"	V
it	scala/collection/parallel/ParIterableLike.scala	/^    val it = splitter drop from$/;"	V
it	scala/collection/parallel/ParIterableLike.scala	/^    val it = splitter drop n$/;"	V
it	scala/collection/parallel/ParIterableLike.scala	/^    val it = splitter$/;"	V
it	scala/collection/parallel/mutable/ParHashSet.scala	/^      \/\/ var it = elems.iterator$/;"	v
it	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val it = newIterator(0, ct, false)$/;"	V
it	scala/collection/parallel/package.scala	/^      val it = t.toIterator$/;"	V
it	scala/collection/script/Message.scala	/^    var it = this.iterator$/;"	v
it	scala/util/matching/Regex.scala	/^    val it = new Regex.MatchIterator(target, this, groupNames).replacementData$/;"	V
it	scala/xml/PrettyPrinter.scala	/^             val it = sq.iterator;$/;"	V
it	scala/xml/Utility.scala	/^      val it = children.iterator$/;"	V
it	scala/xml/Utility.scala	/^    val it = value.iterator$/;"	V
it	scala/xml/dtd/Scanner.scala	/^  private var it: Iterator[Char] = null$/;"	v
it	scala/xml/parsing/FactoryAdapter.scala	/^      var it = ch.slice(offset, offset + length).iterator$/;"	v
it	scala/xml/parsing/MarkupParserCommon.scala	/^    val it = attval.iterator.buffered$/;"	V
it	scala/xml/persistent/SetStorage.scala	/^    val it = super.initialNodes$/;"	V
it1	scala/collection/immutable/Stream.scala	/^ *  val it1 = stream1.iterator$/;"	V
it1	scala/runtime/Tuple2Zipped.scala	/^        val it1 = x._1.toIterator$/;"	V
it1	scala/runtime/Tuple3Zipped.scala	/^        val it1 = x._1.toIterator$/;"	V
it2	scala/collection/Iterator.scala	/^   *    val it2 = Iterator.iterate(20)(_ + 5)$/;"	V
it2	scala/collection/immutable/Stream.scala	/^ *  val it2 = stream2.iterator$/;"	V
it2	scala/runtime/Tuple2Zipped.scala	/^        val it2 = x._2.toIterator$/;"	V
it2	scala/runtime/Tuple3Zipped.scala	/^        val it2 = x._2.toIterator$/;"	V
it3	scala/collection/immutable/Stream.scala	/^ *  val it3 = new Iterator[Int] {$/;"	V
it3	scala/runtime/Tuple3Zipped.scala	/^        val it3 = x._3.toIterator$/;"	V
items	scala/xml/PrettyPrinter.scala	/^  protected var items: List[Item] = Nil$/;"	v
iter	scala/collection/MapLike.scala	/^    val iter = self.iterator$/;"	V
iter	scala/collection/SeqLike.scala	/^        val iter = S.iterator.drop(m0)$/;"	V
iter	scala/collection/generic/IsTraversableLike.scala	/^ *        val iter = coll.toIterator$/;"	V
iter	scala/collection/mutable/HashMap.scala	/^    val iter    = entriesIterator$/;"	V
iter	scala/collection/parallel/ParMapLike.scala	/^      val iter = s$/;"	V
iter	scala/io/BufferedSource.scala	/^  override lazy val iter = ($/;"	V
iter	scala/io/Source.scala	/^    lazy val iter: BufferedIterator[Char] = Source.this.iter.buffered$/;"	V
iter	scala/io/Source.scala	/^    val iter = iterable.iterator$/;"	V
iter	scala/io/Source.scala	/^  protected val iter: Iterator[Char]$/;"	V
iter	scala/util/parsing/ast/Binders.scala	/^      val iter = this.iterator.zipWithIndex$/;"	V
iter	scala/xml/parsing/MarkupParser.scala	/^      val iter = queue.iterator ++ new Iterator[Char] {$/;"	V
iter	scala/xml/parsing/MarkupParser.scala	/^    val iter = new Iterator[Char] {$/;"	V
iterTable	scala/collection/mutable/HashTable.scala	/^    val iterTable = table$/;"	V
iterate	scala/Array.scala	/^  def iterate[T: ClassTag](start: T, len: Int)(f: T => T): Array[T] = {$/;"	m
iterate	scala/collection/Iterator.scala	/^  def iterate[T](start: T)(f: T => T): Iterator[T] = new AbstractIterator[T] {$/;"	m
iterate	scala/collection/generic/GenTraversableFactory.scala	/^  def iterate[A](start: A, len: Int)(f: A => A): CC[A] = {$/;"	m
iterate	scala/collection/immutable/Stream.scala	/^  def iterate[A](start: A)(f: A => A): Stream[A] = cons(start, iterate(f(start))(f))$/;"	m
iterate	scala/xml/MetaData.scala	/^    def iterate(md: MetaData, normalized_attribs: MetaData, set: Set[String]): MetaData = {$/;"	m
iterated	scala/collection/parallel/mutable/ParTrieMap.scala	/^  var iterated = 0$/;"	v
iterator	scala/Enumeration.scala	/^    def iterator = nnIds.iterator map (id => thisenum.apply(id + bottomId))$/;"	m
iterator	scala/Option.scala	/^  def iterator: Iterator[A] =$/;"	m
iterator	scala/collection/BitSetLike.scala	/^  def iterator: Iterator[Int] = new AbstractIterator[Int] {$/;"	m
iterator	scala/collection/GenIterableLike.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = forced.iterator$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator ++ rest$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator dropWhile pred$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator filter pred$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator map mapping$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator = self.iterator takeWhile pred$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[(A, B)] = self.iterator zip other.iterator$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[(A1, B)] =$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[A] = self.iterator.slice(from, until)$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[B] = self.iterator flatMap mapping$/;"	m
iterator	scala/collection/GenIterableViewLike.scala	/^    def iterator: Iterator[B]$/;"	m
iterator	scala/collection/GenSetLike.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/IndexedSeqLike.scala	/^  def iterator: Iterator[A] = new Elements(0, length)$/;"	m
iterator	scala/collection/IterableLike.scala	/^  def iterator: Iterator[A]$/;"	m
iterator	scala/collection/IterableViewLike.scala	/^    def iterator: Iterator[B]$/;"	m
iterator	scala/collection/LinearSeqLike.scala	/^  def iterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
iterator	scala/collection/Map.scala	/^    def iterator                    = underlying.iterator$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = for ((k, v) <- self.iterator) yield (k, f(v))$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = keysIterator$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = self.iterator.filter(kv => p(kv._1))$/;"	m
iterator	scala/collection/MapLike.scala	/^    def iterator = valuesIterator$/;"	m
iterator	scala/collection/MapLike.scala	/^  def iterator: Iterator[(A, B)]$/;"	m
iterator	scala/collection/TraversableView.scala	/^    def iterator: Iterator[A] = Iterator.empty$/;"	m
iterator	scala/collection/concurrent/TrieMap.scala	/^  def iterator: Iterator[(K, V)] =$/;"	m
iterator	scala/collection/convert/Wrappers.scala	/^      def iterator = new ju.Iterator[ju.Map.Entry[A, B]] {$/;"	m
iterator	scala/collection/convert/Wrappers.scala	/^    def iterator = enumerationAsScalaIterator(underlying.keys) map (k => (k, underlying get k))$/;"	m
iterator	scala/collection/convert/Wrappers.scala	/^    def iterator = new ju.Iterator[A] {$/;"	m
iterator	scala/collection/convert/Wrappers.scala	/^    def iterator = underlying.iterator$/;"	m
iterator	scala/collection/convert/Wrappers.scala	/^    def iterator: Iterator[(A, B)] = new AbstractIterator[(A, B)] {$/;"	m
iterator	scala/collection/convert/Wrappers.scala	/^    def iterator: Iterator[(String, String)] = new AbstractIterator[(String, String)] {$/;"	m
iterator	scala/collection/immutable/HashMap.scala	/^  def iterator: Iterator[(A,B)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/HashSet.scala	/^  def iterator: Iterator[A] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/IntMap.scala	/^  def iterator: Iterator[(Int, T)] = this match {$/;"	m
iterator	scala/collection/immutable/ListMap.scala	/^  def iterator: Iterator[(A,B)] =$/;"	m
iterator	scala/collection/immutable/ListSet.scala	/^  def iterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
iterator	scala/collection/immutable/LongMap.scala	/^  def iterator: Iterator[(Long, T)] = this match {$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1), (key2, value2))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1), (key2, value2), (key3, value3))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator = Iterator((key1, value1), (key2, value2), (key3, value3), (key4, value4))$/;"	m
iterator	scala/collection/immutable/Map.scala	/^    def iterator: Iterator[(Any, Nothing)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/RedBlack.scala	/^    def iterator: Iterator[(A, B)] =$/;"	m
iterator	scala/collection/immutable/RedBlack.scala	/^    def iterator: Iterator[(A, B)]$/;"	m
iterator	scala/collection/immutable/RedBlack.scala	/^    def iterator: Iterator[(A, Nothing)] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/RedBlackTree.scala	/^  def iterator[A, B](tree: Tree[A, B]): Iterator[(A, B)] = new EntriesIterator(tree)$/;"	m
iterator	scala/collection/immutable/Set.scala	/^    def iterator: Iterator[A] =$/;"	m
iterator	scala/collection/immutable/Set.scala	/^    def iterator: Iterator[Any] = Iterator.empty$/;"	m
iterator	scala/collection/immutable/TreeSet.scala	/^  def iterator: Iterator[A] = RB.keysIterator(tree)$/;"	m
iterator	scala/collection/mutable/AVLTree.scala	/^  def iterator[B >: A]: Iterator[B] = Iterator.empty$/;"	m
iterator	scala/collection/mutable/ArrayStack.scala	/^  def iterator: Iterator[T] = new AbstractIterator[T] {$/;"	m
iterator	scala/collection/mutable/DefaultMapModel.scala	/^  def iterator = entries map {e => (e.key, e.value)}$/;"	m
iterator	scala/collection/mutable/HashMap.scala	/^  def iterator = entriesIterator map {e => (e.key, e.value)}$/;"	m
iterator	scala/collection/mutable/History.scala	/^  def iterator: Iterator[(Pub, Evt)] = log.iterator$/;"	m
iterator	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  def iterator: Iterator[(A, B)] = imap.iterator$/;"	m
iterator	scala/collection/mutable/ImmutableSetAdaptor.scala	/^  def iterator: Iterator[A] = set.iterator$/;"	m
iterator	scala/collection/mutable/LinkedHashMap.scala	/^  def iterator: Iterator[(A, B)] = new AbstractIterator[(A, B)] {$/;"	m
iterator	scala/collection/mutable/LinkedHashSet.scala	/^  def iterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
iterator	scala/collection/mutable/ListMap.scala	/^  def iterator: Iterator[(A, B)] = elems.iterator$/;"	m
iterator	scala/collection/mutable/OpenHashMap.scala	/^  def iterator: Iterator[(Key, Value)] = new AbstractIterator[(Key, Value)] {$/;"	m
iterator	scala/collection/mutable/UnrolledBuffer.scala	/^  def iterator: Iterator[T] = new AbstractIterator[T] {$/;"	m
iterator	scala/collection/parallel/ParIterableLike.scala	/^  def iterator: Splitter[T] = splitter$/;"	m
iterator	scala/collection/parallel/ParIterableView.scala	/^    def iterator: Iterator[T] = Iterator.empty$/;"	m
iterator	scala/collection/parallel/ParSeqView.scala	/^    def iterator: Iterator[T] = Iterator.empty$/;"	m
iterator	scala/sys/SystemProperties.scala	/^  def iterator: Iterator[(String, String)] =$/;"	m
iterator	scala/util/parsing/ast/Binders.scala	/^    def iterator = substitution.keysIterator$/;"	m
iters	scala/collection/parallel/mutable/ParHashMap.scala	/^  var iters = 0$/;"	v
itertable	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    private val itertable = table$/;"	V
itertable	scala/collection/parallel/mutable/ParHashTable.scala	/^    private val itertable = table$/;"	V
itr	scala/collection/SetLike.scala	/^    private var itr: Iterator[This] = Iterator.empty$/;"	v
its	scala/collection/TraversableOnce.scala	/^      val its = travs.toIterator$/;"	V
itsize	scala/collection/parallel/ParSeqLike.scala	/^      val itsize = pit.remaining$/;"	V
iv	scala/runtime/ScalaRunTime.scala	/^    val iv = dv.toInt$/;"	V
iv	scala/runtime/ScalaRunTime.scala	/^    val iv = fv.toInt$/;"	V
ix	scala/util/automata/SubsetConstruction.scala	/^    var ix = 0$/;"	v
ix	scala/xml/dtd/Decl.scala	/^    var ix  = tmp indexOf '%'$/;"	v
iz	scala/xml/dtd/Decl.scala	/^      val iz = tmp.indexOf(';', ix)$/;"	V
j	scala/Array.scala	/^    var j = destPos$/;"	v
j	scala/collection/IndexedSeqOptimized.scala	/^      var j = 0$/;"	v
j	scala/collection/IndexedSeqOptimized.scala	/^      var j = that.length - 1$/;"	v
j	scala/collection/IndexedSeqOptimized.scala	/^    var j = start$/;"	v
j	scala/collection/SeqLike.scala	/^        var j = idxs.length - 1$/;"	v
j	scala/collection/SeqLike.scala	/^    val j = that.iterator$/;"	V
j	scala/collection/mutable/OpenHashMap.scala	/^    var j = hash$/;"	v
j	scala/collection/mutable/PriorityQueue.scala	/^      var j = 2 * k$/;"	v
j	scala/collection/parallel/RemainsIterator.scala	/^    var j = 0$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^        var j = from$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = from$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = i$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = ntil - 1$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = srcfrom$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = start$/;"	v
j	scala/collection/parallel/mutable/ParArray.scala	/^      var j = startpos$/;"	v
j	scala/util/MurmurHash.scala	/^    var j = 0$/;"	v
j	scala/util/Sorting.scala	/^          var j = i$/;"	v
j	scala/util/parsing/combinator/RegexParsers.scala	/^      var j = start$/;"	v
j	scala/xml/dtd/ElementValidator.scala	/^      val j = exc.length$/;"	V
java.beans._	scala/beans/ScalaBeanInfo.scala	/^  import java.beans._$/;"	i
java.io.BufferedReader	scala/util/parsing/input/StreamReader.scala	/^import java.io.BufferedReader$/;"	i
java.io.File	scala/xml/parsing/ConstructingParser.scala	/^import java.io.File$/;"	i
java.io.File	scala/xml/persistent/SetStorage.scala	/^import java.io.File$/;"	i
java.io.File.separator	scala/xml/parsing/ExternalSources.scala	/^import java.io.File.separator$/;"	i
java.io.InputStream	scala/xml/include/sax/EncodingHeuristics.scala	/^import java.io.InputStream$/;"	i
java.io.Writer	scala/text/Document.scala	/^import java.io.Writer$/;"	i
java.io._	scala/collection/immutable/List.scala	/^import java.io._$/;"	i
java.io._	scala/collection/immutable/PagedSeq.scala	/^import java.io._$/;"	i
java.io._	scala/collection/mutable/ListBuffer.scala	/^import java.io._$/;"	i
java.io._	scala/sys/process/ProcessLogger.scala	/^import java.io._$/;"	i
java.io._	scala/util/Marshal.scala	/^  import java.io._$/;"	i
java.io.{ BufferedReader, InputStreamReader, FilterInputStream, FilterOutputStream }	scala/sys/process/BasicIO.scala	/^import java.io.{ BufferedReader, InputStreamReader, FilterInputStream, FilterOutputStream }$/;"	i
java.io.{ File, FileDescriptor, FileInputStream, FileOutputStream }	scala/xml/XML.scala	/^import java.io.{ File, FileDescriptor, FileInputStream, FileOutputStream }$/;"	i
java.io.{ File, FileOutputStream }	scala/xml/persistent/CachedFileStorage.scala	/^import java.io.{ File, FileOutputStream }$/;"	i
java.io.{ File, OutputStream, OutputStreamWriter, Writer, IOException }	scala/xml/include/sax/XIncluder.scala	/^import java.io.{ File, OutputStream, OutputStreamWriter, Writer, IOException }$/;"	i
java.io.{ FileInputStream, FileOutputStream }	scala/sys/process/ProcessBuilderImpl.scala	/^import java.io.{ FileInputStream, FileOutputStream }$/;"	i
java.io.{ FileInputStream, InputStream, PrintStream, File => JFile }	scala/io/Source.scala	/^import java.io.{ FileInputStream, InputStream, PrintStream, File => JFile }$/;"	i
java.io.{ IOException, PrintWriter }	scala/util/Properties.scala	/^import java.io.{ IOException, PrintWriter }$/;"	i
java.io.{ InputStream, BufferedInputStream, InputStreamReader, IOException, UnsupportedEncodingException }	scala/xml/include/sax/XIncludeFilter.scala	/^import java.io.{ InputStream, BufferedInputStream, InputStreamReader, IOException, UnsupportedEncodingException }$/;"	i
java.io.{ InputStream, BufferedReader, InputStreamReader, PushbackReader }	scala/io/BufferedSource.scala	/^import java.io.{ InputStream, BufferedReader, InputStreamReader, PushbackReader }$/;"	i
java.io.{ InputStream, Reader, File, FileDescriptor, FileInputStream }	scala/xml/parsing/FactoryAdapter.scala	/^import java.io.{ InputStream, Reader, File, FileDescriptor, FileInputStream }$/;"	i
java.io.{ InputStream, Reader, StringReader, File, FileDescriptor, FileInputStream }	scala/xml/factory/NodeFactory.scala	/^import java.io.{ InputStream, Reader, StringReader, File, FileDescriptor, FileInputStream }$/;"	i
java.io.{ InputStream, Reader, StringReader, File, FileDescriptor, FileInputStream }	scala/xml/factory/XMLLoader.scala	/^import java.io.{ InputStream, Reader, StringReader, File, FileDescriptor, FileInputStream }$/;"	i
java.io.{ InputStream, Reader, StringReader, Writer }	scala/xml/XML.scala	/^import java.io.{ InputStream, Reader, StringReader, Writer }$/;"	i
java.io.{ PipedInputStream, PipedOutputStream }	scala/sys/process/ProcessImpl.scala	/^import java.io.{ PipedInputStream, PipedOutputStream }$/;"	i
java.io.{BufferedReader, InputStream, InputStreamReader,	scala/Console.scala	/^import java.io.{BufferedReader, InputStream, InputStreamReader,$/;"	i
java.io.{OutputStream, PrintStream}	scala/runtime/WorksheetSupport.scala	/^import java.io.{OutputStream, PrintStream}$/;"	i
java.lang.Character	scala/runtime/RichChar.scala	/^import java.lang.Character$/;"	i
java.lang.Character._	scala/xml/parsing/TokenTests.scala	/^    import java.lang.Character._$/;"	i
java.lang.Double.doubleToLongBits	scala/runtime/ScalaRunTime.scala	/^import java.lang.Double.doubleToLongBits$/;"	i
java.lang.InheritableThreadLocal	scala/util/DynamicVariable.scala	/^import java.lang.InheritableThreadLocal$/;"	i
java.lang.Integer.{ rotateLeft => rotl }	scala/util/MurmurHash.scala	/^import java.lang.Integer.{ rotateLeft => rotl }$/;"	i
java.lang.Integer.{ rotateLeft => rotl }	scala/util/hashing/MurmurHash3.scala	/^import java.lang.Integer.{ rotateLeft => rotl }$/;"	i
java.lang.Long.{ numberOfLeadingZeros => leading }	scala/concurrent/duration/Duration.scala	/^    import java.lang.Long.{ numberOfLeadingZeros => leading }$/;"	i
java.lang.System	scala/compat/Platform.scala	/^import java.lang.System$/;"	i
java.lang.Thread	scala/concurrent/ThreadRunner.scala	/^import java.lang.Thread$/;"	i
java.lang.Thread	scala/concurrent/ops.scala	/^import java.lang.Thread$/;"	i
java.lang.Thread	scala/xml/persistent/CachedFileStorage.scala	/^import java.lang.Thread$/;"	i
java.lang.Thread	scala/xml/pull/XMLEventReader.scala	/^import java.lang.Thread$/;"	i
java.lang.ref.WeakReference	scala/Symbol.scala	/^  import java.lang.ref.WeakReference$/;"	i
java.lang.reflect.InvocationTargetException	scala/util/control/Exception.scala	/^import java.lang.reflect.InvocationTargetException$/;"	i
java.lang.reflect.{ Method => JMethod }	scala/runtime/MethodCache.scala	/^import java.lang.reflect.{ Method => JMethod }$/;"	i
java.lang.reflect.{ Modifier, Method => JMethod }	scala/runtime/ScalaRunTime.scala	/^import java.lang.reflect.{ Modifier, Method => JMethod }$/;"	i
java.lang.reflect.{ Modifier, Method => JMethod, Field => JField }	scala/Enumeration.scala	/^import java.lang.reflect.{ Modifier, Method => JMethod, Field => JField }$/;"	i
java.lang.{ Class => JClass }	scala/runtime/MethodCache.scala	/^import java.lang.{ Class => JClass }$/;"	i
java.lang.{ Class => jClass }	scala/reflect/ClassManifestDeprecatedApis.scala	/^import java.lang.{ Class => jClass }$/;"	i
java.lang.{ Class => jClass }	scala/reflect/ClassTag.scala	/^import java.lang.{ Class => jClass }$/;"	i
java.lang.{ Class => jClass }	scala/runtime/ScalaRunTime.scala	/^import java.lang.{ Class => jClass }$/;"	i
java.lang.{ Double => JDouble, Long => JLong }	scala/concurrent/duration/Duration.scala	/^import java.lang.{ Double => JDouble, Long => JLong }$/;"	i
java.lang.{ Iterable => JIterable }	scala/concurrent/Future.scala	/^import java.lang.{ Iterable => JIterable }$/;"	i
java.lang.{ StringBuilder => JavaStringBuilder }	scala/collection/mutable/StringBuilder.scala	/^import java.lang.{ StringBuilder => JavaStringBuilder }$/;"	i
java.math.BigInteger	scala/math/BigInt.scala	/^import java.math.BigInteger$/;"	i
java.math.{ MathContext, BigDecimal => BigDec }	scala/math/BigDecimal.scala	/^import java.math.{ MathContext, BigDecimal => BigDec }$/;"	i
java.net.URL	scala/xml/factory/XMLLoader.scala	/^import java.net.URL$/;"	i
java.net.URL	scala/xml/parsing/ExternalSources.scala	/^import java.net.URL$/;"	i
java.net.{ URI, URL }	scala/io/Source.scala	/^import java.net.{ URI, URL }$/;"	i
java.net.{ URL, MalformedURLException }	scala/xml/include/sax/XIncludeFilter.scala	/^import java.net.{ URL, MalformedURLException }$/;"	i
java.nio.ByteBuffer	scala/xml/persistent/CachedFileStorage.scala	/^import java.nio.ByteBuffer$/;"	i
java.nio.channels.Channels	scala/xml/XML.scala	/^import java.nio.channels.Channels$/;"	i
java.nio.channels.Channels	scala/xml/persistent/CachedFileStorage.scala	/^import java.nio.channels.Channels$/;"	i
java.nio.channels.ClosedChannelException	scala/xml/pull/XMLEventReader.scala	/^import java.nio.channels.ClosedChannelException$/;"	i
java.nio.charset.{ Charset, CharsetDecoder, CharsetEncoder, CharacterCodingException, CodingErrorAction => Action }	scala/io/Codec.scala	/^import java.nio.charset.{ Charset, CharsetDecoder, CharsetEncoder, CharacterCodingException, CodingErrorAction => Action }$/;"	i
java.security.AccessControlException	scala/sys/SystemProperties.scala	/^import java.security.AccessControlException$/;"	i
java.text.MessageFormat	scala/Console.scala	/^import java.text.MessageFormat$/;"	i
java.util.Arrays.copyOfRange	scala/runtime/SeqCharSequence.scala	/^import java.util.Arrays.copyOfRange$/;"	i
java.util.Collection	scala/concurrent/impl/ExecutionContextImpl.scala	/^import java.util.Collection$/;"	i
java.util.Comparator	scala/math/Equiv.scala	/^import java.util.Comparator$/;"	i
java.util.Comparator	scala/math/Ordering.scala	/^import java.util.Comparator$/;"	i
java.util.Stack	scala/xml/include/sax/XIncludeFilter.scala	/^import java.util.Stack$/;"	i
java.util.WeakHashMap	scala/Symbol.scala	/^  import java.util.WeakHashMap$/;"	i
java.util.concurrent.LinkedBlockingQueue	scala/sys/process/BasicIO.scala	/^import java.util.concurrent.LinkedBlockingQueue$/;"	i
java.util.concurrent.LinkedBlockingQueue	scala/xml/pull/XMLEventReader.scala	/^import java.util.concurrent.LinkedBlockingQueue$/;"	i
java.util.concurrent.ThreadPoolExecutor	scala/collection/parallel/TaskSupport.scala	/^import java.util.concurrent.ThreadPoolExecutor$/;"	i
java.util.concurrent.ThreadPoolExecutor	scala/collection/parallel/Tasks.scala	/^import java.util.concurrent.ThreadPoolExecutor$/;"	i
java.util.concurrent._	scala/collection/parallel/Tasks.scala	/^  import java.util.concurrent._$/;"	i
java.util.concurrent.atomic.AtomicBoolean	scala/collection/parallel/ParIterableLike.scala	/^import java.util.concurrent.atomic.AtomicBoolean$/;"	i
java.util.concurrent.atomic.AtomicInteger	scala/collection/generic/Signalling.scala	/^import java.util.concurrent.atomic.AtomicInteger$/;"	i
java.util.concurrent.atomic._	scala/collection/concurrent/TrieMap.scala	/^import java.util.concurrent.atomic._$/;"	i
java.util.concurrent.atomic.{ AtomicReferenceFieldUpdater, AtomicInteger, AtomicBoolean }	scala/concurrent/Future.scala	/^import java.util.concurrent.atomic.{ AtomicReferenceFieldUpdater, AtomicInteger, AtomicBoolean }$/;"	i
java.util.concurrent.locks.ReentrantReadWriteLock	scala/Symbol.scala	/^  import java.util.concurrent.locks.ReentrantReadWriteLock$/;"	i
java.util.concurrent.{ ConcurrentLinkedQueue, TimeUnit, Callable }	scala/concurrent/Future.scala	/^import java.util.concurrent.{ ConcurrentLinkedQueue, TimeUnit, Callable }$/;"	i
java.util.concurrent.{ ExecutorService, Executor }	scala/concurrent/ExecutionContext.scala	/^import java.util.concurrent.{ ExecutorService, Executor }$/;"	i
java.util.concurrent.{ LinkedBlockingQueue, Callable, Executor, ExecutorService, Executors, ThreadFactory, TimeUnit, ThreadPoolExecutor }	scala/concurrent/impl/ExecutionContextImpl.scala	/^import java.util.concurrent.{ LinkedBlockingQueue, Callable, Executor, ExecutorService, Executors, ThreadFactory, TimeUnit, ThreadPoolExecutor }$/;"	i
java.util.concurrent.{ExecutorService, Callable, TimeUnit}	scala/concurrent/ThreadPoolRunner.scala	/^import java.util.concurrent.{ExecutorService, Callable, TimeUnit}$/;"	i
java.util.concurrent.{ExecutorService, Executor}	scala/concurrent/JavaConversions.scala	/^import java.util.concurrent.{ExecutorService, Executor}$/;"	i
java.util.concurrent.{ThreadPoolExecutor, LinkedBlockingQueue, TimeUnit}	scala/concurrent/TaskRunners.scala	/^import java.util.concurrent.{ThreadPoolExecutor, LinkedBlockingQueue, TimeUnit}$/;"	i
java.util.jar.Attributes.{ Name => AttributeName }	scala/util/Properties.scala	/^import java.util.jar.Attributes.{ Name => AttributeName }$/;"	i
java.util.logging.Level	scala/annotation/elidable.scala	/^import java.util.logging.Level$/;"	i
java.util.regex.Pattern	scala/Enumeration.scala	/^import java.util.regex.Pattern$/;"	i
java.util.regex.Pattern	scala/util/parsing/combinator/RegexParsers.scala	/^import java.util.regex.Pattern$/;"	i
java.util.regex.{ Pattern, Matcher }	scala/util/matching/Regex.scala	/^import java.util.regex.{ Pattern, Matcher }$/;"	i
java.util.{ LinkedList => JLinkedList }	scala/concurrent/Future.scala	/^import java.util.{ LinkedList => JLinkedList }$/;"	i
java.{ lang => jl }	scala/math/BigDecimal.scala	/^import java.{ lang => jl }$/;"	i
java.{ lang => jl }	scala/math/ScalaNumericConversions.scala	/^import java.{ lang => jl }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/JavaConversions.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/JavaConverters.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/convert/DecorateAsJava.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/convert/DecorateAsScala.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/convert/Decorators.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/convert/WrapAsJava.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/convert/WrapAsScala.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }	scala/collection/convert/Wrappers.scala	/^import java.{ lang => jl, util => ju }, java.util.{ concurrent => juc }$/;"	i
javaClassPath	scala/util/Properties.scala	/^  def javaClassPath         = propOrEmpty("java.class.path")$/;"	m
javaHome	scala/util/Properties.scala	/^  def javaHome              = propOrEmpty("java.home")$/;"	m
javaVendor	scala/util/Properties.scala	/^  def javaVendor            = propOrEmpty("java.vendor")$/;"	m
javaVersion	scala/Function0.scala	/^ *    val javaVersion = () => sys.props("java.version")$/;"	V
javaVersion	scala/util/Properties.scala	/^  def javaVersion           = propOrEmpty("java.version")$/;"	m
javaVmArguments	scala/sys/process/package.scala	/^    def javaVmArguments: List[String] = {$/;"	m
javaVmInfo	scala/util/Properties.scala	/^  def javaVmInfo            = propOrEmpty("java.vm.info")$/;"	m
javaVmName	scala/util/Properties.scala	/^  def javaVmName            = propOrEmpty("java.vm.name")$/;"	m
javaVmVendor	scala/util/Properties.scala	/^  def javaVmVendor          = propOrEmpty("java.vm.vendor")$/;"	m
javaVmVersion	scala/util/Properties.scala	/^  def javaVmVersion         = propOrEmpty("java.vm.version")$/;"	m
javax.xml.parsers.SAXParserFactory	scala/xml/factory/XMLLoader.scala	/^import javax.xml.parsers.SAXParserFactory$/;"	i
jdkHome	scala/util/Properties.scala	/^  def jdkHome              = envOrElse("JDK_HOME", envOrElse("JAVA_HOME", javaHome))$/;"	m
jl	scala/collection/JavaConversions.scala	/^ *    val jl : java.util.List[Int] = sl$/;"	V
jl	scala/collection/JavaConverters.scala	/^ *    val jl : java.util.List[Int] = sl.asJava$/;"	V
jl	scala/collection/convert/DecorateAsJava.scala	/^ *    val jl : java.util.List[Int] = sl.asJava$/;"	V
jn	scala/collection/generic/Sorted.scala	/^      val jn = j.next;$/;"	V
join	scala/collection/immutable/IntMap.scala	/^  def join[T](p1: Int, t1: IntMap[T], p2: Int, t2: IntMap[T]): IntMap[T] = {$/;"	m
join	scala/collection/immutable/LongMap.scala	/^  def join[T](p1: Long, t1: LongMap[T], p2: Long, t2: LongMap[T]): LongMap[T] = {$/;"	m
joinLeft	scala/util/Either.scala	/^  def joinLeft[A1 >: A, B1 >: B, C](implicit ev: A1 <:< Either[C, B1]): Either[C, B1] = this match {$/;"	m
joinRight	scala/util/Either.scala	/^  def joinRight[A1 >: A, B1 >: B, C](implicit ev: B1 <:< Either[A1, C]): Either[A1, C] = this match {$/;"	m
jpb	scala/sys/process/Process.scala	/^    val jpb = new JProcessBuilder(command.toArray: _*)$/;"	V
jsonArray	scala/util/parsing/json/Parser.scala	/^  def jsonArray  = "[" ~> repsep(value, ",") <~ "]" ^^ { case vals : List[_] => JSONArray(vals) }$/;"	m
jsonObj	scala/util/parsing/json/Parser.scala	/^  def jsonObj    = "{" ~> repsep(objEntry, ",") <~ "}" ^^ { case vals : List[_] => JSONObject(Map(vals : _*)) }$/;"	m
jumps	scala/collection/immutable/NumericRange.scala	/^      val jumps     = num.toLong(num.quot(diff, step))$/;"	V
jumps	scala/collection/immutable/Range.scala	/^      val jumps: Long  = gap \/ step$/;"	V
k	scala/collection/SeqLike.scala	/^        var k = 1$/;"	v
k	scala/collection/concurrent/TrieMap.scala	/^        val k = obj.asInstanceOf[K]$/;"	V
k	scala/collection/concurrent/TrieMap.scala	/^private[collection] final class SNode[K, V](final val k: K, final val v: V, final val hc: Int)$/;"	V
k	scala/collection/concurrent/TrieMap.scala	/^private[collection] final class TNode[K, V](final val k: K, final val v: V, final val hc: Int)$/;"	V
k	scala/collection/mutable/HashTable.scala	/^      \/\/ var k = hcode * 0x5bd1e995$/;"	v
k	scala/collection/mutable/PriorityQueue.scala	/^    var k: Int = m$/;"	v
k	scala/collection/parallel/mutable/ParArray.scala	/^      var k = destfrom$/;"	v
k	scala/collection/parallel/mutable/ParArray.scala	/^      var k = targfrom + srcuntil - srcfrom - 1$/;"	v
k	scala/util/MurmurHash.scala	/^    var k = hiddenMagicB$/;"	v
k	scala/util/MurmurHash.scala	/^  private var k = hiddenMagicB$/;"	v
k	scala/util/Random.scala	/^      val k = nextInt(n)$/;"	V
k	scala/util/hashing/MurmurHash3.scala	/^      var k = data(i + 0) & 0xFF$/;"	v
k	scala/util/hashing/MurmurHash3.scala	/^    var k = 0$/;"	v
k	scala/util/hashing/MurmurHash3.scala	/^    var k = data$/;"	v
k	scala/xml/dtd/ContentModelParser.scala	/^    var k = List( p );$/;"	v
k	scala/xml/dtd/ContentModelParser.scala	/^    var k = List(p);$/;"	v
keepAliveTime	scala/concurrent/TaskRunners.scala	/^    val keepAliveTime = 60000L$/;"	V
key	scala/collection/TraversableLike.scala	/^      val key = f(elem)$/;"	V
key	scala/collection/immutable/HashMap.scala	/^        val key = in.readObject().asInstanceOf[A]$/;"	V
key	scala/collection/immutable/HashMap.scala	/^  class HashMap1[A,+B](private[collection] val key: A, private[collection] val hash: Int, private[collection] val value: (B @uV), private[collection] var kv: (A,B @uV)) extends HashMap[A,B] {$/;"	V
key	scala/collection/immutable/HashSet.scala	/^  class HashSet1[A](private[HashSet] val key: A, private[HashSet] val hash: Int) extends HashSet[A] {$/;"	V
key	scala/collection/immutable/ListMap.scala	/^  protected class Node[B1 >: B](override protected val key: A,$/;"	V
key	scala/collection/immutable/RedBlack.scala	/^    def key: A$/;"	m
key	scala/collection/immutable/RedBlack.scala	/^  case class BlackTree[+B](override val key: A,$/;"	V
key	scala/collection/immutable/RedBlack.scala	/^  case class RedTree[+B](override val key: A,$/;"	V
key	scala/collection/immutable/RedBlackTree.scala	/^    @(inline @getter) final val key: A,$/;"	V
key	scala/collection/mutable/DefaultEntry.scala	/^final class DefaultEntry[A, B](val key: A, var value: B)$/;"	V
key	scala/collection/mutable/HashEntry.scala	/^  val key: A$/;"	V
key	scala/collection/mutable/LinkedEntry.scala	/^final class LinkedEntry[A, B](val key: A, var value: B)$/;"	V
key	scala/collection/mutable/LinkedHashSet.scala	/^  private[scala] final class Entry[A](val key: A) extends HashEntry[A, Entry[A]] with Serializable {$/;"	V
key	scala/collection/mutable/OpenHashMap.scala	/^  final private class OpenEntry[Key, Value](val key: Key,$/;"	V
key	scala/runtime/NonLocalReturnControl.scala	/^class NonLocalReturnControl[@specialized T](val key: AnyRef, val value: T) extends ControlThrowable {$/;"	V
key	scala/sys/BooleanProp.scala	/^  class ConstantImpl(val key: String, val value: Boolean) extends BooleanProp {$/;"	V
key	scala/sys/Prop.scala	/^  def key: String$/;"	m
key	scala/sys/PropImpl.scala	/^private[sys] class PropImpl[+T](val key: String, valueFn: String => T) extends Prop[T] {$/;"	V
key	scala/xml/Attribute.scala	/^  val key: String$/;"	V
key	scala/xml/MetaData.scala	/^      lazy val key = getUniversalKey(md, scope)$/;"	V
key	scala/xml/MetaData.scala	/^  def key: String$/;"	m
key	scala/xml/Null.scala	/^  def key = null$/;"	m
key	scala/xml/PrefixedAttribute.scala	/^  val key: String,$/;"	V
key	scala/xml/UnprefixedAttribute.scala	/^  val key: String,$/;"	V
key	scala/xml/Utility.scala	/^    val key = md.key$/;"	V
key	scala/xml/parsing/MarkupParser.scala	/^          val key = qname.substring(prefix.length+1, qname.length)$/;"	V
keyExists	scala/sys/BooleanProp.scala	/^  def keyExists[T](key: String): BooleanProp = new BooleanPropImpl(key, _ => true)$/;"	m
keySet	scala/collection/GenMapLike.scala	/^  def keySet: GenSet[A]$/;"	m
keySet	scala/collection/MapLike.scala	/^  def keySet: Set[A] = new DefaultKeySet$/;"	m
keySet	scala/collection/generic/Sorted.scala	/^  def keySet: SortedSet[K]$/;"	m
keySet	scala/collection/parallel/ParMapLike.scala	/^  def keySet: ParSet[K] = new DefaultKeySet$/;"	m
keys	scala/collection/GenMapLike.scala	/^  def keys: GenIterable[A]$/;"	m
keys	scala/collection/MapLike.scala	/^  def keys: Iterable[A] = keySet$/;"	m
keys	scala/collection/convert/Wrappers.scala	/^    def keys: ju.Enumeration[A] = asJavaEnumeration(underlying.keysIterator)$/;"	m
keys	scala/collection/parallel/ParMapLike.scala	/^  def keys: ParIterable[K] = keySet$/;"	m
keysIterator	scala/collection/GenMapLike.scala	/^  def keysIterator: Iterator[A]$/;"	m
keysIterator	scala/collection/MapLike.scala	/^  def keysIterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
keysIterator	scala/collection/immutable/RedBlackTree.scala	/^  def keysIterator[A, _](tree: Tree[A, _]): Iterator[A] = new KeysIterator(tree)$/;"	m
keysIterator	scala/collection/parallel/ParMapLike.scala	/^  def keysIterator: IterableSplitter[K] = keysIterator(splitter)$/;"	m
keywordCache	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  protected val keywordCache = mutable.HashMap[String, Parser[String]]()$/;"	V
ks1	scala/collection/immutable/HashSet.scala	/^        val ks1 = ks - key$/;"	V
kv	scala/collection/immutable/HashMap.scala	/^          val kv = kvs1.head$/;"	V
kv	scala/collection/immutable/HashMap.scala	/^  class HashMap1[A,+B](private[collection] val key: A, private[collection] val hash: Int, private[collection] val value: (B @uV), private[collection] var kv: (A,B @uV)) extends HashMap[A,B] {$/;"	v
kv	scala/collection/parallel/immutable/ParHashMap.scala	/^          val kv = chunkarr(i)$/;"	V
kvPair	scala/collection/concurrent/TrieMap.scala	/^  def kvPair: (K, V)$/;"	m
kvs1	scala/collection/immutable/HashMap.scala	/^        val kvs1 = kvs - key$/;"	V
l	scala/collection/Iterator.scala	/^    val l = new PartitionIterator(p)$/;"	V
l	scala/collection/SeqLike.scala	/^      val l = length$/;"	V
l	scala/collection/SeqLike.scala	/^    val l = length$/;"	V
l	scala/collection/generic/IsTraversableOnce.scala	/^ *    val l = List(1, 2, 3, 4, 5)$/;"	V
l	scala/collection/mutable/AVLTree.scala	/^      val l: Node[A] = left.asInstanceOf[Node[A]]$/;"	V
l	scala/collection/mutable/ArrayOps.scala	/^    var l = math.min(len, repr.length)$/;"	v
l	scala/io/BytePickle.scala	/^          val l = pe.nextLoc()$/;"	V
l	scala/io/BytePickle.scala	/^          val l = upe.nextLoc$/;"	V
l	scala/runtime/RichDouble.scala	/^    val l = self.toLong$/;"	V
l	scala/runtime/RichDouble.scala	/^  \/\/ override def isValidLong = { val l = self.toLong; l.toDouble == self && l != Long.MaxValue }$/;"	V
l	scala/runtime/RichFloat.scala	/^    val l = self.toLong$/;"	V
l	scala/runtime/RichFloat.scala	/^  \/\/ override def isValidLong = { val l = self.toLong; l.toFloat == self && l != Long.MaxValue }$/;"	V
l	scala/util/Either.scala	/^   * val l = Left(List(1)): Either[List[Int], Vector[Int]]$/;"	V
l	scala/util/Either.scala	/^   * val l: Either[String, Int] = Left("left")$/;"	V
l	scala/util/Either.scala	/^ *  val l: Either[String, Int] = Left("flower")$/;"	V
l	scala/util/Sorting.scala	/^          var l = off$/;"	v
label	scala/xml/Atom.scala	/^  def label = "#PCDATA"$/;"	m
label	scala/xml/Comment.scala	/^  def label = "#REM"$/;"	m
label	scala/xml/Elem.scala	/^  val label: String,$/;"	V
label	scala/xml/EntityRef.scala	/^  def label = "#ENTITY"$/;"	m
label	scala/xml/Group.scala	/^  def label                           = fail("label")$/;"	m
label	scala/xml/Node.scala	/^  def label: String$/;"	m
label	scala/xml/dtd/ExternalID.scala	/^  def label = "#PI"$/;"	m
labelAt	scala/util/automata/WordBerrySethi.scala	/^  protected var labelAt: Map[Int, _labelT]                         = _ \/\/ new alphabet "gamma"$/;"	v
labels	scala/util/automata/Inclusion.scala	/^  val labels: Seq[A]$/;"	V
labels	scala/util/automata/NondetWordAutom.scala	/^  val labels: Seq[T]$/;"	V
labels	scala/util/automata/WordBerrySethi.scala	/^          val labels   = WordBerrySethi.this.labels.toList$/;"	V
labels	scala/util/automata/WordBerrySethi.scala	/^  protected var labels: mutable.HashSet[_labelT]                   = _$/;"	v
lang	scala/util/automata/BaseBerrySethi.scala	/^  val lang: Base$/;"	V
lang	scala/util/automata/WordBerrySethi.scala	/^  override val lang: WordExp$/;"	V
lang	scala/util/regexp/WordExp.scala	/^ *    override val lang = MyLang$/;"	V
lang	scala/xml/XML.scala	/^  val lang      = "lang"$/;"	V
lang	scala/xml/dtd/ContentModel.scala	/^    override val lang: ContentModel.this.type = ContentModel.this$/;"	V
lang.{ Alt, Eps, Letter, Meta, RegExp, Sequ, Star, _labelT }	scala/util/automata/WordBerrySethi.scala	/^  import lang.{ Alt, Eps, Letter, Meta, RegExp, Sequ, Star, _labelT }$/;"	i
lang.{ Alt, Eps, Meta, RegExp, Sequ, Star }	scala/util/automata/BaseBerrySethi.scala	/^  import lang.{ Alt, Eps, Meta, RegExp, Sequ, Star }$/;"	i
language	scala/language.scala	/^object language {$/;"	o
languageFeature	scala/languageFeature.scala	/^object languageFeature {$/;"	o
languageFeature._	scala/language.scala	/^  import languageFeature._$/;"	i
languageFeature.experimental._	scala/language.scala	/^    import languageFeature.experimental._$/;"	i
largest	scala/collection/SeqLike.scala	/^        var largest = 0$/;"	v
last	scala/collection/GenTraversableLike.scala	/^  def last: A$/;"	m
last	scala/collection/IndexedSeqOptimized.scala	/^  def last: A = if (length > 0) this(length - 1) else super.last$/;"	m
last	scala/collection/LinearSeqOptimized.scala	/^    var last = -1$/;"	v
last	scala/collection/LinearSeqOptimized.scala	/^  def last: A = {$/;"	m
last	scala/collection/TraversableLike.scala	/^  def last: A = {$/;"	m
last	scala/collection/immutable/NumericRange.scala	/^  override lazy val last: T =$/;"	V
last	scala/collection/immutable/RedBlack.scala	/^    def last  = if (right.isEmpty) key else right.last$/;"	m
last	scala/collection/immutable/RedBlack.scala	/^    def last : A$/;"	m
last	scala/collection/immutable/RedBlack.scala	/^    def last = throw new NoSuchElementException("empty map")$/;"	m
last	scala/collection/immutable/StringLike.scala	/^      val last = apply(len - 1)$/;"	V
last	scala/collection/immutable/package.scala	/^      val last = _last$/;"	V
last	scala/collection/parallel/ParIterableLike.scala	/^  def last = {$/;"	m
last	scala/collection/parallel/RemainsIterator.scala	/^    var last = z$/;"	v
last	scala/collection/parallel/Tasks.scala	/^      var last = spawnSubtasks()$/;"	v
last	scala/collection/parallel/Tasks.scala	/^      var last: WrappedTask[R, Tp] = null$/;"	v
last	scala/collection/parallel/mutable/ParArray.scala	/^      var last = z$/;"	v
last	scala/util/automata/Inclusion.scala	/^    var last = current$/;"	v
last	scala/xml/PrettyPrinter.scala	/^    var last: List[Int] = Nil$/;"	v
last0	scala/collection/mutable/ListBuffer.scala	/^  private var last0: ::[A] = _$/;"	v
last0	scala/collection/mutable/MutableList.scala	/^  protected var last0: LinkedList[A] = first0$/;"	v
last1	scala/collection/mutable/ListBuffer.scala	/^      val last1 = last0$/;"	V
lastChRead	scala/xml/parsing/MarkupParser.scala	/^  var lastChRead: Char = _$/;"	v
lastElement	scala/collection/immutable/Range.scala	/^  final val lastElement     = start + (numRangeElements - 1) * step$/;"	V
lastEntry	scala/collection/mutable/LinkedHashMap.scala	/^  @transient protected var lastEntry: Entry = null$/;"	v
lastEntry	scala/collection/mutable/LinkedHashSet.scala	/^  @transient protected var lastEntry: Entry = null$/;"	v
lastFlush	scala/runtime/WorksheetSupport.scala	/^    private var lastFlush: Long = 0L$/;"	v
lastIndexOf	scala/collection/GenSeqLike.scala	/^  def lastIndexOf[B >: A](elem: B): Int = lastIndexWhere(elem == _)$/;"	m
lastIndexOf	scala/collection/GenSeqLike.scala	/^  def lastIndexOf[B >: A](elem: B, end: Int): Int = lastIndexWhere(elem == _, end)$/;"	m
lastIndexOf	scala/collection/mutable/StringBuilder.scala	/^  def lastIndexOf(str: String): Int = underlying.lastIndexOf(str)$/;"	m
lastIndexOf	scala/collection/mutable/StringBuilder.scala	/^  def lastIndexOf(str: String, fromIndex: Int): Int = underlying.lastIndexOf(str, fromIndex)$/;"	m
lastIndexOfSlice	scala/collection/SeqLike.scala	/^  def lastIndexOfSlice[B >: A](that: GenSeq[B]): Int = lastIndexOfSlice(that, length)$/;"	m
lastIndexOfSlice	scala/collection/SeqLike.scala	/^  def lastIndexOfSlice[B >: A](that: GenSeq[B], end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/GenSeqLike.scala	/^  def lastIndexWhere(p: A => Boolean): Int = lastIndexWhere(p, length - 1)$/;"	m
lastIndexWhere	scala/collection/GenSeqLike.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int$/;"	m
lastIndexWhere	scala/collection/IndexedSeqOptimized.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/LinearSeqOptimized.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/SeqLike.scala	/^  def lastIndexWhere(p: A => Boolean, end: Int): Int = {$/;"	m
lastIndexWhere	scala/collection/parallel/ParSeqLike.scala	/^  def lastIndexWhere(p: T => Boolean, end: Int): Int = if (end < 0) -1 else {$/;"	m
lastIndexWhere	scala/collection/parallel/RemainsIterator.scala	/^  def lastIndexWhere(pred: T => Boolean): Int = {$/;"	m
lastKey	scala/collection/SortedMapLike.scala	/^  def lastKey : A = last._1$/;"	m
lastKey	scala/collection/generic/Sorted.scala	/^  def lastKey: K$/;"	m
lastNoSuccess	scala/util/parsing/combinator/Parsers.scala	/^  def lastNoSuccess: NoSuccess = lastNoSuccessVar.value.orNull$/;"	m
lastNoSuccessVar	scala/util/parsing/combinator/Parsers.scala	/^  private lazy val lastNoSuccessVar = new DynamicVariable[Option[NoSuccess]](None)$/;"	V
lastNoSuccess_=	scala/util/parsing/combinator/Parsers.scala	/^  def lastNoSuccess_=(x: NoSuccess): Unit = lastNoSuccessVar.value = Option(x)$/;"	m
lastOption	scala/collection/GenTraversableLike.scala	/^  def lastOption: Option[A]$/;"	m
lastOption	scala/collection/TraversableLike.scala	/^  def lastOption: Option[A] = if (isEmpty) None else Some(last)$/;"	m
lastOption	scala/collection/parallel/ParIterableLike.scala	/^  def lastOption = if (nonEmpty) Some(last) else None$/;"	m
lastWritten	scala/concurrent/Channel.scala	/^  private var lastWritten = written       \/\/ aliasing of a linked list$/;"	v
lastbuff	scala/collection/parallel/mutable/LazyCombiner.scala	/^  val lastbuff = chain.last$/;"	V
lastptr	scala/collection/mutable/UnrolledBuffer.scala	/^  @transient private var lastptr = headptr$/;"	v
lastresult	scala/collection/parallel/Tasks.scala	/^        \/\/ val lastresult = Option(last.body.result)$/;"	V
lastwasbreak	scala/xml/PrettyPrinter.scala	/^    var lastwasbreak = false$/;"	v
later	scala/collection/immutable/PagedSeq.scala	/^  var later : Page[T] = this$/;"	v
later	scala/collection/mutable/LinkedEntry.scala	/^  var later: LinkedEntry[A, B] = null$/;"	v
later	scala/collection/mutable/LinkedHashSet.scala	/^    var later: Entry[A] = null$/;"	v
lbcount	scala/collection/parallel/mutable/package.scala	/^        val lbcount = countElems(lbstart, until)$/;"	V
lbindex	scala/collection/parallel/mutable/package.scala	/^      val lbindex = until \/ sizeMapBucketSize$/;"	V
lbstart	scala/collection/parallel/mutable/package.scala	/^        val lbstart = lbindex * sizeMapBucketSize$/;"	V
lbuff	scala/collection/mutable/Stack.scala	/^    val lbuff = new ListBuffer[A]$/;"	V
lead	scala/collection/IterableLike.scala	/^    val lead = iterator drop n$/;"	V
lead	scala/collection/IterableLike.scala	/^    val lead = this.iterator drop n$/;"	V
lead	scala/collection/LinearSeqOptimized.scala	/^    var lead = this drop n$/;"	v
lead	scala/collection/immutable/Stream.scala	/^    var lead = this drop n$/;"	v
leadch	scala/StringContext.scala	/^          val leadch = str(idx)$/;"	V
leading	scala/collection/Iterator.scala	/^    val leading = new Leading$/;"	V
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Boolean)]) = if (pos < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Combiner[U, This])]) = if (pos < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Combiner[U, This])]) = result = pit.partition2combiners(pred, reuse(prev.map(_._1), cbfTrue()), reuse(prev.map(_._2), cbfFalse()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[(Combiner[U, This], Combiner[U, This])]) = result = pit.splitAt2combiners(at, reuse(prev.map(_._1), cbfBefore()), reuse(prev.map(_._2), cbfAfter()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Boolean]) = { if (!pit.isAborted) result = pit.exists(pred); if (result == true) pit.abort }$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Boolean]) = { if (!pit.isAborted) result = pit.forall(pred); if (result == false) pit.abort }$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[(K, V), That]]) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.collect2combiner[S, That](pf, pbf())$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.flatmap2combiner(f, pbf())$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.map2combiner(f, reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.copy2builder[U, That, Combiner[U, That]](reuse(prev, cfactory()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = result = pit.drop2combiner(n, reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = result = pit.slice2combiner(from, until, reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Option[U]]) = { if (!pit.isAborted) result = pit.find(pred); if (result != None) pit.abort }$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Result]) = result = pit.zip2combiner[U, S, That](othpit, pbf())$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Result]) = result = pit.zipAll2combiner[U, S, That](othpit, thiselem, thatelem, pbf())$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[ScanTree[U]]) = if (pit.remaining > 0) {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prev: Option[Unit]) = pit.copyToArray(array, from, len)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Int]) = result = pit.count(pred)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Option[U]]) = if (pit.remaining > 0) result = Some(pit.max(ord))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Option[U]]) = if (pit.remaining > 0) result = Some(pit.min(ord))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Option[U]]) = if (pit.remaining > 0) result = Some(pit.reduce(op))$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[R1]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[R]) = result = body$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[R]) = {$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[S]) = result = pit.foldLeft(z)(seqop)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[U]) = result = pit.fold(z)(op)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[U]) = result = pit.product(num)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[U]) = result = pit.sum(num)$/;"	m
leaf	scala/collection/parallel/ParIterableLike.scala	/^    def leaf(prevr: Option[Unit]) = pit.foreach(op)$/;"	m
leaf	scala/collection/parallel/ParIterableViewLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.copy2builder[U, That, Combiner[U, That]](reuse(prev, cbf(self.underlying)))$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[(Int, Boolean)]) = if (from < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Boolean]) = if (!pit.isAborted) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Combiner[S, That]]) = result = pit.reverseMap2combiner(f, pbf())$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.updated2combiner(pos, elem, pbf())$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Combiner[U, This]]) = result = pit.reverse2combiner(reuse(prev, cbf()))$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Int]) = if (from < pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Int]) = if (pos > pit.indexFlag) {$/;"	m
leaf	scala/collection/parallel/ParSeqLike.scala	/^    def leaf(prev: Option[Result]) = result = pit.zip2combiner[U, S, That](otherpit, cf())$/;"	m
leaf	scala/collection/parallel/ParSeqViewLike.scala	/^    def leaf(prev: Option[Combiner[U, That]]) = result = pit.copy2builder[U, That, Combiner[U, That]](reuse(prev, cbf(self.underlying)))$/;"	m
leaf	scala/collection/parallel/Tasks.scala	/^  def leaf(result: Option[R])$/;"	m
leaf	scala/collection/parallel/immutable/ParHashMap.scala	/^    def leaf(prev: Option[Unit]) = {$/;"	m
leaf	scala/collection/parallel/immutable/ParHashSet.scala	/^    def leaf(prev: Option[Unit]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ParArray.scala	/^    def leaf(prev: Option[Unit]) = iterate(tree)$/;"	m
leaf	scala/collection/parallel/mutable/ParArray.scala	/^    def leaf(prev: Option[Unit]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ParHashMap.scala	/^    def leaf(prev: Option[Int]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ParHashSet.scala	/^    def leaf(prev: Option[(Int, UnrolledBuffer[Any])]) {$/;"	m
leaf	scala/collection/parallel/mutable/ParTrieMap.scala	/^    def leaf(prev: Option[Int]) = {$/;"	m
leaf	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    def leaf(prev: Option[Unit]) = if (howmany > 0) {$/;"	m
leaf	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    def leaf(prev: Option[Unit]) = if (howmany > 0) {$/;"	m
left	scala/collection/immutable/HashMap.scala	/^      var left = n$/;"	v
left	scala/collection/immutable/RedBlack.scala	/^                           override val left: Tree[B],$/;"	V
left	scala/collection/immutable/RedBlack.scala	/^                         override val left: Tree[B],$/;"	V
left	scala/collection/immutable/RedBlack.scala	/^    def left: Tree[B]$/;"	m
left	scala/collection/immutable/RedBlackTree.scala	/^    @(inline @getter) final val left: Tree[A, B],$/;"	V
left	scala/collection/immutable/Stream.scala	/^      var left = this.tail$/;"	v
left	scala/collection/immutable/Stream.scala	/^    var left = this$/;"	v
left	scala/collection/mutable/AVLTree.scala	/^      val left: Node[A] = stack.head.left.asInstanceOf[Node[A]]$/;"	V
left	scala/collection/mutable/DoubleLinkedListLike.scala	/^    var left = n$/;"	v
left	scala/collection/parallel/ParIterableLike.scala	/^    var left = n$/;"	v
left	scala/collection/parallel/ParIterableLike.scala	/^    var left = until - from$/;"	v
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = at$/;"	v
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = howmany$/;"	v
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = n$/;"	v
left	scala/collection/parallel/RemainsIterator.scala	/^    var left = scala.math.max(until - from, 0)$/;"	v
left	scala/collection/parallel/mutable/ParArray.scala	/^      val left = remaining$/;"	V
left	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var left = pos$/;"	v
left	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var left = pos$/;"	v
left	scala/util/Either.scala	/^  def left = Either.LeftProjection(this)$/;"	m
leftMost	scala/collection/immutable/RedBlack.scala	/^          val leftMost = false$/;"	V
leftMost	scala/collection/immutable/RedBlack.scala	/^          val leftMost = true$/;"	V
leftMost	scala/collection/immutable/RedBlackTree.scala	/^        val leftMost = false$/;"	V
leftMost	scala/collection/immutable/RedBlackTree.scala	/^        val leftMost = true$/;"	V
leftRotated	scala/collection/mutable/AVLTree.scala	/^      val leftRotated = l.leftRotation$/;"	V
leftRotation	scala/collection/mutable/AVLTree.scala	/^  def leftRotation[B >: A]: Node[B] = sys.error("Should not happen.")$/;"	m
lefthere	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^        val lefthere = scala.math.min(totalleft, curr.size - pos)$/;"	V
leftinserts	scala/collection/parallel/mutable/ParHashSet.scala	/^    var leftinserts = 0$/;"	v
leftlst	scala/collection/mutable/Queue.scala	/^    var leftlst = first0$/;"	v
leftmost	scala/collection/parallel/ParIterableLike.scala	/^    def leftmost = this$/;"	m
leftmost	scala/collection/parallel/ParIterableLike.scala	/^    def leftmost: ScanLeaf[U]$/;"	m
leftmost	scala/collection/parallel/ParIterableLike.scala	/^    val leftmost = left.leftmost$/;"	V
leftover	scala/collection/parallel/mutable/ParHashSet.scala	/^      var leftover = new UnrolledBuffer[Any]()$/;"	v
leftovers	scala/collection/parallel/mutable/ParHashSet.scala	/^      var leftovers = new UnrolledBuffer[Any]$/;"	v
lefts	scala/collection/immutable/List.scala	/^  def lefts[A, B](es: Iterable[Either[A, B]]) =$/;"	m
len	scala/StringContext.scala	/^    val len = str.length$/;"	V
len	scala/collection/BitSetLike.scala	/^    val len = a.length$/;"	V
len	scala/collection/BitSetLike.scala	/^    val len = this.nwords max other.nwords$/;"	V
len	scala/collection/BitSetLike.scala	/^    val len = this.nwords min other.nwords$/;"	V
len	scala/collection/BitSetLike.scala	/^    val len = this.nwords$/;"	V
len	scala/collection/BitSetLike.scala	/^    var len = elems.length$/;"	v
len	scala/collection/GenSeqViewLike.scala	/^      var len = 0$/;"	v
len	scala/collection/GenSeqViewLike.scala	/^    protected[this] lazy val len = self prefixLength pred$/;"	V
len	scala/collection/IndexedSeqOptimized.scala	/^      val len = length$/;"	V
len	scala/collection/IndexedSeqOptimized.scala	/^      val len = this.length min that.length$/;"	V
len	scala/collection/IndexedSeqOptimized.scala	/^    val len = length$/;"	V
len	scala/collection/Iterator.scala	/^      lazy val len = xs.length$/;"	V
len	scala/collection/LinearSeqOptimized.scala	/^    var len = 0$/;"	v
len	scala/collection/SeqLike.scala	/^        val len = (idxs.length - i) \/ 2$/;"	V
len	scala/collection/SeqLike.scala	/^    val len = this.length$/;"	V
len	scala/collection/SetLike.scala	/^    private var len = 0$/;"	v
len	scala/collection/concurrent/TrieMap.scala	/^    val len = arr.length$/;"	V
len	scala/collection/concurrent/TrieMap.scala	/^    val len = array.length$/;"	V
len	scala/collection/immutable/BitSet.scala	/^    val len = elems.length$/;"	V
len	scala/collection/immutable/Queue.scala	/^    val len = out.length$/;"	V
len	scala/collection/immutable/Range.scala	/^      val len = longLength$/;"	V
len	scala/collection/immutable/Stream.scala	/^    var len = 0$/;"	v
len	scala/collection/immutable/StringLike.scala	/^      val len = line.length$/;"	V
len	scala/collection/immutable/StringLike.scala	/^    private val len = str.length$/;"	V
len	scala/collection/immutable/StringLike.scala	/^    val len = toString.length$/;"	V
len	scala/collection/mutable/ArrayBuffer.scala	/^    val len = xs.length$/;"	V
len	scala/collection/mutable/BitSet.scala	/^    val len = elems.length$/;"	V
len	scala/collection/mutable/HashSet.scala	/^    val len = table.length$/;"	V
len	scala/collection/mutable/ListBuffer.scala	/^  private var len = 0$/;"	v
len	scala/collection/mutable/MutableList.scala	/^  protected var len: Int = 0$/;"	v
len	scala/collection/parallel/immutable/ParRange.scala	/^    private val len = range.length$/;"	V
len	scala/reflect/NameTransformer.scala	/^    val len = name.length()$/;"	V
len	scala/util/hashing/MurmurHash3.scala	/^    val len = xs.length$/;"	V
len	scala/util/hashing/MurmurHash3.scala	/^    var len = data.length$/;"	v
len	scala/xml/Utility.scala	/^    val len = text.length$/;"	V
len	scala/xml/dtd/ElementValidator.scala	/^    val len: Int = exc.length$/;"	V
len1	scala/collection/mutable/ArraySeq.scala	/^    val len1 = len min (xs.length - start) min length$/;"	V
len1	scala/collection/mutable/ResizableArray.scala	/^     val len1 = len min (xs.length - start) min length$/;"	V
length	scala/Array.scala	/^  def length: Int = throw new Error()$/;"	m
length	scala/collection/GenSeqLike.scala	/^  def length: Int$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = forced.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = if ((thatSeq lengthCompare self.length) <= 0) thatSeq.length else self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = index(self.length)$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = index.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = iterator.size$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = len$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = self.length + restSeq.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = self.length - start$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length = self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = 1 + self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = self.length + plen - replaced$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = self.length max thatSeq.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int = self.length$/;"	m
length	scala/collection/GenSeqViewLike.scala	/^    def length: Int$/;"	m
length	scala/collection/Iterator.scala	/^  def length: Int = this.size$/;"	m
length	scala/collection/LinearSeqOptimized.scala	/^  def length: Int = {$/;"	m
length	scala/collection/SeqLike.scala	/^        def length = n1 - n0$/;"	m
length	scala/collection/SeqLike.scala	/^        val length = n1 - n0$/;"	V
length	scala/collection/SeqLike.scala	/^  def length: Int$/;"	m
length	scala/collection/SeqViewLike.scala	/^    def length: Int$/;"	m
length	scala/collection/convert/Wrappers.scala	/^    def length = underlying.size$/;"	m
length	scala/collection/immutable/IndexedSeq.scala	/^    def length = buf.length$/;"	m
length	scala/collection/immutable/PagedSeq.scala	/^  def length: Int = {$/;"	m
length	scala/collection/immutable/StringLike.scala	/^  def length: Int = toString.length$/;"	m
length	scala/collection/immutable/Vector.scala	/^  def length = endIndex - startIndex$/;"	m
length	scala/collection/mutable/ArrayLike.scala	/^    def length = self.length$/;"	m
length	scala/collection/mutable/ArrayOps.scala	/^    def length: Int = repr.length$/;"	m
length	scala/collection/mutable/ArraySeq.scala	/^class ArraySeq[A](override val length: Int)$/;"	V
length	scala/collection/mutable/ArrayStack.scala	/^  def length = index$/;"	m
length	scala/collection/mutable/BufferLike.scala	/^  def length: Int$/;"	m
length	scala/collection/mutable/BufferProxy.scala	/^  def length: Int = self.length$/;"	m
length	scala/collection/mutable/PriorityQueue.scala	/^  def length: Int = resarr.length - 1  \/\/ adjust length accordingly$/;"	m
length	scala/collection/mutable/ResizableArray.scala	/^  def length: Int = size0$/;"	m
length	scala/collection/mutable/UnrolledBuffer.scala	/^  def length = sz$/;"	m
length	scala/collection/mutable/WrappedArray.scala	/^    def length: Int = array.length$/;"	m
length	scala/collection/mutable/WrappedArray.scala	/^  def length: Int$/;"	m
length	scala/collection/parallel/ParSeqLike.scala	/^    def length = self.length$/;"	m
length	scala/collection/parallel/immutable/ParVector.scala	/^  def length = vector.length$/;"	m
length	scala/collection/parallel/immutable/package.scala	/^  private[parallel] class Repetition[T](elem: T, val length: Int) extends ParSeq[T] {$/;"	V
length	scala/collection/parallel/mutable/ParArray.scala	/^  def length = arrayseq.length$/;"	m
length	scala/collection/parallel/mutable/package.scala	/^    override val length = sz$/;"	V
length	scala/concurrent/duration/Duration.scala	/^  def length: Long$/;"	m
length	scala/concurrent/duration/Duration.scala	/^final class FiniteDuration(val length: Long, val unit: TimeUnit) extends Duration {$/;"	V
length	scala/runtime/ScalaRunTime.scala	/^      val length = array_length(src)$/;"	V
length	scala/runtime/SeqCharSequence.scala	/^  def length: Int                                     = xs.length$/;"	m
length	scala/runtime/SeqCharSequence.scala	/^  def length: Int = math.max(0, end - start)$/;"	m
length	scala/xml/MetaData.scala	/^  def length(i: Int): Int = next.length(i + 1)$/;"	m
length	scala/xml/MetaData.scala	/^  def length: Int = length(0)$/;"	m
length	scala/xml/NodeSeq.scala	/^  def length = theSeq.length$/;"	m
length	scala/xml/include/sax/EncodingHeuristics.scala	/^      val length = in.read(data, 0, bytesToRead - 4)$/;"	V
lengthCompare	scala/collection/IndexedSeqOptimized.scala	/^  def lengthCompare(len: Int): Int = length - len$/;"	m
lengthCompare	scala/collection/LinearSeqOptimized.scala	/^  def lengthCompare(len: Int): Int = {$/;"	m
lengthCompare	scala/collection/SeqLike.scala	/^  def lengthCompare(len: Int): Int = {$/;"	m
length_=	scala/collection/mutable/StringBuilder.scala	/^  def length_=(n: Int) { underlying.setLength(n) }$/;"	m
letter	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def letter = elem("letter", _.isLetter)$/;"	m
letters	scala/collection/immutable/List.scala	/^   *  val letters = List('a','b','c','d','e')$/;"	V
level	scala/annotation/elidable.scala	/^final class elidable(final val level: Int) extends scala.annotation.StaticAnnotation {}$/;"	V
level	scala/collection/concurrent/TrieMap.scala	/^private[collection] class TrieMapIterator[K, V](var level: Int, private var ct: TrieMap[K, V], mustInit: Boolean = true) extends Iterator[(K, V)] {$/;"	v
level	scala/xml/include/sax/XIncludeFilter.scala	/^  private var level = 0$/;"	v
level	scala/xml/pull/XMLEventReader.scala	/^    private var level = 0$/;"	v
lexical	scala/util/parsing/combinator/lexical/Lexical.scala	/^package lexical$/;"	p
lexical	scala/util/parsing/combinator/lexical/Scanners.scala	/^package lexical$/;"	p
lexical	scala/util/parsing/combinator/lexical/StdLexical.scala	/^package lexical$/;"	p
lexical	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^  val lexical = new StdLexical$/;"	V
lexical	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^  val lexical: Tokens$/;"	V
lexical	scala/util/parsing/json/Parser.scala	/^  val lexical = new Tokens$/;"	V
lexical.StdLexical	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^import lexical.StdLexical$/;"	i
lexical.{Keyword, NumericLit, StringLit, Identifier}	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  import lexical.{Keyword, NumericLit, StringLit, Identifier}$/;"	i
lexicalHandler	scala/xml/include/sax/Main.scala	/^  private val lexicalHandler = "http:\/\/xml.org\/sax\/properties\/lexical-handler"$/;"	V
lf	scala/collection/mutable/FlatHashTable.scala	/^    val lf = _loadFactor$/;"	V
lift	scala/PartialFunction.scala	/^    override val lift = (x: Any) => None$/;"	V
lift	scala/PartialFunction.scala	/^  def lift: A => Option[B] = new Lifted(this)$/;"	m
lift	scala/io/BytePickle.scala	/^  def lift[t](x: t): SPU[t] = new SPU[t] {$/;"	m
limit	scala/collection/mutable/ListBuffer.scala	/^    val limit = last0.tail$/;"	V
line	scala/io/Source.scala	/^    val line  = Position line pos$/;"	V
line	scala/sys/process/BasicIO.scala	/^      val line = readLine()$/;"	V
line	scala/util/parsing/input/NoPosition.scala	/^  def line = 0$/;"	m
line	scala/util/parsing/input/OffsetPosition.scala	/^  def line: Int = {$/;"	m
line	scala/util/parsing/input/Position.scala	/^  def line: Int$/;"	m
line	scala/util/parsing/input/StreamReader.scala	/^    def line = lnum$/;"	m
line	scala/xml/include/sax/XIncludeFilter.scala	/^    var line = -1$/;"	v
lineContents	scala/util/parsing/input/NoPosition.scala	/^  def lineContents = ""$/;"	m
lineContents	scala/util/parsing/input/OffsetPosition.scala	/^  def lineContents: String =$/;"	m
lineContents	scala/util/parsing/input/StreamReader.scala	/^    def lineContents = seq.slice(0, nextEol).toString$/;"	m
lineReader	scala/io/BufferedSource.scala	/^    private val lineReader: BufferedReader = {$/;"	V
lineSeparator	scala/util/Properties.scala	/^  def lineSeparator         = propOrElse("line.separator", "\\n")$/;"	m
lineStarts	scala/util/parsing/input/OffsetPosition.scala	/^    var lineStarts = new ArrayBuffer[Int]$/;"	v
linearSeqHash	scala/util/hashing/MurmurHash3.scala	/^  def linearSeqHash(xs: scala.collection.LinearSeq[_], seed: Int): Int = {$/;"	m
lines	scala/collection/immutable/StringLike.scala	/^  def lines: Iterator[String] =$/;"	m
lines	scala/sys/process/ProcessBuilder.scala	/^  def lines(log: ProcessLogger): Stream[String]$/;"	m
lines	scala/sys/process/ProcessBuilder.scala	/^  def lines: Stream[String]$/;"	m
lines	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines(log: ProcessLogger): Stream[String]   = lines(false, true, Some(log))$/;"	m
lines	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines: Stream[String]                       = lines(false, true, None)$/;"	m
lines	scala/sys/process/package.scala	/^    *   val lines = cmd lines_! ProcessLogger(buffer append _)$/;"	V
linesIterator	scala/collection/immutable/StringLike.scala	/^  def linesIterator: Iterator[String] =$/;"	m
linesWithSeparators	scala/collection/immutable/StringLike.scala	/^  def linesWithSeparators: Iterator[String] = new AbstractIterator[String] {$/;"	m
lines_	scala/sys/process/ProcessBuilder.scala	/^  def lines_! : Stream[String]$/;"	m
lines_	scala/sys/process/ProcessBuilder.scala	/^  def lines_!(log: ProcessLogger): Stream[String]$/;"	m
lines_	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines_! : Stream[String]                    = lines(false, false, None)$/;"	m
lines_	scala/sys/process/ProcessBuilderImpl.scala	/^    def lines_!(log: ProcessLogger): Stream[String] = lines(false, false, Some(log))$/;"	m
list	scala/collection/immutable/List.scala	/^        val list : ::[B] = new ::(a.asInstanceOf[B], Nil)$/;"	V
list	scala/collection/mutable/ListBuffer.scala	/^        val list = new ::(elem, Nil)$/;"	V
list	scala/collection/package.scala	/^ * scala> val list = List(1,2,3,4,5,6)$/;"	V
list	scala/io/BytePickle.scala	/^  def list[a](pa: SPU[a]): SPU[List[a]] =$/;"	m
listClass	scala/Predef.scala	/^   * val listClass = classOf[List[_]]$/;"	V
listToPair	scala/io/BytePickle.scala	/^    def listToPair(l: List[A]): (A, List[A]) =$/;"	m
listToPair	scala/io/BytePickle.scala	/^    def listToPair(l: List[a]): (a,List[a]) =$/;"	m
listmap	scala/collection/concurrent/TrieMap.scala	/^private[collection] final class LNode[K, V](final val listmap: ImmutableListMap[K, V])$/;"	V
littleUCS4	scala/xml/include/sax/EncodingHeuristics.scala	/^    val littleUCS4    = "UCS-4"$/;"	V
littleUTF16	scala/xml/include/sax/EncodingHeuristics.scala	/^    val littleUTF16   = "UTF-16LE"$/;"	V
lo	scala/collection/IndexedSeqOptimized.scala	/^    val lo    = math.max(from, 0)$/;"	V
lo	scala/collection/IterableLike.scala	/^    val lo = math.max(0, n)$/;"	V
lo	scala/collection/IterableLike.scala	/^    val lo = math.max(from, 0)$/;"	V
lo	scala/collection/Iterator.scala	/^    val lo = from max 0$/;"	V
lo	scala/collection/generic/SliceInterval.scala	/^    val lo    = _from max 0$/;"	V
lo	scala/collection/generic/SliceInterval.scala	/^    val lo = from max 0$/;"	V
lo	scala/collection/immutable/List.scala	/^    val lo = scala.math.max(from, 0)$/;"	V
lo	scala/collection/immutable/Stream.scala	/^    val lo = from max 0$/;"	V
lo	scala/collection/immutable/Vector.scala	/^      var lo = (startIndex - 1) & 31$/;"	v
lo	scala/collection/immutable/Vector.scala	/^      var lo = endIndex & 31$/;"	v
lo	scala/collection/immutable/Vector.scala	/^    var lo = ((cutIndex - 1) & 31) + 1$/;"	v
lo	scala/collection/immutable/Vector.scala	/^    var lo = cutIndex & 31$/;"	v
lo	scala/collection/immutable/Vector.scala	/^  private var lo = 0$/;"	v
lo	scala/collection/immutable/Vector.scala	/^  private var lo: Int = _startIndex & 31$/;"	v
lo	scala/util/parsing/input/OffsetPosition.scala	/^    var lo = 0$/;"	v
load	scala/util/Marshal.scala	/^  def load[A](buffer: Array[Byte])(implicit expected: ClassTag[A]): A = {$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(is: InputStream): T         = loadXML(fromInputStream(is), parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(reader: Reader): T          = loadXML(fromReader(reader), parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(source: InputSource): T     = loadXML(source, parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(sysID: String): T           = loadXML(fromSysId(sysID), parser)$/;"	m
load	scala/xml/factory/XMLLoader.scala	/^  def load(url: URL): T                = loadXML(fromInputStream(url.openStream()), parser)$/;"	m
loadFactor	scala/collection/mutable/FlatHashTable.scala	/^    val loadFactor: Int,$/;"	V
loadFactor	scala/collection/mutable/HashTable.scala	/^    val loadFactor: Int,$/;"	V
loadFile	scala/xml/factory/XMLLoader.scala	/^  def loadFile(fd: FileDescriptor): T  = loadXML(fromFile(fd), parser)$/;"	m
loadFile	scala/xml/factory/XMLLoader.scala	/^  def loadFile(file: File): T          = loadXML(fromFile(file), parser)$/;"	m
loadFile	scala/xml/factory/XMLLoader.scala	/^  def loadFile(name: String): T        = loadXML(fromFile(name), parser)$/;"	m
loadString	scala/xml/factory/XMLLoader.scala	/^  def loadString(string: String): T    = loadXML(fromString(string), parser)$/;"	m
loadXML	scala/xml/factory/XMLLoader.scala	/^  def loadXML(source: InputSource, parser: SAXParser): T = {$/;"	m
loc	scala/collection/mutable/DoubleLinkedListLike.scala	/^    var loc = repr$/;"	v
loc	scala/collection/mutable/LinkedListLike.scala	/^    val loc = drop(n)$/;"	V
local	scala/collection/parallel/Tasks.scala	/^    val local = result \/\/ ensure that any effects of modifying `result` are detected$/;"	V
localName	scala/xml/parsing/FactoryAdapter.scala	/^    val localName = splitName(qname)._2$/;"	V
locationString	scala/xml/include/sax/XIncludeFilter.scala	/^    var locationString = ""$/;"	v
locator	scala/xml/include/sax/XIncludeFilter.scala	/^    val locator = locators.peek().asInstanceOf[Locator]$/;"	V
locators	scala/xml/include/sax/XIncludeFilter.scala	/^  private val locators = new Stack[Locator]()$/;"	V
log	scala/collection/concurrent/TrieMap.scala	/^  def log(s: AnyRef) = logbuffer.add(s)$/;"	m
log	scala/collection/mutable/History.scala	/^  protected val log: Queue[(Pub, Evt)] = new Queue$/;"	V
log	scala/math/package.scala	/^  def log(x: Double): Double = java.lang.Math.log(x)$/;"	m
log	scala/util/logging/Logged.scala	/^  def log(msg: String): Unit = {}$/;"	m
log	scala/util/parsing/combinator/Parsers.scala	/^  def log[T](p: => Parser[T])(name: String): Parser[T] = Parser{ in =>$/;"	m
log10	scala/math/package.scala	/^  def log10(x: Double): Double = java.lang.Math.log10(x)$/;"	m
log1p	scala/math/package.scala	/^  def log1p(x: Double): Double = java.lang.Math.log1p(x)$/;"	m
logComment	scala/xml/factory/LoggedNodeFactory.scala	/^  val logComment   = false$/;"	V
logCompressLevel	scala/xml/factory/LoggedNodeFactory.scala	/^  val logCompressLevel  = 1$/;"	V
logFile	scala/testing/Benchmark.scala	/^      val logFile = new java.io.OutputStreamWriter(System.out)$/;"	V
logNode	scala/xml/factory/LoggedNodeFactory.scala	/^  val logNode      = true$/;"	V
logProcInstr	scala/xml/factory/LoggedNodeFactory.scala	/^  val logProcInstr = false$/;"	V
logText	scala/xml/factory/LoggedNodeFactory.scala	/^  val logText      = false$/;"	V
logbuffer	scala/collection/concurrent/TrieMap.scala	/^  lazy val logbuffer = new java.util.concurrent.ConcurrentLinkedQueue[AnyRef]$/;"	V
longCount	scala/collection/immutable/NumericRange.scala	/^      val longCount = jumps + ($/;"	V
longHash	scala/runtime/Statics.java	/^  public static int longHash(long lv) {$/;"	m	class:Statics
longString	scala/util/parsing/input/Position.scala	/^  def longString = lineContents+"\\n"+lineContents.take(column-1).map{x => if (x == '\\t') x else ' ' } + "^"$/;"	m
longValue	scala/math/BigDecimal.scala	/^  def longValue   = this.bigDecimal.longValue$/;"	m
longValue	scala/math/BigInt.scala	/^  def longValue   = this.bigInteger.longValue$/;"	m
longValue	scala/math/ScalaNumericConversions.scala	/^  def longValue(): Long$/;"	m
longValue	scala/runtime/ScalaNumberProxy.scala	/^  def longValue()   = num.toLong(self)$/;"	m
lookahead	scala/collection/Iterator.scala	/^      val lookahead = new mutable.Queue[A]$/;"	V
lookahead	scala/xml/parsing/MarkupParser.scala	/^    def lookahead(): BufferedIterator[Char] = {$/;"	m
lookahead	scala/xml/parsing/MarkupParser.scala	/^  def lookahead(): BufferedIterator[Char] = curInput match {$/;"	m
lookahead	scala/xml/parsing/MarkupParserCommon.scala	/^  def lookahead(): BufferedIterator[Char]$/;"	m
lookup	scala/collection/concurrent/TrieMap.scala	/^  def lookup(k: K): V = {$/;"	m
lookup	scala/collection/immutable/RedBlack.scala	/^    def lookup(k: A): Tree[B] =$/;"	m
lookup	scala/collection/immutable/RedBlack.scala	/^    def lookup(k: A): Tree[Nothing] = this$/;"	m
lookup	scala/collection/immutable/RedBlack.scala	/^    def lookup(x: A): Tree[B]$/;"	m
lookup	scala/collection/immutable/RedBlackTree.scala	/^  def lookup[A, B](tree: Tree[A, B], x: A)(implicit ordering: Ordering[A]): Tree[A, B] = if (tree eq null) null else {$/;"	m
lookupElemDecl	scala/xml/parsing/MarkupHandler.scala	/^  def lookupElemDecl(Label: String): ElemDecl = {$/;"	m
loop	scala/Responder.scala	/^  def loop[A](r: Responder[Unit]): Responder[Nothing] =$/;"	m
loop	scala/collection/generic/Signalling.scala	/^    var loop = true$/;"	v
loop	scala/collection/immutable/List.scala	/^    def loop(lead: List[A], lag: List[A]): List[A] = lead match {$/;"	m
loop	scala/collection/immutable/List.scala	/^    def loop(mapped: ListBuffer[B], unchanged: List[A], pending: List[A]): List[B] =$/;"	m
loop	scala/collection/immutable/List.scala	/^    def loop(xs: List[A]): List[A] =$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(i: Int): Stream[A] =$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(len: Int, these: Stream[A]): Stream[B] =$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(pre: String, these: Stream[A]) {$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(s: Stream[A]): Boolean = s.isEmpty || s.tailDefined && loop(s.tail)$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(seen: Set[A], rest: Stream[A]): Stream[A] = {$/;"	m
loop	scala/collection/immutable/Stream.scala	/^    def loop(these: Stream[A], start: String) {$/;"	m
loop	scala/collection/mutable/LinkedListLike.scala	/^    def loop(x: This) {$/;"	m
loop	scala/collection/parallel/RemainsIterator.scala	/^    var loop = true$/;"	v
loop	scala/reflect/ClassManifestDeprecatedApis.scala	/^    def loop(left: Set[jClass[_]], seen: Set[jClass[_]]): Boolean = {$/;"	m
loop	scala/util/control/TailCalls.scala	/^      def loop(body: TailRec[A]): A = body match {$/;"	m
loopWhile	scala/Responder.scala	/^  def loopWhile[A](cond: => Boolean)(r: Responder[Unit]): Responder[Unit] =$/;"	m
low	scala/runtime/ScalaRunTime.scala	/^    val low = lv.toInt$/;"	V
low	scala/util/Random.scala	/^    val low  = 33$/;"	V
lowSign	scala/runtime/ScalaRunTime.scala	/^    val lowSign = low >>> 31$/;"	V
lowest	scala/math/BigInt.scala	/^        val lowest = lowestSetBit$/;"	V
lowestSetBit	scala/math/BigInt.scala	/^  def lowestSetBit: Int         = this.bigInteger.getLowestSetBit()$/;"	m
lrStack	scala/util/parsing/combinator/PackratParsers.scala	/^    private[PackratParsers] var lrStack: List[LR] = Nil$/;"	v
lst	scala/collection/GenSeqViewLike.scala	/^      var lst = List[A]()$/;"	v
lst	scala/collection/TraversableLike.scala	/^    var lst = head$/;"	v
lst	scala/collection/concurrent/TrieMap.scala	/^      val lst = this.subiter.toList$/;"	V
lst	scala/collection/immutable/ListMap.scala	/^      var lst: List[(A, B1)] = Nil$/;"	v
lst	scala/collection/parallel/ParIterableLike.scala	/^      \/\/ val lst = pit.toList$/;"	V
lst	scala/collection/parallel/ParIterableLike.scala	/^    var lst = head$/;"	v
lst	scala/collection/parallel/RemainsIterator.scala	/^    var lst = List[S]()$/;"	v
lst	scala/collection/parallel/RemainsIterator.scala	/^    var lst = List[T]()$/;"	v
lt	scala/concurrent/duration/Duration.scala	/^  def lt(other: Duration)    = this < other$/;"	m
lt	scala/math/PartialOrdering.scala	/^  def lt(x: T, y: T): Boolean = lteq(x, y) && !equiv(x, y)$/;"	m
lteq	scala/concurrent/duration/Duration.scala	/^  def lteq(other: Duration)  = this <= other$/;"	m
lteq	scala/math/PartialOrdering.scala	/^    def lteq(x: T, y: T) = outer.lteq(y, x)$/;"	m
lteq	scala/math/PartialOrdering.scala	/^  def lteq(x: T, y: T): Boolean$/;"	m
lv	scala/math/ScalaNumericConversions.scala	/^    val lv = toLong$/;"	V
lv	scala/runtime/ScalaRunTime.scala	/^    val lv = dv.toLong$/;"	V
lv	scala/runtime/ScalaRunTime.scala	/^    val lv = fv.toLong$/;"	V
m	scala/collection/SeqLike.scala	/^      val m = mutable.HashMap[A, Int]()$/;"	V
m	scala/collection/SortedMapLike.scala	/^    var m = this + elem1 + elem2;$/;"	v
m	scala/collection/TraversableLike.scala	/^    val m = mutable.Map.empty[K, Builder[A, Repr]]$/;"	V
m	scala/collection/concurrent/TrieMap.scala	/^    val m = GCAS_READ(ct)  \/\/ use -Yinline!$/;"	V
m	scala/collection/concurrent/TrieMap.scala	/^    val m = GCAS_READ(ct) \/\/ use -Yinline!$/;"	V
m	scala/collection/concurrent/TrieMap.scala	/^    val m = GCAS_READ(ct)$/;"	V
m	scala/collection/concurrent/TrieMap.scala	/^    val m = \/*READ*\/mainnode$/;"	V
m	scala/collection/concurrent/TrieMap.scala	/^    val m = nd.GCAS_READ(ct)$/;"	V
m	scala/collection/immutable/HashMap.scala	/^              val m = thatelems(thati)$/;"	V
m	scala/collection/immutable/HashMap.scala	/^              val m = thiselems(thisi)$/;"	V
m	scala/collection/immutable/HashMap.scala	/^            val m = thiselems(thisi).merge0(thatelems(thati), level + 5, merger)$/;"	V
m	scala/collection/immutable/HashMap.scala	/^      var m = that$/;"	v
m	scala/collection/immutable/HashMap.scala	/^    \/\/       val m = new HashTrieMap[A,B1](0,new Array[HashMap[A,B1]](0),0) \/\/ TODO: could save array alloc$/;"	V
m	scala/collection/immutable/IntMap.scala	/^    val m = branchMask(p1, p2)$/;"	V
m	scala/collection/immutable/ListMap.scala	/^      val m = if (contains(k)) this - k else this$/;"	V
m	scala/collection/immutable/LongMap.scala	/^    val m = branchMask(p1, p2)$/;"	V
m	scala/collection/immutable/Queue.scala	/^      val m = n - len$/;"	V
m	scala/collection/immutable/TrieIterator.scala	/^          val m = arrayD(posD)$/;"	V
m	scala/collection/immutable/TrieIterator.scala	/^    val m = elems(i)$/;"	V
m	scala/collection/mutable/LinkedList.scala	/^   *     scala> val m = LinkedList(1)$/;"	V
m	scala/util/Sorting.scala	/^        var m = off + (len >> 1)        \/\/ Small arrays, middle element$/;"	v
m	scala/util/matching/Regex.scala	/^      val m = pattern matcher s$/;"	V
m	scala/util/matching/Regex.scala	/^    val m = pattern.matcher(source)$/;"	V
m	scala/util/matching/Regex.scala	/^    val m = pattern.matcher(target)$/;"	V
m	scala/util/parsing/combinator/PackratParsers.scala	/^        val m = recall(p, inMem)$/;"	V
m	scala/xml/parsing/FactoryAdapter.scala	/^    var m: MetaData = Null$/;"	v
m	scala/xml/parsing/MarkupParser.scala	/^    var m = xmlProcInstr()$/;"	v
mNew	scala/collection/immutable/HashMap.scala	/^var mNew = HashMap.empty[Int,Int]$/;"	v
mNew	scala/collection/immutable/HashSet.scala	/^var mNew = HashSet.empty[Int]$/;"	v
mOld	scala/collection/immutable/HashMap.scala	/^var mOld = OldHashMap.empty[Int,Int]$/;"	v
mOld	scala/collection/immutable/HashSet.scala	/^var mOld = OldHashSet.empty[Int]$/;"	v
macros	scala/language.scala	/^    implicit lazy val macros: macros = languageFeature.experimental.macros$/;"	V
macros	scala/languageFeature.scala	/^    object macros extends macros$/;"	o
main	scala/App.scala	/^  def main(args: Array[String]) = {$/;"	m
main	scala/Application.scala	/^  def main(args: Array[String]) {$/;"	m
main	scala/collection/concurrent/TrieMap.scala	/^    val main = GCAS_READ(ct)$/;"	V
main	scala/testing/Benchmark.scala	/^  def main(args: Array[String]) {$/;"	m
main	scala/util/Properties.scala	/^  def main(args: Array[String]) {$/;"	m
main	scala/util/parsing/combinator/testing/RegexTest.scala	/^  def main(args: Array[String]) = {$/;"	m
main	scala/xml/include/sax/Main.scala	/^  def main(args: Array[String]) {$/;"	m
mainList	scala/collection/immutable/List.scala	/^ *  val mainList = List(3, 2, 1)$/;"	V
mainnode	scala/collection/concurrent/INodeBase.java	/^    public volatile MainNode<K, V> mainnode = null;$/;"	f	class:INodeBase
make	scala/collection/immutable/List.scala	/^  def make[A](n: Int, elem: A): List[A] = {$/;"	m
make	scala/collection/mutable/ArrayBuilder.scala	/^  def make[T: ClassTag](): ArrayBuilder[T] = {$/;"	m
make	scala/collection/mutable/WrappedArray.scala	/^  def make[T](x: AnyRef): WrappedArray[T] = (x match {$/;"	m
makeComment	scala/xml/factory/NodeFactory.scala	/^  def makeComment(s: String): Seq[Comment]  =$/;"	m
makeNode	scala/xml/factory/NodeFactory.scala	/^  def makeNode(pre: String, name: String, attrSeq: MetaData, scope: NamespaceBinding, children: Seq[Node]): A = {$/;"	m
makeProcInstr	scala/xml/factory/NodeFactory.scala	/^  def makeProcInstr(t: String, s: String): Seq[ProcInstr] =$/;"	m
makeSeq	scala/xml/NodeSeq.scala	/^    def makeSeq(cond: (Node) => Boolean) =$/;"	m
makeText	scala/xml/factory/NodeFactory.scala	/^  def makeText(s: String) = Text(s)$/;"	m
managedBlock	scala/concurrent/FutureTaskRunner.scala	/^  def managedBlock(blocker: ManagedBlocker): Unit$/;"	m
managedBlock	scala/concurrent/JavaConversions.scala	/^      def managedBlock(blocker: ManagedBlocker) {$/;"	m
managedBlock	scala/concurrent/ThreadPoolRunner.scala	/^  def managedBlock(blocker: ManagedBlocker) {$/;"	m
managedBlock	scala/concurrent/ThreadRunner.scala	/^  def managedBlock(blocker: ManagedBlocker) {$/;"	m
manifest	scala/Predef.scala	/^  def manifest[T](implicit m: Manifest[T])           = m$/;"	m
manifest	scala/collection/mutable/WrappedArrayBuilder.scala	/^  val manifest: ClassTag[A] = tag$/;"	V
map	scala/Option.scala	/^    def map[B](f: A => B): Option[B] = self filter p map f$/;"	m
map	scala/Responder.scala	/^  def map[B](f: A => B) = new Responder[B] {$/;"	m
map	scala/Symbol.scala	/^  private val map = new WeakHashMap[K, WeakReference[V]]$/;"	V
map	scala/collection/GenTraversableLike.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
map	scala/collection/Iterator.scala	/^  def map[B](f: A => B): Iterator[B] = new AbstractIterator[B] {$/;"	m
map	scala/collection/SortedMapLike.scala	/^      val map = self.rangeImpl(from, until)$/;"	V
map	scala/collection/TraversableLike.scala	/^    def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
map	scala/collection/TraversableLike.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
map	scala/collection/TraversableOnce.scala	/^    def map[B](f: A => B): TraversableOnce[B] = trav.toIterator map f$/;"	m
map	scala/collection/generic/FilterMonadic.scala	/^  def map[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
map	scala/collection/immutable/SortedMap.scala	/^      val map = self.rangeImpl(from, until)$/;"	V
map	scala/collection/package.scala	/^ * scala> val map = Map(1 -> "one",2 -> "two", 3 -> "three",2 -> "too")$/;"	V
map	scala/collection/parallel/ParIterableLike.scala	/^      def map(r: R): R1 = mapping(r)$/;"	m
map	scala/collection/parallel/ParIterableLike.scala	/^    def map(r: R): R1$/;"	m
map	scala/collection/parallel/ParIterableLike.scala	/^  def map[S, That](f: T => S)(implicit bf: CanBuildFrom[Repr, S, That]): That = if (bf(repr).isCombiner) {$/;"	m
map	scala/concurrent/Future.scala	/^  def map[S](f: T => S)(implicit executor: ExecutionContext): Future[S] = { \/\/ transform(f, identity)$/;"	m
map	scala/runtime/Tuple2Zipped.scala	/^  def map[B, To](f: (El1, El2) => B)(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
map	scala/runtime/Tuple3Zipped.scala	/^  def map[B, To](f: (El1, El2, El3) => B)(implicit cbf: CBF[Repr1, B, To]): To = {$/;"	m
map	scala/util/Either.scala	/^    def map[X](f: A => X) = e match {$/;"	m
map	scala/util/Either.scala	/^    def map[Y](f: B => Y) = e match {$/;"	m
map	scala/util/Try.scala	/^  def map[U](f: T => U): Try[U] = Try[U](f(value))$/;"	m
map	scala/util/Try.scala	/^  def map[U](f: T => U): Try[U] = this.asInstanceOf[Try[U]]$/;"	m
map	scala/util/Try.scala	/^  def map[U](f: T => U): Try[U]$/;"	m
map	scala/util/automata/DetWordAutom.scala	/^    val map = Map(finals.zipWithIndex map (_.swap): _*)$/;"	V
map	scala/util/matching/Regex.scala	/^   * val map = Map("x" -> "a var", "y" -> """some $ and \\ signs""")$/;"	V
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: Nothing => U) = this$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: T => U) = Success(f(result), next)$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: T => U): ParseResult[U]$/;"	m
map	scala/util/parsing/combinator/Parsers.scala	/^    def map[U](f: T => U): Parser[U] \/\/= flatMap{x => success(f(x))}$/;"	m
map2	scala/collection/immutable/List.scala	/^  def map2[A,B,C](xs: List[A], ys: List[B])(f: (A, B) => C): List[C] = {$/;"	m
map2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def map2combiner[S, That](f: T => S, cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
mapCompanion	scala/collection/generic/GenericParTemplate.scala	/^  def mapCompanion: GenericParMapCompanion[CC]$/;"	m
mapCompanion	scala/collection/parallel/ParMap.scala	/^  def mapCompanion: GenericParMapCompanion[ParMap] = ParMap$/;"	m
mapConserve	scala/collection/immutable/List.scala	/^  def mapConserve[B >: A <: AnyRef](f: A => B): List[B] = {$/;"	m
mapHash	scala/util/hashing/MurmurHash3.scala	/^  def mapHash(xs: scala.collection.Map[_, _]): Int = unorderedHash(xs, mapSeed)$/;"	m
mapInner	scala/runtime/ScalaRunTime.scala	/^    def mapInner(arg: Any): String = arg match {$/;"	m
mapIntString	scala/Predef.scala	/^   * val mapIntString = classOf[Map[Int,String]]$/;"	V
mapPartial	scala/util/parsing/combinator/Parsers.scala	/^    def mapPartial[U](f: PartialFunction[Nothing, U], error: Nothing => String): ParseResult[U] = this$/;"	m
mapPartial	scala/util/parsing/combinator/Parsers.scala	/^    def mapPartial[U](f: PartialFunction[T, U], error: T => String): ParseResult[U]$/;"	m
mapResult	scala/collection/mutable/Builder.scala	/^  def mapResult[NewTo](f: To => NewTo): Builder[Elem, NewTo] =$/;"	m
mapResult	scala/collection/parallel/ParIterableLike.scala	/^    def mapResult[R1](mapping: R => R1): ResultMapping[R, Tp, R1] = new ResultMapping[R, Tp, R1](tsk) {$/;"	m
mapResult	scala/collection/parallel/ParIterableLike.scala	/^    def mapResult[R1](mapping: R => R1): ResultMapping[R, Tp, R1]$/;"	m
mapSeed	scala/util/hashing/MurmurHash3.scala	/^  final val mapSeed         = "Map".hashCode$/;"	V
mapTo	scala/concurrent/Future.scala	/^  def mapTo[S](implicit tag: ClassTag[S]): Future[S] = {$/;"	m
mapValues	scala/collection/GenMapLike.scala	/^  def mapValues[C](f: B => C): GenMap[A, C]$/;"	m
mapValues	scala/collection/MapLike.scala	/^  def mapValues[C](f: B => C): Map[A, C] = new MappedValues(f)$/;"	m
mapValues	scala/collection/parallel/ParMapLike.scala	/^  def mapValues[S](f: V => S): ParMap[K, S] = new ParMap[K, S] {$/;"	m
mapper	scala/util/matching/Regex.scala	/^   * val mapper = (m: Match) => map get (m group 1) map (quoteReplacement(_))$/;"	V
mapping	scala/collection/GenTraversableViewLike.scala	/^    protected[this] val mapping: A => B$/;"	V
mapping	scala/collection/GenTraversableViewLike.scala	/^    protected[this] val mapping: A => GenTraversableOnce[B]$/;"	V
mapping	scala/collection/IterableViewLike.scala	/^  protected override def newFlatMapped[B](f: A => GenTraversableOnce[B]): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with FlatMapped[B]$/;"	V
mapping	scala/collection/IterableViewLike.scala	/^  protected override def newMapped[B](f: A => B): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with Mapped[B]$/;"	V
mapping	scala/collection/SeqViewLike.scala	/^  protected override def newFlatMapped[B](f: A => GenTraversableOnce[B]): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with FlatMapped[B]$/;"	V
mapping	scala/collection/SeqViewLike.scala	/^  protected override def newMapped[B](f: A => B): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with Mapped[B]$/;"	V
mapping	scala/collection/TraversableViewLike.scala	/^  protected def newFlatMapped[B](f: A => GenTraversableOnce[B]): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with FlatMapped[B]$/;"	V
mapping	scala/collection/TraversableViewLike.scala	/^  protected def newMapped[B](f: A => B): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with Mapped[B]$/;"	V
mapping	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newFlatMapped[B](f: A => scala.collection.GenTraversableOnce[B]): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with FlatMapped[B]$/;"	V
mapping	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newMapped[B](f: A => B): Transformed[B] = new { val mapping = f } with AbstractTransformed[B] with Mapped[B]$/;"	V
mapping	scala/collection/parallel/ParIterableViewLike.scala	/^  protected def newMapped[S](f: T => S): Transformed[S] = new Mapped[S] { val mapping = f }$/;"	V
mapping	scala/collection/parallel/ParSeqViewLike.scala	/^  protected override def newMapped[S](f: T => S): Transformed[S] = new Mapped[S] { val mapping = f }$/;"	V
mark	scala/util/automata/Inclusion.scala	/^    val mark = new Array[Int](max)$/;"	V
markupDecl	scala/xml/parsing/MarkupParser.scala	/^  def markupDecl(): Unit = ch match {$/;"	m
markupDecl1	scala/xml/parsing/MarkupParser.scala	/^  def markupDecl1() = {$/;"	m
mask	scala/collection/concurrent/TrieMap.scala	/^        val mask = flag - 1$/;"	V
mask	scala/collection/generic/BitOperations.scala	/^    def mask(i: Int, mask: Int)                 = i & (complement(mask - 1) ^ mask)$/;"	m
mask	scala/collection/generic/BitOperations.scala	/^    def mask(i: Long, mask: Long)                  = i & (complement(mask - 1) ^ mask)$/;"	m
mask	scala/collection/immutable/HashMap.scala	/^      val mask = (1 << index)$/;"	V
mask	scala/collection/immutable/HashSet.scala	/^      val mask = (1 << index)$/;"	V
mask	scala/collection/mutable/OpenHashMap.scala	/^  private var mask = actualInitialSize - 1$/;"	v
mask	scala/collection/parallel/mutable/ParHashMap.scala	/^  private var mask = ParHashMapCombiner.discriminantmask$/;"	v
mask	scala/collection/parallel/mutable/ParHashSet.scala	/^  private var mask = ParHashSetCombiner.discriminantmask$/;"	v
matchData	scala/util/matching/Regex.scala	/^    def matchData: Iterator[Match] = new AbstractIterator[Match] {$/;"	m
matchIterator	scala/util/matching/Regex.scala	/^    val matchIterator = findAllIn(source)$/;"	V
matched	scala/util/matching/Regex.scala	/^    def matched: String =$/;"	m
matcher	scala/util/matching/Regex.scala	/^      def matcher = self.matcher$/;"	m
matcher	scala/util/matching/Regex.scala	/^    protected[Regex] val matcher = regex.pattern.matcher(source)$/;"	V
math	scala/math/Ordering.scala	/^package math$/;"	p
max	scala/Function2.scala	/^ *    val max = (x: Int, y: Int) => if (x < y) y else x$/;"	V
max	scala/collection/GenTraversableOnce.scala	/^  def max[A1 >: A](implicit ord: Ordering[A1]): A$/;"	m
max	scala/collection/TraversableOnce.scala	/^  def max[B >: A](implicit cmp: Ordering[B]): A = {$/;"	m
max	scala/collection/mutable/PriorityQueue.scala	/^  def max: A = if (resarr.p_size0 > 1) toA(resarr.p_array(1)) else throw new NoSuchElementException("queue is empty")$/;"	m
max	scala/collection/parallel/ParIterableLike.scala	/^  def max[U >: T](implicit ord: Ordering[U]): T = {$/;"	m
max	scala/concurrent/duration/Duration.scala	/^  def max(other: Duration): Duration = if (this > other) this else other$/;"	m
max	scala/concurrent/duration/Duration.scala	/^  def max(other: FiniteDuration) = if (this > other) this else other$/;"	m
max	scala/math/BigDecimal.scala	/^  def max (that: BigDecimal): BigDecimal = this.bigDecimal max that.bigDecimal$/;"	m
max	scala/math/BigInt.scala	/^  def max (that: BigInt): BigInt = new BigInt(this.bigInteger.max(that.bigInteger))$/;"	m
max	scala/math/Ordering.scala	/^    def max(rhs: T): T = Ordering.this.max(lhs, rhs)$/;"	m
max	scala/math/Ordering.scala	/^  def max(x: T, y: T): T = if (gteq(x, y)) x else y$/;"	m
max	scala/math/package.scala	/^  def max(x: Double, y: Double): Double = java.lang.Math.max(x, y)$/;"	m
max	scala/math/package.scala	/^  def max(x: Float, y: Float): Float = java.lang.Math.max(x, y)$/;"	m
max	scala/math/package.scala	/^  def max(x: Int, y: Int): Int = java.lang.Math.max(x, y)$/;"	m
max	scala/math/package.scala	/^  def max(x: Long, y: Long): Long = java.lang.Math.max(x, y)$/;"	m
max	scala/runtime/ScalaNumberProxy.scala	/^  def max(that: T): T = num.max(self, that)$/;"	m
max	scala/util/automata/Inclusion.scala	/^    val max = 1 + dfa1.nstates * dfa2.nstates$/;"	V
maxBy	scala/collection/GenTraversableOnce.scala	/^  def maxBy[B](f: A => B)(implicit cmp: Ordering[B]): A$/;"	m
maxBy	scala/collection/TraversableOnce.scala	/^  def maxBy[B](f: A => B)(implicit cmp: Ordering[B]): A = {$/;"	m
maxBy	scala/collection/parallel/ParIterableLike.scala	/^  def maxBy[S](f: T => S)(implicit cmp: Ordering[S]): T = {$/;"	m
maxCached	scala/math/BigDecimal.scala	/^  private val maxCached = 512$/;"	V
maxCached	scala/math/BigInt.scala	/^  private val maxCached = 1024$/;"	V
maxHistory	scala/collection/mutable/History.scala	/^  val maxHistory: Int = 1000$/;"	V
maxPreciseDouble	scala/concurrent/duration/Duration.scala	/^  private[this] final val maxPreciseDouble = 9007199254740992d$/;"	V
max_d	scala/concurrent/duration/Duration.scala	/^  private final val max_d  = max_h   \/ 24$/;"	V
max_h	scala/concurrent/duration/Duration.scala	/^  private final val max_h  = max_min \/ 60$/;"	V
max_min	scala/concurrent/duration/Duration.scala	/^  private final val max_min= max_s   \/ 60$/;"	V
max_ms	scala/concurrent/duration/Duration.scala	/^  private final val max_ms = max_µs  \/ 1000$/;"	V
max_ns	scala/concurrent/duration/Duration.scala	/^  private final val max_ns = Long.MaxValue$/;"	V
max_s	scala/concurrent/duration/Duration.scala	/^  private final val max_s  = max_ms  \/ 1000$/;"	V
maximumHeight	scala/collection/immutable/RedBlackTree.scala	/^      val maximumHeight = 2 * (32 - Integer.numberOfLeadingZeros(tree.count + 2 - 1)) - 2 - 1$/;"	V
maxsplits	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val maxsplits = 3 + Integer.highestOneBit(parallelismLevel)$/;"	V
maybeSuffix	scala/xml/dtd/ContentModelParser.scala	/^  def maybeSuffix(s: RegExp) = token match {$/;"	m
mc	scala/math/BigDecimal.scala	/^  val mc: MathContext)$/;"	V
md	scala/beans/ScalaBeanInfo.scala	/^  private val md =$/;"	V
med3	scala/util/Sorting.scala	/^    def med3(a: Int, b: Int, c: Int) = {$/;"	m
memo	scala/util/parsing/combinator/PackratParsers.scala	/^  def memo[T](p: super.Parser[T]): PackratParser[T] = {$/;"	m
merge	scala/collection/immutable/HashMap.scala	/^  def merge[B1 >: B](that: HashMap[A, B1], mergef: MergeFunction[A, B1] = null): HashMap[A, B1] = merge0(that, 0, liftMerger(mergef))$/;"	m
merge	scala/util/Either.scala	/^    def merge: A = x match {$/;"	m
merged	scala/collection/immutable/HashMap.scala	/^        val merged = new Array[HashMap[A, B1]](subcount)$/;"	V
merged	scala/collection/immutable/HashMap.scala	/^  def merged[B1 >: B](that: HashMap[A, B1])(mergef: MergeFunction[A, B1]): HashMap[A, B1] = merge0(that, 0, liftMerger(mergef))$/;"	m
metaData	scala/xml/parsing/FactoryAdapter.scala	/^    val metaData = attribStack.pop$/;"	V
method	scala/runtime/MethodCache.scala	/^  private[this] val method: JMethod,$/;"	V
methods	scala/Enumeration.scala	/^    val methods = getClass.getMethods filter (m => m.getParameterTypes.isEmpty &&$/;"	V
methods	scala/reflect/Manifest.scala	/^  def methods[T: ClassManifest] = classManifest[T].erasure.getMethods$/;"	m
micro	scala/concurrent/duration/DurationConversions.scala	/^  def micro        = microseconds$/;"	m
micro	scala/concurrent/duration/DurationConversions.scala	/^  def micro[C](c: C)(implicit ev: Classifier[C]): ev.R = microseconds(c)$/;"	m
micros	scala/concurrent/duration/DurationConversions.scala	/^  def micros       = microseconds$/;"	m
micros	scala/concurrent/duration/DurationConversions.scala	/^  def micros[C](c: C)(implicit ev: Classifier[C]): ev.R = microseconds(c)$/;"	m
microsecond	scala/concurrent/duration/DurationConversions.scala	/^  def microsecond  = microseconds$/;"	m
microsecond	scala/concurrent/duration/DurationConversions.scala	/^  def microsecond[C](c: C)(implicit ev: Classifier[C]): ev.R = microseconds(c)$/;"	m
microseconds	scala/concurrent/duration/DurationConversions.scala	/^  def microseconds = durationIn(MICROSECONDS)$/;"	m
microseconds	scala/concurrent/duration/DurationConversions.scala	/^  def microseconds[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(microseconds)$/;"	m
mid	scala/collection/GenSeqViewLike.scala	/^      val mid = (lo + hi) \/ 2$/;"	V
mid	scala/util/Sorting.scala	/^      val mid = (lo+hi) \/ 2$/;"	V
mid	scala/util/parsing/input/OffsetPosition.scala	/^      val mid = (hi + lo) \/ 2$/;"	V
milli	scala/concurrent/duration/DurationConversions.scala	/^  def milli        = milliseconds$/;"	m
milli	scala/concurrent/duration/DurationConversions.scala	/^  def milli[C](c: C)(implicit ev: Classifier[C]): ev.R = milliseconds(c)$/;"	m
millis	scala/concurrent/duration/DurationConversions.scala	/^  def millis       = milliseconds$/;"	m
millis	scala/concurrent/duration/DurationConversions.scala	/^  def millis[C](c: C)(implicit ev: Classifier[C]): ev.R = milliseconds(c)$/;"	m
millisecond	scala/concurrent/duration/DurationConversions.scala	/^  def millisecond  = milliseconds$/;"	m
millisecond	scala/concurrent/duration/DurationConversions.scala	/^  def millisecond[C](c: C)(implicit ev: Classifier[C]): ev.R = milliseconds(c)$/;"	m
milliseconds	scala/concurrent/duration/DurationConversions.scala	/^  def milliseconds = durationIn(MILLISECONDS)$/;"	m
milliseconds	scala/concurrent/duration/DurationConversions.scala	/^  def milliseconds[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(milliseconds)$/;"	m
min	scala/collection/GenTraversableOnce.scala	/^  def min[A1 >: A](implicit ord: Ordering[A1]): A$/;"	m
min	scala/collection/TraversableOnce.scala	/^  def min[B >: A](implicit cmp: Ordering[B]): A = {$/;"	m
min	scala/collection/parallel/ParIterableLike.scala	/^  def min[U >: T](implicit ord: Ordering[U]): T = {$/;"	m
min	scala/concurrent/duration/Duration.scala	/^  def min(other: Duration): Duration = if (this < other) this else other$/;"	m
min	scala/concurrent/duration/Duration.scala	/^  def min(other: FiniteDuration) = if (this < other) this else other$/;"	m
min	scala/math/BigDecimal.scala	/^  def min (that: BigDecimal): BigDecimal = this.bigDecimal min that.bigDecimal$/;"	m
min	scala/math/BigInt.scala	/^  def min (that: BigInt): BigInt = new BigInt(this.bigInteger.min(that.bigInteger))$/;"	m
min	scala/math/Ordering.scala	/^    def min(rhs: T): T = Ordering.this.min(lhs, rhs)$/;"	m
min	scala/math/Ordering.scala	/^  def min(x: T, y: T): T = if (lteq(x, y)) x else y$/;"	m
min	scala/math/package.scala	/^  def min(x: Double, y: Double): Double = java.lang.Math.min(x, y)$/;"	m
min	scala/math/package.scala	/^  def min(x: Float, y: Float): Float  = java.lang.Math.min(x, y)$/;"	m
min	scala/math/package.scala	/^  def min(x: Int, y: Int): Int = java.lang.Math.min(x, y)$/;"	m
min	scala/math/package.scala	/^  def min(x: Long, y: Long): Long  = java.lang.Math.min(x, y)$/;"	m
min	scala/runtime/ScalaNumberProxy.scala	/^  def min(that: T): T = num.min(self, that)$/;"	m
minBy	scala/collection/GenTraversableOnce.scala	/^  def minBy[B](f: A => B)(implicit cmp: Ordering[B]): A$/;"	m
minBy	scala/collection/TraversableOnce.scala	/^  def minBy[B](f: A => B)(implicit cmp: Ordering[B]): A = {$/;"	m
minBy	scala/collection/parallel/ParIterableLike.scala	/^  def minBy[S](f: T => S)(implicit cmp: Ordering[S]): T = {$/;"	m
minCached	scala/math/BigDecimal.scala	/^  private val minCached = -512$/;"	V
minCached	scala/math/BigInt.scala	/^  private val minCached = -1024$/;"	V
min_per_ns	scala/concurrent/duration/Duration.scala	/^  private[this] final val min_per_ns =   s_per_ns * 60$/;"	V
minimizableElements	scala/xml/Xhtml.scala	/^  private val minimizableElements =$/;"	V
minimizeEmpty	scala/xml/Elem.scala	/^  val minimizeEmpty: Boolean,$/;"	V
minus	scala/concurrent/duration/Duration.scala	/^  def minus(other: Duration) = this - other$/;"	m
minus	scala/concurrent/duration/Duration.scala	/^  def minus(other: FiniteDuration) = this - other$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: BigDecimal, y: BigDecimal): BigDecimal = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: BigInt, y: BigInt): BigInt = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Byte, y: Byte): Byte = (x - y).toByte$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Char, y: Char): Char = (x - y).toChar$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Double, y: Double): Double = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Float, y: Float): Float = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Int, y: Int): Int = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Long, y: Long): Long = x - y$/;"	m
minus	scala/math/Numeric.scala	/^    def minus(x: Short, y: Short): Short = (x - y).toShort$/;"	m
minus	scala/math/Numeric.scala	/^  def minus(x: T, y: T): T$/;"	m
minusOne	scala/math/BigInt.scala	/^  private val minusOne = BigInteger.valueOf(-1)$/;"	V
minute	scala/concurrent/duration/DurationConversions.scala	/^  def minute       = minutes$/;"	m
minute	scala/concurrent/duration/DurationConversions.scala	/^  def minute[C](c: C)(implicit ev: Classifier[C]): ev.R = minutes(c)$/;"	m
minutes	scala/concurrent/duration/DurationConversions.scala	/^  def minutes      = durationIn(MINUTES)$/;"	m
minutes	scala/concurrent/duration/DurationConversions.scala	/^  def minutes[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(minutes)$/;"	m
mix	scala/runtime/Statics.java	/^  public static int mix(int hash, int data) {$/;"	m	class:Statics
mixLast	scala/runtime/Statics.java	/^  public static int mixLast(int hash, int data) {$/;"	m	class:Statics
mkAttributes	scala/xml/parsing/MarkupParser.scala	/^  def mkAttributes(name: String, pscope: NamespaceBinding): AttributesType =$/;"	m
mkAttributes	scala/xml/parsing/MarkupParserCommon.scala	/^  def mkAttributes(name: String, pscope: NamespaceType): AttributesType$/;"	m
mkCatcher	scala/util/control/Exception.scala	/^  def mkCatcher[Ex <: Throwable: ClassTag, T](isDef: Ex => Boolean, f: Ex => T) = new Catcher[T] {$/;"	m
mkEnd	scala/xml/PrettyPrinter.scala	/^    def mkEnd(sb: StringBuilder) {$/;"	m
mkLeaf	scala/xml/PrettyPrinter.scala	/^    def mkLeaf(sb: StringBuilder) {$/;"	m
mkList	scala/util/parsing/combinator/Parsers.scala	/^  def mkList[T] = (_: ~[T, List[T]]) match { case x ~ xs => x :: xs }$/;"	m
mkProcInstr	scala/xml/parsing/MarkupParser.scala	/^  def mkProcInstr(position: Int, name: String, text: String): ElementType =$/;"	m
mkProcInstr	scala/xml/parsing/MarkupParserCommon.scala	/^  def mkProcInstr(position: PositionType, name: String, text: String): ElementType$/;"	m
mkResult	scala/xml/parsing/MarkupParser.scala	/^    def mkResult(pos: Int, s: String): NodeSeq = {$/;"	m
mkRowBuilder	scala/collection/mutable/ArrayOps.scala	/^    def mkRowBuilder() = Array.newBuilder(ClassTag[U](arrayElementClass(elementClass)))$/;"	m
mkStart	scala/xml/PrettyPrinter.scala	/^    def mkStart(sb: StringBuilder) {$/;"	m
mkString	scala/collection/GenTraversableOnce.scala	/^  def mkString(sep: String): String$/;"	m
mkString	scala/collection/GenTraversableOnce.scala	/^  def mkString(start: String, sep: String, end: String): String$/;"	m
mkString	scala/collection/GenTraversableOnce.scala	/^  def mkString: String$/;"	m
mkString	scala/collection/TraversableOnce.scala	/^  def mkString(sep: String): String = mkString("", sep, "")$/;"	m
mkString	scala/collection/TraversableOnce.scala	/^  def mkString(start: String, sep: String, end: String): String =$/;"	m
mkString	scala/collection/TraversableOnce.scala	/^  def mkString: String = mkString("")$/;"	m
mkString	scala/collection/parallel/ParIterableLike.scala	/^  def mkString(sep: String): String = seq.mkString("", sep, "")$/;"	m
mkString	scala/collection/parallel/ParIterableLike.scala	/^  def mkString(start: String, sep: String, end: String): String = seq.mkString(start, sep, end)$/;"	m
mkString	scala/collection/parallel/ParIterableLike.scala	/^  def mkString: String = seq.mkString("")$/;"	m
mkThrowableCatcher	scala/util/control/Exception.scala	/^  def mkThrowableCatcher[T](isDef: Throwable => Boolean, f: Throwable => T) = mkCatcher(isDef, f)$/;"	m
mm	scala/collection/mutable/MultiMap.scala	/^ *  val mm = new HashMap[Int, Set[String]] with MultiMap[Int, String]$/;"	V
mod	scala/math/BigInt.scala	/^  def mod (that: BigInt): BigInt = new BigInt(this.bigInteger.mod(that.bigInteger))$/;"	m
modCount	scala/collection/mutable/OpenHashMap.scala	/^  private[this] var modCount = 0$/;"	v
modInverse	scala/math/BigInt.scala	/^  def modInverse (m: BigInt): BigInt = new BigInt(this.bigInteger.modInverse(m.bigInteger))$/;"	m
modPow	scala/math/BigInt.scala	/^  def modPow (exp: BigInt, m: BigInt): BigInt =$/;"	m
modifyOrRemove	scala/collection/immutable/IntMap.scala	/^  def modifyOrRemove[S](f: (Int, T) => Option[S]): IntMap[S] = this match {$/;"	m
modifyOrRemove	scala/collection/immutable/LongMap.scala	/^  def modifyOrRemove[S](f: (Long, T) => Option[S]): LongMap[S] = this match {$/;"	m
months	scala/util/matching/Regex.scala	/^ *  val months = Map( 1 -> "Jan", 2 -> "Feb", 3 -> "Mar",$/;"	V
more	scala/collection/immutable/PagedSeq.scala	/^    def more(data: Array[Char], start: Int, len: Int): Int =$/;"	m
move	scala/collection/immutable/Vector.scala	/^          val move = (1 << 5*(depth+1)) - (1 << 5*(depth))$/;"	V
ms	scala/concurrent/impl/Promise.scala	/^          val ms = nextWait.toMillis$/;"	V
ms_per_ns	scala/concurrent/duration/Duration.scala	/^  private[this] final val  ms_per_ns =  µs_per_ns * 1000$/;"	V
msg	scala/collection/mutable/ObservableBuffer.scala	/^    val msg = elems.foldLeft(new Script[A]() with Undoable {$/;"	V
msg	scala/util/parsing/combinator/Parsers.scala	/^  case class Error(override val msg: String, override val next: Input) extends NoSuccess(msg, next) {$/;"	V
msg	scala/util/parsing/combinator/Parsers.scala	/^  case class Failure(override val msg: String, override val next: Input) extends NoSuccess(msg, next) {$/;"	V
msg	scala/util/parsing/combinator/Parsers.scala	/^  sealed abstract class NoSuccess(val msg: String, override val next: Input) extends ParseResult[Nothing] { \/\/ when we don't care about the difference between Failure and Error$/;"	V
mul	scala/concurrent/duration/Duration.scala	/^  def mul(factor: Double)    = this * factor$/;"	m
mul	scala/concurrent/duration/Duration.scala	/^  def mul(factor: Long) = this * factor$/;"	m
multiplier	scala/testing/Benchmark.scala	/^  var multiplier = 1$/;"	v
multiply	scala/runtime/BoxesRunTime.java	/^    public static Object multiply(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
mutable	scala/collection/mutable/AVLTree.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayOps.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArraySeq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ArrayStack.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/BitSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Buffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/BufferLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/BufferProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Builder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Cloneable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ConcurrentMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DefaultEntry.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DefaultMapModel.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DoubleLinkedList.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/DoubleLinkedListLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/FlatHashTable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/GrowingBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashEntry.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/HashTable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/History.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ImmutableMapAdaptor.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ImmutableSetAdaptor.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeqLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeqOptimized.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/IndexedSeqView.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Iterable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LazyBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinearSeq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedEntry.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedHashSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedList.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/LinkedListLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ListBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ListMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Map.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MapBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MapLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MapProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MultiMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/MutableList.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ObservableBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ObservableMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ObservableSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/OpenHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/PriorityQueue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/PriorityQueueProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Publisher.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Queue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/QueueProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/ResizableArray.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/RevertibleHistory.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Seq.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SeqLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Set.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SetBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SetLike.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SetProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SortedSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Stack.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/StackProxy.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/StringBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Subscriber.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedBuffer.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedPriorityQueue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedQueue.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/SynchronizedStack.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Traversable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/TreeSet.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/Undoable.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/WeakHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/WrappedArray.scala	/^package mutable$/;"	p
mutable	scala/collection/mutable/WrappedArrayBuilder.scala	/^package mutable$/;"	p
mutable	scala/collection/parallel/mutable/ParHashMap.scala	/^package mutable$/;"	p
mutable	scala/collection/parallel/mutable/ParMapLike.scala	/^package mutable$/;"	p
mutable.ArrayBuffer	scala/collection/IndexedSeqLike.scala	/^import mutable.ArrayBuffer$/;"	i
mutable.ArrayBuffer	scala/collection/IndexedSeqOptimized.scala	/^import mutable.ArrayBuffer$/;"	i
mutable.ArrayBuffer	scala/collection/Iterator.scala	/^import mutable.ArrayBuffer$/;"	i
mutable.ArrayBuffer	scala/collection/parallel/immutable/ParVector.scala	/^import mutable.ArrayBuffer$/;"	i
mutable.ArrayBuffer	scala/collection/script/Message.scala	/^import mutable.ArrayBuffer$/;"	i
mutable.ArrayOps	scala/Predef.scala	/^import mutable.ArrayOps$/;"	i
mutable.Buffer	scala/collection/IterableProxyLike.scala	/^import mutable.Buffer$/;"	i
mutable.Builder	scala/collection/IndexedSeq.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/Iterable.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/LinearSeq.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/Seq.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/SortedMap.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/TraversableView.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/BitSetFactory.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/CanBuildFrom.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenSetFactory.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenericClassTagCompanion.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenericCompanion.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenericOrderedCompanion.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/GenericTraversableTemplate.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/HasNewBuilder.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/MutableMapFactory.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/generic/SetFactory.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/Iterable.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/LinearSeq.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/Seq.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/SortedMap.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/SortedSet.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/StringLike.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/Traversable.scala	/^import mutable.Builder$/;"	i
mutable.Builder	scala/collection/immutable/TreeMap.scala	/^import mutable.Builder$/;"	i
mutable.ListBuffer	scala/collection/LinearSeqLike.scala	/^import mutable.ListBuffer$/;"	i
mutable.ListBuffer	scala/collection/LinearSeqOptimized.scala	/^import mutable.ListBuffer$/;"	i
mutable.StringBuilder	scala/collection/BitSetLike.scala	/^import mutable.StringBuilder$/;"	i
mutable.StringBuilder	scala/collection/immutable/StringOps.scala	/^import mutable.StringBuilder$/;"	i
mutable.WrappedArray	scala/LowPriorityImplicits.scala	/^import mutable.WrappedArray$/;"	i
mutable.{ ArrayBuffer, Builder }	scala/collection/immutable/Stack.scala	/^import mutable.{ ArrayBuffer, Builder }$/;"	i
mutable.{ ArrayBuilder, ArraySeq }	scala/Array.scala	/^import mutable.{ ArrayBuilder, ArraySeq }$/;"	i
mutable.{ Buffer, Builder, ListBuffer, ArrayBuffer }	scala/collection/TraversableOnce.scala	/^import mutable.{ Buffer, Builder, ListBuffer, ArrayBuffer }$/;"	i
mutable.{ Buffer, StringBuilder }	scala/collection/generic/TraversableForwarder.scala	/^import mutable.{ Buffer, StringBuilder }$/;"	i
mutable.{ Builder }	scala/collection/TraversableLike.scala	/^import mutable.{ Builder }$/;"	i
mutable.{ Builder, ArrayBuffer }	scala/collection/GenTraversableViewLike.scala	/^import mutable.{ Builder, ArrayBuffer }$/;"	i
mutable.{ Builder, ArrayBuffer }	scala/collection/TraversableViewLike.scala	/^import mutable.{ Builder, ArrayBuffer }$/;"	i
mutable.{ Builder, GrowingBuilder }	scala/collection/generic/MutableSetFactory.scala	/^import mutable.{ Builder, GrowingBuilder }$/;"	i
mutable.{ Builder, ListBuffer }	scala/collection/immutable/NumericRange.scala	/^import mutable.{ Builder, ListBuffer }$/;"	i
mutable.{ Builder, ListBuffer }	scala/collection/immutable/Queue.scala	/^import mutable.{ Builder, ListBuffer }$/;"	i
mutable.{ Builder, ListBuffer }	scala/xml/NodeSeq.scala	/^import mutable.{ Builder, ListBuffer }$/;"	i
mutable.{ Builder, MapBuilder }	scala/collection/MapLike.scala	/^import mutable.{ Builder, MapBuilder }$/;"	i
mutable.{ Builder, SetBuilder }	scala/collection/SetLike.scala	/^import mutable.{ Builder, SetBuilder }$/;"	i
mutable.{ Builder, SetBuilder }	scala/collection/generic/ImmutableSetFactory.scala	/^import mutable.{ Builder, SetBuilder }$/;"	i
mutable.{ Builder, SetBuilder }	scala/collection/immutable/BitSet.scala	/^import mutable.{ Builder, SetBuilder }$/;"	i
mutable.{ Builder, SetBuilder }	scala/collection/immutable/TreeSet.scala	/^import mutable.{ Builder, SetBuilder }$/;"	i
mutable.{ ListBuffer, ArraySeq }	scala/collection/SeqLike.scala	/^import mutable.{ ListBuffer, ArraySeq }$/;"	i
mutable.{ ListBuffer, Builder }	scala/collection/immutable/ListSet.scala	/^import mutable.{ ListBuffer, Builder }$/;"	i
mutable.{ArrayBuffer, Builder}	scala/collection/immutable/IndexedSeq.scala	/^import mutable.{ArrayBuffer, Builder}$/;"	i
mutable.{Buffer, StringBuilder}	scala/collection/TraversableProxyLike.scala	/^import mutable.{Buffer, StringBuilder}$/;"	i
mutable.{Builder, Buffer, ArrayBuffer, ListBuffer}	scala/collection/Traversable.scala	/^import mutable.{Builder, Buffer, ArrayBuffer, ListBuffer}$/;"	i
mutable.{Builder, ListBuffer}	scala/collection/immutable/List.scala	/^import mutable.{Builder, ListBuffer}$/;"	i
mutable.{Builder, MapBuilder}	scala/collection/generic/GenMapFactory.scala	/^import mutable.{Builder, MapBuilder}$/;"	i
mutable.{Builder, MapBuilder}	scala/collection/generic/MapFactory.scala	/^import mutable.{Builder, MapBuilder}$/;"	i
mutable.{Builder, MapBuilder}	scala/collection/generic/SortedMapFactory.scala	/^import mutable.{Builder, MapBuilder}$/;"	i
mutable.{Builder, SetBuilder}	scala/collection/generic/SortedSetFactory.scala	/^import mutable.{Builder, SetBuilder}$/;"	i
mutable.{Builder, StringBuilder, LazyBuilder, ListBuffer}	scala/collection/immutable/Stream.scala	/^import mutable.{Builder, StringBuilder, LazyBuilder, ListBuffer}$/;"	i
mutable.{Builder, StringBuilder}	scala/collection/immutable/WrappedString.scala	/^import mutable.{Builder, StringBuilder}$/;"	i
myContext	scala/concurrent/BlockContext.scala	/^ *  val myContext = new BlockContext {$/;"	V
myConversionFunc	scala/util/parsing/json/JSON.scala	/^ * val myConversionFunc = {input : String => BigDecimal(input)}$/;"	V
myFutureList	scala/concurrent/Future.scala	/^   *    val myFutureList = Future.traverse(myList)(x => Future(myFunc(x)))$/;"	V
myParser	scala/util/parsing/combinator/PackratParsers.scala	/^   *   val myParser: PackratParser[MyResult] = aParser$/;"	V
mybreaks	scala/util/control/Breaks.scala	/^ *  val mybreaks = new Breaks$/;"	V
n	scala/collection/concurrent/TrieMap.scala	/^              val n = GCAS_READ(ct)$/;"	V
n	scala/collection/generic/Sorted.scala	/^        val n = compare(jn, in);$/;"	V
n	scala/collection/mutable/ArrayBuffer.scala	/^      val n = v.length$/;"	V
n	scala/collection/mutable/LinkedList.scala	/^   *     scala> val n = new LinkedList[Int](2, m)$/;"	V
n	scala/collection/mutable/PriorityQueue.scala	/^      val n = resarr.p_array(i)$/;"	V
n	scala/concurrent/duration/package.scala	/^  implicit final class DurationInt(val n: Int) extends AnyVal with DurationConversions {$/;"	V
n	scala/concurrent/duration/package.scala	/^  implicit final class DurationLong(val n: Long) extends AnyVal with DurationConversions {$/;"	V
n	scala/math/BigDecimal.scala	/^      var n = cache(offset)$/;"	v
n	scala/math/BigInt.scala	/^      var n = cache(offset)$/;"	v
n	scala/util/Sorting.scala	/^          var n = off + len - 1$/;"	v
n	scala/util/Sorting.scala	/^        val n = off + len$/;"	V
n	scala/util/hashing/MurmurHash3.scala	/^    var n = 0$/;"	v
n	scala/xml/Utility.scala	/^          val n = getName(value, i+1)$/;"	V
n	scala/xml/dtd/Decl.scala	/^        val n = tmp.substring(ix, iz)$/;"	V
n	scala/xml/parsing/MarkupParser.scala	/^              val n = xName$/;"	V
n	scala/xml/parsing/MarkupParser.scala	/^    val n = xName$/;"	V
n	scala/xml/parsing/MarkupParser.scala	/^    var n = 0$/;"	v
n	scala/xml/parsing/MarkupParserCommon.scala	/^    val n = xName$/;"	V
n1	scala/collection/mutable/ListBuffer.scala	/^    val n1 = n max 0$/;"	V
name	scala/Enumeration.scala	/^      val name = m.getName$/;"	V
name	scala/Option.scala	/^ *  val name: Option[String] = request getParameter "name"$/;"	V
name	scala/StringContext.scala	/^   *    val name = "James"$/;"	V
name	scala/StringContext.scala	/^ *   val name = "James"$/;"	V
name	scala/Symbol.scala	/^final class Symbol private (val name: String) extends Serializable {$/;"	V
name	scala/beans/BeanDisplayName.scala	/^class BeanDisplayName(val name: String) extends scala.annotation.Annotation$/;"	V
name	scala/io/Codec.scala	/^  def name = charSet.name$/;"	m
name	scala/reflect/NameTransformer.scala	/^    val name = if (name0.endsWith("<init>")) name0.substring(0, name0.length() - ("<init>").length()) + "this"$/;"	V
name	scala/util/control/Exception.scala	/^    protected val name = "Catch"$/;"	V
name	scala/util/control/Exception.scala	/^    protected val name = "Finally"$/;"	V
name	scala/util/control/Exception.scala	/^    protected val name: String$/;"	V
name	scala/util/parsing/ast/AbstractSyntax.scala	/^    def name: String$/;"	m
name	scala/util/parsing/ast/Binders.scala	/^    def name = el.name+"@??"$/;"	m
name	scala/util/parsing/ast/Binders.scala	/^    def name = self.asInstanceOf[NameElement].name \/\/ TODO: this is only safe when substituted to a NameElement, which certainly isn't required -- I want dynamic inheritance! :)$/;"	m
name	scala/util/parsing/combinator/Parsers.scala	/^    private var name: String = ""$/;"	v
name	scala/xml/parsing/MarkupParserCommon.scala	/^    val name = xName$/;"	V
name	scala/xml/transform/RewriteRule.scala	/^  val name = this.toString()$/;"	V
nameMaybe	scala/Option.scala	/^ *  val nameMaybe = request getParameter "name"$/;"	V
nameToIndex	scala/util/matching/Regex.scala	/^    private lazy val nameToIndex: Map[String, Int] = Map[String, Int]() ++ ("" :: groupNames.toList).zipWithIndex$/;"	V
nameToString	scala/xml/Node.scala	/^  def nameToString(sb: StringBuilder): StringBuilder = {$/;"	m
named	scala/util/parsing/combinator/Parsers.scala	/^    def named(n: String): this.type = {name=n; this}$/;"	m
names	scala/runtime/ScalaRunTime.scala	/^    var names: List[String] = Nil$/;"	v
namespace	scala/xml/Node.scala	/^  def namespace = getNamespace(this.prefix)$/;"	m
namespace	scala/xml/XML.scala	/^  val namespace = "http:\/\/www.w3.org\/XML\/1998\/namespace"$/;"	V
namespacePrefixes	scala/xml/include/sax/Main.scala	/^  private val namespacePrefixes = "http:\/\/xml.org\/sax\/features\/namespace-prefixes"$/;"	V
nano	scala/concurrent/duration/DurationConversions.scala	/^  def nano         = nanoseconds$/;"	m
nano	scala/concurrent/duration/DurationConversions.scala	/^  def nano[C](c: C)(implicit ev: Classifier[C]): ev.R = nanoseconds(c)$/;"	m
nanos	scala/concurrent/duration/DurationConversions.scala	/^  def nanos        = nanoseconds$/;"	m
nanos	scala/concurrent/duration/DurationConversions.scala	/^  def nanos[C](c: C)(implicit ev: Classifier[C]): ev.R = nanoseconds(c)$/;"	m
nanosecond	scala/concurrent/duration/DurationConversions.scala	/^  def nanosecond   = nanoseconds$/;"	m
nanosecond	scala/concurrent/duration/DurationConversions.scala	/^  def nanosecond[C](c: C)(implicit ev: Classifier[C]): ev.R = nanoseconds(c)$/;"	m
nanoseconds	scala/concurrent/duration/DurationConversions.scala	/^  def nanoseconds  = durationIn(NANOSECONDS)$/;"	m
nanoseconds	scala/concurrent/duration/DurationConversions.scala	/^  def nanoseconds[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(nanoseconds)$/;"	m
narr	scala/collection/concurrent/TrieMap.scala	/^    val narr = new Array[BasicNode](len + 1)$/;"	V
narr	scala/collection/concurrent/TrieMap.scala	/^    val narr = new Array[BasicNode](len - 1)$/;"	V
narr	scala/collection/concurrent/TrieMap.scala	/^    val narr = new Array[BasicNode](len)$/;"	V
nat	scala/io/BytePickle.scala	/^  def nat: SPU[Int] = new SPU[Int] {$/;"	m
nat2Bytes	scala/io/BytePickle.scala	/^  def nat2Bytes(x: Int): Array[Byte] = {$/;"	m
native	scala/native.scala	/^class native extends scala.annotation.StaticAnnotation {}$/;"	c
native	scala/package.scala	/^  type native = annotation.native$/;"	T
nb	scala/xml/Utility.scala	/^    val nb = new NodeBuffer()$/;"	V
nch	scala/xml/transform/BasicTransformer.scala	/^        val nch = transform(ch)$/;"	V
ncn	scala/collection/concurrent/TrieMap.scala	/^                        val ncn = cn.updatedAt(pos, tn.copyUntombed, gen).toContracted(lev - 5)$/;"	V
ncn	scala/collection/concurrent/TrieMap.scala	/^                val ncn = cn.removedAt(pos, flag, gen).toContracted(lev)$/;"	V
ncnode	scala/collection/concurrent/TrieMap.scala	/^            val ncnode = rn.insertedAt(pos, flag, new SNode(k, v, hc), gen)$/;"	V
ncnode	scala/collection/concurrent/TrieMap.scala	/^          val ncnode = rn.insertedAt(pos, flag, new SNode(k, v, hc), gen)$/;"	V
ncodes	scala/reflect/NameTransformer.scala	/^  private val ncodes = 26 * 26$/;"	V
ncurrent	scala/util/automata/Inclusion.scala	/^      val ncurrent = mark(current)$/;"	V
needed	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val needed = Integer.bitCount(ones)$/;"	V
neg	scala/concurrent/duration/Duration.scala	/^  def neg()                  = -this$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: BigDecimal): BigDecimal = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: BigInt): BigInt = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Byte): Byte = (-x).toByte$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Char): Char = (-x).toChar$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Double): Double = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Float): Float = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Int): Int = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Long): Long = -x$/;"	m
negate	scala/math/Numeric.scala	/^    def negate(x: Short): Short = (-x).toShort$/;"	m
negate	scala/math/Numeric.scala	/^  def negate(x: T): T$/;"	m
negate	scala/runtime/BoxesRunTime.java	/^    public static Object negate(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
nerrors	scala/io/Source.scala	/^  var nerrors = 0$/;"	v
nest	scala/text/Document.scala	/^  def nest(i: Int, d: Document): Document = DocNest(i, d)$/;"	m
nested	scala/util/parsing/ast/Binders.scala	/^    def nested: Scope[binderType] = this \/\/ TODO$/;"	m
newAdapter	scala/xml/factory/XMLLoader.scala	/^    val newAdapter = adapter$/;"	V
newAlt	scala/xml/dtd/ContentModel.scala	/^    val newAlt = r match { case Alt(rs @ _*) => Alt(rs drop 1: _*) }$/;"	V
newArray2	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def newArray2(len: Int): Array[Array[T]] =$/;"	m
newArray3	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def newArray3(len: Int): Array[Array[Array[T]]] =$/;"	m
newArray4	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def newArray4(len: Int): Array[Array[Array[Array[T]]]] =$/;"	m
newArray5	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def newArray5(len: Int): Array[Array[Array[Array[Array[T]]]]] =$/;"	m
newArrayBuilder	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def newArrayBuilder(): ArrayBuilder[T] =$/;"	m
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex + 32$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex + shift$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex - 32$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^            val newBlockIndex = blockIndex - shift$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^          val newBlockIndex = blockIndex + move$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^          val newBlockIndex = blockIndex$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^        val newBlockIndex = blockIndex+32$/;"	V
newBlockIndex	scala/collection/immutable/Vector.scala	/^      val newBlockIndex = blockIndex+32$/;"	V
newBuilder	scala/Array.scala	/^  def newBuilder[T](implicit t: ClassTag[T]): ArrayBuilder[T] = ArrayBuilder.make[T]()(t)$/;"	m
newBuilder	scala/Enumeration.scala	/^    def newBuilder: mutable.Builder[Value, ValueSet] = new mutable.Builder[Value, ValueSet] {$/;"	m
newBuilder	scala/collection/BitSet.scala	/^  def newBuilder = immutable.BitSet.newBuilder$/;"	m
newBuilder	scala/collection/GenIterable.scala	/^  def newBuilder[A] = Iterable.newBuilder$/;"	m
newBuilder	scala/collection/GenSeq.scala	/^  def newBuilder[A] = Seq.newBuilder$/;"	m
newBuilder	scala/collection/GenSet.scala	/^  def newBuilder[A] = Set.newBuilder$/;"	m
newBuilder	scala/collection/GenTraversable.scala	/^  def newBuilder[A] = Traversable.newBuilder$/;"	m
newBuilder	scala/collection/IndexedSeq.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = immutable.IndexedSeq.newBuilder[A]$/;"	m
newBuilder	scala/collection/Iterable.scala	/^  def newBuilder[A]: Builder[A, Iterable[A]] = immutable.Iterable.newBuilder[A]$/;"	m
newBuilder	scala/collection/LinearSeq.scala	/^  def newBuilder[A]: Builder[A, LinearSeq[A]] = immutable.LinearSeq.newBuilder[A]$/;"	m
newBuilder	scala/collection/Seq.scala	/^  def newBuilder[A]: Builder[A, Seq[A]] = immutable.Seq.newBuilder[A]$/;"	m
newBuilder	scala/collection/Set.scala	/^  def newBuilder[A] = immutable.Set.newBuilder[A]$/;"	m
newBuilder	scala/collection/Traversable.scala	/^  def newBuilder[A]: Builder[A, Traversable[A]] = immutable.Traversable.newBuilder[A]$/;"	m
newBuilder	scala/collection/convert/Wrappers.scala	/^    def newBuilder[B] = new mutable.ArrayBuffer[B]$/;"	m
newBuilder	scala/collection/generic/BitSetFactory.scala	/^  def newBuilder: Builder[Int, Coll]$/;"	m
newBuilder	scala/collection/generic/GenMapFactory.scala	/^  def newBuilder[A, B]: Builder[(A, B), CC[A, B]] = new MapBuilder[A, B, CC[A, B]](empty[A, B])$/;"	m
newBuilder	scala/collection/generic/GenSetFactory.scala	/^  def newBuilder[A]: Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericClassTagCompanion.scala	/^  def newBuilder[A](implicit ord: ClassTag[A]): Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericCompanion.scala	/^  def newBuilder[A]: Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericOrderedCompanion.scala	/^  def newBuilder[A](implicit ord: Ordering[A]): Builder[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/GenericParCompanion.scala	/^  def newBuilder[A]: Combiner[A, CC[A]]$/;"	m
newBuilder	scala/collection/generic/ImmutableSetFactory.scala	/^  def newBuilder[A]: Builder[A, CC[A]] = new SetBuilder[A, CC[A]](empty[A])$/;"	m
newBuilder	scala/collection/generic/MutableSetFactory.scala	/^  def newBuilder[A]: Builder[A, CC[A]] = new GrowingBuilder[A, CC[A]](empty[A])$/;"	m
newBuilder	scala/collection/generic/ParSetFactory.scala	/^  def newBuilder[A]: Combiner[A, CC[A]] = newCombiner[A]$/;"	m
newBuilder	scala/collection/generic/SortedMapFactory.scala	/^  def newBuilder[A, B](implicit ord: Ordering[A]): Builder[(A, B), CC[A, B]] =$/;"	m
newBuilder	scala/collection/generic/SortedSetFactory.scala	/^  def newBuilder[A](implicit ord: Ordering[A]): Builder[A, CC[A]] = new SetBuilder[A, CC[A]](empty)$/;"	m
newBuilder	scala/collection/immutable/BitSet.scala	/^  def newBuilder: Builder[Int, BitSet] = new Builder[Int, BitSet] {$/;"	m
newBuilder	scala/collection/immutable/IndexedSeq.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = Vector.newBuilder[A]$/;"	m
newBuilder	scala/collection/immutable/Iterable.scala	/^  def newBuilder[A]: Builder[A, Iterable[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/LinearSeq.scala	/^  def newBuilder[A]: Builder[A, LinearSeq[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/List.scala	/^  def newBuilder[A]: Builder[A, List[A]] = new ListBuffer[A]$/;"	m
newBuilder	scala/collection/immutable/Queue.scala	/^  def newBuilder[A]: Builder[A, Queue[A]] = new ListBuffer[A] mapResult (x => new Queue[A](Nil, x.toList))$/;"	m
newBuilder	scala/collection/immutable/Seq.scala	/^  def newBuilder[A]: Builder[A, Seq[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/Stack.scala	/^  def newBuilder[A]: Builder[A, Stack[A]] = new ArrayBuffer[A] mapResult (buf => new Stack(buf.toList))$/;"	m
newBuilder	scala/collection/immutable/Stream.scala	/^  def newBuilder[A]: Builder[A, Stream[A]] = new StreamBuilder[A]$/;"	m
newBuilder	scala/collection/immutable/Traversable.scala	/^  def newBuilder[A]: Builder[A, Traversable[A]] = new mutable.ListBuffer$/;"	m
newBuilder	scala/collection/immutable/Vector.scala	/^  def newBuilder[A]: Builder[A, Vector[A]] = new VectorBuilder[A]$/;"	m
newBuilder	scala/collection/immutable/WrappedString.scala	/^  def newBuilder: Builder[Char, WrappedString] = StringBuilder.newBuilder mapResult (x => new WrappedString(x))$/;"	m
newBuilder	scala/collection/mutable/ArrayBuffer.scala	/^  def newBuilder[A]: Builder[A, ArrayBuffer[A]] = new ArrayBuffer[A]$/;"	m
newBuilder	scala/collection/mutable/ArraySeq.scala	/^  def newBuilder[A]: Builder[A, ArraySeq[A]] =$/;"	m
newBuilder	scala/collection/mutable/ArrayStack.scala	/^  def newBuilder[A]: Builder[A, ArrayStack[A]] = new ArrayStack[A]$/;"	m
newBuilder	scala/collection/mutable/BitSet.scala	/^  def newBuilder: Builder[Int, BitSet] = new GrowingBuilder[Int, BitSet](empty)$/;"	m
newBuilder	scala/collection/mutable/Buffer.scala	/^  def newBuilder[A]: Builder[A, Buffer[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/DoubleLinkedList.scala	/^  def newBuilder[A]: Builder[A, DoubleLinkedList[A]] =$/;"	m
newBuilder	scala/collection/mutable/IndexedSeq.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = new ArrayBuffer[A]$/;"	m
newBuilder	scala/collection/mutable/Iterable.scala	/^  def newBuilder[A]: Builder[A, Iterable[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/LinearSeq.scala	/^  def newBuilder[A]: Builder[A, LinearSeq[A]] = new MutableList[A]$/;"	m
newBuilder	scala/collection/mutable/LinkedList.scala	/^  def newBuilder[A]: Builder[A, LinkedList[A]] =$/;"	m
newBuilder	scala/collection/mutable/ListBuffer.scala	/^  def newBuilder[A]: Builder[A, ListBuffer[A]] = new GrowingBuilder(new ListBuffer[A])$/;"	m
newBuilder	scala/collection/mutable/MutableList.scala	/^  def newBuilder[A]: Builder[A, MutableList[A]] = new MutableList[A]$/;"	m
newBuilder	scala/collection/mutable/PriorityQueue.scala	/^  def newBuilder[A](implicit ord: Ordering[A]) = new PriorityQueue[A]$/;"	m
newBuilder	scala/collection/mutable/Queue.scala	/^  def newBuilder[A]: Builder[A, Queue[A]] = new MutableList[A] mapResult { _.toQueue }$/;"	m
newBuilder	scala/collection/mutable/ResizableArray.scala	/^  def newBuilder[A]: Builder[A, ResizableArray[A]] = new ArrayBuffer[A]$/;"	m
newBuilder	scala/collection/mutable/Seq.scala	/^  def newBuilder[A]: Builder[A, Seq[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/Stack.scala	/^  def newBuilder[A]: Builder[A, Stack[A]] = new StackBuilder[A]$/;"	m
newBuilder	scala/collection/mutable/StringBuilder.scala	/^  def newBuilder = new StringBuilder$/;"	m
newBuilder	scala/collection/mutable/Traversable.scala	/^  def newBuilder[A]: Builder[A, Traversable[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/mutable/UnrolledBuffer.scala	/^  def newBuilder[T](implicit t: ClassTag[T]): Builder[T, UnrolledBuffer[T]] = new UnrolledBuffer[T]$/;"	m
newBuilder	scala/collection/mutable/WrappedArray.scala	/^  def newBuilder[A]: Builder[A, IndexedSeq[A]] = new ArrayBuffer$/;"	m
newBuilder	scala/collection/parallel/ParIterable.scala	/^  def newBuilder[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/ParSeq.scala	/^  def newBuilder[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/immutable/ParIterable.scala	/^  def newBuilder[T]: Combiner[T, ParIterable[T]] = ParVector.newBuilder[T]$/;"	m
newBuilder	scala/collection/parallel/immutable/ParSeq.scala	/^  def newBuilder[T]: Combiner[T, ParSeq[T]] = ParVector.newBuilder[T]$/;"	m
newBuilder	scala/collection/parallel/immutable/ParVector.scala	/^  def newBuilder[T]: Combiner[T, ParVector[T]] = newCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/mutable/ParArray.scala	/^  def newBuilder[T]: Combiner[T, ParArray[T]] = newCombiner$/;"	m
newBuilder	scala/collection/parallel/mutable/ParIterable.scala	/^  def newBuilder[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/collection/parallel/mutable/ParSeq.scala	/^  def newBuilder[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newBuilder	scala/xml/NodeSeq.scala	/^  def newBuilder: Builder[Node, NodeSeq] = new ListBuffer[Node] mapResult fromSeq$/;"	m
newCombiner	scala/collection/generic/GenericParCompanion.scala	/^  def newCombiner[A]: Combiner[A, CC[A]]$/;"	m
newCombiner	scala/collection/generic/GenericParCompanion.scala	/^  def newCombiner[P, Q]: Combiner[(P, Q), CC[P, Q]]$/;"	m
newCombiner	scala/collection/generic/ParMapFactory.scala	/^  def newCombiner[K, V]: Combiner[(K, V), CC[K, V]]$/;"	m
newCombiner	scala/collection/generic/ParSetFactory.scala	/^  def newCombiner[A]: Combiner[A, CC[A]]$/;"	m
newCombiner	scala/collection/parallel/ParIterable.scala	/^  def newCombiner[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/ParMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParMap[K, V]] = mutable.ParHashMapCombiner[K, V]$/;"	m
newCombiner	scala/collection/parallel/ParSeq.scala	/^  def newCombiner[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/ParSet.scala	/^  def newCombiner[T]: Combiner[T, ParSet[T]] = mutable.ParHashSetCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParHashMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParHashMap[K, V]] = HashMapCombiner[K, V]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParHashSet.scala	/^  def newCombiner[T]: Combiner[T, ParHashSet[T]] = HashSetCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParIterable.scala	/^  def newCombiner[T]: Combiner[T, ParIterable[T]] = ParVector.newCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParMap[K, V]] = HashMapCombiner[K, V]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParSeq.scala	/^  def newCombiner[T]: Combiner[T, ParSeq[T]] = ParVector.newCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParSet.scala	/^  def newCombiner[T]: Combiner[T, ParSet[T]] = HashSetCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/immutable/ParVector.scala	/^  def newCombiner[T]: Combiner[T, ParVector[T]] = new LazyParVectorCombiner[T] \/\/ was: with EPC[T, ParVector[T]]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParArray.scala	/^  def newCombiner[T]: Combiner[T, ParArray[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParHashMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParHashMap[K, V]] = ParHashMapCombiner.apply[K, V]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParIterable.scala	/^  def newCombiner[T]: Combiner[T, ParIterable[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParMap[K, V]] = ParHashMapCombiner.apply[K, V]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParSeq.scala	/^  def newCombiner[T]: Combiner[T, ParSeq[T]] = ParArrayCombiner[T]$/;"	m
newCombiner	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def newCombiner[K, V]: Combiner[(K, V), ParTrieMap[K, V]] = new ParTrieMap[K, V]$/;"	m
newElem	scala/collection/mutable/ListBuffer.scala	/^        val newElem = new :: (elems.head, cursor.tail)$/;"	V
newElem	scala/collection/mutable/ListBuffer.scala	/^        val newElem = new :: (elems.head, start)$/;"	V
newElem	scala/collection/mutable/ListBuffer.scala	/^      val newElem = new :: (x, cursor.tail.tail)$/;"	V
newElem	scala/collection/mutable/ListBuffer.scala	/^      val newElem = new :: (x, start.tail);$/;"	V
newElem	scala/collection/mutable/ListBuffer.scala	/^    val newElem = new :: (x, start)$/;"	V
newFocus	scala/collection/immutable/Vector.scala	/^            val newFocus = focus + shift$/;"	V
newFocus	scala/collection/immutable/Vector.scala	/^            val newFocus = focus - shift$/;"	V
newFocus	scala/collection/immutable/Vector.scala	/^            val newFocus = focus$/;"	V
newFocus	scala/collection/immutable/Vector.scala	/^          val newFocus = focus + move$/;"	V
newFocus	scala/collection/immutable/Vector.scala	/^          val newFocus = focus$/;"	V
newInput	scala/xml/parsing/MarkupParser.scala	/^      val newInput = new WithLookAhead(curInput)$/;"	V
newIterator	scala/collection/TraversableOnce.scala	/^    def newIterator: Builder[A, Coll[A]] = new ArrayBuffer[A] mapResult bufferToColl$/;"	m
newIterator	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def newIterator(index: Int, until: Int, totalsize: Int): IterableSplitter[T]$/;"	m
newIterator	scala/collection/parallel/mutable/ParHashMap.scala	/^    def newIterator(idxFrom: Int, idxUntil: Int, totalSz: Int, es: DefaultEntry[K, V]) =$/;"	m
newIterator	scala/collection/parallel/mutable/ParHashSet.scala	/^    def newIterator(start: Int, until: Int, total: Int) = new ParHashSetIterator(start, until, total)$/;"	m
newIterator	scala/collection/parallel/mutable/ParHashTable.scala	/^    def newIterator(idxFrom: Int, idxUntil: Int, totalSize: Int, es: Entry): IterRepr$/;"	m
newLazyCombiner	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def newLazyCombiner(buffchain: ArrayBuffer[Buff]): LazyCombiner[Elem, To, Buff]$/;"	m
newLazyCombiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^  def newLazyCombiner(c: ArrayBuffer[ExposedArrayBuffer[T]]) = ResizableParArrayCombiner(c)$/;"	m
newLeft	scala/collection/immutable/RedBlack.scala	/^      val newLeft = left.rng(from, None)$/;"	V
newLeft	scala/collection/immutable/RedBlackTree.scala	/^    val newLeft = doDrop(tree.left, from)$/;"	V
newLeft	scala/collection/immutable/RedBlackTree.scala	/^    val newLeft = doDrop(tree.left, n)$/;"	V
newLeft	scala/collection/immutable/RedBlackTree.scala	/^    val newLeft = doFrom(tree.left, from)$/;"	V
newRight	scala/collection/immutable/RedBlack.scala	/^      val newRight = right.rng(None, until)$/;"	V
newRight	scala/collection/immutable/RedBlackTree.scala	/^    val newRight = doTake(tree.right, n - count - 1)$/;"	V
newRight	scala/collection/immutable/RedBlackTree.scala	/^    val newRight = doTake(tree.right, until - count - 1)$/;"	V
newRight	scala/collection/immutable/RedBlackTree.scala	/^    val newRight = doTo(tree.right, to)$/;"	V
newRight	scala/collection/immutable/RedBlackTree.scala	/^    val newRight = doUntil(tree.right, until)$/;"	V
newRootNode	scala/collection/concurrent/TrieMap.scala	/^  def newRootNode[K, V] = {$/;"	m
newScope	scala/util/parsing/ast/Binders.scala	/^      def gmap(f: Mapper): Scope[bt] = { val newScope = new Scope[bt]()$/;"	V
newSize	scala/collection/mutable/OpenHashMap.scala	/^    val newSize = 4 * oldSize$/;"	V
newThread	scala/collection/parallel/Tasks.scala	/^      def newThread(r: Runnable) = {$/;"	m
newThread	scala/concurrent/impl/ExecutionContextImpl.scala	/^    def newThread(fjp: ForkJoinPool): ForkJoinWorkerThread = wire(new ForkJoinWorkerThread(fjp) with BlockContext {$/;"	m
newThread	scala/concurrent/impl/ExecutionContextImpl.scala	/^    def newThread(runnable: Runnable): Thread = wire(new Thread(runnable))$/;"	m
newThreshold	scala/collection/mutable/FlatHashTable.scala	/^  def newThreshold(_loadFactor: Int, size: Int) = {$/;"	m
newWrappedArray	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def newWrappedArray(len: Int): WrappedArray[T] =$/;"	m
newWrappedTask	scala/collection/parallel/Tasks.scala	/^  def newWrappedTask[R, Tp](b: Task[R, Tp]) = new WrappedTask[R, Tp](b)$/;"	m
newar	scala/collection/mutable/ResizableArray.scala	/^      val newar: Array[AnyRef] = new Array(newsize)$/;"	V
newarr	scala/collection/parallel/mutable/ParArray.scala	/^    val newarr = new Array[T](arr.length)$/;"	V
newarray	scala/collection/mutable/ArrayBuffer.scala	/^      val newarray = new Array[AnyRef](len)$/;"	V
newarray	scala/collection/parallel/mutable/package.scala	/^        val newarray = new Array[AnyRef](len)$/;"	V
newelems	scala/collection/BitSetLike.scala	/^    val newelems = new Array[Long](newlen)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Boolean](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Byte](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Char](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Double](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Float](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Int](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Long](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Short](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[T](size)$/;"	V
newelems	scala/collection/mutable/ArrayBuilder.scala	/^      val newelems = new Array[Unit](size)$/;"	V
newelems	scala/collection/mutable/WrappedArrayBuilder.scala	/^    val newelems = runtimeClass match {$/;"	V
newhead	scala/collection/mutable/UnrolledBuffer.scala	/^      val newhead = new Unrolled[T](buff)$/;"	V
newhm	scala/collection/immutable/HashMap.scala	/^      def newhm(lm: ListMap[A, B @uV]) = new HashMapCollision1(hash, lm)$/;"	m
newleft	scala/collection/immutable/IntMap.scala	/^      val newleft = left.modifyOrRemove(f)$/;"	V
newleft	scala/collection/immutable/LongMap.scala	/^        val newleft = left.modifyOrRemove(f)$/;"	V
newlen	scala/collection/BitSetLike.scala	/^    var newlen = len$/;"	v
newlen	scala/collection/mutable/BitSet.scala	/^      var newlen = nwords$/;"	v
newlen	scala/runtime/SeqCharSequence.scala	/^      val newlen = end0 - start0$/;"	V
newnextnode	scala/collection/mutable/UnrolledBuffer.scala	/^      val newnextnode = new Unrolled[T](0, new Array(array.length), null, buff)$/;"	V
newright	scala/collection/immutable/IntMap.scala	/^      val newright = right.modifyOrRemove(f)$/;"	V
newright	scala/collection/immutable/LongMap.scala	/^        val newright = right.modifyOrRemove(f)$/;"	V
newsb	scala/util/matching/Regex.scala	/^      val newsb = new java.lang.StringBuffer(sb)$/;"	V
newsize	scala/collection/mutable/ArrayBuilder.scala	/^        var newsize = if (capacity == 0) 16 else capacity * 2$/;"	v
newsize	scala/collection/mutable/ResizableArray.scala	/^      var newsize = array.length * 2$/;"	v
newsize	scala/collection/mutable/WrappedArrayBuilder.scala	/^      var newsize = if (capacity == 0) 16 else capacity * 2$/;"	v
next	scala/Product.scala	/^    def next() = { val result = productElement(c); c += 1; result }$/;"	m
next	scala/collection/BitSetLike.scala	/^    def next(): Int =$/;"	m
next	scala/collection/IndexedSeqLike.scala	/^    def next(): A = {$/;"	m
next	scala/collection/IndexedSeqOptimized.scala	/^    def next(): A =$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = if (!lookahead.isEmpty) lookahead.dequeue()$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = it.next()$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = { skip(); pf(self.next()) }$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = { skip(); self.next() }$/;"	m
next	scala/collection/Iterator.scala	/^      def next() = {$/;"	m
next	scala/collection/Iterator.scala	/^      def next(): A = self.synchronized {$/;"	m
next	scala/collection/Iterator.scala	/^      def next(): A =$/;"	m
next	scala/collection/Iterator.scala	/^    def next = (self.next, that.next)$/;"	m
next	scala/collection/Iterator.scala	/^    def next = elem$/;"	m
next	scala/collection/Iterator.scala	/^    def next = {$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = f(self.next())$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = if (hasNext) { hdDefined = false; hd } else empty.next()$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = if (hasNext) {$/;"	m
next	scala/collection/Iterator.scala	/^    def next() = { hasNext; cur.next() }$/;"	m
next	scala/collection/Iterator.scala	/^    def next() =$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): (A1, B1) =$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): A =$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): B = (if (hasNext) cur else empty).next()$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): B = {$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Int = { val result = i; i += step; result }$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Int =$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): Nothing = throw new NoSuchElementException("next on empty iterator")$/;"	m
next	scala/collection/Iterator.scala	/^    def next(): T = {$/;"	m
next	scala/collection/Iterator.scala	/^  def next(): A$/;"	m
next	scala/collection/LinearSeqLike.scala	/^    def next(): A =$/;"	m
next	scala/collection/MapLike.scala	/^    def next() = iter.next._1$/;"	m
next	scala/collection/MapLike.scala	/^    def next() = iter.next._2$/;"	m
next	scala/collection/SeqLike.scala	/^    def next(): Repr = {$/;"	m
next	scala/collection/SetLike.scala	/^    def next = {$/;"	m
next	scala/collection/SetLike.scala	/^    def next(): This = {$/;"	m
next	scala/collection/TraversableOnce.scala	/^      def next(): A = if (hasNext) it.next() else Iterator.empty.next()$/;"	m
next	scala/collection/concurrent/TrieMap.scala	/^  def next() = if (hasNext) {$/;"	m
next	scala/collection/convert/Wrappers.scala	/^        def next() = {$/;"	m
next	scala/collection/convert/Wrappers.scala	/^      def next = { val e = ui.next; prev = Some(e); e }$/;"	m
next	scala/collection/convert/Wrappers.scala	/^      def next() = { val e = ui.next(); (e.getKey, e.getValue) }$/;"	m
next	scala/collection/convert/Wrappers.scala	/^      def next() = {$/;"	m
next	scala/collection/convert/Wrappers.scala	/^    def next() = underlying.next$/;"	m
next	scala/collection/convert/Wrappers.scala	/^    def next() = underlying.nextElement$/;"	m
next	scala/collection/generic/Sorted.scala	/^    val next = i.next$/;"	V
next	scala/collection/immutable/List.scala	/^      val next = step(i)$/;"	V
next	scala/collection/immutable/ListMap.scala	/^      def next(): (A,B) =$/;"	m
next	scala/collection/immutable/ListSet.scala	/^    def next: A =$/;"	m
next	scala/collection/immutable/PagedSeq.scala	/^  var next  : Page[T] = null$/;"	v
next	scala/collection/immutable/RedBlack.scala	/^        val next = if (leftMost) zipper.head.left else zipper.head.right$/;"	V
next	scala/collection/immutable/RedBlackTree.scala	/^      val next = if (leftMost) zipper.head.left else zipper.head.right$/;"	V
next	scala/collection/immutable/RedBlackTree.scala	/^    private[this] var next: Tree[A, B] = findNext(tree)$/;"	v
next	scala/collection/immutable/Stream.scala	/^  def next(): A =$/;"	m
next	scala/collection/immutable/StringLike.scala	/^    def next(): String = {$/;"	m
next	scala/collection/immutable/TrieIterator.scala	/^  def next(): T = {$/;"	m
next	scala/collection/immutable/Vector.scala	/^    def next(): A =$/;"	m
next	scala/collection/immutable/Vector.scala	/^  def next(): A = {$/;"	m
next	scala/collection/mutable/ArrayStack.scala	/^    def next() = {$/;"	m
next	scala/collection/mutable/FlatHashTable.scala	/^    def next(): A =$/;"	m
next	scala/collection/mutable/HashEntry.scala	/^  var next: E = _$/;"	v
next	scala/collection/mutable/HashMap.scala	/^    def next()  = iter.next.key$/;"	m
next	scala/collection/mutable/HashMap.scala	/^    def next()  = iter.next.value$/;"	m
next	scala/collection/mutable/HashTable.scala	/^    def next() = {$/;"	m
next	scala/collection/mutable/LinkedHashMap.scala	/^    def next =$/;"	m
next	scala/collection/mutable/LinkedHashSet.scala	/^    def next =$/;"	m
next	scala/collection/mutable/LinkedListLike.scala	/^    def next = {$/;"	m
next	scala/collection/mutable/LinkedListLike.scala	/^  var next: This = _$/;"	v
next	scala/collection/mutable/ListBuffer.scala	/^    def next(): A =$/;"	m
next	scala/collection/mutable/OpenHashMap.scala	/^    def next = {$/;"	m
next	scala/collection/mutable/PriorityQueue.scala	/^    def next(): A = {$/;"	m
next	scala/collection/mutable/UnrolledBuffer.scala	/^    def next = if (hasNext) {$/;"	m
next	scala/collection/parallel/ParMapLike.scala	/^      def next() = iter.next._1$/;"	m
next	scala/collection/parallel/ParMapLike.scala	/^      def next() = iter.next._2$/;"	m
next	scala/collection/parallel/ParSeqLike.scala	/^    def next(): T = if (i < end) {$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = (self.next, that.next)$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = f(self.next)$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = if (curr eq self) {$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = if (self.hasNext) {$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = trio.next$/;"	m
next	scala/collection/parallel/RemainsIterator.scala	/^    def next = { remaining -= 1; self.next }$/;"	m
next	scala/collection/parallel/Splitter.scala	/^    def next = Iterator.empty.next$/;"	m
next	scala/collection/parallel/Tasks.scala	/^    @volatile var next: WrappedTask[R, Tp] = null$/;"	v
next	scala/collection/parallel/immutable/ParHashMap.scala	/^    def next(): (K, V) = {$/;"	m
next	scala/collection/parallel/immutable/ParHashSet.scala	/^    def next(): T = {$/;"	m
next	scala/collection/parallel/immutable/package.scala	/^      def next = { i += 1; elem }$/;"	m
next	scala/collection/parallel/mutable/ParArray.scala	/^    def next = {$/;"	m
next	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def next() = if (hasNext) {$/;"	m
next	scala/collection/parallel/mutable/ParHashTable.scala	/^    def next(): T = {$/;"	m
next	scala/collection/parallel/package.scala	/^    def next = {$/;"	m
next	scala/concurrent/Channel.scala	/^    var next: LinkedList[A] = null$/;"	v
next	scala/io/Source.scala	/^    def next = {$/;"	m
next	scala/io/Source.scala	/^    def next(): Char = {$/;"	m
next	scala/io/Source.scala	/^  def next(): Char = positioner.next$/;"	m
next	scala/reflect/ClassManifestDeprecatedApis.scala	/^        val next = left.head$/;"	V
next	scala/runtime/MethodCache.scala	/^  private[this] val next: MethodCache,$/;"	V
next	scala/runtime/ScalaRunTime.scala	/^      def next() = {$/;"	m
next	scala/sys/process/BasicIO.scala	/^      def next(): Stream[T] = q.take match {$/;"	m
next	scala/util/automata/DetWordAutom.scala	/^  def next(q: Int, label: T) = delta(q).getOrElse(label, default(q))$/;"	m
next	scala/util/automata/NondetWordAutom.scala	/^  def next(Q: immutable.BitSet, a: T): immutable.BitSet = next(Q, next(_, a))$/;"	m
next	scala/util/automata/NondetWordAutom.scala	/^  def next(q: Int, a: T): immutable.BitSet = delta(q).getOrElse(a, default(q))$/;"	m
next	scala/util/matching/Regex.scala	/^      def next = { self.next; new Match(source, matcher, groupNames).force }$/;"	m
next	scala/util/matching/Regex.scala	/^      def next: Match = {$/;"	m
next	scala/util/matching/Regex.scala	/^    def next(): String = {$/;"	m
next	scala/util/parsing/combinator/Parsers.scala	/^    val next: Input$/;"	V
next	scala/util/parsing/combinator/Parsers.scala	/^  case class Success[+T](result: T, override val next: Input) extends ParseResult[T] {$/;"	V
next	scala/xml/Attribute.scala	/^  val next: MetaData$/;"	V
next	scala/xml/MetaData.scala	/^  def next: MetaData$/;"	m
next	scala/xml/Null.scala	/^  def next = null$/;"	m
next	scala/xml/PrefixedAttribute.scala	/^  val next = if (value ne null) next1 else next1.remove(key)$/;"	V
next	scala/xml/UnprefixedAttribute.scala	/^  val next = if (value ne null) next1 else next1.remove(key)$/;"	V
next	scala/xml/parsing/MarkupParser.scala	/^        def next() = { val x = underlying.next(); queue += x; x }$/;"	m
next	scala/xml/parsing/MarkupParser.scala	/^      def next() = if (!queue.isEmpty) queue.dequeue() else underlying.next()$/;"	m
next	scala/xml/pull/XMLEventReader.scala	/^  def next() = {$/;"	m
next1	scala/xml/PrefixedAttribute.scala	/^  val next1: MetaData)$/;"	V
nextBoolean	scala/util/Random.scala	/^  def nextBoolean(): Boolean = self.nextBoolean()$/;"	m
nextBytes	scala/util/Random.scala	/^  def nextBytes(bytes: Array[Byte]) { self.nextBytes(bytes) }$/;"	m
nextChNeeded	scala/xml/parsing/MarkupParser.scala	/^  var nextChNeeded: Boolean = false$/;"	v
nextDefault	scala/util/automata/NondetWordAutom.scala	/^  def nextDefault(Q: immutable.BitSet): immutable.BitSet = next(Q, default)$/;"	m
nextDouble	scala/util/Random.scala	/^  def nextDouble(): Double = self.nextDouble()$/;"	m
nextElement	scala/collection/convert/Wrappers.scala	/^    def nextElement() = underlying.next$/;"	m
nextFloat	scala/util/Random.scala	/^  def nextFloat(): Float = self.nextFloat()$/;"	m
nextGaussian	scala/util/Random.scala	/^  def nextGaussian(): Double = self.nextGaussian()$/;"	m
nextId	scala/Enumeration.scala	/^  protected var nextId: Int = initial$/;"	v
nextInt	scala/util/Random.scala	/^  def nextInt(): Int = self.nextInt()$/;"	m
nextInt	scala/util/Random.scala	/^  def nextInt(n: Int): Int = self.nextInt(n)$/;"	m
nextLine	scala/io/BufferedSource.scala	/^    var nextLine: String = null$/;"	v
nextLoc	scala/io/BytePickle.scala	/^    def nextLoc() = { cnt += 1; cnt }$/;"	m
nextLong	scala/util/Random.scala	/^  def nextLong(): Long = self.nextLong()$/;"	m
nextMagicA	scala/util/MurmurHash.scala	/^  def nextMagicA(magicA: Int) = magicA*5 + hiddenMixerA$/;"	m
nextMagicB	scala/util/MurmurHash.scala	/^  def nextMagicB(magicB: Int) = magicB*5 + hiddenMixerB$/;"	m
nextName	scala/Enumeration.scala	/^  protected var nextName: Iterator[String] = _$/;"	v
nextPrintableChar	scala/util/Random.scala	/^  def nextPrintableChar(): Char = {$/;"	m
nextSeen	scala/util/matching/Regex.scala	/^    private var nextSeen = false$/;"	v
nextString	scala/util/Random.scala	/^  def nextString(length: Int) = {$/;"	m
nextch	scala/xml/parsing/MarkupParserCommon.scala	/^  def nextch(): Unit$/;"	m
nextuntil	scala/collection/parallel/mutable/ParArray.scala	/^        val nextuntil = if ((i + CHECK_RATE) < until) (i + CHECK_RATE) else until$/;"	V
nextuntil	scala/collection/parallel/mutable/ParArray.scala	/^        val nextuntil = if (i + CHECK_RATE > until) until else i + CHECK_RATE$/;"	V
nfa	scala/util/automata/SubsetConstruction.scala	/^class SubsetConstruction[T <: AnyRef](val nfa: NondetWordAutom[T]) {$/;"	V
nfa	scala/util/regexp/WordExp.scala	/^ *  val nfa = MyBerriSethi.automatonFrom(Sequ(rex), 1)$/;"	V
nfa	scala/xml/dtd/ContentModel.scala	/^    val nfa = Translator.automatonFrom(r, 1)$/;"	V
nfa	scala/xml/dtd/ElementValidator.scala	/^        val nfa = ContentModel.Translator.automatonFrom(r, 1)$/;"	V
nfa.labels	scala/util/automata/SubsetConstruction.scala	/^  import nfa.labels$/;"	i
nin	scala/collection/concurrent/TrieMap.scala	/^    val nin = new INode[K, V](gen)$/;"	V
nin	scala/collection/concurrent/TrieMap.scala	/^    val nin = new INode[K, V](ngen)$/;"	V
nkv	scala/collection/immutable/HashMap.scala	/^          val nkv = merger(this.kv, kv)$/;"	V
nl	scala/runtime/ScalaRunTime.scala	/^    val nl = if (s contains "\\n") "\\n" else ""$/;"	V
nmap	scala/Enumeration.scala	/^  private val nmap: mutable.Map[Int, String] = new mutable.HashMap$/;"	V
nn	scala/collection/concurrent/TrieMap.scala	/^                  val nn = rn.updatedAt(pos, inode(CNode.dual(sn, sn.hc, new SNode(k, v, hc), hc, lev + 5, gen)), gen)$/;"	V
nn	scala/collection/concurrent/TrieMap.scala	/^                val nn = rn.updatedAt(pos, inode(CNode.dual(sn, sn.hc, new SNode(k, v, hc), hc, lev + 5, gen)), gen)$/;"	V
nn	scala/collection/concurrent/TrieMap.scala	/^            val nn = ln.removed(k, ct)$/;"	V
nn	scala/collection/concurrent/TrieMap.scala	/^          val nn = ln.inserted(k, v)$/;"	V
nn	scala/collection/concurrent/TrieMap.scala	/^          val nn = ln.removed(k, ct)$/;"	V
nn	scala/collection/concurrent/TrieMap.scala	/^        val nn = ln.inserted(k, v)$/;"	V
nnIds	scala/Enumeration.scala	/^  class ValueSet private[ValueSet] (private[this] var nnIds: immutable.BitSet)$/;"	v
noCatch	scala/util/control/Exception.scala	/^  final val noCatch: Catch[Nothing] = new Catch(nothingCatcher) withDesc "<nothing>"$/;"	V
noSuchElement	scala/collection/package.scala	/^    def noSuchElement(msg: String)   = throw new NoSuchElementException(msg)$/;"	m
noTraceSupression	scala/sys/SystemProperties.scala	/^  lazy val noTraceSupression   = bool("scala.control.noTraceSuppression", "scala should not suppress any stack trace creation")$/;"	V
node	scala/collection/mutable/UnrolledBuffer.scala	/^    var node: Unrolled[T] = headptr$/;"	v
node	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var node = buff.headPtr$/;"	v
nodeContainsText	scala/xml/parsing/FactoryAdapter.scala	/^  def nodeContainsText(localName: String): Boolean \/\/ abstract$/;"	m
nodeContainsText	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^  def nodeContainsText(label: String) = true$/;"	m
nodeEquals	scala/xml/factory/NodeFactory.scala	/^  def nodeEquals(n: Node, pre: String, name: String, attrSeq:MetaData, scope: NamespaceBinding, children: Seq[Node]) =$/;"	m
nodes	scala/xml/Group.scala	/^final case class Group(val nodes: Seq[Node]) extends Node {$/;"	V
nodes	scala/xml/persistent/CachedFileStorage.scala	/^  def nodes: Iterator[Node]$/;"	m
nodes	scala/xml/persistent/SetStorage.scala	/^  def nodes = synchronized { theSet.iterator }$/;"	m
nodesize	scala/collection/immutable/HashMap.scala	/^      val nodesize = Integer.bitCount(bitmap)$/;"	V
noinline	scala/noinline.scala	/^class noinline extends scala.annotation.StaticAnnotation$/;"	c
noinline	scala/package.scala	/^  type noinline = noannotation.inline$/;"	T
nonEmpty	scala/collection/GenTraversableOnce.scala	/^  def nonEmpty: Boolean$/;"	m
nonEmpty	scala/collection/TraversableOnce.scala	/^  def nonEmpty: Boolean = !isEmpty$/;"	m
nonEmpty	scala/collection/parallel/ParIterableLike.scala	/^  def nonEmpty = size != 0$/;"	m
nonEmptyChildren	scala/xml/Node.scala	/^  def nonEmptyChildren: Seq[Node] = child filterNot (_.toString == "")$/;"	m
nonEmptyPrefix	scala/collection/immutable/Stream.scala	/^        var nonEmptyPrefix = this$/;"	v
nonReadOnly	scala/collection/concurrent/TrieMap.scala	/^  def nonReadOnly = rootupdater ne null$/;"	m
nonmasklen	scala/collection/parallel/mutable/ParHashMap.scala	/^  private var nonmasklen = ParHashMapCombiner.nonmasklength$/;"	v
nonmasklen	scala/collection/parallel/mutable/ParHashSet.scala	/^  private var nonmasklen = ParHashSetCombiner.nonmasklength$/;"	v
nonmasklength	scala/collection/parallel/mutable/ParHashMap.scala	/^  private[mutable] val nonmasklength = 32 - discriminantbits$/;"	V
nonmasklength	scala/collection/parallel/mutable/ParHashSet.scala	/^  private[mutable] val nonmasklength = 32 - discriminantbits$/;"	V
nonzero	scala/util/parsing/json/Lexer.scala	/^  def nonzero = elem("nonzero digit", d => d.isDigit && d != '0')$/;"	m
nops	scala/reflect/NameTransformer.scala	/^  private val nops = 128$/;"	V
normalLines	scala/sys/process/ProcessLogger.scala	/^  * var normalLines = 0$/;"	v
normalize	scala/xml/MetaData.scala	/^  def normalize(attribs: MetaData, scope: NamespaceBinding): MetaData = {$/;"	m
normalizeWhitespace	scala/xml/parsing/FactoryAdapter.scala	/^  val normalizeWhitespace = false$/;"	V
not	scala/util/parsing/combinator/Parsers.scala	/^  def not[T](p: => Parser[T]): Parser[Unit] = Parser { in =>$/;"	m
notat	scala/xml/parsing/MarkupParser.scala	/^            val notat = xName$/;"	V
notat	scala/xml/parsing/MarkupParser.scala	/^    val notat = xName$/;"	V
notationDecl	scala/xml/parsing/MarkupHandler.scala	/^  def notationDecl(notat: String, extID: ExternalID): Unit = ()$/;"	m
notations	scala/xml/Document.scala	/^  def notations: Seq[scala.xml.dtd.NotationDecl] =$/;"	m
notations	scala/xml/dtd/DTD.scala	/^  def notations: Seq[NotationDecl]      = Nil$/;"	m
nothingCatcher	scala/util/control/Exception.scala	/^  final val nothingCatcher: Catcher[Nothing]  = mkThrowableCatcher(_ => false, throw _)$/;"	V
notify	scala/collection/mutable/History.scala	/^  def notify(pub: Pub, event: Evt) {$/;"	m
notify	scala/collection/mutable/Subscriber.scala	/^  def notify(pub: Pub, event: Evt): Unit$/;"	m
now	scala/concurrent/duration/Deadline.scala	/^  def now: Deadline = Deadline(Duration(System.nanoTime, NANOSECONDS))$/;"	m
npos	scala/collection/concurrent/TrieMap.scala	/^    val npos = stackpos(depth) + 1$/;"	V
nreaders	scala/concurrent/Channel.scala	/^  private var nreaders = 0$/;"	v
ns	scala/collection/SeqLike.scala	/^      val ns = new Array[Int](cs.length)$/;"	V
ns	scala/concurrent/impl/Promise.scala	/^          val ns = (nextWait.toNanos % 1000000l).toInt \/\/ as per object.wait spec$/;"	V
nsize	scala/collection/mutable/FlatHashTable.scala	/^    val nsize = calcSizeMapSize(tableLength)$/;"	V
nsize	scala/collection/mutable/HashTable.scala	/^    val nsize = calcSizeMapSize(tableLength)$/;"	V
nstates	scala/util/automata/DetWordAutom.scala	/^  val nstates: Int$/;"	V
nstates	scala/util/automata/NondetWordAutom.scala	/^  val nstates: Int$/;"	V
nstates	scala/util/automata/SubsetConstruction.scala	/^      val nstates = nstatesR$/;"	V
nstates	scala/util/automata/WordBerrySethi.scala	/^          val nstates  = pos$/;"	V
nstatesR	scala/util/automata/SubsetConstruction.scala	/^    val nstatesR = states.size$/;"	V
nth	scala/collection/immutable/RedBlackTree.scala	/^  def nth[A, B](tree: Tree[A, B], n: Int): Tree[A, B] = {$/;"	m
ntil	scala/collection/parallel/mutable/ParArray.scala	/^      val ntil = i + n$/;"	V
ntrans	scala/util/automata/SubsetConstruction.scala	/^      val ntrans = new mutable.HashMap[T, Int]()$/;"	V
nullIfEmpty	scala/xml/parsing/FactoryAdapter.scala	/^      def nullIfEmpty(s: String) = if (s == "") null else s$/;"	m
num	scala/collection/generic/GenTraversableFactory.scala	/^    val num = implicitly[Integral[T]]$/;"	V
num	scala/collection/immutable/PagedSeq.scala	/^private class Page[T: ClassTag](val num: Int) {$/;"	V
num	scala/collection/immutable/Range.scala	/^      var num = start$/;"	v
num	scala/collection/immutable/Stream.scala	/^    val num = implicitly[Integral[T]]$/;"	V
num	scala/collection/mutable/UnrolledBuffer.scala	/^    val num = in.readInt$/;"	V
num	scala/io/BytePickle.scala	/^      var num = 0$/;"	v
num	scala/sys/package.scala	/^    val num    = Thread.activeCount()$/;"	V
num.Ops	scala/collection/immutable/NumericRange.scala	/^    import num.Ops$/;"	i
num._	scala/collection/generic/GenTraversableFactory.scala	/^    import num._$/;"	i
num._	scala/collection/immutable/NumericRange.scala	/^  import num._$/;"	i
num._	scala/collection/immutable/Stream.scala	/^    import num._$/;"	i
numCores	scala/collection/parallel/Tasks.scala	/^  val numCores = Runtime.getRuntime.availableProcessors$/;"	V
numCores	scala/concurrent/TaskRunners.scala	/^    val numCores = Runtime.getRuntime().availableProcessors()$/;"	V
numRangeElements	scala/collection/immutable/NumericRange.scala	/^  private lazy val numRangeElements: Int =$/;"	V
numRangeElements	scala/collection/immutable/Range.scala	/^  final val numRangeElements: Int = {$/;"	V
number	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val number: Parser[Any] = """\\d\\d*""".r ^^ (s => Number(s.toInt))$/;"	V
number	scala/util/parsing/json/Lexer.scala	/^  def number = intPart ~ opt(fracPart) ~ opt(expPart) ^^ { case i ~ f ~ e =>$/;"	m
number	scala/util/parsing/json/Parser.scala	/^  def number     = accept("number", { case lexical.NumericLit(n) => numberParser.get.apply(n)} )$/;"	m
numberOfB	scala/util/matching/Regex.scala	/^   *  val numberOfB = "abbbc" match {$/;"	V
numberParser	scala/util/parsing/json/Parser.scala	/^  protected val numberParser = new ThreadLocal[NumericParser]() {$/;"	V
numbers	scala/Array.scala	/^ *  val numbers = Array(1, 2, 3, 4)$/;"	V
numbers	scala/PartialFunction.scala	/^ *  val numbers = sample map (isEven orElse isOdd)$/;"	V
numblocks	scala/collection/parallel/mutable/ParHashMap.scala	/^  private[mutable] val numblocks = 1 << discriminantbits$/;"	V
numblocks	scala/collection/parallel/mutable/ParHashSet.scala	/^  private[mutable] val numblocks = 1 << discriminantbits$/;"	V
numericLit	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  def numericLit: Parser[String] =$/;"	m
nwarnings	scala/io/Source.scala	/^  var nwarnings = 0$/;"	v
nx	scala/collection/LinearSeqOptimized.scala	/^    var nx = these.tail$/;"	v
obj	scala/collection/concurrent/TrieMap.scala	/^    var obj: AnyRef = null$/;"	v
objEntry	scala/util/parsing/json/Parser.scala	/^  def objEntry   = stringVal ~ (":" ~> value) ^^ { case x ~ y => (x, y) }$/;"	m
objString	scala/MatchError.scala	/^  private lazy val objString =$/;"	V
occ	scala/collection/SeqLike.scala	/^    val occ = new mutable.HashMap[B, Int] { override def default(k: B) = 0 }$/;"	V
occ	scala/collection/SeqLike.scala	/^    val occ = occCounts(that.seq)$/;"	V
oct	scala/StringContext.scala	/^          var oct = leadch - '0'$/;"	v
ofBoolean	scala/collection/mutable/ArrayBuilder.scala	/^  class ofBoolean extends ArrayBuilder[Boolean] {$/;"	c
ofByte	scala/collection/mutable/ArrayBuilder.scala	/^  class ofByte extends ArrayBuilder[Byte] {$/;"	c
ofChar	scala/collection/mutable/ArrayBuilder.scala	/^  class ofChar extends ArrayBuilder[Char] {$/;"	c
ofDim	scala/Array.scala	/^  def ofDim[T: ClassTag](n1: Int): Array[T] =$/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] = {$/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int): Array[Array[Array[T]]] =$/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] =$/;"	m
ofDim	scala/Array.scala	/^  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int): Array[Array[Array[Array[Array[T]]]]] =$/;"	m
ofDouble	scala/collection/mutable/ArrayBuilder.scala	/^  class ofDouble extends ArrayBuilder[Double] {$/;"	c
ofFloat	scala/collection/mutable/ArrayBuilder.scala	/^  class ofFloat extends ArrayBuilder[Float] {$/;"	c
ofInt	scala/collection/mutable/ArrayBuilder.scala	/^  class ofInt extends ArrayBuilder[Int] {$/;"	c
ofLong	scala/collection/mutable/ArrayBuilder.scala	/^  class ofLong extends ArrayBuilder[Long] {$/;"	c
ofRef	scala/collection/mutable/ArrayBuilder.scala	/^  class ofRef[T <: AnyRef : ClassTag] extends ArrayBuilder[T] {$/;"	c
ofShort	scala/collection/mutable/ArrayBuilder.scala	/^  class ofShort extends ArrayBuilder[Short] {$/;"	c
ofUnit	scala/collection/mutable/ArrayBuilder.scala	/^  class ofUnit extends ArrayBuilder[Unit] {$/;"	c
offs	scala/collection/SeqLike.scala	/^    private val offs = cnts.scanLeft(0)(_ + _)$/;"	V
offset	scala/collection/concurrent/TrieMap.scala	/^    val offset =$/;"	V
offset	scala/collection/immutable/HashMap.scala	/^        val offset = Integer.bitCount(bitmap & (mask-1))$/;"	V
offset	scala/collection/immutable/HashMap.scala	/^      val offset = Integer.bitCount(bitmap & (mask-1))$/;"	V
offset	scala/collection/immutable/HashSet.scala	/^        val offset = Integer.bitCount(bitmap & (mask-1))$/;"	V
offset	scala/collection/immutable/HashSet.scala	/^      val offset = Integer.bitCount(bitmap & (mask-1))$/;"	V
offset	scala/collection/parallel/mutable/ParHashSet.scala	/^  class FillBlocks(buckets: Array[UnrolledBuffer[Any]], table: AddingFlatHashTable, val offset: Int, val howmany: Int)$/;"	V
offset	scala/math/BigDecimal.scala	/^      val offset = i - minCached$/;"	V
offset	scala/math/BigInt.scala	/^      val offset = i - minCached$/;"	V
offset	scala/util/parsing/combinator/RegexParsers.scala	/^        val offset = in.offset$/;"	V
offset	scala/util/parsing/combinator/RegexParsers.scala	/^      val offset = in.offset$/;"	V
offset	scala/util/parsing/input/CharSequenceReader.scala	/^                         override val offset: Int) extends Reader[Char] {$/;"	V
offset	scala/util/parsing/input/PagedSeqReader.scala	/^                     override val offset: Int) extends Reader[Char] {$/;"	V
offset	scala/util/parsing/input/Reader.scala	/^  def offset: Int =$/;"	m
ok	scala/xml/dtd/ElementValidator.scala	/^    var ok = new mutable.BitSet(adecls.length)$/;"	v
okVersions	scala/util/Properties.scala	/^    val okVersions = version match {$/;"	V
old	scala/collection/generic/Signalling.scala	/^      val old = intflag.get$/;"	V
old	scala/collection/mutable/ListBuffer.scala	/^    var old = start.head$/;"	v
old	scala/collection/mutable/RevertibleHistory.scala	/^    val old = log.toList.reverse$/;"	V
old	scala/concurrent/BlockContext.scala	/^    val old = contextLocal.get \/\/ can be null$/;"	V
old	scala/sys/BooleanProp.scala	/^      case x: Boolean if !x   => val old = value ; clear() ; old$/;"	V
old	scala/sys/PropImpl.scala	/^    val old = if (isSet) get else null$/;"	V
old	scala/sys/PropImpl.scala	/^    val old = value$/;"	V
old	scala/xml/factory/Binder.scala	/^      val old = result$/;"	V
oldConsErr	scala/runtime/WorksheetSupport.scala	/^    val oldConsErr = Console.err$/;"	V
oldConsOut	scala/runtime/WorksheetSupport.scala	/^    val oldConsOut = Console.out$/;"	V
oldContext	scala/concurrent/BlockContext.scala	/^ *  val oldContext = BlockContext.current$/;"	V
oldIndex	scala/collection/mutable/ArrayStack.scala	/^    val oldIndex = index$/;"	V
oldRes	scala/util/parsing/combinator/PackratParsers.scala	/^    val oldRes: ParseResult[T] = rest.getFromCache(p).get match {$/;"	V
oldSize	scala/collection/mutable/OpenHashMap.scala	/^    val oldSize = mask + 1$/;"	V
oldSysErr	scala/runtime/WorksheetSupport.scala	/^    val oldSysErr = System.err$/;"	V
oldSysOut	scala/runtime/WorksheetSupport.scala	/^    val oldSysOut = System.out$/;"	V
oldTable	scala/collection/mutable/ArrayStack.scala	/^    val oldTable = ArrayStack.clone(table)$/;"	V
oldTable	scala/collection/mutable/HashTable.scala	/^    val oldTable = table$/;"	V
oldTable	scala/collection/mutable/OpenHashMap.scala	/^    val oldTable = table$/;"	V
olde	scala/collection/parallel/mutable/ParHashMap.scala	/^      var olde = table(h).asInstanceOf[DefaultEntry[K, V]]$/;"	v
oldelement	scala/collection/mutable/ObservableBuffer.scala	/^    val oldelement = apply(n)$/;"	V
oldmain	scala/collection/concurrent/TrieMap.scala	/^          val oldmain = ov.gcasRead(this)$/;"	V
oldtable	scala/collection/mutable/FlatHashTable.scala	/^    val oldtable = table$/;"	V
oldval	scala/util/DynamicVariable.scala	/^    val oldval = value$/;"	V
on	scala/math/Ordering.scala	/^  def on[U](f: U => T): Ordering[U] = new Ordering[U] {$/;"	m
onCodingException	scala/io/Codec.scala	/^  def onCodingException(handler: Handler): this.type = { _onCodingException = handler ; this }$/;"	m
onComplete	scala/concurrent/Future.scala	/^  def onComplete[U](func: Try[T] => U)(implicit executor: ExecutionContext): Unit$/;"	m
onComplete	scala/concurrent/impl/Promise.scala	/^    def onComplete[U](func: Try[T] => U)(implicit executor: ExecutionContext): Unit = {$/;"	m
onFailure	scala/concurrent/Future.scala	/^  def onFailure[U](callback: PartialFunction[Throwable, U])(implicit executor: ExecutionContext): Unit = onComplete {$/;"	m
onInterrupt	scala/sys/process/package.scala	/^      def onInterrupt[T](handler: => T): Throwable =?> T = {$/;"	m
onMalformedInput	scala/io/Codec.scala	/^  def onMalformedInput(newAction: Action): this.type = { _onMalformedInput = newAction ; this }$/;"	m
onSuccess	scala/concurrent/Future.scala	/^  def onSuccess[U](pf: PartialFunction[T, U])(implicit executor: ExecutionContext): Unit = onComplete {$/;"	m
onUnmappableCharacter	scala/io/Codec.scala	/^  def onUnmappableCharacter(newAction: Action): this.type = { _onUnmappableCharacter = newAction ; this }$/;"	m
one	scala/math/Numeric.scala	/^  def one = fromInt(1)$/;"	m
ones	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val ones = table.length - 1$/;"	V
ones	scala/collection/mutable/FlatHashTable.scala	/^    val ones = table.length - 1$/;"	V
ones	scala/collection/mutable/HashTable.scala	/^    val ones = table.length - 1$/;"	V
op	scala/reflect/NameTransformer.scala	/^  private class OpCodes(val op: Char, val code: String, val next: OpCodes)$/;"	V
op2code	scala/reflect/NameTransformer.scala	/^  private val op2code = new Array[String](nops)$/;"	V
operation	scala/collection/parallel/mutable/ParArray.scala	/^      val operation = op$/;"	V
opits	scala/collection/parallel/ParIterableLike.scala	/^      val opits = othpit.psplitWithSignalling(pit.remaining)$/;"	V
opits	scala/collection/parallel/ParIterableLike.scala	/^      val opits = othpit.psplitWithSignalling(sizes: _*)$/;"	V
opits	scala/collection/parallel/ParSeqLike.scala	/^      val opits = otherpit.psplitWithSignalling(fp, sp)$/;"	V
opos	scala/xml/parsing/MarkupParser.scala	/^      val opos = pos$/;"	V
ops	scala/concurrent/ops.scala	/^object ops$/;"	o
ops	scala/reflect/NameTransformer.scala	/^      var ops: OpCodes = null$/;"	v
opt	scala/util/control/Exception.scala	/^    def opt[U >: T](body: => U): Option[U] = toOption(Some(body))$/;"	m
opt	scala/util/parsing/combinator/Parsers.scala	/^  def opt[T](p: => Parser[T]): Parser[Option[T]] =$/;"	m
optElem	scala/collection/mutable/Queue.scala	/^      val optElem = removeFromList(p)$/;"	V
optManifest	scala/Predef.scala	/^  def optManifest[T](implicit m: OptManifest[T])     = m$/;"	m
option	scala/sys/BooleanProp.scala	/^    def option = if (isSet) Some(value) else None$/;"	m
option	scala/sys/Prop.scala	/^  def option: Option[T]$/;"	m
option	scala/sys/PropImpl.scala	/^  def option: Option[T] = if (isSet) Some(value) else None$/;"	m
optionOrdering	scala/math/Ordering.scala	/^    def optionOrdering: Ordering[T]$/;"	m
optionOrdering	scala/math/Ordering.scala	/^    new OptionOrdering[T] { val optionOrdering = ord }$/;"	V
optv	scala/collection/concurrent/TrieMap.scala	/^            val optv = ln.get(k)$/;"	V
optv	scala/collection/concurrent/TrieMap.scala	/^          val optv = ln.get(k)$/;"	V
or	scala/sys/PropImpl.scala	/^  def or[T1 >: T](alt: => T1): T1 = if (isSet) value else alt$/;"	m
or	scala/util/control/Exception.scala	/^    def or[U >: T](other: Catch[U]): Catch[U] = or(other.pf)$/;"	m
or	scala/util/control/Exception.scala	/^    def or[U >: T](pf2: Catcher[U]): Catch[U] = new Catch(pf orElse pf2, fin, rethrow)$/;"	m
orElse	scala/PartialFunction.scala	/^  def orElse[A1 <: A, B1 >: B](that: PartialFunction[A1, B1]): PartialFunction[A1, B1] =$/;"	m
orElse	scala/util/Try.scala	/^  def orElse[U >: T](default: => Try[U]): Try[U] =$/;"	m
ord	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^  implicit protected[this] val ord: Ordering[A]$/;"	V
ord	scala/collection/mutable/AVLTree.scala	/^    val ord = ordering.compare(value, data)$/;"	V
ord	scala/collection/mutable/PriorityQueue.scala	/^class PriorityQueue[A](implicit val ord: Ordering[A])$/;"	V
ord	scala/util/Sorting.scala	/^    val ord = Ordering[K]$/;"	V
ord._	scala/collection/mutable/PriorityQueue.scala	/^  import ord._$/;"	i
ord._	scala/util/Sorting.scala	/^    import ord._$/;"	i
orderedCompanion	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^  def orderedCompanion: GenericOrderedCompanion[CC]$/;"	m
orderedHash	scala/util/hashing/MurmurHash3.scala	/^  def orderedHash(xs: TraversableOnce[Any]): Int   = orderedHash(xs, symmetricSeed)$/;"	m
orderedHashing	scala/util/hashing/MurmurHash3.scala	/^  def orderedHashing = new Hashing[TraversableOnce[Any]] {$/;"	m
ordering	scala/collection/generic/Sorted.scala	/^  def ordering : Ordering[K]$/;"	m
ordering	scala/collection/immutable/TreeMap.scala	/^class TreeMap[A, +B] private (tree: RB.Tree[A, B])(implicit val ordering: Ordering[A])$/;"	V
ordering	scala/collection/immutable/TreeSet.scala	/^class TreeSet[A] private (tree: RB.Tree[A, Unit])(implicit val ordering: Ordering[A])$/;"	V
ordering	scala/collection/mutable/TreeSet.scala	/^class TreeSet[A](implicit val ordering: Ordering[A]) extends SortedSet[A] with SetLike[A, TreeSet[A]]$/;"	V
org.xml.sax.Attributes	scala/xml/parsing/FactoryAdapter.scala	/^import org.xml.sax.Attributes$/;"	i
org.xml.sax.XMLReader	scala/xml/include/sax/Main.scala	/^import org.xml.sax.XMLReader$/;"	i
org.xml.sax.ext.LexicalHandler	scala/xml/include/sax/XIncluder.scala	/^import org.xml.sax.ext.LexicalHandler$/;"	i
org.xml.sax.helpers.DefaultHandler	scala/xml/parsing/FactoryAdapter.scala	/^import org.xml.sax.helpers.DefaultHandler$/;"	i
org.xml.sax.helpers.XMLReaderFactory	scala/xml/include/sax/Main.scala	/^import org.xml.sax.helpers.XMLReaderFactory$/;"	i
org.xml.sax.helpers.{ XMLReaderFactory, XMLFilterImpl, NamespaceSupport, AttributesImpl }	scala/xml/include/sax/XIncludeFilter.scala	/^import org.xml.sax.helpers.{ XMLReaderFactory, XMLFilterImpl, NamespaceSupport, AttributesImpl }$/;"	i
org.xml.sax.{ Attributes, XMLReader, Locator }	scala/xml/include/sax/XIncludeFilter.scala	/^import org.xml.sax.{ Attributes, XMLReader, Locator }$/;"	i
org.xml.sax.{ ContentHandler, XMLReader, Locator, Attributes }	scala/xml/include/sax/XIncluder.scala	/^import org.xml.sax.{ ContentHandler, XMLReader, Locator, Attributes }$/;"	i
orig	scala/collection/immutable/HashMap.scala	/^  private class SerializationProxy[A,B](@transient private var orig: HashMap[A, B]) extends Serializable {$/;"	v
orig	scala/collection/immutable/HashSet.scala	/^  @SerialVersionUID(2L) private class SerializationProxy[A,B](@transient private var orig: HashSet[A]) extends Serializable {$/;"	v
origElems	scala/collection/Iterator.scala	/^    private var origElems = self$/;"	v
osName	scala/util/Properties.scala	/^  def osName                = propOrEmpty("os.name")$/;"	m
other	scala/collection/GenIterableViewLike.scala	/^    protected[this] val other: GenIterable[B]$/;"	V
other	scala/collection/IterableViewLike.scala	/^    val other: GenIterable[B] = that$/;"	V
other	scala/collection/IterableViewLike.scala	/^  protected def newZipped[B](that: GenIterable[B]): Transformed[(A, B)] = new { val other = that } with AbstractTransformed[(A, B)] with Zipped[B]$/;"	V
other	scala/collection/Iterator.scala	/^      var other: PartitionIterator = _$/;"	v
other	scala/collection/SeqViewLike.scala	/^    val other = that$/;"	V
other	scala/collection/SeqViewLike.scala	/^  protected override def newZipped[B](that: GenIterable[B]): Transformed[(A, B)] = new { val other = that } with AbstractTransformed[(A, B)] with Zipped[B]$/;"	V
other	scala/collection/immutable/StreamViewLike.scala	/^    new { val other = that; val thisElem = _thisElem; val thatElem = _thatElem } with AbstractTransformed[(A1, B)] with ZippedAll[A1, B]$/;"	V
other	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newZipped[B](that: scala.collection.GenIterable[B]): Transformed[(A, B)] = new { val other = that } with AbstractTransformed[(A, B)] with Zipped[B]$/;"	V
other	scala/collection/parallel/ParIterableLike.scala	/^      val other = that.asParIterable$/;"	V
other	scala/collection/parallel/ParIterableViewLike.scala	/^    val other = that$/;"	V
other	scala/collection/parallel/ParIterableViewLike.scala	/^  protected def newZipped[S](that: GenIterable[S]): Transformed[(T, S)] = new Zipped[S] { val other = that }$/;"	V
other	scala/collection/parallel/ParSeqViewLike.scala	/^    val other = that$/;"	V
other	scala/collection/parallel/ParSeqViewLike.scala	/^  protected override def newZipped[S](that: GenIterable[S]): Transformed[(T, S)] = new Zipped[S] { val other = that }$/;"	V
otherPar	scala/collection/parallel/ParIterableViewLike.scala	/^    def otherPar: ParSeq[S] = other.asParSeq$/;"	m
otherwise	scala/collection/parallel/ParIterableLike.scala	/^      def otherwise(notbody: => Unit)(implicit t: ClassTag[Cmb]) {$/;"	m
otherwise	scala/collection/parallel/ParIterableLike.scala	/^      def otherwise(notbody: => Unit)(implicit t: ClassTag[Cmb]): Unit$/;"	m
otherwise	scala/collection/parallel/package.scala	/^      def otherwise(notbody: => R) = if (isParallel) isbody(asParSeq) else notbody$/;"	m
otherwise	scala/collection/parallel/package.scala	/^      def otherwise(notbody: => R) = if (isParallel) isbody(asParallel) else notbody$/;"	m
otherwise	scala/collection/parallel/package.scala	/^      def otherwise(notbody: => R): R$/;"	m
othtask	scala/collection/parallel/ParIterableLike.scala	/^        val othtask = new other.Copy(cfactory, other.splitter)$/;"	V
out	scala/Console.scala	/^  def out = outVar.value$/;"	m
out	scala/sys/process/ProcessLogger.scala	/^      def out(s: => String): Unit = fout(s)$/;"	m
out	scala/sys/process/ProcessLogger.scala	/^  def out(s: => String): Unit = writer println s$/;"	m
out	scala/sys/process/ProcessLogger.scala	/^  def out(s: => String): Unit$/;"	m
out	scala/util/Marshal.scala	/^    val out = new ObjectOutputStream(ba)$/;"	V
out	scala/xml/include/sax/XIncluder.scala	/^  var out = new OutputStreamWriter(outs, encoding)$/;"	v
out	scala/xml/parsing/ConstructingParser.scala	/^  *     val out = ppr.format(ele)$/;"	V
outThread	scala/sys/process/ProcessBuilderImpl.scala	/^      val outThread = Spawn(processOutput(process.getInputStream), daemonizeThreads)$/;"	V
outVar	scala/Console.scala	/^  private val outVar = new DynamicVariable[PrintStream](java.lang.System.out)$/;"	V
outerEnum	scala/Enumeration.scala	/^    private[Enumeration] val outerEnum = thisenum$/;"	V
output	scala/StringContext.scala	/^    def output(ch: Char) = {$/;"	m
output	scala/collection/package.scala	/^      var output = ""$/;"	v
output	scala/collection/parallel/RemainsIterator.scala	/^    var output = ""$/;"	v
owned	scala/collection/parallel/Tasks.scala	/^    @volatile var owned = false$/;"	v
p	scala/collection/convert/Wrappers.scala	/^      val p = underlying(i)$/;"	V
p	scala/collection/convert/Wrappers.scala	/^    override def set(i: Int, elem: A) = { val p = underlying(i); underlying(i) = elem; p }$/;"	V
p	scala/collection/immutable/IntMap.scala	/^    val p = mask(p1, m)$/;"	V
p	scala/collection/immutable/LongMap.scala	/^    val p = mask(p1, m)$/;"	V
p	scala/collection/immutable/PagedSeq.scala	/^      val p = page(index + start); index + start < p.end$/;"	V
p	scala/collection/mutable/FlatHashTable.scala	/^    val p = h >> sizeMapBucketBitSize$/;"	V
p	scala/collection/parallel/mutable/ParArray.scala	/^        var p = product_quick(num, arr, until, i, num.one)$/;"	v
p	scala/collection/parallel/package.scala	/^    val p = parallelismLevel$/;"	V
p	scala/concurrent/Future.scala	/^    val p = Promise[(T, U)]()$/;"	V
p	scala/concurrent/Future.scala	/^    val p = Promise[S]()$/;"	V
p	scala/concurrent/Future.scala	/^    val p = Promise[T]()$/;"	V
p	scala/concurrent/Future.scala	/^    val p = Promise[Throwable]()$/;"	V
p	scala/concurrent/Future.scala	/^    val p = Promise[U]()$/;"	V
p	scala/sys/process/ProcessBuilderImpl.scala	/^      val p = createProcess(io)$/;"	V
p	scala/util/automata/SubsetConstruction.scala	/^        val p = indexMap(value)$/;"	V
p	scala/util/parsing/combinator/Parsers.scala	/^    def <~ [U](q: => Parser[U]): Parser[T] = { lazy val p = q \/\/ lazy argument$/;"	V
p	scala/util/parsing/combinator/Parsers.scala	/^    def append[U >: T](p0: => Parser[U]): Parser[U] = { lazy val p = p0 \/\/ lazy argument$/;"	V
p	scala/util/parsing/combinator/Parsers.scala	/^    def ~ [U](q: => Parser[U]): Parser[~[T, U]] = { lazy val p = q \/\/ lazy argument$/;"	V
p	scala/util/parsing/combinator/Parsers.scala	/^    def ~> [U](q: => Parser[U]): Parser[U] = { lazy val p = q \/\/ lazy argument$/;"	V
p	scala/util/parsing/combinator/Parsers.scala	/^    lazy val p = p0 \/\/ lazy argument$/;"	V
p	scala/xml/dtd/ContentModelParser.scala	/^    val p = particle;$/;"	V
p0	scala/util/parsing/combinator/Parsers.scala	/^      val p0 = p    \/\/ avoid repeatedly re-evaluating by-name parser$/;"	V
p1	scala/util/matching/Regex.scala	/^   *  val p1 = "ab*c".r$/;"	V
p1Matches	scala/util/matching/Regex.scala	/^   *  val p1Matches = "abbbc" match {$/;"	V
p2	scala/util/matching/Regex.scala	/^   *  val p2 = "a(b*)c".r$/;"	V
p_array	scala/collection/mutable/PriorityQueue.scala	/^    def p_array = array$/;"	m
p_ensureSize	scala/collection/mutable/PriorityQueue.scala	/^    def p_ensureSize(n: Int) = super.ensureSize(n)$/;"	m
p_size0	scala/collection/mutable/PriorityQueue.scala	/^    def p_size0 = size0$/;"	m
p_size0_=	scala/collection/mutable/PriorityQueue.scala	/^    def p_size0_=(s: Int) = size0 = s$/;"	m
p_swap	scala/collection/mutable/PriorityQueue.scala	/^    def p_swap(a: Int, b: Int) = super.swap(a, b)$/;"	m
pa	scala/collection/parallel/ParIterableLike.scala	/^      \/\/ val pa = mutable.ParArray(lst: _*)$/;"	V
pa	scala/collection/parallel/RemainsIterator.scala	/^    val pa = mutable.ParArray.fromTraversables(self).reverse$/;"	V
packageOf	scala/runtime/ScalaRunTime.scala	/^    def packageOf(x: AnyRef) = x.getClass.getPackage match {$/;"	m
pad	scala/collection/Iterator.scala	/^    private[this] var pad: Option[() => B] = None             \/\/ what to pad short sequences with$/;"	v
padTo	scala/collection/GenSeqLike.scala	/^  def padTo[B >: A, That](len: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
padTo	scala/collection/Iterator.scala	/^  def padTo[A1 >: A](len: Int, elem: A1): Iterator[A1] = new AbstractIterator[A1] {$/;"	m
padTo	scala/collection/SeqLike.scala	/^  def padTo[B >: A, That](len: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
padTo	scala/collection/parallel/ParSeqLike.scala	/^  def padTo[U >: T, That](len: Int, elem: U)(implicit bf: CanBuildFrom[Repr, U, That]): That = if (length < len) {$/;"	m
pair	scala/io/BytePickle.scala	/^  def pair[a,b](pa: SPU[a], pb: SPU[b]): SPU[(a,b)] = {$/;"	m
pairToList	scala/io/BytePickle.scala	/^    def pairToList(p: (A, List[A])): List[A] =$/;"	m
pairToList	scala/io/BytePickle.scala	/^    def pairToList(p: (a,List[a])): List[a] =$/;"	m
pairs	scala/math/Ordering.scala	/^  * val pairs = Array(("a", 5, 2), ("c", 3, 1), ("b", 1, 3))$/;"	V
pairs	scala/xml/Utility.scala	/^    val pairs = Map($/;"	V
par	scala/collection/Parallelizable.scala	/^  def par: ParRepr = {$/;"	m
par	scala/concurrent/ops.scala	/^  def par[A, B](xp: => A, yp: => B)(implicit runner: TaskRunner = defaultRunner): (A, B) = {$/;"	m
parMap	scala/concurrent/ops.scala	/^  def parMap[a,b](f: a => b, xs: Array[a]): Array[b] = {$/;"	m
parallel	scala/collection/parallel/ParIterableLike.scala	/^    def parallel[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3) = new ParComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]](tsk, t2) {$/;"	m
parallel	scala/collection/parallel/ParIterableLike.scala	/^    def parallel[R3, R2, Tp2](t2: SSCTask[R2, Tp2])(resCombiner: (R, R2) => R3): ParComposite[R, R2, R3, SSCTask[R, Tp], SSCTask[R2, Tp2]]$/;"	m
parallel.Combiner	scala/collection/CustomParallelizable.scala	/^import parallel.Combiner$/;"	i
parallel.Combiner	scala/collection/Parallelizable.scala	/^import parallel.Combiner$/;"	i
parallel.ParIterable	scala/collection/TraversableLike.scala	/^import parallel.ParIterable$/;"	i
parallel.ParMap	scala/collection/MapLike.scala	/^import parallel.ParMap$/;"	i
parallel.ParSeq	scala/collection/SeqLike.scala	/^import parallel.ParSeq$/;"	i
parallel.ParSet	scala/collection/SetLike.scala	/^import parallel.ParSet$/;"	i
parallel.immutable	scala/collection/parallel/immutable/ParIterable.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParMap.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParSeq.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParSet.scala	/^package parallel.immutable$/;"	p
parallel.immutable	scala/collection/parallel/immutable/ParVector.scala	/^package parallel.immutable$/;"	p
parallel.immutable.ParHashMap	scala/collection/immutable/HashMap.scala	/^import parallel.immutable.ParHashMap$/;"	i
parallel.immutable.ParIterable	scala/collection/immutable/Iterable.scala	/^import parallel.immutable.ParIterable$/;"	i
parallel.immutable.ParMap	scala/collection/immutable/MapLike.scala	/^import parallel.immutable.ParMap$/;"	i
parallel.immutable.ParSeq	scala/collection/immutable/Seq.scala	/^import parallel.immutable.ParSeq$/;"	i
parallel.immutable.ParSet	scala/collection/immutable/Set.scala	/^import parallel.immutable.ParSet$/;"	i
parallel.mutable	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^package parallel.mutable$/;"	p
parallel.mutable	scala/collection/parallel/mutable/ParHashTable.scala	/^package parallel.mutable$/;"	p
parallel.mutable	scala/collection/parallel/mutable/ParSetLike.scala	/^package parallel.mutable$/;"	p
parallel.mutable.ParArray	scala/collection/mutable/ArrayBuffer.scala	/^import parallel.mutable.ParArray$/;"	i
parallel.mutable.ParArray	scala/collection/mutable/ArrayOps.scala	/^import parallel.mutable.ParArray$/;"	i
parallel.mutable.ParArray	scala/collection/mutable/ArraySeq.scala	/^import parallel.mutable.ParArray$/;"	i
parallel.mutable.ParIterable	scala/collection/mutable/Iterable.scala	/^import parallel.mutable.ParIterable$/;"	i
parallel.mutable.ParMap	scala/collection/mutable/MapLike.scala	/^import parallel.mutable.ParMap$/;"	i
parallel.mutable.ParSeq	scala/collection/mutable/SeqLike.scala	/^import parallel.mutable.ParSeq$/;"	i
parallel.mutable.ParSet	scala/collection/mutable/SetLike.scala	/^import parallel.mutable.ParSet$/;"	i
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = FutureThreadPoolTasks.numCores$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = ThreadPoolTasks.numCores$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = driver.parallelismLevel$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel = forkJoinPool.getParallelism$/;"	m
parallelismLevel	scala/collection/parallel/Tasks.scala	/^  def parallelismLevel: Int$/;"	m
param	scala/annotation/target/package.scala	/^  type param = scala.annotation.meta.param$/;"	T
parameterEntityDecl	scala/xml/parsing/MarkupHandler.scala	/^  def parameterEntityDecl(name: String, edef: EntityDef): Unit =$/;"	m
parentBase	scala/xml/include/sax/XIncludeFilter.scala	/^      val parentBase = bases.peek().asInstanceOf[URL]$/;"	V
parentBlockContext	scala/concurrent/Future.scala	/^      private[this] var parentBlockContext: BlockContext = _$/;"	v
parse	scala/util/parsing/combinator/RegexParsers.scala	/^  def parse[T](p: Parser[T], in: Reader[Char]): ParseResult[T] =$/;"	m
parse	scala/util/parsing/combinator/RegexParsers.scala	/^  def parse[T](p: Parser[T], in: java.io.Reader): ParseResult[T] =$/;"	m
parse	scala/util/parsing/combinator/RegexParsers.scala	/^  def parse[T](p: Parser[T], in: java.lang.CharSequence): ParseResult[T] =$/;"	m
parse	scala/xml/dtd/ContentModel.scala	/^  def parse(s: String): ContentModel = ContentModelParser.parse(s)$/;"	m
parse	scala/xml/dtd/ContentModelParser.scala	/^  def parse(s: String): ContentModel = { initScanner(s); contentspec }$/;"	m
parse	scala/xml/include/sax/XIncludeFilter.scala	/^        var parse = atts getValue "parse"$/;"	v
parseAll	scala/util/parsing/combinator/RegexParsers.scala	/^  def parseAll[T](p: Parser[T], in: Reader[Char]): ParseResult[T] =$/;"	m
parseAll	scala/util/parsing/combinator/RegexParsers.scala	/^  def parseAll[T](p: Parser[T], in: java.io.Reader): ParseResult[T] =$/;"	m
parseAll	scala/util/parsing/combinator/RegexParsers.scala	/^  def parseAll[T](p: Parser[T], in: java.lang.CharSequence): ParseResult[T] =$/;"	m
parseAttributeValue	scala/xml/Utility.scala	/^  def parseAttributeValue(value: String): Seq[Node] = {$/;"	m
parseCharRef	scala/xml/Utility.scala	/^  def parseCharRef(ch: () => Char, nextch: () => Unit, reportSyntaxError: String => Unit, reportTruncatedError: String => Unit): String = {$/;"	m
parseDelim	scala/util/parsing/combinator/lexical/StdLexical.scala	/^    def parseDelim(s: String): Parser[Token] = accept(s.toList) ^^ { x => Keyword(s) }$/;"	m
parseFull	scala/util/parsing/json/JSON.scala	/^  def parseFull(input: String): Option[Any] =$/;"	m
parseRaw	scala/util/parsing/json/JSON.scala	/^  def parseRaw(input : String) : Option[JSONType] =$/;"	m
parsedEntityDecl	scala/xml/parsing/MarkupHandler.scala	/^  def parsedEntityDecl(name: String, edef: EntityDef): Unit =$/;"	m
parseqspan	scala/collection/parallel/ParIterableLike.scala	/^      val parseqspan = toSeq.takeWhile(pred)$/;"	V
parser	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val parser = (ident | number | string)*$/;"	V
parser	scala/util/parsing/combinator/testing/Tester.scala	/^  val parser: syntactic.Parser[Any]$/;"	V
parser	scala/util/parsing/combinator/testing/Tester.scala	/^ *    val parser = syntactic.term$/;"	V
parser	scala/xml/XML.scala	/^    new XMLLoader[Elem] { override val parser: SAXParser = p }$/;"	V
parser	scala/xml/factory/XMLLoader.scala	/^  def parser: SAXParser = {$/;"	m
parser	scala/xml/include/sax/Main.scala	/^    val parser: XMLReader =$/;"	V
parser	scala/xml/include/sax/XIncludeFilter.scala	/^      val parser: XMLReader =$/;"	V
parser	scala/xml/pull/XMLEventReader.scala	/^  private[this] val parser = new Parser(src)$/;"	V
parserThread	scala/xml/pull/XMLEventReader.scala	/^  private[this] val parserThread = new Thread(parser, "XMLEventReader")$/;"	V
parsing	scala/xml/parsing/ConstructingHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/ConstructingParser.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/DefaultMarkupHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/ExternalSources.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/FactoryAdapter.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/FatalError.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/MarkupHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/MarkupParser.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/MarkupParserCommon.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/TokenTests.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/ValidatingMarkupHandler.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/XhtmlEntities.scala	/^package parsing$/;"	p
parsing	scala/xml/parsing/XhtmlParser.scala	/^package parsing$/;"	p
parsing.NoBindingFactoryAdapter	scala/xml/XML.scala	/^import parsing.NoBindingFactoryAdapter$/;"	i
parsing.ValidatingMarkupHandler	scala/xml/factory/Binder.scala	/^import parsing.ValidatingMarkupHandler$/;"	i
parsing.XhtmlEntities	scala/xml/Utility.scala	/^import parsing.XhtmlEntities$/;"	i
parsing.XhtmlEntities	scala/xml/Xhtml.scala	/^import parsing.XhtmlEntities$/;"	i
parsing.{ FactoryAdapter, NoBindingFactoryAdapter }	scala/xml/factory/NodeFactory.scala	/^import parsing.{ FactoryAdapter, NoBindingFactoryAdapter }$/;"	i
parsing.{ FactoryAdapter, NoBindingFactoryAdapter }	scala/xml/factory/XMLLoader.scala	/^import parsing.{ FactoryAdapter, NoBindingFactoryAdapter }$/;"	i
partial	scala/math/BigDecimal.scala	/^   * val partial = BigDecimal(1.0) to 2.0       \/\/ not usable yet$/;"	V
particle	scala/xml/dtd/ContentModelParser.scala	/^  def particle = token match {$/;"	m
partition	scala/collection/GenTraversableLike.scala	/^  def partition(pred: A => Boolean): (Repr, Repr)$/;"	m
partition	scala/collection/Iterator.scala	/^  def partition(p: A => Boolean): (Iterator[A], Iterator[A]) = {$/;"	m
partition	scala/collection/TraversableLike.scala	/^  def partition(p: A => Boolean): (Repr, Repr) = {$/;"	m
partition	scala/collection/parallel/ParIterableLike.scala	/^  def partition(pred: T => Boolean): (Repr, Repr) = {$/;"	m
partition2combiners	scala/collection/parallel/RemainsIterator.scala	/^  def partition2combiners[U >: T, This](pred: T => Boolean, btrue: Combiner[U, This], bfalse: Combiner[U, This]) = {$/;"	m
parts	scala/collection/immutable/Stream.scala	/^   * val parts = naturalsFrom(1) partition { _ % 2 == 0 }$/;"	V
parts	scala/collection/mutable/LazyBuilder.scala	/^  protected var parts = new ListBuffer[TraversableOnce[Elem]]$/;"	v
patch	scala/collection/GenSeqLike.scala	/^  def patch[B >: A, That](from: Int, patch: GenSeq[B], replaced: Int)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
patch	scala/collection/GenSeqViewLike.scala	/^    protected[this] val patch: GenSeq[B]$/;"	V
patch	scala/collection/Iterator.scala	/^  def patch[B >: A](from: Int, patchElems: Iterator[B], replaced: Int): Iterator[B] = new AbstractIterator[B] {$/;"	m
patch	scala/collection/SeqLike.scala	/^  def patch[B >: A, That](from: Int, patch: GenSeq[B], replaced: Int)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
patch	scala/collection/SeqViewLike.scala	/^    val patch = _patch$/;"	V
patch	scala/collection/parallel/ParSeqLike.scala	/^  def patch[U >: T, That](from: Int, patch: GenSeq[U], replaced: Int)(implicit bf: CanBuildFrom[Repr, U, That]): That = {$/;"	m
patch	scala/collection/parallel/ParSeqViewLike.scala	/^    val patch = _patch;$/;"	V
patchPar	scala/collection/parallel/ParSeqViewLike.scala	/^    def patchPar: ParSeq[U] = patch.asInstanceOf[ParSeq[U]]$/;"	m
patchParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def patchParSeq[U >: T](from: Int, patchElems: SeqSplitter[U], replaced: Int) = new Patched(from, patchElems, replaced)$/;"	m
path	scala/collection/immutable/RedBlackTree.scala	/^    private[this] var path = if (tree eq null) null else {$/;"	v
pattern	scala/util/matching/Regex.scala	/^  val pattern = Pattern.compile(regex)$/;"	V
pb	scala/io/BufferedSource.scala	/^        val pb = new PushbackReader(charReader)$/;"	V
pb	scala/io/BytePickle.scala	/^      val pb = k(a)$/;"	V
pbf	scala/collection/parallel/ParIterableLike.scala	/^      val pbf = bf.asParallel$/;"	V
pc	scala/collection/parallel/ParIterableLike.scala	/^   *  val pc = mutable.ParArray(1, 2, 3)                                          $/;"	V
pc	scala/collection/parallel/TaskSupport.scala	/^ *  val pc = mutable.ParArray(1, 2, 3)$/;"	V
pd	scala/beans/ScalaBeanInfo.scala	/^  private val pd = new Array[PropertyDescriptor](props.length \/ 3)$/;"	V
pe	scala/io/BytePickle.scala	/^      val pe = state.dict$/;"	V
peReference	scala/xml/parsing/MarkupHandler.scala	/^  def peReference(name: String) { decls ::= PEReference(name) }$/;"	m
pendingReads	scala/concurrent/SyncChannel.scala	/^  private var pendingReads  = List[SyncVar[A]]()$/;"	v
pendingWrites	scala/concurrent/SyncChannel.scala	/^  private var pendingWrites = List[(A, SyncVar[Boolean])]()$/;"	v
people	scala/math/Ordering.scala	/^  * val people = Array(Person("bob", 30), Person("ann", 32), Person("carl", 19))$/;"	V
perThreadNumberParser	scala/util/parsing/json/JSON.scala	/^   def perThreadNumberParser : NumericParser = numberParser.get()$/;"	m
perThreadNumberParser_=	scala/util/parsing/json/JSON.scala	/^   def perThreadNumberParser_=(f : NumericParser) { numberParser.set(f) }$/;"	m
permutations	scala/collection/SeqLike.scala	/^  def permutations: Iterator[Repr] =$/;"	m
persistent	scala/xml/persistent/CachedFileStorage.scala	/^package persistent$/;"	p
persistent	scala/xml/persistent/Index.scala	/^package persistent$/;"	p
persistent	scala/xml/persistent/SetStorage.scala	/^package persistent$/;"	p
perturb	scala/collection/mutable/OpenHashMap.scala	/^    var perturb = index$/;"	v
pf	scala/PartialFunction.scala	/^  private class Lifted[-A, +B] (val pf: PartialFunction[A, B])$/;"	V
pf	scala/util/control/Exception.scala	/^    val pf: Catcher[T],$/;"	V
pf2	scala/util/control/Exception.scala	/^      val pf2 = new Catcher[U] {$/;"	V
phit	scala/collection/parallel/immutable/ParHashMap.scala	/^      val phit = new ParHashMapIterator(it, sz)$/;"	V
phit	scala/collection/parallel/immutable/ParHashSet.scala	/^      val phit = new ParHashSetIterator(it, sz)$/;"	V
phrase	scala/util/parsing/combinator/Parsers.scala	/^  def phrase[T](p: Parser[T]) = new Parser[T] {$/;"	m
pi	scala/StringContext.scala	/^    val pi = parts.iterator$/;"	V
pickle	scala/io/BytePickle.scala	/^  def pickle[T](p: SPU[T], a: T): Array[Byte] =$/;"	m
pipeIn	scala/sys/process/ProcessImpl.scala	/^      val pipeIn      = new PipedInputStream(pipeOut)$/;"	V
pipeOut	scala/sys/process/ProcessImpl.scala	/^      val pipeOut       = new PipedOutputStream$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^    protected[this] val pit: IterableSplitter[T]$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (at: Int, cbfBefore: CombinerFactory[U, This], cbfAfter: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (f: T => GenTraversableOnce[S], pbf: CombinerFactory[S, That], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (from: Int, until: Int, cbf: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (len: Int, thiselem: U, thatelem: S, pbf: CombinerFactory[(U, S), That], protected[this] val pit: IterableSplitter[T], val othpit: SeqSplitter[S])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (n: Int, cbf: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (pf: PartialFunction[T, S], pbf: CombinerFactory[S, That], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (pos: Int, pred: T => Boolean, cbf: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (pos: Int, pred: T => Boolean, cbfBefore: CombinerFactory[U, This], cbfAfter: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  (pred: T => Boolean, cbfTrue: CombinerFactory[U, This], cbfFalse: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected class Copy[U >: T, That](cfactory: CombinerFactory[U, That], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Aggregate[S](z: S, seqop: (S, T) => S, combop: (S, S) => S, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class CopyToArray[U >: T, This >: Repr](from: Int, len: Int, array: Array[U], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Count(pred: T => Boolean, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class CreateScanTree[U >: T](from: Int, len: Int, z: U, op: (U, U) => U, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Exists(pred: T => Boolean, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class FilterNot[U >: T, This >: Repr](pred: T => Boolean, cbf: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Filter[U >: T, This >: Repr](pred: T => Boolean, cbf: CombinerFactory[U, This], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Find[U >: T](pred: T => Boolean, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Fold[U >: T](z: U, op: (U, U) => U, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Forall(pred: T => Boolean, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Foreach[S](op: T => S, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Map[S, That](f: T => S, cbf: CombinerFactory[S, That], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Max[U >: T](ord: Ordering[U], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Min[U >: T](ord: Ordering[U], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Product[U >: T](num: Numeric[U], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Reduce[U >: T](op: (U, U) => U, protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Sum[U >: T](num: Numeric[U], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class ToParCollection[U >: T, That](cbf: CombinerFactory[U, That], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class ToParMap[K, V, That](cbf: CombinerFactory[(K, V), That], protected[this] val pit: IterableSplitter[T])(implicit ev: T <:< (K, V))$/;"	V
pit	scala/collection/parallel/ParIterableLike.scala	/^  protected[this] class Zip[U >: T, S, That](pbf: CombinerFactory[(U, S), That], protected[this] val pit: IterableSplitter[T], val othpit: SeqSplitter[S])$/;"	V
pit	scala/collection/parallel/ParIterableViewLike.scala	/^  protected[this] class Force[U >: T, That](cbf: CanCombineFrom[Coll, U, That], protected[this] val pit: IterableSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^    protected[this] val pit: SeqSplitter[T]$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class Corresponds[S](corr: (T, S) => Boolean, protected[this] val pit: SeqSplitter[T], val otherpit: SeqSplitter[S])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class IndexWhere(pred: T => Boolean, from: Int, protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class LastIndexWhere(pred: T => Boolean, pos: Int, protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class ReverseMap[S, That](f: T => S, pbf: () => Combiner[S, That], protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class Reverse[U >: T, This >: Repr](cbf: () => Combiner[U, This], protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class SameElements[U >: T](protected[this] val pit: SeqSplitter[T], val otherpit: SeqSplitter[U])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class SegmentLength(pred: T => Boolean, from: Int, protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class Updated[U >: T, That](pos: Int, elem: U, pbf: CombinerFactory[U, That], protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/ParSeqLike.scala	/^  protected[this] class Zip[U >: T, S, That](len: Int, cf: CombinerFactory[(U, S), That], protected[this] val pit: SeqSplitter[T], val otherpit: SeqSplitter[S])$/;"	V
pit	scala/collection/parallel/ParSeqViewLike.scala	/^  protected[this] class Force[U >: T, That](cbf: CanCombineFrom[Coll, U, That], protected[this] val pit: SeqSplitter[T])$/;"	V
pit	scala/collection/parallel/immutable/ParVector.scala	/^    val pit = new ParVectorIterator(vector.startIndex, vector.endIndex)$/;"	V
pit	scala/collection/parallel/mutable/ParArray.scala	/^    val pit = new ParArrayIterator$/;"	V
pitdup	scala/collection/parallel/ParIterableLike.scala	/^      val pitdup = pit.dup$/;"	V
pits	scala/collection/parallel/ParIterableLike.scala	/^      val pits = pit.splitWithSignalling$/;"	V
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = pit.psplitWithSignalling(fp, sp)$/;"	V
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = pit.splitWithSignalling$/;"	V
pits	scala/collection/parallel/ParSeqLike.scala	/^      val pits = splitter.psplitWithSignalling(from, replaced, length - from - realreplaced)$/;"	V
pits	scala/collection/parallel/ParSeqLike.scala	/^    val pits = splitter.psplitWithSignalling(from, repl, length - from - repl)$/;"	V
pits	scala/collection/parallel/RemainsIterator.scala	/^      val pits = self.psplit(from, replaced, self.remaining - from - replaced)$/;"	V
pits	scala/collection/parallel/RemainsIterator.scala	/^    val pits = psplit(sizes: _*)$/;"	V
pits	scala/collection/parallel/RemainsIterator.scala	/^    val pits = split$/;"	V
pittxt	scala/collection/parallel/ParIterableLike.scala	/^    \/\/ val pittxt = pit.toString$/;"	V
plen	scala/collection/GenSeqViewLike.scala	/^    private lazy val plen = patch.length$/;"	V
plen	scala/collection/parallel/ParIterableLike.scala	/^        val plen = p.remaining min (len - untilp)$/;"	V
plus	scala/concurrent/duration/Duration.scala	/^  def plus(other: Duration)  = this + other$/;"	m
plus	scala/concurrent/duration/Duration.scala	/^  def plus(other: FiniteDuration) = this + other$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: BigDecimal, y: BigDecimal): BigDecimal = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: BigInt, y: BigInt): BigInt = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Byte, y: Byte): Byte = (x + y).toByte$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Char, y: Char): Char = (x + y).toChar$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Double, y: Double): Double = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Float, y: Float): Float = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Int, y: Int): Int = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Long, y: Long): Long = x + y$/;"	m
plus	scala/math/Numeric.scala	/^    def plus(x: Short, y: Short): Short = (x + y).toShort$/;"	m
plus	scala/math/Numeric.scala	/^  def plus(x: T, y: T): T$/;"	m
pm	scala/collection/concurrent/TrieMap.scala	/^              val pm = parent.GCAS_READ(ct)$/;"	V
poll	scala/ref/ReferenceQueue.scala	/^  def poll: Option[Reference[T]] = Wrapper(underlying.poll)$/;"	m
pop	scala/collection/immutable/IntMap.scala	/^  def pop = {$/;"	m
pop	scala/collection/immutable/LongMap.scala	/^  def pop() = {$/;"	m
pop	scala/collection/immutable/Stack.scala	/^  def pop: Stack[A] =$/;"	m
pop	scala/collection/mutable/ArrayStack.scala	/^  def pop(): T = {$/;"	m
pop	scala/collection/mutable/Stack.scala	/^  def pop(): A = {$/;"	m
pop2	scala/collection/immutable/Stack.scala	/^  def pop2: (A, Stack[A]) =$/;"	m
pos	scala/collection/BitSetLike.scala	/^      var pos = 0$/;"	v
pos	scala/collection/SeqLike.scala	/^    var pos = 2$/;"	v
pos	scala/collection/concurrent/TrieMap.scala	/^                    val pos = Integer.bitCount(bmp & (flag - 1))$/;"	V
pos	scala/collection/concurrent/TrieMap.scala	/^          val pos = Integer.bitCount(bmp & (flag - 1))$/;"	V
pos	scala/collection/concurrent/TrieMap.scala	/^          val pos = if (bmp == 0xffffffff) idx else Integer.bitCount(bmp & (flag - 1))$/;"	V
pos	scala/collection/concurrent/TrieMap.scala	/^        val pos = Integer.bitCount(bmp & mask)$/;"	V
pos	scala/collection/concurrent/TrieMap.scala	/^      val pos = (i + offset) % array.length$/;"	V
pos	scala/collection/mutable/UnrolledBuffer.scala	/^    var pos: Int = -1$/;"	v
pos	scala/collection/parallel/RemainsIterator.scala	/^    var pos = -1$/;"	v
pos	scala/collection/parallel/immutable/ParHashMap.scala	/^    val pos = hc & 0x1f$/;"	V
pos	scala/collection/parallel/immutable/ParHashSet.scala	/^    val pos = hc & 0x1f$/;"	V
pos	scala/collection/parallel/mutable/ParArray.scala	/^      var pos = -1$/;"	v
pos	scala/collection/parallel/mutable/ParHashMap.scala	/^    val pos = (hc >>> nonmasklen)$/;"	V
pos	scala/collection/parallel/mutable/ParHashSet.scala	/^    val pos = hc >>> nonmasklen$/;"	V
pos	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var pos = startpos$/;"	v
pos	scala/io/Source.scala	/^    var pos = 0$/;"	v
pos	scala/io/Source.scala	/^  def pos = positioner.pos$/;"	m
pos	scala/util/automata/BaseBerrySethi.scala	/^  protected var pos = 0$/;"	v
pos	scala/util/parsing/combinator/PackratParsers.scala	/^    def pos: Position = underlying.pos$/;"	m
pos	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def pos = rest1.pos$/;"	m
pos	scala/util/parsing/input/CharSequenceReader.scala	/^  def pos: Position = new OffsetPosition(source, offset)$/;"	m
pos	scala/util/parsing/input/PagedSeqReader.scala	/^  def pos: Position = new OffsetPosition(source, offset)$/;"	m
pos	scala/util/parsing/input/Positional.scala	/^  var pos: Position = NoPosition$/;"	v
pos	scala/util/parsing/input/Reader.scala	/^  def pos: Position$/;"	m
pos	scala/util/regexp/WordExp.scala	/^    var pos = -1$/;"	v
pos	scala/xml/Utility.scala	/^    var pos = 0$/;"	v
pos	scala/xml/parsing/MarkupParser.scala	/^      val pos = this.pos$/;"	V
pos	scala/xml/parsing/MarkupParser.scala	/^    val pos = this.pos$/;"	V
pos	scala/xml/parsing/MarkupParser.scala	/^  var pos: Int = _$/;"	v
posD	scala/collection/immutable/TrieIterator.scala	/^  private[this] var posD                                      = initPosD$/;"	v
posStack	scala/collection/immutable/TrieIterator.scala	/^  private[this] var posStack                                  = initPosStack$/;"	v
posStep	scala/collection/immutable/NumericRange.scala	/^    val posStep = num.gt(step, zero)$/;"	V
positioned	scala/util/parsing/combinator/Parsers.scala	/^  def positioned[T <: Positional](p: => Parser[T]): Parser[T] = Parser { in =>$/;"	m
positioner	scala/io/Source.scala	/^  private[this] var positioner: Positioner = RelaxedPositioner$/;"	v
positive	scala/runtime/BoxesRunTime.java	/^    public static Object positive(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
postfixOps	scala/language.scala	/^  implicit lazy val postfixOps: postfixOps = languageFeature.postfixOps$/;"	V
postfixOps	scala/languageFeature.scala	/^  object postfixOps extends postfixOps$/;"	o
pow	scala/math/BigDecimal.scala	/^  def pow (n: Int): BigDecimal = this.bigDecimal.pow(n, mc)$/;"	m
pow	scala/math/BigInt.scala	/^  def pow (exp: Int): BigInt = new BigInt(this.bigInteger.pow(exp))$/;"	m
pow	scala/math/package.scala	/^  def pow(x: Double, y: Double): Double = java.lang.Math.pow(x, y)$/;"	m
pp	scala/util/parsing/combinator/RegexParsers.scala	/^    val pp = super.positioned(p)$/;"	V
ppr	scala/xml/parsing/ConstructingParser.scala	/^  *     val ppr = new scala.xml.PrettyPrinter(80, 5)$/;"	V
pre	scala/collection/BitSetLike.scala	/^    var pre = ""$/;"	v
pre	scala/xml/Attribute.scala	/^  def pre: String        \/\/ will be null if unprefixed$/;"	m
pre	scala/xml/PrefixedAttribute.scala	/^  val pre: String,$/;"	V
pre	scala/xml/UnprefixedAttribute.scala	/^  final val pre = null$/;"	V
precedes	scala/collection/mutable/FlatHashTable.scala	/^    def precedes(i: Int, j: Int) = {$/;"	m
precision	scala/math/BigDecimal.scala	/^  def precision: Int = this.bigDecimal.precision()$/;"	m
pred	scala/collection/GenTraversableViewLike.scala	/^    protected[this] val pred: A => Boolean$/;"	V
pred	scala/collection/IterableViewLike.scala	/^  protected override def newDroppedWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with DroppedWhile$/;"	V
pred	scala/collection/IterableViewLike.scala	/^  protected override def newFiltered(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with Filtered$/;"	V
pred	scala/collection/IterableViewLike.scala	/^  protected override def newTakenWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with TakenWhile$/;"	V
pred	scala/collection/SeqViewLike.scala	/^  protected override def newDroppedWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with DroppedWhile$/;"	V
pred	scala/collection/SeqViewLike.scala	/^  protected override def newFiltered(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with Filtered$/;"	V
pred	scala/collection/SeqViewLike.scala	/^  protected override def newTakenWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with TakenWhile$/;"	V
pred	scala/collection/TraversableViewLike.scala	/^  protected def newDroppedWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with DroppedWhile$/;"	V
pred	scala/collection/TraversableViewLike.scala	/^  protected def newFiltered(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with Filtered$/;"	V
pred	scala/collection/TraversableViewLike.scala	/^  protected def newTakenWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with TakenWhile$/;"	V
pred	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newDroppedWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with DroppedWhile$/;"	V
pred	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newFiltered(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with Filtered$/;"	V
pred	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newTakenWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with TakenWhile$/;"	V
pred	scala/collection/mutable/IndexedSeqView.scala	/^  protected override def newDroppedWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with DroppedWhile$/;"	V
pred	scala/collection/mutable/IndexedSeqView.scala	/^  protected override def newFiltered(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with Filtered$/;"	V
pred	scala/collection/mutable/IndexedSeqView.scala	/^  protected override def newTakenWhile(p: A => Boolean): Transformed[A] = new { val pred = p } with AbstractTransformed[A] with TakenWhile$/;"	V
preferIPv4Stack	scala/sys/SystemProperties.scala	/^  lazy val preferIPv4Stack     = bool("java.net.preferIPv4Stack", "system should prefer IPv4 sockets")$/;"	V
preferIPv6Addresses	scala/sys/SystemProperties.scala	/^  lazy val preferIPv6Addresses = bool("java.net.preferIPv6Addresses", "system should prefer IPv6 addresses")$/;"	V
prefix	scala/collection/immutable/Stream.scala	/^        var prefix = f(nonEmptyPrefix.head).toStream$/;"	v
prefix	scala/testing/Benchmark.scala	/^  def prefix: String = getClass().getName()$/;"	m
prefix	scala/xml/Elem.scala	/^  override val prefix: String,$/;"	V
prefix	scala/xml/Node.scala	/^  def prefix: String = null$/;"	m
prefix	scala/xml/parsing/MarkupParser.scala	/^          val prefix = qname.substring(6 \/*xmlns:*\/ , qname.length)$/;"	V
prefixLength	scala/collection/GenSeqLike.scala	/^  def prefixLength(p: A => Boolean): Int = segmentLength(p, 0)$/;"	m
prefixLength	scala/collection/parallel/RemainsIterator.scala	/^  def prefixLength(pred: T => Boolean): Int = {$/;"	m
prefixedKey	scala/xml/MetaData.scala	/^  def prefixedKey = this match {$/;"	m
prepare	scala/concurrent/ExecutionContext.scala	/^  def prepare(): ExecutionContext = this$/;"	m
preparedEC	scala/concurrent/impl/Promise.scala	/^      val preparedEC = executor.prepare$/;"	V
prepend	scala/collection/mutable/BufferLike.scala	/^  def prepend(elems: A*) { prependAll(elems) }$/;"	m
prepend	scala/collection/mutable/UnrolledBuffer.scala	/^    def prepend(elem: T) = if (size < array.length) {$/;"	m
prependAll	scala/collection/mutable/BufferLike.scala	/^  def prependAll(xs: TraversableOnce[A]) { xs ++=: this }$/;"	m
prependToList	scala/collection/mutable/ListBuffer.scala	/^  def prependToList(xs: List[A]): List[A] = {$/;"	m
pres	scala/collection/immutable/List.scala	/^    var pres = prefix$/;"	v
preserve	scala/xml/XML.scala	/^  val preserve  = "preserve"$/;"	V
preserveWS	scala/xml/factory/Binder.scala	/^abstract class Binder(val preserveWS: Boolean) extends ValidatingMarkupHandler {$/;"	V
preserveWS	scala/xml/parsing/ConstructingHandler.scala	/^  val preserveWS: Boolean$/;"	V
preserveWS	scala/xml/parsing/MarkupParser.scala	/^  val preserveWS: Boolean$/;"	V
preserveWS	scala/xml/parsing/XhtmlParser.scala	/^  val preserveWS = true$/;"	V
preserveWS	scala/xml/pull/XMLEventReader.scala	/^    val preserveWS = XMLEventReader.this.preserveWS$/;"	V
preserveWS	scala/xml/pull/XMLEventReader.scala	/^  val preserveWS = true$/;"	V
preserving	scala/collection/mutable/ArrayStack.scala	/^  def preserving[T](action: => T) = {$/;"	m
prettyprint	scala/reflect/ClassTag.scala	/^    def prettyprint(clazz: jClass[_]): String =$/;"	m
prev	scala/collection/concurrent/INodeBase.java	/^    public BasicNode prev() {$/;"	m	class:INodeBase
prev	scala/collection/concurrent/MainNode.java	/^    public volatile MainNode<K, V> prev = null;$/;"	f	class:MainNode
prev	scala/collection/concurrent/TrieMap.scala	/^    val prev = \/*READ*\/m.prev$/;"	V
prev	scala/collection/convert/Wrappers.scala	/^        var prev : Option[A] = None$/;"	v
prev	scala/collection/convert/Wrappers.scala	/^      val prev = underlying.replace(k, v)$/;"	V
prev	scala/collection/convert/Wrappers.scala	/^      var prev: Option[A] = None$/;"	v
prev	scala/collection/mutable/DoubleLinkedListLike.scala	/^  var prev: This = _$/;"	v
prev	scala/collection/parallel/ParIterableLike.scala	/^  (pit: IterableSplitter[U], op: (U, U) => U, from: Int, len: Int, var prev: Option[ScanLeaf[U]], var acc: U)$/;"	v
prevBlockContext	scala/concurrent/Future.scala	/^        val prevBlockContext = BlockContext.current$/;"	V
prevSize	scala/collection/Iterator.scala	/^      val prevSize = buffer.size$/;"	V
previousLevel	scala/xml/include/sax/XIncludeFilter.scala	/^      val previousLevel = level$/;"	V
previousRemaining	scala/collection/parallel/immutable/ParHashMap.scala	/^        val previousRemaining = remaining$/;"	V
previousRemaining	scala/collection/parallel/immutable/ParHashSet.scala	/^        val previousRemaining = remaining$/;"	V
prevval	scala/collection/concurrent/TrieMap.scala	/^    val prevval = \/*READ*\/m.prev$/;"	V
print	scala/Console.scala	/^  def print(obj: Any) {$/;"	m
print	scala/Predef.scala	/^  def print(x: Any) = Console.print(x)$/;"	m
print	scala/collection/immutable/Stream.scala	/^  def print(sep: String) {$/;"	m
print	scala/collection/parallel/ParIterableLike.scala	/^    def print(depth: Int = 0): Unit$/;"	m
print	scala/collection/parallel/ParIterableLike.scala	/^    def print(depth: Int) = println((" " * depth) + this)$/;"	m
print	scala/collection/parallel/ParIterableLike.scala	/^    def print(depth: Int) {$/;"	m
printChain	scala/collection/parallel/Tasks.scala	/^    def printChain() = {$/;"	m
printOut	scala/runtime/WorksheetSupport.scala	/^  private val printOut = new PrintStream(flushedOut)$/;"	V
printer	scala/sys/process/BasicIO.scala	/^    * val printer = ProcessLogger(println(_))$/;"	V
printf	scala/Console.scala	/^  def printf(text: String, args: Any*) { out.print(text format (args : _*)) }$/;"	m
printf	scala/Predef.scala	/^  def printf(text: String, xs: Any*) = Console.print(text.format(xs: _*))$/;"	m
println	scala/Console.scala	/^  def println(x: Any) { out.println(x) }$/;"	m
println	scala/Predef.scala	/^  def println() = Console.println()$/;"	m
println	scala/Predef.scala	/^  def println(x: Any) = Console.println(x)$/;"	m
probablePrime	scala/math/BigInt.scala	/^  def probablePrime(bitLength: Int, rnd: scala.util.Random): BigInt =$/;"	m
problem	scala/util/Try.scala	/^ *     val problem = dividend.flatMap(x => divisor.map(y => x\/y))$/;"	V
procInstr	scala/xml/parsing/ConstructingHandler.scala	/^  def procInstr(pos: Int, target: String, txt: String) =$/;"	m
procInstr	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def procInstr(pos: Int, target: String, txt: String) = NodeSeq.Empty$/;"	m
procInstr	scala/xml/parsing/MarkupHandler.scala	/^  def procInstr(pos: Int, target: String, txt: String): NodeSeq$/;"	m
procInstr	scala/xml/pull/XMLEventReader.scala	/^    def procInstr(pos: Int, target: String, txt: String)  = setEvent(EvProcInstr(target, txt))$/;"	m
process	scala/sys/process/BasicIO.scala	/^    val process:   T => Unit,$/;"	V
process	scala/sys/process/BasicIO.scala	/^package process$/;"	p
process	scala/sys/process/Process.scala	/^package process$/;"	p
process	scala/sys/process/ProcessBuilder.scala	/^package process$/;"	p
process	scala/sys/process/ProcessBuilderImpl.scala	/^      val process  = run(BasicIO(withInput, streamed.process, log))$/;"	V
process	scala/sys/process/ProcessBuilderImpl.scala	/^      val process = p.start() \/\/ start the external process$/;"	V
process	scala/sys/process/ProcessBuilderImpl.scala	/^package process$/;"	p
process	scala/sys/process/ProcessIO.scala	/^package process$/;"	p
process	scala/sys/process/ProcessImpl.scala	/^package process$/;"	p
process	scala/sys/process/ProcessLogger.scala	/^package process$/;"	p
processDebug	scala/sys/process/package.scala	/^      final val processDebug = props contains "scala.process.debug"$/;"	V
processError	scala/sys/process/ProcessIO.scala	/^  val processError: InputStream => Unit,$/;"	V
processFully	scala/sys/process/BasicIO.scala	/^  def processFully(buffer: Appendable): InputStream => Unit = processFully(appendLine(buffer))$/;"	m
processFully	scala/sys/process/BasicIO.scala	/^  def processFully(processLine: String => Unit): InputStream => Unit = in => {$/;"	m
processInternal._	scala/sys/process/BasicIO.scala	/^import processInternal._$/;"	i
processInternal._	scala/sys/process/Process.scala	/^import processInternal._$/;"	i
processInternal._	scala/sys/process/ProcessBuilder.scala	/^import processInternal._$/;"	i
processInternal._	scala/sys/process/ProcessBuilderImpl.scala	/^import processInternal._$/;"	i
processInternal._	scala/sys/process/ProcessIO.scala	/^import processInternal._$/;"	i
processInternal._	scala/sys/process/ProcessImpl.scala	/^import processInternal._$/;"	i
processLinesFully	scala/sys/process/BasicIO.scala	/^  def processLinesFully(processLine: String => Unit)(readLine: () => String) {$/;"	m
processOutput	scala/sys/process/ProcessIO.scala	/^  val processOutput: InputStream => Unit,$/;"	V
processingInstruction	scala/xml/include/sax/XIncluder.scala	/^  def processingInstruction(target: String, data: String) {$/;"	m
prod	scala/collection/parallel/mutable/ParArray.scala	/^        var prod = one$/;"	v
produce	scala/xml/pull/XMLEventReader.scala	/^  def produce(x: T): Unit = if (!eos) interruptibly(queue put x)$/;"	m
product	scala/collection/GenTraversableOnce.scala	/^  def product[A1 >: A](implicit num: Numeric[A1]): A1$/;"	m
product	scala/collection/TraversableOnce.scala	/^  def product[B >: A](implicit num: Numeric[B]): B = foldLeft(num.one)(num.times)$/;"	m
product	scala/collection/parallel/ParIterableLike.scala	/^  def product[U >: T](implicit num: Numeric[U]): U = {$/;"	m
product	scala/concurrent/duration/Duration.scala	/^    val product = a * b$/;"	V
productArity	scala/Product.scala	/^  def productArity: Int$/;"	m
productElement	scala/Product.scala	/^  def productElement(n: Int): Any$/;"	m
productHash	scala/util/hashing/MurmurHash3.scala	/^  def productHash(x: Product): Int                 = productHash(x, productSeed)$/;"	m
productHashing	scala/util/hashing/MurmurHash3.scala	/^  def productHashing = new Hashing[Product] {$/;"	m
productIterator	scala/Product.scala	/^  def productIterator: Iterator[Any] = new scala.collection.AbstractIterator[Any] {$/;"	m
productPrefix	scala/Product.scala	/^  def productPrefix = ""$/;"	m
productSeed	scala/util/hashing/MurmurHash3.scala	/^  final val productSeed     = 0xcafebabe$/;"	V
prolog	scala/xml/parsing/MarkupParser.scala	/^  def prolog(): (Option[String], Option[String], Option[Boolean]) =$/;"	m
promise	scala/concurrent/impl/Future.scala	/^    val promise = new Promise.DefaultPromise[T]()$/;"	V
promise	scala/concurrent/package.scala	/^  def promise[T](): Promise[T] = Promise[T]()$/;"	m
propFilename	scala/util/Properties.scala	/^  protected val propFilename = "\/" + propCategory + ".properties"$/;"	V
propIsSet	scala/util/Properties.scala	/^  def propIsSet(name: String)                   = System.getProperty(name) != null$/;"	m
propIsSetTo	scala/util/Properties.scala	/^  def propIsSetTo(name: String, value: String)  = propOrNull(name) == value$/;"	m
propOrElse	scala/util/Properties.scala	/^  def propOrElse(name: String, alt: String)     = System.getProperty(name, alt)$/;"	m
propOrEmpty	scala/util/Properties.scala	/^  def propOrEmpty(name: String)                 = propOrElse(name, "")$/;"	m
propOrFalse	scala/util/Properties.scala	/^  def propOrFalse(name: String)                 = propOrNone(name) exists (x => List("yes", "on", "true") contains x.toLowerCase)$/;"	m
propOrNone	scala/util/Properties.scala	/^  def propOrNone(name: String)                  = Option(propOrNull(name))$/;"	m
propOrNull	scala/util/Properties.scala	/^  def propOrNull(name: String)                  = propOrElse(name, null)$/;"	m
propertyHelp	scala/sys/SystemProperties.scala	/^  private lazy val propertyHelp = mutable.Map[String, String]()$/;"	V
props	scala/sys/package.scala	/^  def props: SystemProperties = new SystemProperties$/;"	m
props	scala/util/Properties.scala	/^    val props = new java.util.Properties$/;"	V
protect	scala/sys/process/BasicIO.scala	/^    def protect(in: InputStream): InputStream    = if (in eq stdin) Uncloseable(in) else in$/;"	m
protect	scala/sys/process/BasicIO.scala	/^    def protect(out: OutputStream): OutputStream = if ((out eq stdout) || (out eq stderr)) Uncloseable(out) else out$/;"	m
psplit	scala/collection/parallel/ParSeqLike.scala	/^    def psplit(sizes: Int*) = {$/;"	m
psplit	scala/collection/parallel/PreciseSplitter.scala	/^  def psplit(sizes: Int*): Seq[PreciseSplitter[T]]$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*) = trio.psplit(sizes: _*)$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[(U, S)]] = {$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[S]] = self.psplit(sizes: _*).map { _ map f }$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[T]] = takeSeq(self.psplit(sizes: _*)) { (p, n) => p.take(n) }$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(sizes: Int*): Seq[SeqSplitter[U]] = if (firstNonEmpty) {$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^    def psplit(szs: Int*) = (self.psplit(szs: _*) zip that.psplit(szs: _*)) map { p => p._1 zipParSeq p._2 }$/;"	m
psplit	scala/collection/parallel/RemainsIterator.scala	/^  def psplit(sizes: Int*): Seq[SeqSplitter[T]]$/;"	m
psplit	scala/collection/parallel/immutable/ParRange.scala	/^    def psplit(sizes: Int*) = {$/;"	m
psplit	scala/collection/parallel/immutable/ParVector.scala	/^    def psplit(sizes: Int*): Seq[ParVectorIterator] = {$/;"	m
psplit	scala/collection/parallel/immutable/package.scala	/^      def psplit(sizes: Int*) = {$/;"	m
psplit	scala/collection/parallel/mutable/ParArray.scala	/^    def psplit(sizesIncomplete: Int*): Seq[ParArrayIterator] = {$/;"	m
psplitWithSignalling	scala/collection/parallel/RemainsIterator.scala	/^  def psplitWithSignalling(sizes: Int*): Seq[SeqSplitter[T]] = {$/;"	m
pubID	scala/xml/parsing/MarkupParser.scala	/^      val pubID = pubidLiteral()$/;"	V
pubidLiteral	scala/xml/parsing/MarkupParser.scala	/^  def pubidLiteral(): String = {$/;"	m
publicID	scala/xml/include/sax/XIncludeFilter.scala	/^    var publicID = ""$/;"	v
publicId	scala/xml/dtd/ExternalID.scala	/^  def publicId: String$/;"	m
publicId	scala/xml/dtd/ExternalID.scala	/^  val publicId = null$/;"	V
pull	scala/xml/pull/XMLEvent.scala	/^package pull$/;"	p
pull	scala/xml/pull/XMLEventReader.scala	/^package pull$/;"	p
push	scala/collection/immutable/IntMap.scala	/^  def push(x: IntMap[V]) {$/;"	m
push	scala/collection/immutable/LongMap.scala	/^  def push(x: LongMap[V]) {$/;"	m
push	scala/collection/immutable/Stack.scala	/^  def push[B >: A](elem1: B, elem2: B, elems: B*): Stack[B] =$/;"	m
push	scala/collection/immutable/Stack.scala	/^  def push[B >: A](elem: B): Stack[B] = new Stack(elem :: elems)$/;"	m
push	scala/collection/mutable/ArrayStack.scala	/^  def push(x: T) {$/;"	m
push	scala/collection/mutable/Stack.scala	/^  def push(elem1: A, elem2: A, elems: A*): this.type =$/;"	m
push	scala/collection/mutable/Stack.scala	/^  def push(elem: A): this.type = { elems = elem :: elems; this }$/;"	m
push	scala/xml/parsing/MarkupParser.scala	/^  def push(entityName: String) {$/;"	m
pushAll	scala/collection/immutable/Stack.scala	/^  def pushAll[B >: A](xs: TraversableOnce[B]): Stack[B] =$/;"	m
pushAll	scala/collection/mutable/Stack.scala	/^  def pushAll(xs: TraversableOnce[A]): this.type = { xs.seq foreach push ; this }$/;"	m
pushExternal	scala/xml/parsing/MarkupParser.scala	/^  def pushExternal(systemId: String) {$/;"	m
pushdown	scala/collection/parallel/ParIterableLike.scala	/^    def pushdown(v: U) = {$/;"	m
pushdown	scala/collection/parallel/ParIterableLike.scala	/^    def pushdown(v: U) {$/;"	m
pushdown	scala/collection/parallel/ParIterableLike.scala	/^    def pushdown(v: U): Unit$/;"	m
put	scala/collection/convert/Wrappers.scala	/^    def put(key: A, value: B): B = underlying.put(key, value) match {$/;"	m
put	scala/collection/mutable/MapLike.scala	/^  def put(key: A, value: B): Option[B] = {$/;"	m
put	scala/collection/parallel/mutable/ParHashMap.scala	/^  def put(key: K, value: V): Option[V] = {$/;"	m
put	scala/collection/parallel/mutable/ParMap.scala	/^    def put(key: K, value: V): Option[V] = underlying.put(key, value)$/;"	m
put	scala/collection/parallel/mutable/ParMapLike.scala	/^  def put(key: K, value: V): Option[V]$/;"	m
put	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def put(key: K, value: V): Option[V] = ctrie.put(key, value)$/;"	m
put	scala/concurrent/SyncVar.scala	/^  def put(x: A): Unit = synchronized {$/;"	m
putIfAbsent	scala/collection/concurrent/Map.scala	/^  def putIfAbsent(k: A, v: B): Option[B]$/;"	m
putIfAbsent	scala/collection/concurrent/TrieMap.scala	/^  def putIfAbsent(k: K, v: V): Option[V] = {$/;"	m
putIfAbsent	scala/collection/convert/Wrappers.scala	/^    def putIfAbsent(k: A, v: B) = underlying.putIfAbsent(k, v) match {$/;"	m
putIfAbsent	scala/collection/convert/Wrappers.scala	/^    def putIfAbsent(k: A, v: B): Option[B] = {$/;"	m
putIfAbsent	scala/collection/mutable/ConcurrentMap.scala	/^  def putIfAbsent(k: A, v: B): Option[B]$/;"	m
q	scala/sys/process/BasicIO.scala	/^      val q = new LinkedBlockingQueue[Either[Int, T]]$/;"	V
q	scala/util/automata/SubsetConstruction.scala	/^      val q = indexMap(Q)$/;"	V
q	scala/util/automata/WordBerrySethi.scala	/^    val q = deltaq(src)$/;"	V
q	scala/util/parsing/combinator/PackratParsers.scala	/^    lazy val q = p$/;"	V
q	scala/util/parsing/combinator/PackratParsers.scala	/^    val q = super.phrase(p)$/;"	V
q	scala/util/parsing/combinator/Parsers.scala	/^      lazy val q = q0 \/\/ lazy argument$/;"	V
q	scala/xml/dtd/ContentModelParser.scala	/^      case CHOICE  => val q = choiceRest( p );accept( RPAREN ); q$/;"	V
q	scala/xml/dtd/ContentModelParser.scala	/^      case COMMA   => val q = seqRest( p );   accept( RPAREN ); q$/;"	V
q0	scala/util/automata/SubsetConstruction.scala	/^    val q0 = immutable.BitSet(0)            \/\/ the set { 0 }$/;"	V
q1	scala/util/automata/Inclusion.scala	/^    var q1 = 0 \/\/dfa1.initstate; \/\/ == 0$/;"	v
q2	scala/util/automata/Inclusion.scala	/^    var q2 = 0 \/\/dfa2.initstate; \/\/ == 0$/;"	v
qCurrent	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var qCurrent: Int = -1$/;"	v
qDef	scala/util/automata/SubsetConstruction.scala	/^      val qDef = indexMap(transDef)$/;"	V
qStack	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var qStack: List[Int] = Nil$/;"	v
qname	scala/xml/parsing/FactoryAdapter.scala	/^      val qname = attributes getQName i$/;"	V
qname	scala/xml/parsing/MarkupParser.scala	/^      val qname = xName$/;"	V
queue	scala/collection/parallel/Tasks.scala	/^  def queue = executor.getQueue.asInstanceOf[LinkedBlockingQueue[Runnable]]$/;"	m
queue	scala/xml/parsing/MarkupParser.scala	/^    private val queue = scala.collection.mutable.Queue[Char]()$/;"	V
queue	scala/xml/pull/XMLEventReader.scala	/^  private[this] lazy val queue =$/;"	V
quickSort	scala/util/Sorting.scala	/^  def quickSort(a: Array[Double]) { sort1(a, 0, a.length) }$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort(a: Array[Float]) { sort1(a, 0, a.length) }$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort(a: Array[Int]) { sort1(a, 0, a.length) }$/;"	m
quickSort	scala/util/Sorting.scala	/^  def quickSort[K: Ordering](a: Array[K]) { sort1(a, 0, a.length) }$/;"	m
quot	scala/math/BigDecimal.scala	/^  def quot (that: BigDecimal): BigDecimal =$/;"	m
quot	scala/math/Integral.scala	/^  def quot(x: T, y: T): T$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: BigDecimal, y: BigDecimal): BigDecimal = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: BigInt, y: BigInt): BigInt = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Byte, y: Byte): Byte = (x \/ y).toByte$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Char, y: Char): Char = (x \/ y).toChar$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Double, y: Double): Double = (BigDecimal(x) \/ BigDecimal(y)).doubleValue$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Float, y: Float): Float = (BigDecimal(x) \/ BigDecimal(y)).floatValue$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Int, y: Int): Int = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Long, y: Long): Long = x \/ y$/;"	m
quot	scala/math/Numeric.scala	/^    def quot(x: Short, y: Short): Short = (x \/ y).toShort$/;"	m
quoteReplacement	scala/util/matching/Regex.scala	/^  def quoteReplacement(text: String): String = Matcher quoteReplacement text$/;"	m
quoteString	scala/util/parsing/json/Parser.scala	/^  def quoteString (s : String) : String =$/;"	m
quoted	scala/xml/dtd/ExternalID.scala	/^  def quoted(s: String) = {$/;"	m
quotedPublicLiteral	scala/xml/dtd/ExternalID.scala	/^    lazy val quotedPublicLiteral = quoted(publicId)$/;"	V
quotedSystemLiteral	scala/xml/dtd/ExternalID.scala	/^    lazy val quotedSystemLiteral = quoted(systemId)$/;"	V
r	scala/collection/BitSetLike.scala	/^      if (hasNext) { val r = current; current += 1; r }$/;"	V
r	scala/collection/Iterator.scala	/^    val r = new PartitionIterator(!p(_))$/;"	V
r	scala/collection/SeqLike.scala	/^      var r = n$/;"	v
r	scala/collection/concurrent/TrieMap.scala	/^    val r = RDCSS_READ_ROOT()$/;"	V
r	scala/collection/concurrent/TrieMap.scala	/^    val r = \/*READ*\/root$/;"	V
r	scala/collection/concurrent/TrieMap.scala	/^    val r = ct.RDCSS_READ_ROOT()$/;"	V
r	scala/collection/concurrent/TrieMap.scala	/^    var r: (K, V) = null$/;"	v
r	scala/collection/convert/Wrappers.scala	/^      val r = underlying remove k$/;"	V
r	scala/collection/convert/Wrappers.scala	/^      val r = underlying.put(k, v)$/;"	V
r	scala/collection/convert/Wrappers.scala	/^      val r = underlying.putIfAbsent(k, v)$/;"	V
r	scala/collection/generic/IsTraversableOnce.scala	/^ *    class FilterMapImpl[A, Repr](val r: GenTraversableOnce[A]) {$/;"	V
r	scala/collection/immutable/Stream.scala	/^      val r = Stream.consWrapper(result).#::(these.head)$/;"	V
r	scala/collection/immutable/StringLike.scala	/^  def r(groupNames: String*): Regex = new Regex(toString, groupNames: _*)$/;"	m
r	scala/collection/immutable/StringLike.scala	/^  def r: Regex = r()$/;"	m
r	scala/collection/mutable/AVLTree.scala	/^      val r: Node[A] = right.asInstanceOf[Node[A]]$/;"	V
r	scala/collection/mutable/MapLike.scala	/^    val r = get(key)$/;"	V
r	scala/collection/mutable/SetLike.scala	/^    val r = contains(elem)$/;"	V
r	scala/collection/mutable/UnrolledBuffer.scala	/^        val r = array(idx)$/;"	V
r	scala/collection/mutable/UnrolledBuffer.scala	/^      val r = node.array(pos)$/;"	V
r	scala/collection/parallel/ParIterableLike.scala	/^    val r = tasksupport.executeAndWaitResult(new GroupBy(f, () => HashMapCombiner[K, T], splitter) mapResult {$/;"	V
r	scala/collection/parallel/ParSeqLike.scala	/^      val r = pit.indexWhere(pred)$/;"	V
r	scala/collection/parallel/ParSeqLike.scala	/^      val r = pit.lastIndexWhere(pred)$/;"	V
r	scala/collection/parallel/RemainsIterator.scala	/^    var r = next$/;"	v
r	scala/collection/parallel/RemainsIterator.scala	/^    var r = z$/;"	v
r	scala/collection/parallel/RemainsIterator.scala	/^    var r: U = next$/;"	v
r	scala/collection/parallel/RemainsIterator.scala	/^    var r: U = num.one$/;"	v
r	scala/collection/parallel/RemainsIterator.scala	/^    var r: U = num.zero$/;"	v
r	scala/collection/parallel/immutable/ParHashMap.scala	/^      val r = triter.next$/;"	V
r	scala/collection/parallel/immutable/ParRange.scala	/^      val r = range.apply(ind)$/;"	V
r	scala/collection/parallel/immutable/ParRange.scala	/^      val r = rangeleft.reduceLeft(op)$/;"	V
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = foldLeft_quick(arr, until, op, z)$/;"	V
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = indexWhere_quick(pred, arr, until, i)$/;"	V
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = lastIndexWhere_quick(pred, arr, i, until)$/;"	V
r	scala/collection/parallel/mutable/ParArray.scala	/^      val r = prefixLength_quick(pred, arr, until, i)$/;"	V
r	scala/collection/parallel/mutable/ParArray.scala	/^      var r: Option[T] = None$/;"	v
r	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val r = itertable(idx).asInstanceOf[T]$/;"	V
r	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val r = in.gcasRead(ctrie)$/;"	V
r	scala/collection/parallel/package.scala	/^      val r = buffer(index)$/;"	V
r	scala/util/Either.scala	/^   * val r = Right(Vector(1)): Either[List[Int], Vector[Int]]$/;"	V
r	scala/util/Either.scala	/^   * val r: Either[Int, String] = l.swap \/\/ Result: Right("left")$/;"	V
r	scala/util/Either.scala	/^ *  val r: Either[String, Int] = Right(12)$/;"	V
r	scala/util/parsing/ast/Binders.scala	/^      val r = result$/;"	V
r	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class MemoEntry[+T](var r: Either[LR,ParseResult[_]]){$/;"	v
r	scala/util/parsing/combinator/Parsers.scala	/^    val r = p(in)$/;"	V
r	scala/util/parsing/input/Reader.scala	/^    var r: Reader[T] = this$/;"	v
r	scala/util/regexp/Base.scala	/^    def r = r1$/;"	m
r	scala/xml/dtd/ContentModel.scala	/^  def r: ContentModel.RegExp$/;"	m
r	scala/xml/include/sax/Main.scala	/^          val r = Class.forName(args(1)).newInstance().asInstanceOf[EntityResolver]$/;"	V
r1	scala/collection/immutable/NumericRange.scala	/^ *     val r1 = new Range(0, 100, 1)$/;"	V
r1	scala/collection/immutable/Range.scala	/^ *     val r1 = 0 until 10$/;"	V
r1	scala/util/automata/Inclusion.scala	/^        val r1 = dfa1.next(q1,letter)$/;"	V
r2	scala/collection/immutable/NumericRange.scala	/^ *     val r2 = Range.Long(veryBig, veryBig + 100, 1)$/;"	V
r2	scala/collection/immutable/Range.scala	/^ *     val r2 = r1.start until r1.end by r1.step + 1$/;"	V
r2	scala/util/automata/Inclusion.scala	/^        val r2 = dfa2.next(q2,letter)$/;"	V
random	scala/math/package.scala	/^  def random: Double = java.lang.Math.random()$/;"	m
range	scala/Array.scala	/^  def range(start: Int, end: Int): Array[Int] = range(start, end, 1)$/;"	m
range	scala/Array.scala	/^  def range(start: Int, end: Int, step: Int): Array[Int] = {$/;"	m
range	scala/collection/Iterator.scala	/^  def range(start: Int, end: Int): Iterator[Int] = range(start, end, 1)$/;"	m
range	scala/collection/Iterator.scala	/^  def range(start: Int, end: Int, step: Int): Iterator[Int] = new AbstractIterator[Int] {$/;"	m
range	scala/collection/generic/GenTraversableFactory.scala	/^  def range[T: Integral](start: T, end: T): CC[T] = range(start, end, implicitly[Integral[T]].one)$/;"	m
range	scala/collection/generic/GenTraversableFactory.scala	/^  def range[T: Integral](start: T, end: T, step: T): CC[T] = {$/;"	m
range	scala/collection/generic/Sorted.scala	/^  def range(from: K, until: K): This = rangeImpl(Some(from), Some(until))$/;"	m
range	scala/collection/immutable/List.scala	/^  def range(start: Int, end: Int, step: Int => Int): List[Int] = {$/;"	m
range	scala/collection/immutable/RedBlack.scala	/^    def range(from: Option[A], until: Option[A]): Tree[B] = blacken(rng(from, until))$/;"	m
range	scala/collection/immutable/RedBlackTree.scala	/^  def range[A: Ordering, B](tree: Tree[A, B], from: A, until: A): Tree[A, B] = blacken(doRange(tree, from, until))$/;"	m
range	scala/collection/parallel/immutable/ParRange.scala	/^class ParRange(val range: Range)$/;"	V
range	scala/concurrent/impl/ExecutionContextImpl.scala	/^    def range(floor: Int, desired: Int, ceiling: Int): Int =$/;"	m
range	scala/math/BigDecimal.scala	/^   * val range = partial by 0.01                \/\/ now a NumericRange$/;"	V
range2	scala/math/BigDecimal.scala	/^   * val range2 = BigDecimal(0) to 1.0 by 0.01  \/\/ all at once of course is fine too$/;"	V
rangeImpl	scala/Enumeration.scala	/^    def rangeImpl(from: Option[Value], until: Option[Value]): ValueSet =$/;"	m
rangeImpl	scala/collection/BitSetLike.scala	/^  def rangeImpl(from: Option[Int], until: Option[Int]): This = {$/;"	m
rangeImpl	scala/collection/SortedMapLike.scala	/^  def rangeImpl(from : Option[A], until : Option[A]) : This$/;"	m
rangeImpl	scala/collection/SortedSetLike.scala	/^  def rangeImpl(from: Option[A], until: Option[A]): This$/;"	m
rangeImpl	scala/collection/generic/Sorted.scala	/^  def rangeImpl(from: Option[K], until: Option[K]): This$/;"	m
rangeImpl	scala/collection/immutable/RedBlackTree.scala	/^  def rangeImpl[A: Ordering, B](tree: Tree[A, B], from: Option[A], until: Option[A]): Tree[A, B] = (from, until) match {$/;"	m
rank	scala/collection/immutable/RedBlackTree.scala	/^    val rank = count(tree.left) + 1$/;"	V
raw	scala/StringContext.scala	/^  def raw(args: Any*): String = standardInterpolator(identity, args)$/;"	m
re	scala/collection/immutable/StringLike.scala	/^    val re = separators.foldLeft("[")(_+escape(_)) + "]"$/;"	V
reachedEof	scala/xml/parsing/MarkupParser.scala	/^  var reachedEof: Boolean = false$/;"	v
read	scala/concurrent/Channel.scala	/^  def read: A = synchronized {$/;"	m
read	scala/concurrent/SyncChannel.scala	/^  def read: A = {$/;"	m
readASCIIEncoding	scala/xml/include/sax/EncodingHeuristics.scala	/^    def readASCIIEncoding: String = {$/;"	m
readBoolean	scala/Console.scala	/^  def readBoolean(): Boolean = {$/;"	m
readBoolean	scala/Predef.scala	/^  def readBoolean() = Console.readBoolean()$/;"	m
readByte	scala/Console.scala	/^  def readByte(): Byte = {$/;"	m
readByte	scala/Predef.scala	/^  def readByte() = Console.readByte()$/;"	m
readChar	scala/Console.scala	/^  def readChar(): Char = {$/;"	m
readChar	scala/Predef.scala	/^  def readChar() = Console.readChar()$/;"	m
readDouble	scala/Console.scala	/^  def readDouble(): Double = {$/;"	m
readDouble	scala/Predef.scala	/^  def readDouble() = Console.readDouble()$/;"	m
readEncodingFromStream	scala/xml/include/sax/EncodingHeuristics.scala	/^  def readEncodingFromStream(in: InputStream): String = {$/;"	m
readFloat	scala/Console.scala	/^  def readFloat(): Float = {$/;"	m
readFloat	scala/Predef.scala	/^  def readFloat() = Console.readFloat()$/;"	m
readInt	scala/Console.scala	/^  def readInt(): Int = {$/;"	m
readInt	scala/Predef.scala	/^  def readInt() = Console.readInt()$/;"	m
readLine	scala/Console.scala	/^  def readLine(): String = in.readLine()$/;"	m
readLine	scala/Console.scala	/^  def readLine(text: String, args: Any*): String = {$/;"	m
readLine	scala/Predef.scala	/^  def readLine(): String = Console.readLine()$/;"	m
readLine	scala/Predef.scala	/^  def readLine(text: String, args: Any*) = Console.readLine(text, args: _*)$/;"	m
readLong	scala/Console.scala	/^  def readLong(): Long = {$/;"	m
readLong	scala/Predef.scala	/^  def readLong() = Console.readLong()$/;"	m
readNat	scala/io/BytePickle.scala	/^      def readNat: Int = {$/;"	m
readOnly	scala/collection/mutable/BufferLike.scala	/^  def readOnly: scala.collection.Seq[A] = toSeq$/;"	m
readOnly	scala/collection/mutable/Map.scala	/^  def readOnly : scala.collection.Map[A, B] = new scala.collection.Map[A, B] {$/;"	m
readReq	scala/concurrent/SyncChannel.scala	/^        val readReq  = pendingReads.head$/;"	V
readReq	scala/concurrent/SyncChannel.scala	/^    val readReq = new SyncVar[A]$/;"	V
readRoot	scala/collection/concurrent/TrieMap.scala	/^  def readRoot(abort: Boolean = false): INode[K, V] = RDCSS_READ_ROOT(abort)$/;"	m
readShort	scala/Console.scala	/^  def readShort(): Short = {$/;"	m
readShort	scala/Predef.scala	/^  def readShort() = Console.readShort()$/;"	m
reader	scala/io/BufferedSource.scala	/^  def reader() = new InputStreamReader(inputStream, codec.decoder)$/;"	m
reader	scala/sys/process/BasicIO.scala	/^    val reader = new BufferedReader(new InputStreamReader(in))$/;"	V
reader	scala/xml/include/sax/XIncludeFilter.scala	/^      val reader = new InputStreamReader(in, encoding)$/;"	V
reader	scala/xml/pull/package.scala	/^ * scala> val reader = new XMLEventReader(source)$/;"	V
readf	scala/Console.scala	/^  def readf(format: String): List[Any] = {$/;"	m
readf	scala/Predef.scala	/^  def readf(format: String) = Console.readf(format)$/;"	m
readf1	scala/Console.scala	/^  def readf1(format: String): Any = readf(format).head$/;"	m
readf1	scala/Predef.scala	/^  def readf1(format: String) = Console.readf1(format)$/;"	m
readf2	scala/Console.scala	/^  def readf2(format: String): (Any, Any) = {$/;"	m
readf2	scala/Predef.scala	/^  def readf2(format: String) = Console.readf2(format)$/;"	m
readf3	scala/Console.scala	/^  def readf3(format: String): (Any, Any, Any) = {$/;"	m
readf3	scala/Predef.scala	/^  def readf3(format: String) = Console.readf3(format)$/;"	m
ready	scala/concurrent/Awaitable.scala	/^  def ready(atMost: Duration)(implicit permit: CanAwait): this.type$/;"	m
ready	scala/concurrent/impl/Promise.scala	/^    def ready(atMost: Duration)(implicit permit: CanAwait): this.type = this$/;"	m
ready	scala/concurrent/impl/Promise.scala	/^    def ready(atMost: Duration)(implicit permit: CanAwait): this.type =$/;"	m
ready	scala/concurrent/package.scala	/^    def ready[T](awaitable: Awaitable[T], atMost: Duration): awaitable.type =$/;"	m
realfrom	scala/collection/parallel/ParSeqLike.scala	/^    val realfrom = if (from < 0) 0 else from$/;"	V
realreplaced	scala/collection/parallel/ParSeqLike.scala	/^    val realreplaced = replaced min (length - from)$/;"	V
rebalance	scala/collection/mutable/AVLTree.scala	/^  def rebalance[B >: A]: AVLTree[B] = this$/;"	m
rec_remove	scala/collection/concurrent/TrieMap.scala	/^  def rec_remove(k: K, v: V, hc: Int, lev: Int, parent: INode[K, V], startgen: Gen, ct: TrieMap[K, V]): Option[V] = {$/;"	m
recalculate	scala/collection/generic/SliceInterval.scala	/^  def recalculate(_from: Int, _until: Int): SliceInterval = {$/;"	m
recalculate	scala/collection/generic/SliceInterval.scala	/^  def recalculate(interval: SliceInterval): SliceInterval =$/;"	m
receiver	scala/runtime/MethodCache.scala	/^  private[this] val receiver: JClass[_],$/;"	V
recover	scala/concurrent/Future.scala	/^  def recover[U >: T](pf: PartialFunction[Throwable, U])(implicit executor: ExecutionContext): Future[U] = {$/;"	m
recover	scala/util/Try.scala	/^  def recover[U >: T](f: PartialFunction[Throwable, U]): Try[U]$/;"	m
recover	scala/util/Try.scala	/^  def recover[U >: T](rescueException: PartialFunction[Throwable, U]): Try[U] = this$/;"	m
recover	scala/util/Try.scala	/^  def recover[U >: T](rescueException: PartialFunction[Throwable, U]): Try[U] =$/;"	m
recoverWith	scala/concurrent/Future.scala	/^  def recoverWith[U >: T](pf: PartialFunction[Throwable, Future[U]])(implicit executor: ExecutionContext): Future[U] = {$/;"	m
recoverWith	scala/util/Try.scala	/^  def recoverWith[U >: T](f: PartialFunction[Throwable, Try[U]]): Try[U] = this$/;"	m
recoverWith	scala/util/Try.scala	/^  def recoverWith[U >: T](f: PartialFunction[Throwable, Try[U]]): Try[U] =$/;"	m
recoverWith	scala/util/Try.scala	/^  def recoverWith[U >: T](f: PartialFunction[Throwable, Try[U]]): Try[U]$/;"	m
recursionHeads	scala/util/parsing/combinator/PackratParsers.scala	/^      override private[PackratParsers] val recursionHeads = outer.recursionHeads$/;"	V
recursionHeads	scala/util/parsing/combinator/PackratParsers.scala	/^    private[PackratParsers] val recursionHeads: mutable.HashMap[Position, Head] = mutable.HashMap.empty$/;"	V
red	scala/collection/immutable/RedBlackTree.scala	/^    def red: Tree[A, B]$/;"	m
reduce	scala/collection/GenTraversableOnce.scala	/^  def reduce[A1 >: A](op: (A1, A1) => A1): A1$/;"	m
reduce	scala/collection/TraversableOnce.scala	/^  def reduce[A1 >: A](op: (A1, A1) => A1): A1 = reduceLeft(op)$/;"	m
reduce	scala/collection/parallel/ParIterableLike.scala	/^  def reduce[U >: T](op: (U, U) => U): U = {$/;"	m
reduce	scala/concurrent/Future.scala	/^  def reduce[T, R >: T](futures: TraversableOnce[Future[T]])(op: (R, T) => R)(implicit executor: ExecutionContext): Future[R] = {$/;"	m
reduceLeft	scala/collection/IndexedSeqOptimized.scala	/^  def reduceLeft[B >: A](op: (B, A) => B): B =$/;"	m
reduceLeft	scala/collection/LinearSeqOptimized.scala	/^  def reduceLeft[B >: A](f: (B, A) => B): B =$/;"	m
reduceLeft	scala/collection/TraversableOnce.scala	/^  def reduceLeft[B >: A](op: (B, A) => B): B = {$/;"	m
reduceLeft	scala/collection/parallel/ParIterableLike.scala	/^  def reduceLeft[U >: T](op: (U, T) => U): U = seq.reduceLeft(op)$/;"	m
reduceLeft	scala/collection/parallel/RemainsIterator.scala	/^  def reduceLeft[U >: T](howmany: Int, op: (U, U) => U): U = {$/;"	m
reduceLeftOption	scala/collection/GenTraversableOnce.scala	/^  def reduceLeftOption[B >: A](op: (B, A) => B): Option[B]$/;"	m
reduceLeftOption	scala/collection/TraversableOnce.scala	/^  def reduceLeftOption[B >: A](op: (B, A) => B): Option[B] =$/;"	m
reduceLeftOption	scala/collection/parallel/ParIterableLike.scala	/^  def reduceLeftOption[U >: T](op: (U, T) => U): Option[U] = seq.reduceLeftOption(op)$/;"	m
reduceOption	scala/collection/GenTraversableOnce.scala	/^  def reduceOption[A1 >: A](op: (A1, A1) => A1): Option[A1]$/;"	m
reduceOption	scala/collection/TraversableOnce.scala	/^  def reduceOption[A1 >: A](op: (A1, A1) => A1): Option[A1] = reduceLeftOption(op)$/;"	m
reduceOption	scala/collection/parallel/ParIterableLike.scala	/^  def reduceOption[U >: T](op: (U, U) => U): Option[U] = if (isEmpty) None else Some(reduce(op))$/;"	m
reduceRight	scala/collection/GenTraversableOnce.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B$/;"	m
reduceRight	scala/collection/IndexedSeqOptimized.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B =$/;"	m
reduceRight	scala/collection/LinearSeqOptimized.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B =$/;"	m
reduceRight	scala/collection/TraversableOnce.scala	/^  def reduceRight[B >: A](op: (A, B) => B): B = {$/;"	m
reduceRight	scala/collection/parallel/ParIterableLike.scala	/^  def reduceRight[U >: T](op: (T, U) => U): U = seq.reduceRight(op)$/;"	m
reduceRightOption	scala/collection/GenTraversableOnce.scala	/^  def reduceRightOption[B >: A](op: (A, B) => B): Option[B]$/;"	m
reduceRightOption	scala/collection/TraversableOnce.scala	/^  def reduceRightOption[B >: A](op: (A, B) => B): Option[B] =$/;"	m
reduceRightOption	scala/collection/parallel/ParIterableLike.scala	/^  def reduceRightOption[U >: T](op: (T, U) => U): Option[U] = seq.reduceRightOption(op)$/;"	m
reduceToSize	scala/collection/mutable/ResizableArray.scala	/^  def reduceToSize(sz: Int) {$/;"	m
reduceWith	scala/collection/mutable/ArrayStack.scala	/^  def reduceWith(f: (T, T) => T): Unit = while(size > 1) combine(f)$/;"	m
reducedRes	scala/collection/immutable/Stream.scala	/^      var reducedRes: B = this.head$/;"	v
ref	scala/concurrent/Future.scala	/^      val ref = new AtomicInteger(futures.size)$/;"	V
ref	scala/xml/Utility.scala	/^          val ref = rfb.toString()$/;"	V
refDef	scala/io/BytePickle.scala	/^  def refDef: PU[RefDef] = new PU[RefDef] {$/;"	m
reference	scala/Symbol.scala	/^        val reference = map get name$/;"	V
reference	scala/math/Equiv.scala	/^  def reference[T <: AnyRef] : Equiv[T] = new Equiv[T] {$/;"	m
referenceToMacroImpl	scala/reflect/macros/internal/macroImpl.scala	/^private[scala] class macroImpl(val referenceToMacroImpl: Any) extends scala.annotation.StaticAnnotation$/;"	V
reflect	scala/reflect/ClassTag.scala	/^package reflect$/;"	p
reflect	scala/reflect/NameTransformer.scala	/^package reflect$/;"	p
reflectiveCalls	scala/language.scala	/^  implicit lazy val reflectiveCalls: reflectiveCalls = languageFeature.reflectiveCalls$/;"	V
reflectiveCalls	scala/languageFeature.scala	/^  object reflectiveCalls extends reflectiveCalls$/;"	o
regexp	scala/xml/dtd/ContentModelParser.scala	/^  def regexp: RegExp = {$/;"	m
regexp	scala/xml/include/sax/EncodingHeuristics.scala	/^      val regexp = """(?m).*?encoding\\s*=\\s*["'](.+?)['"]""".r$/;"	V
reify	scala/util/continuations/package.scala	/^  def reify[A,B,C](ctx: =>(A @cpsParam[B,C])): ControlContext[A,B,C] = {$/;"	m
reifyR	scala/util/continuations/package.scala	/^  def reifyR[A,B,C](ctx: => ControlContext[A,B,C]): ControlContext[A,B,C] = {$/;"	m
release	scala/concurrent/Lock.scala	/^  def release() = synchronized {$/;"	m
releaseVersion	scala/util/Properties.scala	/^  val releaseVersion = $/;"	V
rem	scala/collection/concurrent/TrieMap.scala	/^      val rem = stack(d).length - 1 - stackpos(d)$/;"	V
rem	scala/collection/parallel/immutable/ParVector.scala	/^      val rem = remaining$/;"	V
rem	scala/math/Integral.scala	/^  def rem(x: T, y: T): T$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: BigDecimal, y: BigDecimal): BigDecimal = x remainder y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: BigInt, y: BigInt): BigInt = x % y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Byte, y: Byte): Byte = (x % y).toByte$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Char, y: Char): Char = (x % y).toChar$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Double, y: Double): Double = (BigDecimal(x) remainder BigDecimal(y)).doubleValue$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Float, y: Float): Float = (BigDecimal(x) remainder BigDecimal(y)).floatValue$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Int, y: Int): Int = x % y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Long, y: Long): Long = x % y$/;"	m
rem	scala/math/Numeric.scala	/^    def rem(x: Short, y: Short): Short = (x % y).toShort$/;"	m
rem	scala/text/Document.scala	/^      var rem = n$/;"	v
remainder	scala/collection/Iterator.scala	/^ *      val remainder = it.drop(2) \/\/ it is *not* safe to use "it" again after this line!$/;"	V
remainder	scala/collection/immutable/NumericRange.scala	/^      val remainder = num.rem(diff, step)$/;"	V
remainder	scala/math/BigDecimal.scala	/^  def remainder (that: BigDecimal): BigDecimal = this.bigDecimal.remainder(that.bigDecimal)$/;"	m
remaining	scala/collection/Iterator.scala	/^      private var remaining = until - lo$/;"	v
remaining	scala/collection/parallel/ParMapLike.scala	/^      def remaining = iter.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = if (curr eq self) curr.remaining + that.remaining else curr.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = self.remaining max that.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = self.remaining min that.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = self.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    def remaining = trio.remaining$/;"	m
remaining	scala/collection/parallel/RemainsIterator.scala	/^    var remaining = taken min self.remaining$/;"	v
remaining	scala/collection/parallel/RemainsIterator.scala	/^  def remaining: Int$/;"	m
remaining	scala/collection/parallel/immutable/ParHashMap.scala	/^    def remaining = sz - i$/;"	m
remaining	scala/collection/parallel/immutable/ParHashSet.scala	/^    def remaining = sz - i$/;"	m
remaining	scala/collection/parallel/immutable/ParVector.scala	/^    def remaining: Int = remainingElementCount$/;"	m
remaining	scala/collection/parallel/immutable/package.scala	/^      def remaining = until - i$/;"	m
remaining	scala/collection/parallel/mutable/ParArray.scala	/^    def remaining = until - i$/;"	m
remaining	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def remaining = totalsize - traversed$/;"	m
remaining	scala/collection/parallel/mutable/ParHashTable.scala	/^    def remaining = totalsize - traversed$/;"	m
remaining	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def remaining: Int = totalsize - iterated$/;"	m
remaining	scala/collection/parallel/package.scala	/^    def remaining = until - index$/;"	m
remaining	scala/concurrent/Future.scala	/^                    val remaining = _tasksLocal.get$/;"	V
remote	scala/package.scala	/^  type remote = annotation.remote$/;"	T
remote	scala/remote.scala	/^class remote extends scala.annotation.StaticAnnotation {}$/;"	c
remove	scala/collection/concurrent/Map.scala	/^  def remove(k: A, v: B): Boolean$/;"	m
remove	scala/collection/concurrent/TrieMap.scala	/^  def remove(k: K, v: V): Boolean = {$/;"	m
remove	scala/collection/convert/Wrappers.scala	/^      def remove = prev match {$/;"	m
remove	scala/collection/convert/Wrappers.scala	/^    def remove() = throw new UnsupportedOperationException$/;"	m
remove	scala/collection/convert/Wrappers.scala	/^    def remove(i: Int) = underlying.remove(i)$/;"	m
remove	scala/collection/convert/Wrappers.scala	/^    def remove(k: A, v: B): Boolean = underlying.remove(k, v)$/;"	m
remove	scala/collection/convert/Wrappers.scala	/^    def remove(k: AnyRef, v: AnyRef) = try {$/;"	m
remove	scala/collection/mutable/AVLTree.scala	/^  def remove[B >: A](value: B, ordering: Ordering[B]): AVLTree[A] =$/;"	m
remove	scala/collection/mutable/ArrayBuffer.scala	/^  def remove(n: Int): A = {$/;"	m
remove	scala/collection/mutable/BufferLike.scala	/^  def remove(n: Int): A$/;"	m
remove	scala/collection/mutable/BufferLike.scala	/^  def remove(n: Int, count: Int) {$/;"	m
remove	scala/collection/mutable/BufferProxy.scala	/^  def remove(n: Int): A = self.remove(n)$/;"	m
remove	scala/collection/mutable/ConcurrentMap.scala	/^  def remove(k: A, v: B): Boolean$/;"	m
remove	scala/collection/mutable/DoubleLinkedListLike.scala	/^  def remove(): Unit = if (nonEmpty) {$/;"	m
remove	scala/collection/mutable/ListBuffer.scala	/^  def remove(n: Int): A = {$/;"	m
remove	scala/collection/mutable/MapLike.scala	/^  def remove(key: A): Option[B] = {$/;"	m
remove	scala/collection/mutable/SetLike.scala	/^  def remove(elem: A): Boolean = {$/;"	m
remove	scala/collection/mutable/UnrolledBuffer.scala	/^  def remove(idx: Int) =$/;"	m
remove	scala/collection/parallel/mutable/ParHashMap.scala	/^  def remove(key: K): Option[V] = {$/;"	m
remove	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def remove(key: K): Option[V] = ctrie.remove(key)$/;"	m
remove	scala/ref/ReferenceQueue.scala	/^  def remove(timeout: Long): Option[Reference[T]] = Wrapper(underlying.remove(timeout))$/;"	m
remove	scala/ref/ReferenceQueue.scala	/^  def remove: Option[Reference[T]] = Wrapper(underlying.remove)$/;"	m
remove	scala/sys/ShutdownHookThread.scala	/^  def remove() = runtime removeShutdownHook this$/;"	m
remove	scala/xml/Attribute.scala	/^  def remove(key: String) =$/;"	m
remove	scala/xml/Attribute.scala	/^  def remove(namespace: String, scope: NamespaceBinding, key: String) =$/;"	m
remove	scala/xml/MetaData.scala	/^  def remove(key: String): MetaData$/;"	m
remove	scala/xml/MetaData.scala	/^  def remove(namespace: String, scope: NamespaceBinding, key: String): MetaData$/;"	m
remove	scala/xml/Null.scala	/^  def remove(key: String) = this$/;"	m
remove	scala/xml/Null.scala	/^  def remove(namespace: String, scope: NamespaceBinding, key: String) = this$/;"	m
removeBinding	scala/collection/mutable/MultiMap.scala	/^  def removeBinding(key: A, value: B): this.type = {$/;"	m
removeDuplicates	scala/collection/immutable/List.scala	/^  def removeDuplicates: List[A] = distinct$/;"	m
removeMax	scala/collection/mutable/AVLTree.scala	/^  def removeMax[B >: A]: (B, AVLTree[B]) = sys.error("Should not happen.")$/;"	m
removeMin	scala/collection/mutable/AVLTree.scala	/^  def removeMin[B >: A]: (B, AVLTree[B]) = sys.error("Should not happen.")$/;"	m
removeSubscription	scala/collection/mutable/Publisher.scala	/^  def removeSubscription(sub: Sub) { filters -= sub }$/;"	m
removed	scala/collection/concurrent/TrieMap.scala	/^  def removed(k: K, ct: TrieMap[K, V]): MainNode[K, V] = {$/;"	m
removedAt	scala/collection/concurrent/TrieMap.scala	/^  def removedAt(pos: Int, flag: Int, gen: Gen) = {$/;"	m
remvector	scala/collection/parallel/immutable/ParVector.scala	/^      var remvector = remainingVector$/;"	v
renewed	scala/collection/concurrent/TrieMap.scala	/^  def renewed(ngen: Gen, ct: TrieMap[K, V]) = {$/;"	m
rep	scala/util/parsing/combinator/Parsers.scala	/^  def rep[T](p: => Parser[T]): Parser[List[T]] = rep1(p) | success(List())$/;"	m
rep1	scala/util/parsing/combinator/Parsers.scala	/^  def rep1[T](first: => Parser[T], p0: => Parser[T]): Parser[List[T]] = Parser { in =>$/;"	m
rep1	scala/util/parsing/combinator/Parsers.scala	/^  def rep1[T](p: => Parser[T]): Parser[List[T]] = rep1(p, p)$/;"	m
rep1sep	scala/util/parsing/combinator/Parsers.scala	/^  def rep1sep[T](p : => Parser[T], q : => Parser[Any]): Parser[List[T]] =$/;"	m
repN	scala/util/parsing/combinator/Parsers.scala	/^  def repN[T](num: Int, p: => Parser[T]): Parser[List[T]] =$/;"	m
repetition	scala/collection/parallel/immutable/package.scala	/^  def repetition[T](elem: T, len: Int) = new Repetition(elem, len)$/;"	m
repl	scala/collection/parallel/ParSeqLike.scala	/^    val repl = (r min (length - from)) max 0$/;"	V
repl	scala/util/matching/Regex.scala	/^   * val repl = datePattern replaceAllIn (text, m => m.group("month")+"\/"+m.group("day"))$/;"	V
repl	scala/util/matching/Regex.scala	/^   * val repl = varPattern replaceSomeIn (text, mapper)$/;"	V
replStringOf	scala/runtime/ScalaRunTime.scala	/^  def replStringOf(arg: Any, maxElements: Int): String = {$/;"	m
replace	scala/collection/concurrent/Map.scala	/^  def replace(k: A, oldvalue: B, newvalue: B): Boolean$/;"	m
replace	scala/collection/concurrent/Map.scala	/^  def replace(k: A, v: B): Option[B]$/;"	m
replace	scala/collection/concurrent/TrieMap.scala	/^  def replace(k: K, oldvalue: V, newvalue: V): Boolean = {$/;"	m
replace	scala/collection/concurrent/TrieMap.scala	/^  def replace(k: K, v: V): Option[V] = {$/;"	m
replace	scala/collection/convert/Wrappers.scala	/^    def replace(k: A, oldval: B, newval: B) = underlying.replace(k, oldval, newval)$/;"	m
replace	scala/collection/convert/Wrappers.scala	/^    def replace(k: A, oldvalue: B, newvalue: B): Boolean =$/;"	m
replace	scala/collection/convert/Wrappers.scala	/^    def replace(k: A, v: B): B = underlying.replace(k, v) match {$/;"	m
replace	scala/collection/convert/Wrappers.scala	/^    def replace(k: A, v: B): Option[B] = {$/;"	m
replace	scala/collection/mutable/ConcurrentMap.scala	/^  def replace(k: A, oldvalue: B, newvalue: B): Boolean$/;"	m
replace	scala/collection/mutable/ConcurrentMap.scala	/^  def replace(k: A, v: B): Option[B]$/;"	m
replace	scala/collection/mutable/StringBuilder.scala	/^  def replace(start: Int, end: Int, str: String): StringBuilder = {$/;"	m
replace	scala/util/matching/Regex.scala	/^    def replace(rs: String) = matcher.appendReplacement(sb, rs)$/;"	m
replaceAllIn	scala/util/matching/Regex.scala	/^  def replaceAllIn(target: java.lang.CharSequence, replacement: String): String = {$/;"	m
replaceAllIn	scala/util/matching/Regex.scala	/^  def replaceAllIn(target: java.lang.CharSequence, replacer: Match => String): String = {$/;"	m
replaceAllLiterally	scala/collection/immutable/StringLike.scala	/^  def replaceAllLiterally(literal: String, replacement: String): String = {$/;"	m
replaceFirstIn	scala/util/matching/Regex.scala	/^  def replaceFirstIn(target: java.lang.CharSequence, replacement: String): String = {$/;"	m
replaceSomeIn	scala/util/matching/Regex.scala	/^  def replaceSomeIn(target: java.lang.CharSequence, replacer: Match => Option[String]): String = {$/;"	m
replaced	scala/collection/GenSeqViewLike.scala	/^    protected[this] val replaced: Int$/;"	V
replaced	scala/collection/SeqViewLike.scala	/^    val replaced = _replaced$/;"	V
replaced	scala/collection/parallel/ParSeqViewLike.scala	/^    val replaced = _replaced$/;"	V
replaced	scala/util/matching/Regex.scala	/^    def replaced = {$/;"	m
replacementText	scala/xml/parsing/MarkupHandler.scala	/^  def replacementText(entityName: String): Source =$/;"	m
report	scala/io/Source.scala	/^  def report(pos: Int, msg: String, out: PrintStream) {$/;"	m
report	scala/util/Either.scala	/^   * val report =$/;"	V
reportFailure	scala/concurrent/ExecutionContext.scala	/^  def reportFailure(t: Throwable): Unit$/;"	m
reportFailure	scala/concurrent/impl/ExecutionContextImpl.scala	/^  def reportFailure(t: Throwable) = reporter(t)$/;"	m
reportSyntaxError	scala/xml/factory/Binder.scala	/^  def reportSyntaxError(pos:Int, str:String) = {}$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupHandler.scala	/^  def reportSyntaxError(pos: Int, str: String): Unit$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParser.scala	/^  def reportSyntaxError(pos: Int, str: String) { curInput.reportError(pos, str) }$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParser.scala	/^  def reportSyntaxError(str: String) { reportSyntaxError(pos, str) }$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParserCommon.scala	/^  def reportSyntaxError(pos: Int, str: String): Unit$/;"	m
reportSyntaxError	scala/xml/parsing/MarkupParserCommon.scala	/^  def reportSyntaxError(str: String): Unit$/;"	m
reportValidationError	scala/xml/parsing/MarkupParser.scala	/^  def reportValidationError(pos: Int, str: String) { reportSyntaxError(pos, str) }$/;"	m
reportValidationError	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  def reportValidationError(pos: Int, str: String): Unit$/;"	m
repr	scala/collection/GenTraversableLike.scala	/^  def repr: Repr$/;"	m
repr	scala/collection/TraversableLike.scala	/^  def repr: Repr = this.asInstanceOf[Repr]$/;"	m
repr	scala/collection/immutable/StringOps.scala	/^final class StringOps(override val repr: String) extends AnyVal with StringLike[String] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^  final class ofRef[T <: AnyRef](override val repr: Array[T]) extends AnyVal with ArrayOps[T] with ArrayLike[T, Array[T]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofBoolean(override val repr: Array[Boolean]) extends AnyVal with ArrayOps[Boolean] with ArrayLike[Boolean, Array[Boolean]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofByte(override val repr: Array[Byte]) extends AnyVal with ArrayOps[Byte] with ArrayLike[Byte, Array[Byte]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofChar(override val repr: Array[Char]) extends AnyVal with ArrayOps[Char] with ArrayLike[Char, Array[Char]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofDouble(override val repr: Array[Double]) extends AnyVal with ArrayOps[Double] with ArrayLike[Double, Array[Double]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofFloat(override val repr: Array[Float]) extends AnyVal with ArrayOps[Float] with ArrayLike[Float, Array[Float]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofInt(override val repr: Array[Int]) extends AnyVal with ArrayOps[Int] with ArrayLike[Int, Array[Int]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofLong(override val repr: Array[Long]) extends AnyVal with ArrayOps[Long] with ArrayLike[Long, Array[Long]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofShort(override val repr: Array[Short]) extends AnyVal with ArrayOps[Short] with ArrayLike[Short, Array[Short]] {$/;"	V
repr	scala/collection/mutable/ArrayOps.scala	/^final class ofUnit(override val repr: Array[Unit]) extends AnyVal with ArrayOps[Unit] with ArrayLike[Unit, Array[Unit]] {$/;"	V
repr	scala/collection/parallel/ParIterableLike.scala	/^  def repr: Repr = this.asInstanceOf[Repr]$/;"	m
repr	scala/collection/parallel/Tasks.scala	/^  def repr = this.asInstanceOf[Tp]$/;"	m
repsep	scala/util/parsing/combinator/Parsers.scala	/^  def repsep[T](p: => Parser[T], q: => Parser[Any]): Parser[List[T]] =$/;"	m
require	scala/Predef.scala	/^  def require(requirement: Boolean) {$/;"	m
requiresStrictSplitters	scala/collection/parallel/ParIterableLike.scala	/^    def requiresStrictSplitters = false$/;"	m
res	scala/Console.scala	/^    val res = readf(format)$/;"	V
res	scala/Console.scala	/^    var res: List[Any] = Nil$/;"	v
res	scala/Symbol.scala	/^        val res = cached()$/;"	V
res	scala/Symbol.scala	/^    val res = cached()$/;"	V
res	scala/collection/Iterator.scala	/^        val res = takeDestructively(count)$/;"	V
res	scala/collection/Iterator.scala	/^      val res = elem$/;"	V
res	scala/collection/Iterator.scala	/^    var res = false$/;"	v
res	scala/collection/Iterator.scala	/^    var res = true$/;"	v
res	scala/collection/Iterator.scala	/^    var res: Option[A] = None$/;"	v
res	scala/collection/MapLike.scala	/^    var res: This = repr$/;"	v
res	scala/collection/SeqLike.scala	/^      val res = buf.result$/;"	V
res	scala/collection/concurrent/TrieMap.scala	/^          val res = sub match {$/;"	V
res	scala/collection/concurrent/TrieMap.scala	/^    val res = lookuphc(k, hc)$/;"	V
res	scala/collection/concurrent/TrieMap.scala	/^    val res = r.rec_lookup(k, hc, 0, null, r.gen, this)$/;"	V
res	scala/collection/concurrent/TrieMap.scala	/^    val res = r.rec_remove(k, v, hc, 0, null, r.gen, this)$/;"	V
res	scala/collection/generic/IsTraversableLike.scala	/^ *        var res = mapper(iter.next())$/;"	v
res	scala/collection/immutable/List.scala	/^    var res: List[A] = Nil$/;"	v
res	scala/collection/immutable/ListMap.scala	/^        else { val res = (self.key, self.value); self = self.tail; res }$/;"	V
res	scala/collection/immutable/ListSet.scala	/^        val res = that.head$/;"	V
res	scala/collection/immutable/Vector.scala	/^    val res = display0(lo).asInstanceOf[A]$/;"	V
res	scala/collection/mutable/HashTable.scala	/^      val res = es$/;"	V
res	scala/collection/mutable/LinkedHashMap.scala	/^      if (hasNext) { val res = (cur.key, cur.value); cur = cur.later; res }$/;"	V
res	scala/collection/mutable/LinkedHashMap.scala	/^      if (hasNext) { val res = cur.key; cur = cur.later; res }$/;"	V
res	scala/collection/mutable/LinkedHashMap.scala	/^      if (hasNext) { val res = cur.value; cur = cur.later; res }$/;"	V
res	scala/collection/mutable/LinkedHashSet.scala	/^      if (hasNext) { val res = cur.key; cur = cur.later; res }$/;"	V
res	scala/collection/mutable/LinkedListLike.scala	/^      val res = elems.elem$/;"	V
res	scala/collection/mutable/OpenHashMap.scala	/^      val res = entry.value$/;"	V
res	scala/collection/mutable/OpenHashMap.scala	/^      val res = table(index).value$/;"	V
res	scala/collection/mutable/Queue.scala	/^        val res: Option[LinkedList[A]] = Some(cell.next)$/;"	V
res	scala/collection/mutable/Queue.scala	/^      val res = first0.elem$/;"	V
res	scala/collection/mutable/Queue.scala	/^      val res = new ArrayBuffer[A]$/;"	V
res	scala/collection/mutable/Queue.scala	/^      val res: Option[A] = Some(first0.elem)$/;"	V
res	scala/collection/mutable/Queue.scala	/^    var res: Option[A] = None$/;"	v
res	scala/collection/mutable/Stack.scala	/^    val res = elems.head$/;"	V
res	scala/collection/parallel/Combiner.scala	/^    val res = result$/;"	V
res	scala/collection/parallel/Combiner.scala	/^    val res = super.result$/;"	V
res	scala/collection/parallel/mutable/ParHashSet.scala	/^          val res = t.insertEntry(atPos, beforePos, elem.asInstanceOf[T])$/;"	V
res	scala/collection/parallel/mutable/ParHashSet.scala	/^      \/\/   val res = table.insertEntry(atPos, beforePos, elem.asInstanceOf[T])$/;"	V
res	scala/collection/parallel/mutable/ParHashTable.scala	/^      val res = es$/;"	V
res	scala/collection/script/Message.scala	/^    var res = "Script("$/;"	v
res	scala/io/BytePickle.scala	/^      val res = refDef.appU(state.stream)$/;"	V
res	scala/math/Ordering.scala	/^            val res = ord.compare(xe.next, ye.next)$/;"	V
res	scala/math/Ordering.scala	/^          val res = ord.compare(xe.next, ye.next)$/;"	V
res	scala/util/Random.scala	/^      val res = nextInt(surrogateStart - 1) + 1$/;"	V
res	scala/util/continuations/ControlContext.scala	/^            val res = f(x)$/;"	V
res	scala/util/continuations/ControlContext.scala	/^            val res: C1 = ctxR.foreachFull(k, thr) \/\/ => B1$/;"	V
res	scala/util/parsing/combinator/PackratParsers.scala	/^                val res = lrAnswer(p, inMem, base)$/;"	V
res	scala/xml/PrettyPrinter.scala	/^    var res: List[Item] = Nil$/;"	v
res	scala/xml/dtd/ContentModelParser.scala	/^          val res = MIXED(choiceRest(Eps));$/;"	V
res	scala/xml/parsing/MarkupParser.scala	/^    val res = handle.elem(pos, pre, local, aMap, scope, ts == NodeSeq.Empty, ts)$/;"	V
res	scala/xml/parsing/MarkupParser.scala	/^  protected def ch_returning_nextch: Char = { val res = ch; nextch(); res }$/;"	V
res	scala/xml/parsing/ValidatingMarkupHandler.scala	/^    val res = decl.contentModel.validate(ns);$/;"	V
res	scala/xml/persistent/CachedFileStorage.scala	/^    val res = ConstructingParser.fromSource(src,false).document.docElem(0)$/;"	V
res	scala/xml/pull/XMLEventReader.scala	/^    val res = buffer$/;"	V
res1	scala/util/parsing/combinator/Parsers.scala	/^        val res1 = Parser.this(in)$/;"	V
res2	scala/io/BytePickle.scala	/^          val res2 = pa.appU(new UnPicklerState(res._2, upe))$/;"	V
res2	scala/io/BytePickle.scala	/^          val res2 = unat.appU(res._2)  \/\/ read location$/;"	V
res2	scala/util/parsing/combinator/Parsers.scala	/^        val res2 = q(in)$/;"	V
resPa	scala/io/BytePickle.scala	/^      val resPa = pa.appU(s)$/;"	V
resarr	scala/collection/mutable/PriorityQueue.scala	/^  private val resarr = new ResizableArrayAccess[A]$/;"	V
reserved	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  val reserved = new mutable.HashSet[String]$/;"	V
reset	scala/io/Source.scala	/^  def reset(): Source =$/;"	m
reset	scala/util/continuations/package.scala	/^  def reset[A,C](ctx: =>(A @cpsParam[A,C])): C = {$/;"	m
reset0	scala/util/continuations/package.scala	/^  def reset0[A](ctx: =>(A @cpsParam[A,A])): A = reset(ctx)$/;"	m
resetAndRet	scala/xml/include/sax/EncodingHeuristics.scala	/^    def resetAndRet = { in.reset ; ret }$/;"	m
resetFn	scala/io/Source.scala	/^    val resetFn = if (reset == null) () => createBufferedSource(inputStream, bufferSize, reset, close)(codec) else reset$/;"	V
resetFunction	scala/io/Source.scala	/^  private[this] var resetFunction: () => Source = null$/;"	v
resolve	scala/collection/mutable/TreeSet.scala	/^  def resolve: TreeSet[A] = base.getOrElse(this)$/;"	m
resolveType	scala/util/parsing/json/JSON.scala	/^  def resolveType(input: Any): Any = input match {$/;"	m
resolved	scala/concurrent/impl/Promise.scala	/^      val resolved = resolveTry(value)$/;"	V
resolver	scala/xml/include/sax/Main.scala	/^    val resolver: Option[EntityResolver] =$/;"	V
resolver	scala/xml/include/sax/XIncludeFilter.scala	/^      val resolver = this.getEntityResolver()$/;"	V
respond	scala/Responder.scala	/^    def respond(k: A => Unit) = k(x)$/;"	m
respond	scala/Responder.scala	/^    def respond(k: A => Unit) {$/;"	m
respond	scala/Responder.scala	/^    def respond(k: B => Unit) {$/;"	m
respond	scala/Responder.scala	/^  def respond(k: A => Unit): Unit$/;"	m
rest	scala/collection/GenTraversableViewLike.scala	/^    protected[this] val rest: GenTraversable[B]$/;"	V
rest	scala/collection/IterableViewLike.scala	/^  protected override def newAppended[B >: A](that: GenTraversable[B]): Transformed[B] = new { val rest = that } with AbstractTransformed[B] with Appended[B]$/;"	V
rest	scala/collection/LinearSeqOptimized.scala	/^    val rest = drop(n)$/;"	V
rest	scala/collection/SeqViewLike.scala	/^  protected override def newAppended[B >: A](that: GenTraversable[B]): Transformed[B] = new { val rest = that } with AbstractTransformed[B] with Appended[B]$/;"	V
rest	scala/collection/TraversableViewLike.scala	/^  protected def newAppended[B >: A](that: GenTraversable[B]): Transformed[B] = new { val rest = that } with AbstractTransformed[B] with Appended[B]$/;"	V
rest	scala/collection/immutable/Stream.scala	/^      var rest: Stream[A] = this$/;"	v
rest	scala/collection/immutable/Stream.scala	/^    \/\/ var rest = this dropWhile (!p(_)) - forget DRY principle - GC can't collect otherwise$/;"	v
rest	scala/collection/immutable/Stream.scala	/^    var rest = this$/;"	v
rest	scala/collection/immutable/StreamViewLike.scala	/^  protected override def newAppended[B >: A](that: scala.collection.GenTraversable[B]): Transformed[B] = new { val rest = that } with AbstractTransformed[B] with Appended[B]$/;"	V
rest	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val rest = ((hc >>> (bbp + 5)) << bbp) | (((1 << bbp) - 1) & hc)$/;"	V
rest	scala/collection/parallel/ParIterableViewLike.scala	/^  protected def newAppended[U >: T](that: GenTraversable[U]): Transformed[U] = new Appended[U] { val rest = that }$/;"	V
rest	scala/collection/parallel/ParSeqViewLike.scala	/^    if (that.isParSeq) new Appended[U] { val rest = that }$/;"	V
rest	scala/concurrent/SyncVar.scala	/^    var rest = timeout$/;"	v
rest	scala/util/automata/SubsetConstruction.scala	/^    val rest = new mutable.Stack[immutable.BitSet]$/;"	V
rest	scala/util/parsing/combinator/PackratParsers.scala	/^    def rest: Reader[T] = new PackratReader(underlying.rest) {$/;"	m
rest	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def rest = new Scanner(rest2)$/;"	m
rest	scala/util/parsing/input/CharSequenceReader.scala	/^  def rest: CharSequenceReader =$/;"	m
rest	scala/util/parsing/input/PagedSeqReader.scala	/^  def rest: PagedSeqReader =$/;"	m
rest	scala/util/parsing/input/Reader.scala	/^  def rest: Reader[T]$/;"	m
rest	scala/xml/parsing/MarkupParserCommon.scala	/^    val rest = until.tail$/;"	V
restPar	scala/collection/parallel/ParIterableViewLike.scala	/^    def restPar: ParIterable[U] = rest.asParIterable$/;"	m
restSeq	scala/collection/GenSeqViewLike.scala	/^    protected[this] lazy val restSeq = rest.toSeq$/;"	V
restmask	scala/collection/mutable/FlatHashTable.scala	/^    \/\/ val restmask = (1 << (needed - 5)) - 1$/;"	V
result	scala/Enumeration.scala	/^      def result() = new ValueSet(b.toImmutable)$/;"	m
result	scala/Product.scala	/^    def next() = { val result = productElement(c); c += 1; result }$/;"	V
result	scala/Responder.scala	/^    var result: Option[A] = None$/;"	v
result	scala/collection/IndexedSeqLike.scala	/^    val result = new mutable.ArrayBuffer[A1](size)$/;"	V
result	scala/collection/Iterator.scala	/^      if (hasNext) { val result = f(i); i += 1; result }$/;"	V
result	scala/collection/Iterator.scala	/^      if (hasNext) { val result = i; i += step; result }$/;"	V
result	scala/collection/Iterator.scala	/^      val result: B =$/;"	V
result	scala/collection/Iterator.scala	/^    def next(): Int = { val result = i; i += step; result }$/;"	V
result	scala/collection/LinearSeqLike.scala	/^        val result = these.head; these = these.tail; result$/;"	V
result	scala/collection/MapLike.scala	/^    val result = new mutable.ArrayBuffer[C](size)$/;"	V
result	scala/collection/SeqLike.scala	/^      val result = (self.newBuilder ++= forcedElms).result$/;"	V
result	scala/collection/SetLike.scala	/^      val result = buf.result$/;"	V
result	scala/collection/SetLike.scala	/^    val result = new mutable.ArrayBuffer[A1](size)$/;"	V
result	scala/collection/TraversableLike.scala	/^    var result = false$/;"	v
result	scala/collection/TraversableLike.scala	/^    var result = true$/;"	v
result	scala/collection/TraversableLike.scala	/^    var result: () => A = () => throw new NoSuchElementException$/;"	v
result	scala/collection/TraversableLike.scala	/^    var result: Option[A] = None$/;"	v
result	scala/collection/TraversableOnce.scala	/^      val result = new Array[B](size)$/;"	V
result	scala/collection/TraversableOnce.scala	/^    var result = 0$/;"	v
result	scala/collection/TraversableOnce.scala	/^    var result = z$/;"	v
result	scala/collection/TraversableView.scala	/^    def result() = throw new UnsupportedOperationException("TraversableView.Builder.result")$/;"	m
result	scala/collection/TraversableViewLike.scala	/^      var result: B = null.asInstanceOf[B]$/;"	v
result	scala/collection/convert/Wrappers.scala	/^    def result = this$/;"	m
result	scala/collection/immutable/BitSet.scala	/^    def result() = b.toImmutable$/;"	m
result	scala/collection/immutable/List.scala	/^    var result: List[A] = Nil$/;"	v
result	scala/collection/immutable/ListSet.scala	/^    def result() = elems.foldLeft(empty[Elem])(_ unchecked_+ _)$/;"	m
result	scala/collection/immutable/Range.scala	/^      val result: Long = jumps + ( if (hasStub) 1 else 0 )$/;"	V
result	scala/collection/immutable/RedBlackTree.scala	/^    var result = tree$/;"	v
result	scala/collection/immutable/Stream.scala	/^      val result = cur.head$/;"	V
result	scala/collection/immutable/Stream.scala	/^    def result: Stream[A] = parts.toStream flatMap (_.toStream)$/;"	m
result	scala/collection/immutable/Stream.scala	/^    val result = these.v$/;"	V
result	scala/collection/immutable/Stream.scala	/^    var result: Stream[A] = Stream.Empty$/;"	v
result	scala/collection/immutable/TreeMap.scala	/^    var result = 0$/;"	v
result	scala/collection/immutable/TreeSet.scala	/^    var result = 0$/;"	v
result	scala/collection/immutable/Vector.scala	/^  def result: Vector[A] = {$/;"	m
result	scala/collection/mutable/AVLTree.scala	/^      val result = stack.head.data$/;"	V
result	scala/collection/mutable/ArrayBuffer.scala	/^    val result = apply(n)$/;"	V
result	scala/collection/mutable/ArrayBuffer.scala	/^  def result: ArrayBuffer[A] = this$/;"	m
result	scala/collection/mutable/ArrayBuilder.scala	/^    def result() = {$/;"	m
result	scala/collection/mutable/ArraySeq.scala	/^      val result = new ArraySeq[A](buf.length)$/;"	V
result	scala/collection/mutable/ArrayStack.scala	/^  def result = {$/;"	m
result	scala/collection/mutable/Builder.scala	/^      def result: NewTo = f(self.result)$/;"	m
result	scala/collection/mutable/Builder.scala	/^  def result(): To$/;"	m
result	scala/collection/mutable/DoubleLinkedList.scala	/^      def result() = current$/;"	m
result	scala/collection/mutable/GrowingBuilder.scala	/^  def result: To = elems$/;"	m
result	scala/collection/mutable/HashMap.scala	/^    val result = findEntry(key)$/;"	V
result	scala/collection/mutable/LazyBuilder.scala	/^  def result(): To$/;"	m
result	scala/collection/mutable/ListBuffer.scala	/^  def result: List[A] = toList$/;"	m
result	scala/collection/mutable/MapBuilder.scala	/^  def result: Coll = elems$/;"	m
result	scala/collection/mutable/MapLike.scala	/^  def result: This = repr$/;"	m
result	scala/collection/mutable/MutableList.scala	/^  def result = this$/;"	m
result	scala/collection/mutable/OpenHashMap.scala	/^      val result = table(index)$/;"	V
result	scala/collection/mutable/PriorityQueue.scala	/^  def result = this$/;"	m
result	scala/collection/mutable/SetBuilder.scala	/^  def result: Coll = elems$/;"	m
result	scala/collection/mutable/SetLike.scala	/^  def result: This = repr$/;"	m
result	scala/collection/mutable/Stack.scala	/^    def result = new Stack(lbuff.result)$/;"	m
result	scala/collection/mutable/StringBuilder.scala	/^  def result(): String = toString$/;"	m
result	scala/collection/mutable/UnrolledBuffer.scala	/^  def result = this$/;"	m
result	scala/collection/mutable/WrappedArrayBuilder.scala	/^  def result() = {$/;"	m
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: (Combiner[U, This], Boolean) = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: (Combiner[U, This], Combiner[U, This]) = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Boolean = false$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Boolean = true$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Combiner[S, That] = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Combiner[U, That] = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Combiner[U, This] = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Int = 0$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Option[U] = None$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: R = null.asInstanceOf[R]$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: R1 = null.asInstanceOf[R1]$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Result = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: S = null.asInstanceOf[S]$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: ScanTree[U] = null$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: U = null.asInstanceOf[U]$/;"	v
result	scala/collection/parallel/ParIterableLike.scala	/^    @volatile var result: Unit = ()$/;"	v
result	scala/collection/parallel/ParIterableView.scala	/^    def result() = throw new UnsupportedOperationException("ParIterableView.Combiner.result")$/;"	m
result	scala/collection/parallel/ParIterableViewLike.scala	/^    var result: Combiner[U, That] = null$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: (Int, Boolean) = null$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: Boolean = true$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: Combiner[S, That] = null$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: Combiner[U, That] = null$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: Combiner[U, This] = null$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: Int = -1$/;"	v
result	scala/collection/parallel/ParSeqLike.scala	/^    @volatile var result: Result = null$/;"	v
result	scala/collection/parallel/ParSeqView.scala	/^    def result() = throw new UnsupportedOperationException("ParSeqView.Combiner.result")$/;"	m
result	scala/collection/parallel/ParSeqViewLike.scala	/^    var result: Combiner[U, That] = null$/;"	v
result	scala/collection/parallel/Tasks.scala	/^  var result: R$/;"	v
result	scala/collection/parallel/immutable/ParHashMap.scala	/^    @volatile var result = ()$/;"	v
result	scala/collection/parallel/immutable/ParHashMap.scala	/^  def result = {$/;"	m
result	scala/collection/parallel/immutable/ParHashSet.scala	/^    var result = ()$/;"	v
result	scala/collection/parallel/immutable/ParHashSet.scala	/^  def result = {$/;"	m
result	scala/collection/parallel/immutable/ParVector.scala	/^  def result: ParVector[T] = {$/;"	m
result	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def result: To = allocateAndCopy$/;"	m
result	scala/collection/parallel/mutable/ParArray.scala	/^    var result = ();$/;"	v
result	scala/collection/parallel/mutable/ParHashMap.scala	/^    var result = Int.MinValue$/;"	v
result	scala/collection/parallel/mutable/ParHashMap.scala	/^  def result: ParHashMap[K, V] = if (size >= (ParHashMapCombiner.numblocks * sizeMapBucketSize)) { \/\/ 1024$/;"	m
result	scala/collection/parallel/mutable/ParHashSet.scala	/^    var result = (Int.MinValue, new UnrolledBuffer[Any]);$/;"	v
result	scala/collection/parallel/mutable/ParHashSet.scala	/^  def result: ParHashSet[T] = {$/;"	m
result	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val result = new ParTrieMap[K, V]$/;"	V
result	scala/collection/parallel/mutable/ParTrieMap.scala	/^    var result = -1$/;"	v
result	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def result = this$/;"	m
result	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    var result = ()$/;"	v
result	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    var result = ();$/;"	v
result	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def result = {$/;"	m
result	scala/concurrent/Awaitable.scala	/^  def result(atMost: Duration)(implicit permit: CanAwait): T$/;"	m
result	scala/concurrent/Future.scala	/^      val result = Promise[Option[T]]()$/;"	V
result	scala/concurrent/Future.scala	/^   *    val result = Await.result(Future.fold(futures)(0)(_ + _), 5 seconds)$/;"	V
result	scala/concurrent/Future.scala	/^   *    val result = Await.result(Futures.reduce(futures)(_ + _), 5 seconds)$/;"	V
result	scala/concurrent/ThreadRunner.scala	/^    val result = new SyncVar[Either[Exception, S]]$/;"	V
result	scala/concurrent/impl/ExecutionContextImpl.scala	/^        var result: T = null.asInstanceOf[T]$/;"	v
result	scala/concurrent/impl/Promise.scala	/^    def result(atMost: Duration)(implicit permit: CanAwait): T = value.get.get$/;"	m
result	scala/concurrent/impl/Promise.scala	/^    def result(atMost: Duration)(implicit permit: CanAwait): T =$/;"	m
result	scala/concurrent/package.scala	/^    def result[T](awaitable: Awaitable[T], atMost: Duration): T =$/;"	m
result	scala/io/BufferedSource.scala	/^      val result = {$/;"	V
result	scala/runtime/ScalaRunTime.scala	/^        val result = x.productElement(c)$/;"	V
result	scala/runtime/Tuple3Zipped.scala	/^    def result = (b1.result, b2.result, b3.result)$/;"	m
result	scala/sys/process/ProcessImpl.scala	/^      val result = new SyncVar[Either[Throwable, T]]$/;"	V
result	scala/util/Either.scala	/^   * val result: Either[Exception, Value] = possiblyFailingOperation()$/;"	V
result	scala/util/Either.scala	/^ *  val result: Either[String,Int] = try {$/;"	V
result	scala/util/automata/Inclusion.scala	/^    var result = true$/;"	v
result	scala/util/control/TailCalls.scala	/^    def result: A = {$/;"	m
result	scala/util/control/TailCalls.scala	/^  protected case class Done[A](override val result: A) extends TailRec[A]$/;"	V
result	scala/util/parsing/ast/Binders.scala	/^       var result = true$/;"	v
result	scala/xml/factory/Binder.scala	/^  var result: NodeBuffer = new NodeBuffer()$/;"	v
resultWithTaskSupport	scala/collection/parallel/Combiner.scala	/^  def resultWithTaskSupport: To = {$/;"	m
results	scala/concurrent/ops.scala	/^    val results = new Array[b](xs.length);$/;"	V
ret	scala/collection/Iterator.scala	/^      val ret = (self.next, idx)$/;"	V
ret	scala/collection/concurrent/TrieMap.scala	/^    val ret = r.rec_insertif(k, v, hc, cond, 0, null, r.gen, this)$/;"	V
ret	scala/collection/parallel/mutable/ParArray.scala	/^      val ret = if (r != -1) r - i else r$/;"	V
ret	scala/ref/ReferenceWrapper.scala	/^    val ret = underlying.get$/;"	V
ret	scala/util/Sorting.scala	/^    val ret = a.toArray$/;"	V
ret	scala/util/continuations/ControlContext.scala	/^        val ret: A => B = { x: A =>$/;"	V
ret	scala/xml/include/sax/EncodingHeuristics.scala	/^    var ret: String = null$/;"	v
retType	scala/reflect/Manifest.scala	/^  def retType[T: ClassManifest](name: String) =$/;"	m
retain	scala/collection/mutable/MapLike.scala	/^  def retain(p: (A, B) => Boolean): this.type = {$/;"	m
retain	scala/collection/mutable/SetLike.scala	/^  def retain(p: A => Boolean): Unit = for (elem <- this.toList) if (!p(elem)) this -= elem$/;"	m
rethrow	scala/util/control/Exception.scala	/^    val rethrow: Throwable => Boolean = shouldRethrow)$/;"	V
return_	scala/util/parsing/ast/Binders.scala	/^  def return_[T](result: T): ReturnAndDo[T] =$/;"	m
returning	scala/xml/parsing/MarkupParserCommon.scala	/^  def returning[T](x: T)(f: T => Unit): T = { f(x); x }$/;"	m
rev	scala/collection/immutable/Queue.scala	/^    case Nil if !in.isEmpty => val rev = in.reverse ; (rev.head, new Queue(Nil, rev.tail))$/;"	V
reverse	scala/collection/GenSeqLike.scala	/^  def reverse: Repr$/;"	m
reverse	scala/collection/IndexedSeqOptimized.scala	/^  def reverse: Repr = {$/;"	m
reverse	scala/collection/SeqLike.scala	/^  def reverse: Repr = {$/;"	m
reverse	scala/collection/mutable/PriorityQueue.scala	/^  def reverse = {$/;"	m
reverse	scala/collection/parallel/ParSeqLike.scala	/^  def reverse: Repr = {$/;"	m
reverse	scala/collection/parallel/RemainsIterator.scala	/^  def reverse: SeqSplitter[T] = {$/;"	m
reverse	scala/math/PartialOrdering.scala	/^  def reverse : PartialOrdering[T] = new PartialOrdering[T] {$/;"	m
reverse2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def reverse2combiner[U >: T, This](cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
reverseBytes	scala/runtime/RichChar.scala	/^  def reverseBytes: Char                = Character.reverseBytes(self)$/;"	m
reverseContents	scala/collection/mutable/StringBuilder.scala	/^  def reverseContents(): StringBuilder = {$/;"	m
reverseIterator	scala/collection/IndexedSeqOptimized.scala	/^  def reverseIterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
reverseIterator	scala/collection/SeqLike.scala	/^  def reverseIterator: Iterator[A] = toCollection(reverse).iterator$/;"	m
reverseIterator	scala/collection/immutable/Vector.scala	/^  def reverseIterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
reverseIterator	scala/collection/mutable/PriorityQueue.scala	/^  def reverseIterator: Iterator[A] = new AbstractIterator[A] {$/;"	m
reverseMap	scala/collection/GenSeqLike.scala	/^  def reverseMap[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
reverseMap	scala/collection/SeqLike.scala	/^  def reverseMap[B, That](f: A => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
reverseMap	scala/collection/parallel/ParSeqLike.scala	/^  def reverseMap[S, That](f: T => S)(implicit bf: CanBuildFrom[Repr, S, That]): That = if (bf(repr).isCombiner) {$/;"	m
reverseMap2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def reverseMap2combiner[S, That](f: T => S, cb: Combiner[S, That]): Combiner[S, That] = {$/;"	m
reverse_	scala/collection/immutable/List.scala	/^  def reverse_:::[B >: A](prefix: List[B]): List[B] = {$/;"	m
revi	scala/collection/mutable/ArrayStack.scala	/^      val revi = index - i - 1$/;"	V
revq	scala/collection/mutable/PriorityQueue.scala	/^    val revq = new PriorityQueue[A]()(new scala.math.Ordering[A] {$/;"	V
rex	scala/util/regexp/WordExp.scala	/^ *  val rex = Star(Alt(Star(Letter(MyChar('a'))),Letter(MyChar('b'))))$/;"	V
rfb	scala/xml/Utility.scala	/^    var rfb: StringBuilder = null$/;"	v
right	scala/collection/immutable/RedBlack.scala	/^                           override val right: Tree[B]) extends NonEmpty[B] {$/;"	V
right	scala/collection/immutable/RedBlack.scala	/^                         override val right: Tree[B]) extends NonEmpty[B] {$/;"	V
right	scala/collection/immutable/RedBlack.scala	/^    def right: Tree[B]$/;"	m
right	scala/collection/immutable/RedBlackTree.scala	/^    @(inline @getter) final val right: Tree[A, B])$/;"	V
right	scala/collection/mutable/AVLTree.scala	/^      val right: Node[A] = stack.head.right.asInstanceOf[Node[A]]$/;"	V
right	scala/util/Either.scala	/^  def right = Either.RightProjection(this)$/;"	m
rightRotated	scala/collection/mutable/AVLTree.scala	/^      val rightRotated = r.rightRotation$/;"	V
rightRotation	scala/collection/mutable/AVLTree.scala	/^  def rightRotation[B >: A]: Node[B] = sys.error("Should not happen.")$/;"	m
rightmost	scala/collection/parallel/ParIterableLike.scala	/^    def rightmost = this$/;"	m
rightmost	scala/collection/parallel/ParIterableLike.scala	/^    def rightmost: ScanLeaf[U]$/;"	m
rightmost	scala/collection/parallel/ParIterableLike.scala	/^    val rightmost = right.rightmost$/;"	V
rights	scala/collection/immutable/List.scala	/^  def rights[A, B](es: Iterable[Either[A, B]]) =$/;"	m
rint	scala/math/package.scala	/^  def rint(x: Double): Double = java.lang.Math.rint(x)$/;"	m
rleft	scala/collection/parallel/immutable/ParRange.scala	/^      val rleft = rangeleft$/;"	V
rleft	scala/collection/parallel/immutable/ParRange.scala	/^      var rleft = rangeleft$/;"	v
rlock	scala/Symbol.scala	/^  private val rlock = rwl.readLock$/;"	V
rn	scala/collection/concurrent/TrieMap.scala	/^                  val rn = if (cn.gen eq gen) cn else cn.renewed(gen, ct)$/;"	V
rn	scala/collection/concurrent/TrieMap.scala	/^                val rn = if (cn.gen eq gen) cn else cn.renewed(gen, ct)$/;"	V
rn	scala/collection/concurrent/TrieMap.scala	/^            val rn = if (cn.gen eq gen) cn else cn.renewed(gen, ct)$/;"	V
rn	scala/collection/concurrent/TrieMap.scala	/^          val rn = if (cn.gen eq gen) cn else cn.renewed(gen, ct)$/;"	V
rng	scala/collection/immutable/RedBlack.scala	/^    def rng(from: Option[A], until: Option[A]) = this$/;"	m
rng	scala/collection/immutable/RedBlack.scala	/^    def rng(from: Option[A], until: Option[A]): Tree[B]$/;"	m
root	scala/collection/concurrent/TrieMap.scala	/^  @volatile var root = r$/;"	v
root	scala/collection/parallel/immutable/ParHashMap.scala	/^    val root = new Array[HashMap[K, AnyRef]](bucks.length)$/;"	V
root	scala/collection/parallel/immutable/ParHashMap.scala	/^    val root = new Array[HashMap[K, V]](bucks.length)$/;"	V
root	scala/collection/parallel/immutable/ParHashSet.scala	/^    val root = new Array[HashSet[T]](bucks.length)$/;"	V
root	scala/util/parsing/json/Parser.scala	/^  def root       = jsonObj | jsonArray$/;"	m
rootCause	scala/xml/include/XIncludeException.scala	/^  private var rootCause: Throwable = null$/;"	v
rootElem	scala/xml/parsing/FactoryAdapter.scala	/^  var rootElem: Node = null$/;"	v
rootLabel	scala/xml/parsing/ValidatingMarkupHandler.scala	/^  var rootLabel:String = _$/;"	v
rootbits	scala/collection/parallel/immutable/ParHashMap.scala	/^  private[immutable] val rootbits = 5$/;"	V
rootbits	scala/collection/parallel/immutable/ParHashSet.scala	/^  private[immutable] val rootbits = 5$/;"	V
rootsize	scala/collection/parallel/immutable/ParHashMap.scala	/^  private[immutable] val rootsize = 1 << 5$/;"	V
rootsize	scala/collection/parallel/immutable/ParHashSet.scala	/^  private[immutable] val rootsize = 1 << 5$/;"	V
rootupdater	scala/collection/concurrent/TrieMap.scala	/^  private var rootupdater = rtupd$/;"	v
rotated	scala/collection/mutable/FlatHashTable.scala	/^      val rotated = (improved >>> rotation) | (improved << (32 - rotation))$/;"	V
rotated	scala/collection/mutable/HashTable.scala	/^      val rotated = (i >>> rotation) | (i << (32 - rotation))$/;"	V
rotation	scala/collection/mutable/FlatHashTable.scala	/^      val rotation = seed % 32$/;"	V
rotation	scala/collection/mutable/HashTable.scala	/^      val rotation = seed % 32$/;"	V
round	scala/math/BigDecimal.scala	/^  def round(mc: MathContext): BigDecimal = this.bigDecimal round mc$/;"	m
round	scala/math/package.scala	/^  def round(x: Double): Long = java.lang.Math.round(x)$/;"	m
round	scala/math/package.scala	/^  def round(x: Float): Int = java.lang.Math.round(x)$/;"	m
round	scala/runtime/RichDouble.scala	/^  def round: Long   = math.round(self)$/;"	m
round	scala/runtime/RichFloat.scala	/^  def round: Int   = math.round(self)$/;"	m
row	scala/collection/GenSeqViewLike.scala	/^      val row = findRow(idx, 0, self.length - 1)$/;"	V
rs	scala/util/regexp/Base.scala	/^  class Alt private (val rs: _regexpT*) extends RegExp {$/;"	V
rs	scala/util/regexp/Base.scala	/^  class Sequ private (val rs: _regexpT*) extends RegExp {$/;"	V
run	scala/Responder.scala	/^  def run[A](r: Responder[A]): Option[A] = {$/;"	m
run	scala/collection/parallel/Tasks.scala	/^    def run = {$/;"	m
run	scala/collection/parallel/Tasks.scala	/^    def run() = {$/;"	m
run	scala/concurrent/ThreadPoolRunner.scala	/^    def run() = fun()$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(connectInput: Boolean): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(io: ProcessIO): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(log: ProcessLogger): Process$/;"	m
run	scala/sys/process/ProcessBuilder.scala	/^  def run(log: ProcessLogger, connectInput: Boolean): Process$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(): Process                                          = run(false)$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(connectInput: Boolean): Process                     = run(BasicIO.standard(connectInput))$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(log: ProcessLogger): Process                        = run(log, false)$/;"	m
run	scala/sys/process/ProcessBuilderImpl.scala	/^    def run(log: ProcessLogger, connectInput: Boolean): Process = run(BasicIO(connectInput, log))$/;"	m
run	scala/sys/process/ProcessImpl.scala	/^      def run(): Unit =$/;"	m
run	scala/sys/process/ProcessImpl.scala	/^    def run(): Unit$/;"	m
run	scala/util/continuations/package.scala	/^  def run[A](ctx: =>(Any @cpsParam[Unit,A])): A = {$/;"	m
runBenchmark	scala/testing/Benchmark.scala	/^  def runBenchmark(noTimes: Int): List[Long] =$/;"	m
runWith	scala/PartialFunction.scala	/^  def runWith[U](action: B => U): A => Boolean = { x =>$/;"	m
runnable	scala/concurrent/ThreadRunner.scala	/^    val runnable = new Runnable {$/;"	V
runnable	scala/concurrent/impl/Future.scala	/^    val runnable = new PromiseCompletingRunnable(body)$/;"	V
runnable	scala/concurrent/impl/Promise.scala	/^      val runnable = new CallbackRunnable[T](preparedEC, func)$/;"	V
runtime	scala/runtime/RichDouble.scala	/^package runtime$/;"	p
runtime	scala/runtime/RichFloat.scala	/^package runtime$/;"	p
runtime	scala/runtime/ScalaRunTime.scala	/^package runtime$/;"	p
runtime	scala/runtime/SeqCharSequence.scala	/^package runtime$/;"	p
runtime	scala/sys/package.scala	/^  def runtime: Runtime = Runtime.getRuntime$/;"	m
runtimeClass	scala/collection/mutable/WrappedArrayBuilder.scala	/^    val runtimeClass = arrayElementClass(tag)$/;"	V
runtimeClass	scala/reflect/ClassManifestDeprecatedApis.scala	/^  val runtimeClass: jClass[_],$/;"	V
runtimeClass	scala/reflect/ClassTag.scala	/^  def runtimeClass: jClass[_]$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^                                     val runtimeClass: Predef.Class[_],$/;"	V
runtimeClass	scala/reflect/Manifest.scala	/^      def runtimeClass = parents.head.erasure$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^      def runtimeClass = upperBound$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^      def runtimeClass = upperBound.erasure$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Boolean.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Byte.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Character.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Double.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Float.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Integer.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Long.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Short.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    def runtimeClass = java.lang.Void.TYPE$/;"	m
runtimeClass	scala/reflect/Manifest.scala	/^    lazy val runtimeClass = value.getClass$/;"	V
rvb	scala/collection/parallel/immutable/ParVector.scala	/^    val rvb = new VectorBuilder[T]$/;"	V
rwl	scala/Symbol.scala	/^  private val rwl = new ReentrantReadWriteLock()$/;"	V
s	scala/Console.scala	/^    val s = readLine()$/;"	V
s	scala/StringContext.scala	/^  def s(args: Any*): String = standardInterpolator(treatEscapes, args)$/;"	m
s	scala/collection/BitSetLike.scala	/^    var s = 0$/;"	v
s	scala/collection/SeqLike.scala	/^      var s: Seq[A] = thisCollection drop i$/;"	v
s	scala/collection/immutable/HashMap.scala	/^      val s = in.readInt()$/;"	V
s	scala/collection/immutable/HashMap.scala	/^      val s = orig.size$/;"	V
s	scala/collection/immutable/HashSet.scala	/^      val s = in.readInt()$/;"	V
s	scala/collection/immutable/HashSet.scala	/^      val s = orig.size$/;"	V
s	scala/collection/immutable/PagedSeq.scala	/^    val s = start + _start$/;"	V
s	scala/collection/immutable/Vector.scala	/^            val s = new Vector(startIndex - 1 + shift, endIndex + shift, newBlockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^            val s = new Vector(startIndex - shift, endIndex + 1 - shift, newBlockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^          val s = new Vector(startIndex - 1 + move, endIndex + move, newBlockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^          val s = new Vector(startIndex - 1, endIndex, newBlockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^          val s = new Vector(startIndex, endIndex + 1, newBlockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^        val s = new Vector(startIndex - 1, endIndex, blockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^        val s = new Vector(startIndex, endIndex + 1, blockIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^      val s = new Vector(0,1,0)$/;"	V
s	scala/collection/immutable/Vector.scala	/^      val s = new Vector(31,32,0)$/;"	V
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector(cutIndex-shift, endIndex-shift, blockIndex-shift)$/;"	V
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector(startIndex-shift, cutIndex-shift, blockIndex-shift)$/;"	V
s	scala/collection/immutable/Vector.scala	/^    val s = new VectorIterator[A](startIndex, endIndex)$/;"	V
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector[A](0, size, 0) \/\/ should focus front or back?$/;"	V
s	scala/collection/immutable/Vector.scala	/^    val s = new Vector[B](startIndex, endIndex, idx)$/;"	V
s	scala/collection/parallel/mutable/ParArray.scala	/^      var s = sum_quick(num, arr, until, i, num.zero)$/;"	v
s	scala/concurrent/Future.scala	/^ *  val s = "Hello"$/;"	V
s	scala/runtime/ScalaRunTime.scala	/^    val s  = stringOf(arg, maxElements)$/;"	V
s	scala/util/Sorting.scala	/^            val s = len \/ 8$/;"	V
s	scala/util/Sorting.scala	/^        var s = math.min(a-off, b-a)$/;"	v
s	scala/util/control/Exception.scala	/^ *  val s = "http:\/\/www.scala-lang.org\/"$/;"	V
s	scala/util/parsing/json/Parser.scala	/^  def jsonArray  = "[" ~> repsep(value, ",") <~ "]" ^^ { case vals : List[_] => JSONArray(vals) }$/;"	V
s	scala/util/parsing/json/Parser.scala	/^  def jsonObj    = "{" ~> repsep(objEntry, ",") <~ "}" ^^ { case vals : List[_] => JSONObject(Map(vals : _*)) }$/;"	V
s	scala/xml/NamespaceBinding.scala	/^    val s = " xmlns%s=\\"%s\\"".format($/;"	V
s	scala/xml/include/sax/Main.scala	/^        val s = new XIncluder(System.out, "UTF-8")$/;"	V
s	scala/xml/parsing/FactoryAdapter.scala	/^      val s = "[%s]:%d:%d: %s".format($/;"	V
s	scala/xml/parsing/MarkupParser.scala	/^      val s = if (isProlog) "SDDecl? " else ""$/;"	V
s0	scala/collection/SeqLike.scala	/^    val s0          = math.min(slen, sourceOffset + clippedFrom)$/;"	V
s0	scala/collection/SeqLike.scala	/^    val s0          = math.min(slen, sourceOffset)$/;"	V
s1	scala/collection/SeqLike.scala	/^    val s1          = math.min(slen, s0 + sourceCount)$/;"	V
s1	scala/concurrent/duration/Duration.scala	/^    val s1: String = s filterNot (_.isWhitespace)$/;"	V
sOpt	scala/xml/dtd/ContentModelParser.scala	/^  def sOpt() = if( token == S ) nextToken;$/;"	m
sPrime	scala/io/BytePickle.scala	/^          val sPrime = refDef.appP(Def(), state.stream)$/;"	V
sPrime	scala/io/BytePickle.scala	/^          val sPrime = refDef.appP(Ref(), state.stream)$/;"	V
sPrime	scala/io/BytePickle.scala	/^      val sPrime = pa.appP(a, s)$/;"	V
sPrime	scala/io/BytePickle.scala	/^      val sPrime = resPa._2$/;"	V
sPrimePrime	scala/io/BytePickle.scala	/^          val sPrimePrime = pa.appP(v, new PicklerState(sPrime, pe))$/;"	V
sPrimePrime	scala/io/BytePickle.scala	/^      val sPrimePrime = pb.appP(b, sPrime)$/;"	V
s_per_ns	scala/concurrent/duration/Duration.scala	/^  private[this] final val   s_per_ns =  ms_per_ns * 1000$/;"	V
safeChar	scala/util/Random.scala	/^    def safeChar() = {$/;"	m
same	scala/collection/parallel/mutable/ParArray.scala	/^      var same = true$/;"	v
sameElements	scala/collection/GenIterableLike.scala	/^  def sameElements[A1 >: A](that: GenIterable[A1]): Boolean$/;"	m
sameElements	scala/collection/IndexedSeqOptimized.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean = that match {$/;"	m
sameElements	scala/collection/IterableLike.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean = {$/;"	m
sameElements	scala/collection/Iterator.scala	/^  def sameElements(that: Iterator[_]): Boolean = {$/;"	m
sameElements	scala/collection/LinearSeqOptimized.scala	/^  def sameElements[B >: A](that: GenIterable[B]): Boolean = that match {$/;"	m
sameElements	scala/collection/parallel/ParIterableLike.scala	/^  def sameElements[U >: T](that: GenIterable[U]) = seq.sameElements(that)$/;"	m
sameElements	scala/runtime/ScalaRunTime.scala	/^  def sameElements(xs1: scala.collection.Seq[Any], xs2: scala.collection.Seq[Any]) = xs1 sameElements xs2$/;"	m
sample	scala/PartialFunction.scala	/^ *  val sample = 1 to 10$/;"	V
sarr	scala/collection/parallel/mutable/ParArray.scala	/^      val sarr = array$/;"	V
saved	scala/xml/parsing/MarkupParserCommon.scala	/^    val saved = getter$/;"	V
saving	scala/xml/parsing/MarkupParserCommon.scala	/^  def saving[A, B](getter: A, setter: A => Unit)(body: => B): B = {$/;"	m
saxe	scala/xml/include/sax/Main.scala	/^    def saxe[T](body: => T) = catching[T](classOf[SAXException]) opt body$/;"	m
sb	scala/io/Source.scala	/^    private[this] val sb = new StringBuilder$/;"	V
sb	scala/util/automata/DetWordAutom.scala	/^    val sb = new StringBuilder("[DetWordAutom  nstates=")$/;"	V
sb	scala/util/matching/Regex.scala	/^    private var sb = new java.lang.StringBuffer$/;"	v
sb	scala/xml/PrettyPrinter.scala	/^          val sb = new StringBuilder()$/;"	V
sb	scala/xml/PrettyPrinter.scala	/^    val sb = new StringBuilder()$/;"	V
sb	scala/xml/TextBuffer.scala	/^  val sb = new StringBuilder()$/;"	V
sb	scala/xml/Utility.scala	/^    val sb  = new StringBuilder$/;"	V
sb	scala/xml/Utility.scala	/^    val sb = new StringBuilder$/;"	V
sb	scala/xml/dtd/Scanner.scala	/^    val sb = new StringBuilder()$/;"	V
sb	scala/xml/dtd/ValidationException.scala	/^    val sb = new StringBuilder("missing value for REQUIRED attribute")$/;"	V
sb	scala/xml/parsing/MarkupParser.scala	/^    val sb: StringBuilder = new StringBuilder()$/;"	V
sb	scala/xml/parsing/MarkupParserCommon.scala	/^    val sb = new StringBuilder$/;"	V
sb2	scala/xml/Attribute.scala	/^    val sb2 = new StringBuilder()$/;"	V
sc	scala/StringContext.scala	/^ *    implicit class JsonHelper(val sc: StringContext) extends AnyVal {$/;"	V
scala	scala/AnyVal.scala	/^package scala$/;"	p
scala	scala/AnyValCompanion.scala	/^package scala$/;"	p
scala	scala/App.scala	/^package scala$/;"	p
scala	scala/Application.scala	/^package scala$/;"	p
scala	scala/Array.scala	/^package scala$/;"	p
scala	scala/Boolean.scala	/^package scala$/;"	p
scala	scala/Byte.scala	/^package scala$/;"	p
scala	scala/Char.scala	/^package scala$/;"	p
scala	scala/Cloneable.scala	/^package scala$/;"	p
scala	scala/Console.scala	/^package scala$/;"	p
scala	scala/DelayedInit.scala	/^package scala$/;"	p
scala	scala/Double.scala	/^package scala$/;"	p
scala	scala/Dynamic.scala	/^package scala$/;"	p
scala	scala/Enumeration.scala	/^package scala$/;"	p
scala	scala/Equals.scala	/^package scala$/;"	p
scala	scala/Float.scala	/^package scala$/;"	p
scala	scala/Function.scala	/^package scala$/;"	p
scala	scala/Function0.scala	/^package scala$/;"	p
scala	scala/Function1.scala	/^package scala$/;"	p
scala	scala/Function10.scala	/^package scala$/;"	p
scala	scala/Function11.scala	/^package scala$/;"	p
scala	scala/Function12.scala	/^package scala$/;"	p
scala	scala/Function13.scala	/^package scala$/;"	p
scala	scala/Function14.scala	/^package scala$/;"	p
scala	scala/Function15.scala	/^package scala$/;"	p
scala	scala/Function16.scala	/^package scala$/;"	p
scala	scala/Function17.scala	/^package scala$/;"	p
scala	scala/Function18.scala	/^package scala$/;"	p
scala	scala/Function19.scala	/^package scala$/;"	p
scala	scala/Function2.scala	/^package scala$/;"	p
scala	scala/Function20.scala	/^package scala$/;"	p
scala	scala/Function21.scala	/^package scala$/;"	p
scala	scala/Function22.scala	/^package scala$/;"	p
scala	scala/Function3.scala	/^package scala$/;"	p
scala	scala/Function4.scala	/^package scala$/;"	p
scala	scala/Function5.scala	/^package scala$/;"	p
scala	scala/Function6.scala	/^package scala$/;"	p
scala	scala/Function7.scala	/^package scala$/;"	p
scala	scala/Function8.scala	/^package scala$/;"	p
scala	scala/Function9.scala	/^package scala$/;"	p
scala	scala/Immutable.scala	/^package scala$/;"	p
scala	scala/Int.scala	/^package scala$/;"	p
scala	scala/Long.scala	/^package scala$/;"	p
scala	scala/LowPriorityImplicits.scala	/^package scala$/;"	p
scala	scala/MatchError.scala	/^package scala$/;"	p
scala	scala/Mutable.scala	/^package scala$/;"	p
scala	scala/NotImplementedError.scala	/^package scala$/;"	p
scala	scala/NotNull.scala	/^package scala$/;"	p
scala	scala/Option.scala	/^package scala$/;"	p
scala	scala/PartialFunction.scala	/^package scala$/;"	p
scala	scala/Predef.scala	/^package scala$/;"	p
scala	scala/Product.scala	/^package scala$/;"	p
scala	scala/Product1.scala	/^package scala$/;"	p
scala	scala/Product10.scala	/^package scala$/;"	p
scala	scala/Product11.scala	/^package scala$/;"	p
scala	scala/Product12.scala	/^package scala$/;"	p
scala	scala/Product13.scala	/^package scala$/;"	p
scala	scala/Product14.scala	/^package scala$/;"	p
scala	scala/Product15.scala	/^package scala$/;"	p
scala	scala/Product16.scala	/^package scala$/;"	p
scala	scala/Product17.scala	/^package scala$/;"	p
scala	scala/Product18.scala	/^package scala$/;"	p
scala	scala/Product19.scala	/^package scala$/;"	p
scala	scala/Product2.scala	/^package scala$/;"	p
scala	scala/Product20.scala	/^package scala$/;"	p
scala	scala/Product21.scala	/^package scala$/;"	p
scala	scala/Product22.scala	/^package scala$/;"	p
scala	scala/Product3.scala	/^package scala$/;"	p
scala	scala/Product4.scala	/^package scala$/;"	p
scala	scala/Product5.scala	/^package scala$/;"	p
scala	scala/Product6.scala	/^package scala$/;"	p
scala	scala/Product7.scala	/^package scala$/;"	p
scala	scala/Product8.scala	/^package scala$/;"	p
scala	scala/Product9.scala	/^package scala$/;"	p
scala	scala/Proxy.scala	/^package scala$/;"	p
scala	scala/Responder.scala	/^package scala$/;"	p
scala	scala/ScalaObject.scala	/^package scala$/;"	p
scala	scala/SerialVersionUID.scala	/^package scala$/;"	p
scala	scala/Serializable.scala	/^package scala$/;"	p
scala	scala/Short.scala	/^package scala$/;"	p
scala	scala/Specializable.scala	/^package scala$/;"	p
scala	scala/SpecializableCompanion.scala	/^package scala$/;"	p
scala	scala/StringContext.scala	/^package scala$/;"	p
scala	scala/Symbol.scala	/^package scala$/;"	p
scala	scala/Tuple1.scala	/^package scala$/;"	p
scala	scala/Tuple10.scala	/^package scala$/;"	p
scala	scala/Tuple11.scala	/^package scala$/;"	p
scala	scala/Tuple12.scala	/^package scala$/;"	p
scala	scala/Tuple13.scala	/^package scala$/;"	p
scala	scala/Tuple14.scala	/^package scala$/;"	p
scala	scala/Tuple15.scala	/^package scala$/;"	p
scala	scala/Tuple16.scala	/^package scala$/;"	p
scala	scala/Tuple17.scala	/^package scala$/;"	p
scala	scala/Tuple18.scala	/^package scala$/;"	p
scala	scala/Tuple19.scala	/^package scala$/;"	p
scala	scala/Tuple2.scala	/^package scala$/;"	p
scala	scala/Tuple20.scala	/^package scala$/;"	p
scala	scala/Tuple21.scala	/^package scala$/;"	p
scala	scala/Tuple22.scala	/^package scala$/;"	p
scala	scala/Tuple3.scala	/^package scala$/;"	p
scala	scala/Tuple4.scala	/^package scala$/;"	p
scala	scala/Tuple5.scala	/^package scala$/;"	p
scala	scala/Tuple6.scala	/^package scala$/;"	p
scala	scala/Tuple7.scala	/^package scala$/;"	p
scala	scala/Tuple8.scala	/^package scala$/;"	p
scala	scala/Tuple9.scala	/^package scala$/;"	p
scala	scala/UninitializedError.scala	/^package scala$/;"	p
scala	scala/UninitializedFieldError.scala	/^package scala$/;"	p
scala	scala/Unit.scala	/^package scala$/;"	p
scala	scala/collection/IndexedSeqOptimized.scala	/^package scala$/;"	p
scala	scala/collection/IterableLike.scala	/^package scala$/;"	p
scala	scala/collection/Iterator.scala	/^package scala$/;"	p
scala	scala/collection/SeqLike.scala	/^package scala$/;"	p
scala	scala/collection/immutable/HashMap.scala	/^package scala$/;"	p
scala	scala/collection/immutable/HashSet.scala	/^package scala$/;"	p
scala	scala/collection/immutable/IntMap.scala	/^package scala$/;"	p
scala	scala/collection/immutable/LongMap.scala	/^package scala$/;"	p
scala	scala/collection/immutable/RedBlack.scala	/^package scala$/;"	p
scala	scala/collection/immutable/RedBlackTree.scala	/^package scala$/;"	p
scala	scala/collection/immutable/Vector.scala	/^package scala$/;"	p
scala	scala/collection/mutable/AVLTree.scala	/^package scala$/;"	p
scala	scala/collection/mutable/ArrayOps.scala	/^package scala$/;"	p
scala	scala/collection/mutable/ArrayStack.scala	/^package scala$/;"	p
scala	scala/collection/mutable/Builder.scala	/^package scala$/;"	p
scala	scala/collection/mutable/OpenHashMap.scala	/^package scala$/;"	p
scala	scala/collection/mutable/ResizableArray.scala	/^package scala$/;"	p
scala	scala/collection/package.scala	/^package scala$/;"	p
scala	scala/collection/parallel/mutable/ParArray.scala	/^package scala$/;"	p
scala	scala/collection/parallel/package.scala	/^package scala$/;"	p
scala	scala/concurrent/package.scala	/^package scala$/;"	p
scala	scala/deprecated.scala	/^package scala$/;"	p
scala	scala/deprecatedInheritance.scala	/^package scala$/;"	p
scala	scala/deprecatedName.scala	/^package scala$/;"	p
scala	scala/deprecatedOverriding.scala	/^package scala$/;"	p
scala	scala/inline.scala	/^package scala$/;"	p
scala	scala/language.scala	/^package scala$/;"	p
scala	scala/languageFeature.scala	/^package scala$/;"	p
scala	scala/math/Ordering.scala	/^package scala$/;"	p
scala	scala/math/package.scala	/^package scala$/;"	p
scala	scala/native.scala	/^package scala$/;"	p
scala	scala/noinline.scala	/^package scala$/;"	p
scala	scala/reflect/ClassTag.scala	/^package scala$/;"	p
scala	scala/reflect/NameTransformer.scala	/^package scala$/;"	p
scala	scala/reflect/package.scala	/^package scala$/;"	p
scala	scala/remote.scala	/^package scala$/;"	p
scala	scala/runtime/RichDouble.scala	/^package scala$/;"	p
scala	scala/runtime/RichFloat.scala	/^package scala$/;"	p
scala	scala/runtime/ScalaRunTime.scala	/^package scala$/;"	p
scala	scala/runtime/SeqCharSequence.scala	/^package scala$/;"	p
scala	scala/runtime/package.scala	/^package scala$/;"	p
scala	scala/specialized.scala	/^package scala$/;"	p
scala	scala/sys/Prop.scala	/^package scala$/;"	p
scala	scala/sys/package.scala	/^package scala$/;"	p
scala	scala/throws.scala	/^package scala$/;"	p
scala	scala/transient.scala	/^package scala$/;"	p
scala	scala/unchecked.scala	/^package scala$/;"	p
scala	scala/util/Sorting.scala	/^package scala$/;"	p
scala	scala/util/control/NoStackTrace.scala	/^package scala$/;"	p
scala	scala/volatile.scala	/^package scala$/;"	p
scala	scala/xml/package.scala	/^package scala$/;"	p
scala.Option	scala/concurrent/Future.scala	/^import scala.Option$/;"	i
scala.annotation	scala/annotation/Annotation.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/ClassfileAnnotation.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/StaticAnnotation.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/TypeConstraint.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/bridge.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/cloneable.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/elidable.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/implicitNotFound.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/meta/package.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/migration.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/serializable.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/strictfp.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/switch.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/tailrec.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/target/package.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/unspecialized.scala	/^package scala.annotation$/;"	p
scala.annotation	scala/annotation/varargs.scala	/^package scala.annotation$/;"	p
scala.annotation._, elidable._	scala/annotation/elidable.scala	/^   import scala.annotation._, elidable._$/;"	i
scala.annotation.elidable.ASSERTION	scala/Predef.scala	/^import scala.annotation.elidable.ASSERTION$/;"	i
scala.annotation.implicitNotFound	scala/collection/generic/CanBuildFrom.scala	/^import scala.annotation.implicitNotFound$/;"	i
scala.annotation.implicitNotFound	scala/concurrent/ExecutionContext.scala	/^import scala.annotation.implicitNotFound$/;"	i
scala.annotation.implicitNotFound	scala/concurrent/package.scala	/^import scala.annotation.implicitNotFound$/;"	i
scala.annotation.implicitNotFound	scala/util/hashing/Hashing.scala	/^import scala.annotation.implicitNotFound$/;"	i
scala.annotation.meta	scala/annotation/meta/beanGetter.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/beanSetter.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/companionClass.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/companionMethod.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/companionObject.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/field.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/getter.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/languageFeature.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/param.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/annotation/meta/setter.scala	/^package scala.annotation.meta$/;"	p
scala.annotation.meta	scala/languageFeature.scala	/^import scala.annotation.meta$/;"	i
scala.annotation.meta._	scala/deprecated.scala	/^import scala.annotation.meta._$/;"	i
scala.annotation.meta._	scala/deprecatedName.scala	/^import scala.annotation.meta._$/;"	i
scala.annotation.meta._	scala/transient.scala	/^import scala.annotation.meta._$/;"	i
scala.annotation.meta._	scala/volatile.scala	/^import scala.annotation.meta._$/;"	i
scala.annotation.meta.getter	scala/collection/immutable/RedBlackTree.scala	/^import scala.annotation.meta.getter$/;"	i
scala.annotation.migration	scala/collection/GenTraversableLike.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/Iterator.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/TraversableViewLike.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/generic/GenericTraversableTemplate.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/mutable/DoubleLinkedListLike.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/mutable/ImmutableMapAdaptor.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/mutable/Stack.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/mutable/StringBuilder.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/collection/mutable/SynchronizedMap.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/io/Codec.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/util/parsing/combinator/JavaTokenParsers.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.migration	scala/util/parsing/combinator/Parsers.scala	/^import scala.annotation.migration$/;"	i
scala.annotation.switch	scala/collection/concurrent/TrieMap.scala	/^import scala.annotation.switch$/;"	i
scala.annotation.switch	scala/xml/parsing/MarkupParserCommon.scala	/^import scala.annotation.switch$/;"	i
scala.annotation.tailrec	scala/collection/IndexedSeqLike.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/IndexedSeqOptimized.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/LinearSeqLike.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/LinearSeqOptimized.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/concurrent/TrieMap.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/immutable/List.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/immutable/Queue.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/immutable/RedBlackTree.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/immutable/Stream.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/immutable/TrieIterator.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/mutable/LinkedListLike.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/collection/mutable/UnrolledBuffer.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/concurrent/Future.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/concurrent/impl/Promise.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/runtime/MethodCache.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/sys/process/BasicIO.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/util/parsing/combinator/Parsers.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.tailrec	scala/xml/MetaData.scala	/^import scala.annotation.tailrec$/;"	i
scala.annotation.unchecked	scala/annotation/unchecked/uncheckedStable.scala	/^package scala.annotation.unchecked$/;"	p
scala.annotation.unchecked	scala/annotation/unchecked/uncheckedVariance.scala	/^package scala.annotation.unchecked$/;"	p
scala.annotation.unchecked.uncheckedStable	scala/collection/parallel/ParIterableLike.scala	/^import scala.annotation.unchecked.uncheckedStable$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/IterableLike.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/generic/GenericParTemplate.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/generic/GenericTraversableTemplate.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/immutable/SortedMap.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/immutable/Vector.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/parallel/ParIterableLike.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/parallel/ParMapLike.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/parallel/Tasks.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.uncheckedVariance	scala/collection/parallel/package.scala	/^import scala.annotation.unchecked.uncheckedVariance$/;"	i
scala.annotation.unchecked.{ uncheckedVariance => uV }	scala/collection/GenTraversableOnce.scala	/^import scala.annotation.unchecked.{ uncheckedVariance => uV }$/;"	i
scala.annotation.unchecked.{ uncheckedVariance => uV }	scala/collection/Iterator.scala	/^import scala.annotation.unchecked.{ uncheckedVariance => uV }$/;"	i
scala.annotation.unchecked.{ uncheckedVariance => uV }	scala/collection/TraversableLike.scala	/^import scala.annotation.unchecked.{ uncheckedVariance => uV }$/;"	i
scala.annotation.unchecked.{ uncheckedVariance => uV }	scala/collection/TraversableOnce.scala	/^import scala.annotation.unchecked.{ uncheckedVariance => uV }$/;"	i
scala.annotation.unchecked.{ uncheckedVariance => uV }	scala/collection/immutable/HashSet.scala	/^import scala.annotation.unchecked.{ uncheckedVariance => uV }$/;"	i
scala.annotation.unchecked.{ uncheckedVariance => uV }	scala/collection/immutable/TrieIterator.scala	/^import scala.annotation.unchecked.{ uncheckedVariance => uV }$/;"	i
scala.annotation.unchecked.{ uncheckedVariance=> uV }	scala/collection/immutable/HashMap.scala	/^import scala.annotation.unchecked.{ uncheckedVariance=> uV }$/;"	i
scala.annotation.{ Annotation, StaticAnnotation, TypeConstraint }	scala/util/continuations/ControlContext.scala	/^import scala.annotation.{ Annotation, StaticAnnotation, TypeConstraint }$/;"	i
scala.annotation.{ elidable, implicitNotFound }	scala/Predef.scala	/^import scala.annotation.{ elidable, implicitNotFound }$/;"	i
scala.annotation.{ migration, bridge }	scala/collection/mutable/SetLike.scala	/^import scala.annotation.{ migration, bridge }$/;"	i
scala.annotation.{migration, bridge}	scala/collection/MapLike.scala	/^import scala.annotation.{migration, bridge}$/;"	i
scala.annotation.{migration, bridge}	scala/collection/SetLike.scala	/^import scala.annotation.{migration, bridge}$/;"	i
scala.annotation.{migration, bridge}	scala/collection/mutable/BufferLike.scala	/^import scala.annotation.{migration, bridge}$/;"	i
scala.annotation.{migration, bridge}	scala/collection/mutable/MapLike.scala	/^import scala.annotation.{migration, bridge}$/;"	i
scala.annotation.{tailrec, bridge}	scala/collection/immutable/ListMap.scala	/^import scala.annotation.{tailrec, bridge}$/;"	i
scala.annotation.{tailrec, bridge}	scala/collection/immutable/ListSet.scala	/^import scala.annotation.{tailrec, bridge}$/;"	i
scala.annotation.{tailrec, migration, bridge}	scala/collection/TraversableLike.scala	/^import scala.annotation.{tailrec, migration, bridge}$/;"	i
scala.beans	scala/beans/BeanDescription.scala	/^package scala.beans$/;"	p
scala.beans	scala/beans/BeanDisplayName.scala	/^package scala.beans$/;"	p
scala.beans	scala/beans/BeanInfo.scala	/^package scala.beans$/;"	p
scala.beans	scala/beans/BeanInfoSkip.scala	/^package scala.beans$/;"	p
scala.beans	scala/beans/BeanProperty.scala	/^package scala.beans$/;"	p
scala.beans	scala/beans/BooleanBeanProperty.scala	/^package scala.beans$/;"	p
scala.beans	scala/beans/ScalaBeanInfo.scala	/^package scala.beans$/;"	p
scala.collection	scala/collection/BitSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/BitSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/BufferedIterator.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/CustomParallelizable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/DefaultMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenIterableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenMapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeqView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSeqViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableOnce.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/GenTraversableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IndexedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IndexedSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Iterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/IterableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/JavaConversions.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/JavaConverters.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/LinearSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/LinearSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/LinearSeqOptimized.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Map.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/MapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/MapProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/MapProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Parallel.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Parallelizable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Seq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqExtractors.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SeqViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Set.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SetProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SetProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedMapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/SortedSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/Traversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableOnce.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableProxyLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/TraversableViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/concurrent/TrieMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/DecorateAsJava.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/DecorateAsScala.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/Decorators.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/WrapAsJava.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/WrapAsScala.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/Wrappers.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/convert/package.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/BitOperations.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/BitSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/CanBuildFrom.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/CanCombineFrom.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ClassTagTraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Clearable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenSeqFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenTraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericClassTagCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericOrderedCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericSeqCompanion.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericSetTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/GenericTraversableTemplate.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Growable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/HasNewBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableSortedMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/ImmutableSortedSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/IsTraversableLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/IsTraversableOnce.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MutableMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MutableSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/MutableSortedSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/OrderedTraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SeqFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Shrinkable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SliceInterval.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Sorted.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SortedMapFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/SortedSetFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/Subtractable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/TraversableFactory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/generic/package.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/BitSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/DefaultMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/IndexedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Iterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/LinearSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/List.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/ListMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/ListSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Map.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/MapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/MapProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/NumericRange.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/PagedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Queue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Seq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Set.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/SetProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/SortedMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/SortedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Stack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Stream.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StreamView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StreamViewLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StringLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/StringOps.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/Traversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/TreeMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/TreeSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/TrieIterator.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/WrappedString.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/immutable/package.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArrayLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ArraySeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/BitSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Buffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/BufferLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/BufferProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Cloneable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ConcurrentMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DefaultEntry.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DefaultMapModel.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DoubleLinkedList.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/DoubleLinkedListLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/FlatHashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/GrowingBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashEntry.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/HashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/History.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ImmutableMapAdaptor.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ImmutableSetAdaptor.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeqOptimized.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/IndexedSeqView.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Iterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LazyBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinearSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedEntry.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedHashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedHashSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedList.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/LinkedListLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ListBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ListMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Map.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MapBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MapLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MapProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MultiMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/MutableList.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ObservableBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ObservableMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/ObservableSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/PriorityQueue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/PriorityQueueProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Publisher.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Queue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/QueueProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/RevertibleHistory.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Seq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SeqLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Set.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SetBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SetProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SortedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Stack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/StackProxy.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/StringBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Subscriber.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedBuffer.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedPriorityQueue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedQueue.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/SynchronizedStack.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Traversable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/TreeSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/Undoable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/WeakHashMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/WrappedArray.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/mutable/WrappedArrayBuilder.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParIterable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParMap.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParSeq.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParSet.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/immutable/ParVector.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/mutable/ParHashTable.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/parallel/mutable/ParSetLike.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/script/Location.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/script/Message.scala	/^package scala.collection$/;"	p
scala.collection	scala/collection/script/Scriptable.scala	/^package scala.collection$/;"	p
scala.collection.AbstractIterable	scala/util/parsing/ast/Binders.scala	/^import scala.collection.AbstractIterable$/;"	i
scala.collection.AbstractIterator	scala/collection/mutable/UnrolledBuffer.scala	/^import scala.collection.AbstractIterator$/;"	i
scala.collection.AbstractIterator	scala/io/Source.scala	/^import scala.collection.AbstractIterator$/;"	i
scala.collection.AbstractIterator	scala/util/matching/Regex.scala	/^import scala.collection.AbstractIterator$/;"	i
scala.collection.CustomParallelizable	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.CustomParallelizable$/;"	i
scala.collection.DebugUtils._	scala/collection/mutable/HashTable.scala	/^    import scala.collection.DebugUtils._$/;"	i
scala.collection.DebugUtils._	scala/collection/parallel/ParIterableLike.scala	/^  import scala.collection.DebugUtils._$/;"	i
scala.collection.DebugUtils._	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    import scala.collection.DebugUtils._$/;"	i
scala.collection.DebugUtils._	scala/collection/parallel/mutable/ParHashSet.scala	/^  import scala.collection.DebugUtils._$/;"	i
scala.collection.GenIterable	scala/collection/parallel/ParIterable.scala	/^import scala.collection.GenIterable$/;"	i
scala.collection.GenIterable	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.GenIterable$/;"	i
scala.collection.GenIterable	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.GenIterable$/;"	i
scala.collection.GenIterable	scala/collection/parallel/immutable/ParIterable.scala	/^import scala.collection.GenIterable$/;"	i
scala.collection.GenIterable	scala/collection/parallel/mutable/ParIterable.scala	/^import scala.collection.GenIterable$/;"	i
scala.collection.GenIterableLike	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.GenIterableLike$/;"	i
scala.collection.GenMap	scala/collection/parallel/ParMap.scala	/^import scala.collection.GenMap$/;"	i
scala.collection.GenMapLike	scala/collection/parallel/ParMapLike.scala	/^import scala.collection.GenMapLike$/;"	i
scala.collection.GenMapLike	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.GenMapLike$/;"	i
scala.collection.GenSeq	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.GenSeq$/;"	i
scala.collection.GenSeq	scala/collection/parallel/ParSeq.scala	/^import scala.collection.GenSeq$/;"	i
scala.collection.GenSeq	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.GenSeq$/;"	i
scala.collection.GenSeq	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.GenSeq$/;"	i
scala.collection.GenSet	scala/collection/parallel/ParSet.scala	/^import scala.collection.GenSet$/;"	i
scala.collection.GenSet	scala/collection/parallel/ParSetLike.scala	/^import scala.collection.GenSet$/;"	i
scala.collection.GenSet	scala/collection/parallel/immutable/ParSet.scala	/^import scala.collection.GenSet$/;"	i
scala.collection.GenSet	scala/collection/parallel/mutable/ParSet.scala	/^import scala.collection.GenSet$/;"	i
scala.collection.GenSetLike	scala/collection/parallel/ParSetLike.scala	/^import scala.collection.GenSetLike$/;"	i
scala.collection.GenSetLike	scala/collection/parallel/mutable/ParSetLike.scala	/^import scala.collection.GenSetLike$/;"	i
scala.collection.GenTraversable	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.GenTraversable$/;"	i
scala.collection.GenTraversable	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.GenTraversable$/;"	i
scala.collection.GenTraversableOnce	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.GenTraversableOnce$/;"	i
scala.collection.GenTraversableOnce	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.GenTraversableOnce$/;"	i
scala.collection.GenTraversableOnce	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.GenTraversableOnce$/;"	i
scala.collection.GenTraversableOnce	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.GenTraversableOnce$/;"	i
scala.collection.IterableLike	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.IterableLike$/;"	i
scala.collection.Iterator	scala/collection/mutable/Stack.scala	/^import scala.collection.Iterator$/;"	i
scala.collection.Iterator	scala/collection/mutable/UnrolledBuffer.scala	/^import scala.collection.Iterator$/;"	i
scala.collection.Iterator	scala/collection/parallel/immutable/ParRange.scala	/^import scala.collection.Iterator$/;"	i
scala.collection.Iterator	scala/util/MurmurHash.scala	/^import scala.collection.Iterator$/;"	i
scala.collection.Iterator	scala/xml/Null.scala	/^import scala.collection.Iterator$/;"	i
scala.collection.Iterator	scala/xml/persistent/CachedFileStorage.scala	/^import scala.collection.Iterator$/;"	i
scala.collection.Iterator.empty	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.Iterator.empty$/;"	i
scala.collection.JavaConversions._	scala/sys/process/package.scala	/^      import scala.collection.JavaConversions._$/;"	i
scala.collection.JavaConverters._	scala/sys/SystemProperties.scala	/^import scala.collection.JavaConverters._$/;"	i
scala.collection.JavaConverters._	scala/sys/package.scala	/^import scala.collection.JavaConverters._$/;"	i
scala.collection.Map	scala/collection/parallel/ParMap.scala	/^import scala.collection.Map$/;"	i
scala.collection.Map	scala/collection/parallel/ParMapLike.scala	/^import scala.collection.Map$/;"	i
scala.collection.MapLike	scala/collection/parallel/ParMapLike.scala	/^import scala.collection.MapLike$/;"	i
scala.collection.Parallel	scala/collection/parallel/Combiner.scala	/^import scala.collection.Parallel$/;"	i
scala.collection.Parallel	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.Parallel$/;"	i
scala.collection.Parallel	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.Parallel$/;"	i
scala.collection.Parallel	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.Parallel$/;"	i
scala.collection.Parallelizable	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.Parallelizable$/;"	i
scala.collection.Seq	scala/collection/parallel/PreciseSplitter.scala	/^import scala.collection.Seq$/;"	i
scala.collection.Seq	scala/util/Try.scala	/^import scala.collection.Seq$/;"	i
scala.collection.Set	scala/collection/parallel/ParSet.scala	/^import scala.collection.Set$/;"	i
scala.collection.Set	scala/collection/parallel/ParSetLike.scala	/^import scala.collection.Set$/;"	i
scala.collection.SetLike	scala/collection/parallel/ParSetLike.scala	/^import scala.collection.SetLike$/;"	i
scala.collection.Traversable	scala/collection/mutable/ArrayBuffer.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection.Traversable	scala/collection/mutable/ListBuffer.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection.Traversable	scala/collection/mutable/MapLike.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection.Traversable	scala/collection/mutable/SynchronizedBuffer.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection.Traversable	scala/collection/mutable/SynchronizedQueue.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection.Traversable	scala/collection/mutable/SynchronizedSet.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection.Traversable	scala/collection/mutable/SynchronizedStack.scala	/^  import scala.collection.Traversable$/;"	i
scala.collection._	scala/collection/concurrent/TrieMap.scala	/^  import scala.collection._$/;"	i
scala.collection._	scala/collection/generic/BitSetFactory.scala	/^import scala.collection._$/;"	i
scala.collection._	scala/collection/generic/IterableForwarder.scala	/^import scala.collection._$/;"	i
scala.collection._	scala/collection/generic/SeqForwarder.scala	/^import scala.collection._$/;"	i
scala.collection._	scala/collection/generic/TraversableForwarder.scala	/^import scala.collection._$/;"	i
scala.collection.concurrent	scala/collection/concurrent/BasicNode.java	/^package scala.collection.concurrent;$/;"	p
scala.collection.concurrent	scala/collection/concurrent/CNodeBase.java	/^package scala.collection.concurrent;$/;"	p
scala.collection.concurrent	scala/collection/concurrent/Gen.java	/^package scala.collection.concurrent;$/;"	p
scala.collection.concurrent	scala/collection/concurrent/INodeBase.java	/^package scala.collection.concurrent;$/;"	p
scala.collection.concurrent	scala/collection/concurrent/MainNode.java	/^package scala.collection.concurrent;$/;"	p
scala.collection.concurrent	scala/collection/concurrent/Map.scala	/^package scala.collection.concurrent$/;"	p
scala.collection.concurrent.BasicNode	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.BasicNode$/;"	i
scala.collection.concurrent.CNode	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.CNode$/;"	i
scala.collection.concurrent.INode	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.INode$/;"	i
scala.collection.concurrent.LNode	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.LNode$/;"	i
scala.collection.concurrent.SNode	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.SNode$/;"	i
scala.collection.concurrent.TNode	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.TNode$/;"	i
scala.collection.concurrent.TrieMap	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.TrieMap$/;"	i
scala.collection.concurrent.TrieMapIterator	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.concurrent.TrieMapIterator$/;"	i
scala.collection.generic	scala/collection/generic/FilterMonadic.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/GenericParCompanion.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/GenericParTemplate.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/HasNewCombiner.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/IterableForwarder.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/ParFactory.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/ParMapFactory.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/ParSetFactory.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/SeqForwarder.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/Signalling.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/Sizing.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic	scala/collection/generic/TraversableForwarder.scala	/^package scala.collection.generic$/;"	p
scala.collection.generic.AtomicIndexFlag	scala/collection/parallel/ParSeqLike.scala	/^import scala.collection.generic.AtomicIndexFlag$/;"	i
scala.collection.generic.CanBuildFrom	scala/collection/GenTraversableOnce.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/collection/Iterator.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/collection/package.scala	/^  import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/collection/parallel/ParSeqLike.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/collection/parallel/package.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/concurrent/Future.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanBuildFrom	scala/util/Random.scala	/^import scala.collection.generic.CanBuildFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParIterableView.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParMap.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParSeq.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParSeqLike.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParSeqView.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/ParSeqViewLike.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/immutable/ParRange.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.CanCombineFrom	scala/collection/parallel/package.scala	/^import scala.collection.generic.CanCombineFrom$/;"	i
scala.collection.generic.DefaultSignalling	scala/collection/parallel/ParSeqLike.scala	/^import scala.collection.generic.DefaultSignalling$/;"	i
scala.collection.generic.DelegatedSignalling	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.generic.DelegatedSignalling$/;"	i
scala.collection.generic.GenericCompanion	scala/collection/parallel/ParSeq.scala	/^import scala.collection.generic.GenericCompanion$/;"	i
scala.collection.generic.GenericCompanion	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.generic.GenericCompanion$/;"	i
scala.collection.generic.GenericCompanion	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.generic.GenericCompanion$/;"	i
scala.collection.generic.GenericCompanion	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.GenericCompanion$/;"	i
scala.collection.generic.GenericCompanion	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.generic.GenericCompanion$/;"	i
scala.collection.generic.GenericParCompanion	scala/collection/parallel/ParSeq.scala	/^import scala.collection.generic.GenericParCompanion$/;"	i
scala.collection.generic.GenericParCompanion	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.generic.GenericParCompanion$/;"	i
scala.collection.generic.GenericParCompanion	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.generic.GenericParCompanion$/;"	i
scala.collection.generic.GenericParCompanion	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.GenericParCompanion$/;"	i
scala.collection.generic.GenericParCompanion	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.generic.GenericParCompanion$/;"	i
scala.collection.generic.GenericParMapCompanion	scala/collection/parallel/ParMap.scala	/^import scala.collection.generic.GenericParMapCompanion$/;"	i
scala.collection.generic.GenericParMapCompanion	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.generic.GenericParMapCompanion$/;"	i
scala.collection.generic.GenericParMapCompanion	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.generic.GenericParMapCompanion$/;"	i
scala.collection.generic.GenericParMapTemplate	scala/collection/parallel/ParMap.scala	/^import scala.collection.generic.GenericParMapTemplate$/;"	i
scala.collection.generic.GenericParMapTemplate	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.generic.GenericParMapTemplate$/;"	i
scala.collection.generic.GenericParMapTemplate	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.generic.GenericParMapTemplate$/;"	i
scala.collection.generic.GenericParTemplate	scala/collection/parallel/ParSeq.scala	/^import scala.collection.generic.GenericParTemplate$/;"	i
scala.collection.generic.GenericParTemplate	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.generic.GenericParTemplate$/;"	i
scala.collection.generic.GenericParTemplate	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.generic.GenericParTemplate$/;"	i
scala.collection.generic.GenericParTemplate	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.GenericParTemplate$/;"	i
scala.collection.generic.GenericParTemplate	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.generic.GenericParTemplate$/;"	i
scala.collection.generic.Growable	scala/collection/parallel/mutable/LazyCombiner.scala	/^import scala.collection.generic.Growable$/;"	i
scala.collection.generic.Growable	scala/collection/parallel/mutable/ParMapLike.scala	/^import scala.collection.generic.Growable$/;"	i
scala.collection.generic.Growable	scala/collection/parallel/mutable/ParSetLike.scala	/^import scala.collection.generic.Growable$/;"	i
scala.collection.generic.IdleSignalling	scala/collection/parallel/ParMapLike.scala	/^import scala.collection.generic.IdleSignalling$/;"	i
scala.collection.generic.IdleSignalling	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.generic.IdleSignalling$/;"	i
scala.collection.generic.ParFactory	scala/collection/parallel/ParSeq.scala	/^import scala.collection.generic.ParFactory$/;"	i
scala.collection.generic.ParFactory	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.generic.ParFactory$/;"	i
scala.collection.generic.ParFactory	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.ParFactory$/;"	i
scala.collection.generic.ParFactory	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.generic.ParFactory$/;"	i
scala.collection.generic.ParMapFactory	scala/collection/parallel/ParMap.scala	/^import scala.collection.generic.ParMapFactory$/;"	i
scala.collection.generic.ParMapFactory	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.generic.ParMapFactory$/;"	i
scala.collection.generic.ParMapFactory	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.generic.ParMapFactory$/;"	i
scala.collection.generic.ParSetFactory	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.generic.ParSetFactory$/;"	i
scala.collection.generic.Shrinkable	scala/collection/parallel/mutable/ParMapLike.scala	/^import scala.collection.generic.Shrinkable$/;"	i
scala.collection.generic.Shrinkable	scala/collection/parallel/mutable/ParSetLike.scala	/^import scala.collection.generic.Shrinkable$/;"	i
scala.collection.generic.Signalling	scala/collection/parallel/ParMapLike.scala	/^import scala.collection.generic.Signalling$/;"	i
scala.collection.generic.Signalling	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.generic.Signalling$/;"	i
scala.collection.generic.Sizing	scala/collection/parallel/Combiner.scala	/^import scala.collection.generic.Sizing$/;"	i
scala.collection.generic.Sizing	scala/collection/parallel/mutable/LazyCombiner.scala	/^import scala.collection.generic.Sizing$/;"	i
scala.collection.generic.Sizing	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.generic.Sizing$/;"	i
scala.collection.generic.Sizing	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.generic.Sizing$/;"	i
scala.collection.generic.Sizing	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.generic.Sizing$/;"	i
scala.collection.generic.Sizing	scala/collection/parallel/mutable/package.scala	/^import scala.collection.generic.Sizing$/;"	i
scala.collection.generic.VolatileAbort	scala/collection/parallel/ParSeqLike.scala	/^import scala.collection.generic.VolatileAbort$/;"	i
scala.collection.generic._	scala/Array.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/immutable/Vector.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/mutable/UnrolledBuffer.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/mutable/WrappedArray.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/ParIterable.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/ParSet.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/immutable/ParIterable.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/immutable/ParSet.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParHashMap.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParHashSet.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParIterable.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParMap.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParMapLike.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParSet.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic._	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.generic._$/;"	i
scala.collection.generic.{ CanBuildFrom => CBF }	scala/runtime/Tuple2Zipped.scala	/^import scala.collection.generic.{ CanBuildFrom => CBF }$/;"	i
scala.collection.generic.{ CanBuildFrom => CBF }	scala/runtime/Tuple3Zipped.scala	/^import scala.collection.generic.{ CanBuildFrom => CBF }$/;"	i
scala.collection.generic.{ CanBuildFrom, BitOperations }	scala/collection/immutable/IntMap.scala	/^import scala.collection.generic.{ CanBuildFrom, BitOperations }$/;"	i
scala.collection.generic.{ CanBuildFrom, BitOperations }	scala/collection/immutable/LongMap.scala	/^import scala.collection.generic.{ CanBuildFrom, BitOperations }$/;"	i
scala.collection.generic.{ CanBuildFrom, SliceInterval }	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.generic.{ CanBuildFrom, SliceInterval }$/;"	i
scala.collection.generic.{ CanBuildFrom, SliceInterval }	scala/collection/parallel/ParSeqViewLike.scala	/^import scala.collection.generic.{ CanBuildFrom, SliceInterval }$/;"	i
scala.collection.generic.{ Sorted }	scala/runtime/ScalaRunTime.scala	/^import scala.collection.generic.{ Sorted }$/;"	i
scala.collection.generic.{GenericParTemplate, CanCombineFrom, ParFactory}	scala/collection/parallel/immutable/ParVector.scala	/^import scala.collection.generic.{GenericParTemplate, CanCombineFrom, ParFactory}$/;"	i
scala.collection.immutable	scala/collection/immutable/Range.scala	/^package scala.collection.immutable$/;"	p
scala.collection.immutable	scala/sys/package.scala	/^import scala.collection.immutable$/;"	i
scala.collection.immutable.List	scala/util/control/Exception.scala	/^import scala.collection.immutable.List$/;"	i
scala.collection.immutable.ListSerializeEnd	scala/collection/mutable/ListBuffer.scala	/^  import scala.collection.immutable.ListSerializeEnd$/;"	i
scala.collection.immutable.NumericRange	scala/math/BigDecimal.scala	/^import scala.collection.immutable.NumericRange$/;"	i
scala.collection.immutable.PagedSeq	scala/util/parsing/combinator/RegexParsers.scala	/^import scala.collection.immutable.PagedSeq$/;"	i
scala.collection.immutable.PagedSeq	scala/util/parsing/input/PagedSeqReader.scala	/^import scala.collection.immutable.PagedSeq$/;"	i
scala.collection.immutable.PagedSeq	scala/util/parsing/input/StreamReader.scala	/^import scala.collection.immutable.PagedSeq$/;"	i
scala.collection.immutable.Range	scala/collection/generic/SeqForwarder.scala	/^import scala.collection.immutable.Range$/;"	i
scala.collection.immutable.Range	scala/collection/parallel/immutable/ParRange.scala	/^import scala.collection.immutable.Range$/;"	i
scala.collection.immutable.Range	scala/runtime/RichInt.scala	/^import scala.collection.immutable.Range$/;"	i
scala.collection.immutable.Stream	scala/sys/process/BasicIO.scala	/^import scala.collection.immutable.Stream$/;"	i
scala.collection.immutable.{ HashMap, TrieIterator }	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.immutable.{ HashMap, TrieIterator }$/;"	i
scala.collection.immutable.{ HashSet, TrieIterator }	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.immutable.{ HashSet, TrieIterator }$/;"	i
scala.collection.immutable.{ List, Stream }	scala/util/Random.scala	/^import scala.collection.immutable.{ List, Stream }$/;"	i
scala.collection.immutable.{ ListMap => ImmutableListMap }	scala/collection/concurrent/TrieMap.scala	/^import scala.collection.immutable.{ ListMap => ImmutableListMap }$/;"	i
scala.collection.immutable.{List, Nil}	scala/collection/mutable/Stack.scala	/^import scala.collection.immutable.{List, Nil}$/;"	i
scala.collection.mutable	scala/collection/mutable/UnrolledBuffer.scala	/^package scala.collection.mutable$/;"	p
scala.collection.mutable	scala/io/BytePickle.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/sys/PropImpl.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/util/parsing/ast/Binders.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/util/parsing/combinator/PackratParsers.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/util/parsing/combinator/lexical/StdLexical.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/xml/Utility.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/xml/dtd/DTD.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/xml/dtd/ElementValidator.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/xml/include/sax/XIncluder.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/xml/parsing/MarkupHandler.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable	scala/xml/persistent/SetStorage.scala	/^import scala.collection.mutable$/;"	i
scala.collection.mutable.ArrayBuffer	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArrayBuffer	scala/collection/parallel/mutable/LazyCombiner.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArrayBuffer	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArrayBuffer	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArrayBuffer	scala/collection/parallel/mutable/package.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArrayBuffer	scala/util/Random.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArrayBuffer	scala/util/parsing/input/OffsetPosition.scala	/^import scala.collection.mutable.ArrayBuffer$/;"	i
scala.collection.mutable.ArraySeq	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.mutable.ArraySeq$/;"	i
scala.collection.mutable.ArraySeq	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.mutable.ArraySeq$/;"	i
scala.collection.mutable.ArraySeq	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.mutable.ArraySeq$/;"	i
scala.collection.mutable.ArraySeq	scala/collection/parallel/mutable/package.scala	/^import scala.collection.mutable.ArraySeq$/;"	i
scala.collection.mutable.Buffer	scala/collection/generic/IterableForwarder.scala	/^import scala.collection.mutable.Buffer$/;"	i
scala.collection.mutable.Builder	scala/collection/generic/ParMapFactory.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/generic/ParSetFactory.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/immutable/Vector.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/Combiner.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/ParIterableLike.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/ParMap.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/ParMapLike.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/ParSet.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/ParSetLike.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/mutable/ParMapLike.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/collection/parallel/mutable/ParSetLike.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Builder	scala/concurrent/Future.scala	/^import scala.collection.mutable.Builder$/;"	i
scala.collection.mutable.Cloneable	scala/collection/parallel/mutable/ParMapLike.scala	/^import scala.collection.mutable.Cloneable$/;"	i
scala.collection.mutable.Cloneable	scala/collection/parallel/mutable/ParSetLike.scala	/^import scala.collection.mutable.Cloneable$/;"	i
scala.collection.mutable.DefaultEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^import scala.collection.mutable.DefaultEntry$/;"	i
scala.collection.mutable.FlatHashTable	scala/collection/parallel/mutable/ParHashSet.scala	/^import scala.collection.mutable.FlatHashTable$/;"	i
scala.collection.mutable.HashEntry	scala/collection/parallel/mutable/ParHashMap.scala	/^import scala.collection.mutable.HashEntry$/;"	i
scala.collection.mutable.HashEntry	scala/collection/parallel/mutable/ParHashTable.scala	/^import scala.collection.mutable.HashEntry$/;"	i
scala.collection.mutable.HashTable	scala/collection/parallel/mutable/ParHashMap.scala	/^import scala.collection.mutable.HashTable$/;"	i
scala.collection.mutable.ListBuffer	scala/App.scala	/^import scala.collection.mutable.ListBuffer$/;"	i
scala.collection.mutable.ListBuffer	scala/util/parsing/combinator/Parsers.scala	/^import scala.collection.mutable.ListBuffer$/;"	i
scala.collection.mutable.Set	scala/collection/parallel/mutable/ParSetLike.scala	/^import scala.collection.mutable.Set$/;"	i
scala.collection.mutable.UnrolledBuffer	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.mutable.UnrolledBuffer$/;"	i
scala.collection.mutable.UnrolledBuffer	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.mutable.UnrolledBuffer$/;"	i
scala.collection.mutable.UnrolledBuffer	scala/collection/parallel/mutable/ParHashMap.scala	/^import scala.collection.mutable.UnrolledBuffer$/;"	i
scala.collection.mutable.UnrolledBuffer	scala/collection/parallel/mutable/ParHashSet.scala	/^import scala.collection.mutable.UnrolledBuffer$/;"	i
scala.collection.mutable.UnrolledBuffer	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.mutable.UnrolledBuffer$/;"	i
scala.collection.mutable.UnrolledBuffer	scala/collection/parallel/package.scala	/^import scala.collection.mutable.UnrolledBuffer$/;"	i
scala.collection.mutable.UnrolledBuffer.Unrolled	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.mutable.UnrolledBuffer.Unrolled$/;"	i
scala.collection.mutable.UnrolledBuffer.Unrolled	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.mutable.UnrolledBuffer.Unrolled$/;"	i
scala.collection.mutable.UnrolledBuffer.Unrolled	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.mutable.UnrolledBuffer.Unrolled$/;"	i
scala.collection.mutable.WrappedArray	scala/runtime/ScalaRunTime.scala	/^import scala.collection.mutable.WrappedArray$/;"	i
scala.collection.mutable.{ ArrayBuilder, WrappedArray }	scala/reflect/Manifest.scala	/^import scala.collection.mutable.{ ArrayBuilder, WrappedArray }$/;"	i
scala.collection.mutable.{ Builder, GrowingBuilder }	scala/collection/generic/MutableSortedSetFactory.scala	/^import scala.collection.mutable.{ Builder, GrowingBuilder }$/;"	i
scala.collection.mutable.{ Builder, MapBuilder }	scala/collection/immutable/IntMap.scala	/^import scala.collection.mutable.{ Builder, MapBuilder }$/;"	i
scala.collection.mutable.{ Builder, MapBuilder }	scala/collection/immutable/LongMap.scala	/^import scala.collection.mutable.{ Builder, MapBuilder }$/;"	i
scala.collection.mutable.{ WrappedArray, ArrayBuilder }	scala/reflect/ClassManifestDeprecatedApis.scala	/^import scala.collection.mutable.{ WrappedArray, ArrayBuilder }$/;"	i
scala.collection.parallel	scala/collection/parallel/Combiner.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterable.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterableLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterableView.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParIterableViewLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParMap.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParMapLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeq.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeqLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeqView.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSeqViewLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSet.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/ParSetLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/PreciseSplitter.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/RemainsIterator.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/Splitter.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/TaskSupport.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/Tasks.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/immutable/package.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/mutable/ParHashMap.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/mutable/ParMapLike.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel	scala/collection/parallel/mutable/package.scala	/^package scala.collection.parallel$/;"	p
scala.collection.parallel.CHECK_RATE	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.parallel.CHECK_RATE$/;"	i
scala.collection.parallel.Combiner	scala/collection/generic/GenericParCompanion.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/generic/GenericParTemplate.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/generic/HasNewCombiner.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/generic/ParFactory.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/generic/ParMapFactory.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/generic/ParSetFactory.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParIterable.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParRange.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParSet.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/immutable/ParVector.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/LazyCombiner.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParHashSet.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParIterable.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParMap.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParSet.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.Combiner	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.parallel.Combiner$/;"	i
scala.collection.parallel.IterableSplitter	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.parallel.IterableSplitter$/;"	i
scala.collection.parallel.IterableSplitter	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.parallel.IterableSplitter$/;"	i
scala.collection.parallel.IterableSplitter	scala/collection/parallel/immutable/ParRange.scala	/^import scala.collection.parallel.IterableSplitter$/;"	i
scala.collection.parallel.IterableSplitter	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^import scala.collection.parallel.IterableSplitter$/;"	i
scala.collection.parallel.IterableSplitter	scala/collection/parallel/mutable/ParHashTable.scala	/^import scala.collection.parallel.IterableSplitter$/;"	i
scala.collection.parallel.IterableSplitter	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.parallel.IterableSplitter$/;"	i
scala.collection.parallel.ParIterable	scala/collection/generic/GenericParCompanion.scala	/^import scala.collection.parallel.ParIterable$/;"	i
scala.collection.parallel.ParIterable	scala/collection/generic/GenericParTemplate.scala	/^import scala.collection.parallel.ParIterable$/;"	i
scala.collection.parallel.ParIterable	scala/collection/generic/ParFactory.scala	/^import scala.collection.parallel.ParIterable$/;"	i
scala.collection.parallel.ParIterableLike	scala/collection/parallel/immutable/ParIterable.scala	/^import scala.collection.parallel.ParIterableLike$/;"	i
scala.collection.parallel.ParIterableLike	scala/collection/parallel/mutable/ParIterable.scala	/^import scala.collection.parallel.ParIterableLike$/;"	i
scala.collection.parallel.ParMap	scala/collection/generic/GenericParCompanion.scala	/^import scala.collection.parallel.ParMap$/;"	i
scala.collection.parallel.ParMap	scala/collection/generic/GenericParTemplate.scala	/^import scala.collection.parallel.ParMap$/;"	i
scala.collection.parallel.ParMap	scala/collection/generic/ParMapFactory.scala	/^import scala.collection.parallel.ParMap$/;"	i
scala.collection.parallel.ParMapLike	scala/collection/generic/ParMapFactory.scala	/^import scala.collection.parallel.ParMapLike$/;"	i
scala.collection.parallel.ParMapLike	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.parallel.ParMapLike$/;"	i
scala.collection.parallel.ParMapLike	scala/collection/parallel/immutable/ParMap.scala	/^import scala.collection.parallel.ParMapLike$/;"	i
scala.collection.parallel.ParSeqLike	scala/collection/parallel/immutable/ParSeq.scala	/^import scala.collection.parallel.ParSeqLike$/;"	i
scala.collection.parallel.ParSeqLike	scala/collection/parallel/immutable/ParVector.scala	/^import scala.collection.parallel.ParSeqLike$/;"	i
scala.collection.parallel.ParSeqLike	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.parallel.ParSeqLike$/;"	i
scala.collection.parallel.ParSeqLike	scala/collection/parallel/mutable/ParSeq.scala	/^import scala.collection.parallel.ParSeqLike$/;"	i
scala.collection.parallel.ParSet	scala/collection/generic/ParSetFactory.scala	/^import scala.collection.parallel.ParSet$/;"	i
scala.collection.parallel.ParSetLike	scala/collection/generic/ParSetFactory.scala	/^import scala.collection.parallel.ParSetLike$/;"	i
scala.collection.parallel.ParSetLike	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.parallel.ParSetLike$/;"	i
scala.collection.parallel.ParSetLike	scala/collection/parallel/immutable/ParSet.scala	/^import scala.collection.parallel.ParSetLike$/;"	i
scala.collection.parallel.SeqSplitter	scala/collection/parallel/immutable/ParRange.scala	/^import scala.collection.parallel.SeqSplitter$/;"	i
scala.collection.parallel.SeqSplitter	scala/collection/parallel/immutable/ParVector.scala	/^import scala.collection.parallel.SeqSplitter$/;"	i
scala.collection.parallel.SeqSplitter	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.parallel.SeqSplitter$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/immutable/ParHashMap.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/immutable/ParHashSet.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/mutable/ParArray.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/mutable/ParHashMap.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/mutable/ParHashSet.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/mutable/ParTrieMap.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.Task	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.parallel.Task$/;"	i
scala.collection.parallel.TaskSupport	scala/collection/generic/GenericParTemplate.scala	/^import scala.collection.parallel.TaskSupport$/;"	i
scala.collection.parallel.TaskSupport	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.parallel.TaskSupport$/;"	i
scala.collection.parallel.TaskSupport	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.parallel.TaskSupport$/;"	i
scala.collection.parallel._	scala/collection/generic/CanCombineFrom.scala	/^import scala.collection.parallel._$/;"	i
scala.collection.parallel.immutable	scala/collection/parallel/immutable/ParHashMap.scala	/^package scala.collection.parallel.immutable$/;"	p
scala.collection.parallel.immutable	scala/collection/parallel/immutable/ParHashSet.scala	/^package scala.collection.parallel.immutable$/;"	p
scala.collection.parallel.immutable	scala/collection/parallel/immutable/ParRange.scala	/^package scala.collection.parallel.immutable$/;"	p
scala.collection.parallel.immutable.ParHashSet	scala/collection/immutable/HashSet.scala	/^import scala.collection.parallel.immutable.ParHashSet$/;"	i
scala.collection.parallel.immutable.ParRange	scala/collection/immutable/Range.scala	/^import scala.collection.parallel.immutable.ParRange$/;"	i
scala.collection.parallel.immutable.ParRange	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.parallel.immutable.ParRange$/;"	i
scala.collection.parallel.immutable.ParRange	scala/collection/parallel/ParSeqViewLike.scala	/^import scala.collection.parallel.immutable.ParRange$/;"	i
scala.collection.parallel.immutable.ParVector	scala/collection/immutable/Vector.scala	/^import scala.collection.parallel.immutable.ParVector$/;"	i
scala.collection.parallel.immutable.repetition	scala/collection/parallel/RemainsIterator.scala	/^import scala.collection.parallel.immutable.repetition$/;"	i
scala.collection.parallel.mutable	scala/collection/parallel/mutable/LazyCombiner.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParHashSet.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParIterable.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParMap.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParSeq.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParSet.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ParTrieMap.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^package scala.collection.parallel.mutable$/;"	p
scala.collection.parallel.mutable.ParArray	scala/collection/mutable/WrappedArray.scala	/^import scala.collection.parallel.mutable.ParArray$/;"	i
scala.collection.parallel.mutable.ParArray	scala/collection/parallel/ParIterable.scala	/^import scala.collection.parallel.mutable.ParArray$/;"	i
scala.collection.parallel.mutable.ParArray	scala/collection/parallel/ParSeq.scala	/^import scala.collection.parallel.mutable.ParArray$/;"	i
scala.collection.parallel.mutable.ParArray	scala/collection/parallel/package.scala	/^import scala.collection.parallel.mutable.ParArray$/;"	i
scala.collection.parallel.mutable.ParArrayCombiner	scala/collection/parallel/ParIterable.scala	/^import scala.collection.parallel.mutable.ParArrayCombiner$/;"	i
scala.collection.parallel.mutable.ParArrayCombiner	scala/collection/parallel/ParSeq.scala	/^import scala.collection.parallel.mutable.ParArrayCombiner$/;"	i
scala.collection.parallel.mutable.ParHashMap	scala/collection/mutable/HashMap.scala	/^import scala.collection.parallel.mutable.ParHashMap$/;"	i
scala.collection.parallel.mutable.ParHashSet	scala/collection/mutable/HashSet.scala	/^import scala.collection.parallel.mutable.ParHashSet$/;"	i
scala.collection.parallel.mutable.ParTrieMap	scala/collection/concurrent/TrieMap.scala	/^import scala.collection.parallel.mutable.ParTrieMap$/;"	i
scala.collection.parallel.unsupportedop	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^import scala.collection.parallel.unsupportedop$/;"	i
scala.collection.parallel.unsupportedop	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.collection.parallel.unsupportedop$/;"	i
scala.collection.{ AbstractIterable, Iterator }	scala/xml/MetaData.scala	/^import scala.collection.{ AbstractIterable, Iterator }$/;"	i
scala.collection.{ GenIterable, GenTraversable, GenTraversableOnce, Iterator }	scala/collection/parallel/ParSeqViewLike.scala	/^import scala.collection.{ GenIterable, GenTraversable, GenTraversableOnce, Iterator }$/;"	i
scala.collection.{ GenIterableView, GenIterableViewLike }	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.{ GenIterableView, GenIterableViewLike }$/;"	i
scala.collection.{ IterableView, IterableViewLike }	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.collection.{ IterableView, IterableViewLike }$/;"	i
scala.collection.{ Iterator, AbstractIterator }	scala/io/BufferedSource.scala	/^import scala.collection.{ Iterator, AbstractIterator }$/;"	i
scala.collection.{ Parallel, IterableView, GenIterableView, Iterator }	scala/collection/parallel/ParIterableView.scala	/^import scala.collection.{ Parallel, IterableView, GenIterableView, Iterator }$/;"	i
scala.collection.{ Parallel, SeqLike, GenSeqLike, GenSeq, GenIterable, Iterator }	scala/collection/parallel/ParSeqLike.scala	/^import scala.collection.{ Parallel, SeqLike, GenSeqLike, GenSeq, GenIterable, Iterator }$/;"	i
scala.collection.{ Parallel, SeqView, SeqViewLike, GenSeqView, GenSeqViewLike, GenSeq }	scala/collection/parallel/ParSeqViewLike.scala	/^import scala.collection.{ Parallel, SeqView, SeqViewLike, GenSeqView, GenSeqViewLike, GenSeq }$/;"	i
scala.collection.{ Seq, IndexedSeq, TraversableView, AbstractIterator }	scala/runtime/ScalaRunTime.scala	/^import scala.collection.{ Seq, IndexedSeq, TraversableView, AbstractIterator }$/;"	i
scala.collection.{ Seq, Iterator }	scala/collection/parallel/Splitter.scala	/^import scala.collection.{ Seq, Iterator }$/;"	i
scala.collection.{ TraversableLike, IterableLike }	scala/runtime/Tuple2Zipped.scala	/^import scala.collection.{ TraversableLike, IterableLike }$/;"	i
scala.collection.{ TraversableLike, IterableLike }	scala/runtime/Tuple3Zipped.scala	/^import scala.collection.{ TraversableLike, IterableLike }$/;"	i
scala.collection.{ TraversableView, SeqView, Parallel, Iterator }	scala/collection/parallel/ParSeqView.scala	/^import scala.collection.{ TraversableView, SeqView, Parallel, Iterator }$/;"	i
scala.collection.{ immutable, mutable }	scala/util/automata/NondetWordAutom.scala	/^import scala.collection.{ immutable, mutable }$/;"	i
scala.collection.{ immutable, mutable }	scala/util/automata/WordBerrySethi.scala	/^import scala.collection.{ immutable, mutable }$/;"	i
scala.collection.{ mutable, Iterator }	scala/sys/SystemProperties.scala	/^import scala.collection.{ mutable, Iterator }$/;"	i
scala.collection.{ mutable, Iterator }	scala/xml/parsing/FactoryAdapter.scala	/^import scala.collection.{ mutable, Iterator }$/;"	i
scala.collection.{ mutable, immutable }	scala/Array.scala	/^import scala.collection.{ mutable, immutable }$/;"	i
scala.collection.{ mutable, immutable }	scala/runtime/ScalaNumberProxy.scala	/^import scala.collection.{ mutable, immutable }$/;"	i
scala.collection.{ mutable, immutable }	scala/util/automata/BaseBerrySethi.scala	/^import scala.collection.{ mutable, immutable }$/;"	i
scala.collection.{ mutable, immutable }	scala/util/automata/DetWordAutom.scala	/^import scala.collection.{ mutable, immutable }$/;"	i
scala.collection.{ mutable, immutable }	scala/util/automata/SubsetConstruction.scala	/^import scala.collection.{ mutable, immutable }$/;"	i
scala.collection.{ mutable, immutable, generic }	scala/LowPriorityImplicits.scala	/^import scala.collection.{ mutable, immutable, generic }$/;"	i
scala.collection.{ mutable, immutable, generic }	scala/Predef.scala	/^import scala.collection.{ mutable, immutable, generic }$/;"	i
scala.collection.{ mutable, immutable, generic, SeqLike, AbstractSeq }	scala/xml/NodeSeq.scala	/^import scala.collection.{ mutable, immutable, generic, SeqLike, AbstractSeq }$/;"	i
scala.collection.{ mutable, immutable, generic, SortedSetLike, AbstractSet }	scala/Enumeration.scala	/^import scala.collection.{ mutable, immutable, generic, SortedSetLike, AbstractSet }$/;"	i
scala.collection.{Iterable, Seq, IndexedSeq}	scala/collection/immutable/List.scala	/^  import scala.collection.{Iterable, Seq, IndexedSeq}$/;"	i
scala.collection.{Iterable, Seq, IndexedSeq}	scala/collection/immutable/Stream.scala	/^  import scala.collection.{Iterable, Seq, IndexedSeq}$/;"	i
scala.collection.{Iterable, Traversable, Seq, IndexedSeq}	scala/collection/immutable/List.scala	/^  import scala.collection.{Iterable, Traversable, Seq, IndexedSeq}$/;"	i
scala.collection.{Traversable, Iterable, Seq, IndexedSeq}	scala/collection/immutable/Stream.scala	/^  import scala.collection.{Traversable, Iterable, Seq, IndexedSeq}$/;"	i
scala.compat	scala/compat/Platform.scala	/^package scala.compat$/;"	p
scala.compat.Platform	scala/collection/immutable/Vector.scala	/^import scala.compat.Platform$/;"	i
scala.compat.Platform	scala/testing/Benchmark.scala	/^import scala.compat.Platform$/;"	i
scala.compat.Platform.EOL	scala/runtime/RichException.scala	/^import scala.compat.Platform.EOL$/;"	i
scala.compat.Platform.arraycopy	scala/Array.scala	/^import scala.compat.Platform.arraycopy$/;"	i
scala.compat.Platform.arraycopy	scala/collection/mutable/ArrayOps.scala	/^import scala.compat.Platform.arraycopy$/;"	i
scala.compat.Platform.currentTime	scala/App.scala	/^import scala.compat.Platform.currentTime$/;"	i
scala.compat.Platform.currentTime	scala/Application.scala	/^import scala.compat.Platform.currentTime$/;"	i
scala.concurrent	scala/concurrent/Awaitable.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/BlockContext.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/Channel.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/DelayedLazyVal.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ExecutionContext.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/Future.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/FutureTaskRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/JavaConversions.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/Lock.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ManagedBlocker.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/Promise.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/SyncChannel.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/SyncVar.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/TaskRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/TaskRunners.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ThreadPoolRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ThreadRunner.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/duration/package.scala	/^package scala.concurrent$/;"	p
scala.concurrent	scala/concurrent/ops.scala	/^package scala.concurrent$/;"	p
scala.concurrent.ExecutionContext	scala/collection/parallel/TaskSupport.scala	/^import scala.concurrent.ExecutionContext$/;"	i
scala.concurrent.ExecutionContext	scala/collection/parallel/Tasks.scala	/^import scala.concurrent.ExecutionContext$/;"	i
scala.concurrent.ExecutionContext	scala/concurrent/impl/Future.scala	/^import scala.concurrent.ExecutionContext$/;"	i
scala.concurrent.duration	scala/concurrent/duration/Deadline.scala	/^package scala.concurrent.duration$/;"	p
scala.concurrent.duration	scala/concurrent/duration/Duration.scala	/^package scala.concurrent.duration$/;"	p
scala.concurrent.duration	scala/concurrent/duration/DurationConversions.scala	/^package scala.concurrent.duration$/;"	p
scala.concurrent.duration.Duration	scala/concurrent/Awaitable.scala	/^import scala.concurrent.duration.Duration$/;"	i
scala.concurrent.duration.Duration	scala/concurrent/package.scala	/^import scala.concurrent.duration.Duration$/;"	i
scala.concurrent.duration.{ Duration, Deadline, FiniteDuration, NANOSECONDS }	scala/concurrent/impl/Promise.scala	/^import scala.concurrent.duration.{ Duration, Deadline, FiniteDuration, NANOSECONDS }$/;"	i
scala.concurrent.forkjoin.ForkJoinPool	scala/collection/parallel/TaskSupport.scala	/^import scala.concurrent.forkjoin.ForkJoinPool$/;"	i
scala.concurrent.forkjoin._	scala/collection/parallel/Tasks.scala	/^import scala.concurrent.forkjoin._$/;"	i
scala.concurrent.forkjoin._	scala/concurrent/impl/ExecutionContextImpl.scala	/^import scala.concurrent.forkjoin._$/;"	i
scala.concurrent.impl	scala/concurrent/impl/AbstractPromise.java	/^package scala.concurrent.impl;$/;"	p
scala.concurrent.impl	scala/concurrent/impl/ExecutionContextImpl.scala	/^package scala.concurrent.impl$/;"	p
scala.concurrent.impl	scala/concurrent/impl/Future.scala	/^package scala.concurrent.impl$/;"	p
scala.concurrent.impl	scala/concurrent/impl/Promise.scala	/^package scala.concurrent.impl$/;"	p
scala.concurrent.{ BlockContext, ExecutionContext, Awaitable, CanAwait, ExecutionContextExecutor, ExecutionContextExecutorService }	scala/concurrent/impl/ExecutionContextImpl.scala	/^import scala.concurrent.{ BlockContext, ExecutionContext, Awaitable, CanAwait, ExecutionContextExecutor, ExecutionContextExecutorService }$/;"	i
scala.concurrent.{ ExecutionContext, CanAwait, OnCompleteRunnable, TimeoutException, ExecutionException }	scala/concurrent/impl/Promise.scala	/^import scala.concurrent.{ ExecutionContext, CanAwait, OnCompleteRunnable, TimeoutException, ExecutionException }$/;"	i
scala.io	scala/io/BufferedSource.scala	/^package scala.io$/;"	p
scala.io	scala/io/BytePickle.scala	/^package scala.io$/;"	p
scala.io	scala/io/Codec.scala	/^package scala.io$/;"	p
scala.io	scala/io/Position.scala	/^package scala.io$/;"	p
scala.io	scala/io/Source.scala	/^package scala.io$/;"	p
scala.io	scala/io/UTF8Codec.scala	/^package scala.io$/;"	p
scala.io.Source	scala/xml/parsing/ConstructingParser.scala	/^import scala.io.Source$/;"	i
scala.io.Source	scala/xml/parsing/ExternalSources.scala	/^import scala.io.Source$/;"	i
scala.io.Source	scala/xml/parsing/MarkupHandler.scala	/^import scala.io.Source$/;"	i
scala.io.Source	scala/xml/parsing/MarkupParser.scala	/^import scala.io.Source$/;"	i
scala.io.Source	scala/xml/parsing/MarkupParserCommon.scala	/^import scala.io.Source$/;"	i
scala.io.Source	scala/xml/parsing/XhtmlParser.scala	/^import scala.io.Source$/;"	i
scala.io.Source	scala/xml/persistent/CachedFileStorage.scala	/^    import scala.io.Source$/;"	i
scala.io.Source	scala/xml/pull/XMLEventReader.scala	/^import scala.io.Source$/;"	i
scala.language.higherKinds	scala/collection/GenTraversableOnce.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/TraversableLike.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ClassTagTraversableFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenMapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenSeqFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenTraversableFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericClassTagCompanion.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericCompanion.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericOrderedCompanion.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericOrderedTraversableTemplate.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericParCompanion.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericParTemplate.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericSeqCompanion.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericSetTemplate.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/GenericTraversableTemplate.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ImmutableMapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ImmutableSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ImmutableSortedMapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ImmutableSortedSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/IsTraversableLike.scala	/^  import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/IsTraversableOnce.scala	/^  import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/MapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/MutableMapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/MutableSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/MutableSortedSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/OrderedTraversableFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ParFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ParMapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/ParSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/SeqFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/SetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/SortedMapFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/SortedSetFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/TraversableFactory.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/collection/generic/package.scala	/^import scala.language.higherKinds$/;"	i
scala.language.higherKinds	scala/concurrent/Future.scala	/^import scala.language.higherKinds$/;"	i
scala.language.implicitConversions	scala/Boolean.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Byte.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Char.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Double.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Float.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Int.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Long.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/LowPriorityImplicits.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Option.scala	/^  import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Short.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/Unit.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/IterableViewLike.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/TraversableViewLike.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/convert/DecorateAsJava.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/convert/DecorateAsScala.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/convert/WrapAsJava.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/convert/WrapAsScala.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/immutable/Stream.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/mutable/IndexedSeqView.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/parallel/ParIterableViewLike.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/collection/parallel/package.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/concurrent/JavaConversions.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/concurrent/ThreadPoolRunner.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/concurrent/ThreadRunner.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/concurrent/duration/Duration.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/concurrent/duration/package.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/io/Codec.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/math/BigDecimal.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/math/BigInt.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/math/Fractional.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/math/Integral.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/math/Numeric.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/math/Ordered.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/sys/BooleanProp.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/sys/SystemProperties.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/sys/process/Process.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/Either.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/Try.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/control/Exception.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/ast/Binders.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/combinator/ImplicitConversions.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/combinator/PackratParsers.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/combinator/Parsers.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/combinator/RegexParsers.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/xml/NodeSeq.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.implicitConversions	scala/xml/Utility.scala	/^import scala.language.implicitConversions$/;"	i
scala.language.postfixOps	scala/util/parsing/combinator/testing/RegexTest.scala	/^import scala.language.postfixOps$/;"	i
scala.language.{ higherKinds, implicitConversions }	scala/collection/parallel/ParIterableLike.scala	/^import scala.language.{ higherKinds, implicitConversions }$/;"	i
scala.language.{ higherKinds, implicitConversions }	scala/runtime/Tuple2Zipped.scala	/^import scala.language.{ higherKinds, implicitConversions }$/;"	i
scala.language.{ higherKinds, implicitConversions }	scala/runtime/Tuple3Zipped.scala	/^import scala.language.{ higherKinds, implicitConversions }$/;"	i
scala.language.{higherKinds, implicitConversions}	scala/concurrent/TaskRunner.scala	/^import scala.language.{higherKinds, implicitConversions}$/;"	i
scala.language.{implicitConversions, existentials}	scala/Predef.scala	/^import scala.language.{implicitConversions, existentials}$/;"	i
scala.language.{implicitConversions, existentials}	scala/reflect/ClassTag.scala	/^import scala.language.{implicitConversions, existentials}$/;"	i
scala.language.{implicitConversions, higherKinds}	scala/collection/TraversableOnce.scala	/^import scala.language.{implicitConversions, higherKinds}$/;"	i
scala.language.{implicitConversions, higherKinds}	scala/concurrent/FutureTaskRunner.scala	/^import scala.language.{implicitConversions, higherKinds}$/;"	i
scala.language.{implicitConversions, higherKinds}	scala/math/Ordering.scala	/^import scala.language.{implicitConversions, higherKinds}$/;"	i
scala.language.{implicitConversions, higherKinds}	scala/util/Random.scala	/^import scala.language.{implicitConversions, higherKinds}$/;"	i
scala.math	scala/math/BigDecimal.scala	/^package scala.math$/;"	p
scala.math	scala/math/BigInt.scala	/^package scala.math$/;"	p
scala.math	scala/math/Equiv.scala	/^package scala.math$/;"	p
scala.math	scala/math/Fractional.scala	/^package scala.math$/;"	p
scala.math	scala/math/Integral.scala	/^package scala.math$/;"	p
scala.math	scala/math/Numeric.scala	/^package scala.math$/;"	p
scala.math	scala/math/Ordered.scala	/^package scala.math$/;"	p
scala.math	scala/math/PartialOrdering.scala	/^package scala.math$/;"	p
scala.math	scala/math/PartiallyOrdered.scala	/^package scala.math$/;"	p
scala.math	scala/math/ScalaNumber.java	/^package scala.math;$/;"	p
scala.math	scala/math/ScalaNumericConversions.scala	/^package scala.math$/;"	p
scala.math.ScalaNumber	scala/collection/immutable/StringLike.scala	/^import scala.math.ScalaNumber$/;"	i
scala.math.{ Ordering, max, min }	scala/util/Sorting.scala	/^import scala.math.{ Ordering, max, min }$/;"	i
scala.math.{ ScalaNumericConversions, ScalaNumericAnyConversions }	scala/runtime/ScalaNumberProxy.scala	/^import scala.math.{ ScalaNumericConversions, ScalaNumericAnyConversions }$/;"	i
scala.math.{ min, max, Ordering }	scala/collection/SeqLike.scala	/^import scala.math.{ min, max, Ordering }$/;"	i
scala.parallel	scala/parallel/Future.scala	/^package scala.parallel$/;"	p
scala.ref	scala/ref/PhantomReference.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/Reference.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/ReferenceQueue.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/ReferenceWrapper.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/SoftReference.scala	/^package scala.ref$/;"	p
scala.ref	scala/ref/WeakReference.scala	/^package scala.ref$/;"	p
scala.reflect	scala/reflect/ClassManifestDeprecatedApis.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/Manifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/NoManifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/OptManifest.scala	/^package scala.reflect$/;"	p
scala.reflect	scala/reflect/ScalaLongSignature.java	/^package scala.reflect;$/;"	p
scala.reflect	scala/reflect/ScalaSignature.java	/^package scala.reflect;$/;"	p
scala.reflect.ClassTag	scala/Array.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/GenTraversableOnce.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/TraversableOnce.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/TraversableProxyLike.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/generic/ClassTagTraversableFactory.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/generic/GenericClassTagCompanion.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/generic/TraversableForwarder.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/immutable/PagedSeq.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/immutable/StringLike.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/mutable/ArrayBuilder.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/mutable/ArrayOps.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/mutable/ArrayStack.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/mutable/UnrolledBuffer.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/mutable/WrappedArray.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/mutable/WrappedArrayBuilder.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/parallel/mutable/ParArray.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/concurrent/Future.scala	/^import scala.reflect.ClassTag$/;"	i
scala.reflect.ClassTag	scala/util/Marshal.scala	/^  import scala.reflect.ClassTag$/;"	i
scala.reflect.NameTransformer._	scala/Enumeration.scala	/^import scala.reflect.NameTransformer._$/;"	i
scala.reflect.macros	scala/reflect/macros/internal/macroImpl.scala	/^package scala.reflect.macros$/;"	p
scala.reflect.{ ClassTag, classTag }	scala/runtime/ScalaRunTime.scala	/^import scala.reflect.{ ClassTag, classTag }$/;"	i
scala.reflect.{ ClassTag, classTag }	scala/util/Sorting.scala	/^import scala.reflect.{ ClassTag, classTag }$/;"	i
scala.reflect.{ ClassTag, classTag }	scala/util/control/Exception.scala	/^import scala.reflect.{ ClassTag, classTag }$/;"	i
scala.reflect.{ClassTag, classTag}	scala/collection/parallel/ParIterableLike.scala	/^import scala.reflect.{ClassTag, classTag}$/;"	i
scala.runtime	scala/runtime/AbstractFunction0.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction1.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction10.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction11.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction12.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction13.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction14.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction15.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction16.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction17.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction18.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction19.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction2.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction20.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction21.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction22.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction3.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction4.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction5.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction6.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction7.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction8.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractFunction9.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/AbstractPartialFunction.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ArrayRuntime.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/BooleanRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/Boxed.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/BoxedUnit.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/BoxesRunTime.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/ByteRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/CharRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/DoubleRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/FloatRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/IntRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/LongRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/MethodCache.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/NonLocalReturnControl.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/Nothing$.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/Null$.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ObjectRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/RichBoolean.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichByte.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichChar.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichException.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichInt.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichLong.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/RichShort.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ScalaNumberProxy.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/ShortRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/Statics.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/StringAdd.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/StringFormat.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/TraitSetter.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/Tuple2Zipped.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/Tuple3Zipped.scala	/^package scala.runtime$/;"	p
scala.runtime	scala/runtime/VolatileBooleanRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileByteRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileCharRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileDoubleRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileFloatRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileIntRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileLongRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileObjectRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/VolatileShortRef.java	/^package scala.runtime;$/;"	p
scala.runtime	scala/runtime/WorksheetSupport.scala	/^package scala.runtime$/;"	p
scala.runtime.ScalaRunTime	scala/collection/mutable/ArrayBuilder.scala	/^import scala.runtime.ScalaRunTime$/;"	i
scala.runtime.ScalaRunTime._	scala/collection/mutable/ArrayOps.scala	/^import scala.runtime.ScalaRunTime._$/;"	i
scala.runtime.ScalaRunTime._	scala/collection/mutable/WrappedArray.scala	/^import scala.runtime.ScalaRunTime._$/;"	i
scala.runtime.ScalaRunTime._	scala/collection/mutable/WrappedArrayBuilder.scala	/^import scala.runtime.ScalaRunTime._$/;"	i
scala.runtime.ScalaRunTime.stringOf	scala/runtime/WorksheetSupport.scala	/^import scala.runtime.ScalaRunTime.stringOf$/;"	i
scala.runtime.ScalaRunTime.{ arrayClass, arrayElementClass }	scala/reflect/ClassTag.scala	/^import scala.runtime.ScalaRunTime.{ arrayClass, arrayElementClass }$/;"	i
scala.runtime.ScalaRunTime.{ array_apply, array_update }	scala/Array.scala	/^import scala.runtime.ScalaRunTime.{ array_apply, array_update }$/;"	i
scala.sys	scala/sys/BooleanProp.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/PropImpl.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/ShutdownHookThread.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/SystemProperties.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/BasicIO.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/Process.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessBuilder.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessBuilderImpl.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessIO.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessImpl.scala	/^package scala.sys$/;"	p
scala.sys	scala/sys/process/ProcessLogger.scala	/^package scala.sys$/;"	p
scala.testing	scala/testing/Benchmark.scala	/^package scala.testing$/;"	p
scala.testing	scala/testing/Show.scala	/^package scala.testing$/;"	p
scala.text	scala/text/Document.scala	/^package scala.text$/;"	p
scala.util	scala/util/DynamicVariable.scala	/^package scala.util$/;"	p
scala.util	scala/util/Either.scala	/^package scala.util$/;"	p
scala.util	scala/util/Marshal.scala	/^package scala.util$/;"	p
scala.util	scala/util/MurmurHash.scala	/^package scala.util$/;"	p
scala.util	scala/util/Properties.scala	/^package scala.util$/;"	p
scala.util	scala/util/Random.scala	/^package scala.util$/;"	p
scala.util	scala/util/Try.scala	/^package scala.util$/;"	p
scala.util	scala/util/continuations/package.scala	/^package scala.util$/;"	p
scala.util	scala/util/control/Exception.scala	/^package scala.util$/;"	p
scala.util	scala/util/hashing/package.scala	/^package scala.util$/;"	p
scala.util.DynamicVariable	scala/Console.scala	/^import scala.util.DynamicVariable$/;"	i
scala.util.DynamicVariable	scala/util/parsing/combinator/Parsers.scala	/^import scala.util.DynamicVariable$/;"	i
scala.util.Try	scala/concurrent/ExecutionContext.scala	/^import scala.util.Try$/;"	i
scala.util.automata	scala/util/automata/BaseBerrySethi.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/DetWordAutom.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/Inclusion.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/NondetWordAutom.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/SubsetConstruction.scala	/^package scala.util.automata$/;"	p
scala.util.automata	scala/util/automata/WordBerrySethi.scala	/^package scala.util.automata$/;"	p
scala.util.automata._	scala/xml/dtd/ContentModel.scala	/^import scala.util.automata._$/;"	i
scala.util.automata._	scala/xml/dtd/ElementValidator.scala	/^import scala.util.automata._$/;"	i
scala.util.continuations	scala/util/continuations/ControlContext.scala	/^package scala.util.continuations$/;"	p
scala.util.control	scala/util/control/Breaks.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/ControlThrowable.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/NonFatal.scala	/^package scala.util.control$/;"	p
scala.util.control	scala/util/control/TailCalls.scala	/^package scala.util.control$/;"	p
scala.util.control.Breaks	scala/collection/Traversable.scala	/^import scala.util.control.Breaks$/;"	i
scala.util.control.Breaks._	scala/collection/Iterable.scala	/^import scala.util.control.Breaks._$/;"	i
scala.util.control.Breaks._	scala/collection/LinearSeqLike.scala	/^import scala.util.control.Breaks._$/;"	i
scala.util.control.Breaks._	scala/collection/LinearSeqOptimized.scala	/^import scala.util.control.Breaks._$/;"	i
scala.util.control.Breaks._	scala/collection/parallel/Tasks.scala	/^import scala.util.control.Breaks._$/;"	i
scala.util.control.ControlThrowable	scala/collection/concurrent/TrieMap.scala	/^import scala.util.control.ControlThrowable$/;"	i
scala.util.control.ControlThrowable	scala/runtime/NonLocalReturnControl.scala	/^import scala.util.control.ControlThrowable$/;"	i
scala.util.control.ControlThrowable	scala/runtime/ScalaRunTime.scala	/^import scala.util.control.ControlThrowable$/;"	i
scala.util.control.Exception.allCatch	scala/concurrent/ops.scala	/^import scala.util.control.Exception.allCatch$/;"	i
scala.util.control.Exception.ultimately	scala/xml/XML.scala	/^import scala.util.control.Exception.ultimately$/;"	i
scala.util.control.Exception.{ catching, ignoring }	scala/xml/include/sax/Main.scala	/^import scala.util.control.Exception.{ catching, ignoring }$/;"	i
scala.util.control.NonFatal	scala/concurrent/Future.scala	/^import scala.util.control.NonFatal$/;"	i
scala.util.control.NonFatal	scala/concurrent/impl/ExecutionContextImpl.scala	/^import scala.util.control.NonFatal$/;"	i
scala.util.control.NonFatal	scala/concurrent/impl/Future.scala	/^import scala.util.control.NonFatal$/;"	i
scala.util.control.NonFatal	scala/concurrent/impl/Promise.scala	/^import scala.util.control.NonFatal$/;"	i
scala.util.control.NonFatal	scala/util/Try.scala	/^import scala.util.control.NonFatal$/;"	i
scala.util.grammar	scala/util/grammar/HedgeRHS.scala	/^package scala.util.grammar$/;"	p
scala.util.grammar	scala/util/grammar/TreeRHS.scala	/^package scala.util.grammar$/;"	p
scala.util.hashing	scala/util/hashing/ByteswapHashing.scala	/^package scala.util.hashing$/;"	p
scala.util.hashing	scala/util/hashing/Hashing.scala	/^package scala.util.hashing$/;"	p
scala.util.hashing	scala/util/hashing/MurmurHash3.scala	/^package scala.util.hashing$/;"	p
scala.util.hashing.Hashing	scala/collection/concurrent/TrieMap.scala	/^import scala.util.hashing.Hashing$/;"	i
scala.util.hashing.byteswap32	scala/collection/convert/Wrappers.scala	/^            import scala.util.hashing.byteswap32$/;"	i
scala.util.logging	scala/util/logging/ConsoleLogger.scala	/^package scala.util.logging$/;"	p
scala.util.logging	scala/util/logging/Logged.scala	/^package scala.util.logging$/;"	p
scala.util.logging.Logged	scala/xml/parsing/MarkupHandler.scala	/^import scala.util.logging.Logged$/;"	i
scala.util.logging.Logged	scala/xml/parsing/ValidatingMarkupHandler.scala	/^import scala.util.logging.Logged$/;"	i
scala.util.logging.Logged	scala/xml/persistent/CachedFileStorage.scala	/^import scala.util.logging.Logged$/;"	i
scala.util.matching	scala/util/matching/Regex.scala	/^package scala.util.matching$/;"	p
scala.util.matching.Regex	scala/collection/immutable/PagedSeq.scala	/^import scala.util.matching.Regex$/;"	i
scala.util.matching.Regex	scala/collection/immutable/StringLike.scala	/^import scala.util.matching.Regex$/;"	i
scala.util.matching.Regex	scala/util/parsing/combinator/RegexParsers.scala	/^import scala.util.matching.Regex$/;"	i
scala.util.matching.Regex	scala/xml/include/sax/EncodingHeuristics.scala	/^import scala.util.matching.Regex$/;"	i
scala.util.parsing	scala/util/parsing/combinator/lexical/Lexical.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/lexical/Scanners.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/lexical/StdLexical.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/token/StdTokens.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing	scala/util/parsing/combinator/token/Tokens.scala	/^package scala.util.parsing$/;"	p
scala.util.parsing.ast	scala/util/parsing/ast/AbstractSyntax.scala	/^package scala.util.parsing.ast$/;"	p
scala.util.parsing.ast	scala/util/parsing/ast/Binders.scala	/^package scala.util.parsing.ast$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/ImplicitConversions.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/JavaTokenParsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/PackratParsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/Parsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator	scala/util/parsing/combinator/RegexParsers.scala	/^package scala.util.parsing.combinator$/;"	p
scala.util.parsing.combinator._	scala/util/parsing/combinator/PackratParsers.scala	/^import scala.util.parsing.combinator._$/;"	i
scala.util.parsing.combinator._	scala/util/parsing/combinator/testing/RegexTest.scala	/^import scala.util.parsing.combinator._$/;"	i
scala.util.parsing.combinator._	scala/util/parsing/combinator/testing/Tester.scala	/^import scala.util.parsing.combinator._$/;"	i
scala.util.parsing.combinator._	scala/util/parsing/json/JSON.scala	/^import scala.util.parsing.combinator._$/;"	i
scala.util.parsing.combinator._	scala/util/parsing/json/Lexer.scala	/^import scala.util.parsing.combinator._$/;"	i
scala.util.parsing.combinator._	scala/util/parsing/json/Parser.scala	/^import scala.util.parsing.combinator._$/;"	i
scala.util.parsing.combinator.lexical.Lexical	scala/util/parsing/combinator/testing/Tester.scala	/^import scala.util.parsing.combinator.lexical.Lexical$/;"	i
scala.util.parsing.combinator.lexical._	scala/util/parsing/json/JSON.scala	/^import scala.util.parsing.combinator.lexical._$/;"	i
scala.util.parsing.combinator.lexical._	scala/util/parsing/json/Lexer.scala	/^import scala.util.parsing.combinator.lexical._$/;"	i
scala.util.parsing.combinator.lexical._	scala/util/parsing/json/Parser.scala	/^import scala.util.parsing.combinator.lexical._$/;"	i
scala.util.parsing.combinator.syntactical.TokenParsers	scala/util/parsing/combinator/testing/Tester.scala	/^import scala.util.parsing.combinator.syntactical.TokenParsers$/;"	i
scala.util.parsing.combinator.syntactical._	scala/util/parsing/json/JSON.scala	/^import scala.util.parsing.combinator.syntactical._$/;"	i
scala.util.parsing.combinator.syntactical._	scala/util/parsing/json/Lexer.scala	/^import scala.util.parsing.combinator.syntactical._$/;"	i
scala.util.parsing.combinator.syntactical._	scala/util/parsing/json/Parser.scala	/^import scala.util.parsing.combinator.syntactical._$/;"	i
scala.util.parsing.combinator.testing	scala/util/parsing/combinator/testing/RegexTest.scala	/^package scala.util.parsing.combinator.testing$/;"	p
scala.util.parsing.combinator.testing	scala/util/parsing/combinator/testing/Tester.scala	/^package scala.util.parsing.combinator.testing$/;"	p
scala.util.parsing.input	scala/util/parsing/input/CharArrayReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/CharSequenceReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/NoPosition.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/OffsetPosition.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/PagedSeqReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/Position.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/Positional.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/Reader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input	scala/util/parsing/input/StreamReader.scala	/^package scala.util.parsing.input$/;"	p
scala.util.parsing.input.CharArrayReader.EofCh	scala/util/parsing/json/Lexer.scala	/^import scala.util.parsing.input.CharArrayReader.EofCh$/;"	i
scala.util.parsing.input.Positional	scala/util/parsing/ast/AbstractSyntax.scala	/^import scala.util.parsing.input.Positional$/;"	i
scala.util.parsing.input._	scala/util/parsing/combinator/Parsers.scala	/^import scala.util.parsing.input._$/;"	i
scala.util.parsing.input._	scala/util/parsing/combinator/RegexParsers.scala	/^import scala.util.parsing.input._$/;"	i
scala.util.parsing.input._	scala/util/parsing/combinator/testing/RegexTest.scala	/^import scala.util.parsing.input._$/;"	i
scala.util.parsing.input.{ Reader, Position }	scala/util/parsing/combinator/PackratParsers.scala	/^import scala.util.parsing.input.{ Reader, Position }$/;"	i
scala.util.parsing.json	scala/util/parsing/json/JSON.scala	/^package scala.util.parsing.json$/;"	p
scala.util.parsing.json	scala/util/parsing/json/Lexer.scala	/^package scala.util.parsing.json$/;"	p
scala.util.parsing.json	scala/util/parsing/json/Parser.scala	/^package scala.util.parsing.json$/;"	p
scala.util.regexp	scala/util/regexp/Base.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp	scala/util/regexp/PointedHedgeExp.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp	scala/util/regexp/SyntaxError.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp	scala/util/regexp/WordExp.scala	/^package scala.util.regexp$/;"	p
scala.util.regexp.WordExp	scala/util/automata/WordBerrySethi.scala	/^import scala.util.regexp.WordExp$/;"	i
scala.util.regexp.WordExp	scala/xml/dtd/ContentModel.scala	/^import scala.util.regexp.WordExp$/;"	i
scala.util.regexp.{ Base }	scala/util/automata/BaseBerrySethi.scala	/^import scala.util.regexp.{ Base }$/;"	i
scala.util.{ Try, Success, Failure }	scala/concurrent/Promise.scala	/^import scala.util.{ Try, Success, Failure }$/;"	i
scala.util.{ Try, Success, Failure }	scala/concurrent/impl/Promise.scala	/^import scala.util.{ Try, Success, Failure }$/;"	i
scala.util.{Try, Success, Failure}	scala/concurrent/Future.scala	/^import scala.util.{Try, Success, Failure}$/;"	i
scala.util.{Try, Success, Failure}	scala/concurrent/impl/Future.scala	/^import scala.util.{Try, Success, Failure}$/;"	i
scala.xml	scala/xml/Atom.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Attribute.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Comment.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Document.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Elem.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/EntityRef.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Equality.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Group.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/MalformedAttributeException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/MetaData.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/NamespaceBinding.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Node.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/NodeBuffer.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/NodeSeq.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Null.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/PCData.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/PrefixedAttribute.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/PrettyPrinter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/ProcInstr.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/QNode.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/SpecialNode.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Text.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/TextBuffer.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/TopScope.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/TypeSymbol.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Unparsed.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/UnprefixedAttribute.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Utility.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/XML.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/Xhtml.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ContentModel.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ContentModelParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/DTD.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/Decl.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/DocType.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ElementValidator.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ExternalID.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/Scanner.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/Tokens.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/dtd/ValidationException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/Binder.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/LoggedNodeFactory.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/NodeFactory.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/factory/XMLLoader.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/CircularIncludeException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/UnavailableResourceException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/XIncludeException.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/EncodingHeuristics.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/Main.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/XIncludeFilter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/include/sax/XIncluder.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ConstructingHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ConstructingParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/DefaultMarkupHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ExternalSources.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/FactoryAdapter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/FatalError.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/MarkupHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/MarkupParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/MarkupParserCommon.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/NoBindingFactoryAdapter.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/TokenTests.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/ValidatingMarkupHandler.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/XhtmlEntities.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/parsing/XhtmlParser.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/persistent/CachedFileStorage.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/persistent/Index.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/persistent/SetStorage.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/pull/XMLEvent.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/pull/XMLEventReader.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/pull/package.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/transform/BasicTransformer.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/transform/RewriteRule.scala	/^package scala.xml$/;"	p
scala.xml	scala/xml/transform/RuleTransformer.scala	/^package scala.xml$/;"	p
scala.xml.Source._	scala/xml/factory/XMLLoader.scala	/^  import scala.xml.Source._$/;"	i
scala.xml.Utility.sbToString	scala/xml/dtd/ContentModel.scala	/^import scala.xml.Utility.sbToString$/;"	i
scala.xml.dtd._	scala/xml/parsing/MarkupHandler.scala	/^import scala.xml.dtd._$/;"	i
scala.xml.dtd._	scala/xml/parsing/MarkupParser.scala	/^import scala.xml.dtd._$/;"	i
scala.xml.dtd._	scala/xml/parsing/MarkupParserCommon.scala	/^import scala.xml.dtd._$/;"	i
scala.xml.dtd._	scala/xml/parsing/ValidatingMarkupHandler.scala	/^import scala.xml.dtd._$/;"	i
scala.xml.dtd.{ IntDef, ParsedEntityDecl }	scala/xml/parsing/XhtmlEntities.scala	/^import scala.xml.dtd.{ IntDef, ParsedEntityDecl }$/;"	i
scala.xml.include._	scala/xml/include/sax/EncodingHeuristics.scala	/^import scala.xml.include._$/;"	i
scala.xml.include._	scala/xml/include/sax/XIncludeFilter.scala	/^import scala.xml.include._$/;"	i
scala.xml.include._	scala/xml/include/sax/XIncluder.scala	/^import scala.xml.include._$/;"	i
scala.xml.parsing.ConstructingParser	scala/xml/persistent/CachedFileStorage.scala	/^    import scala.xml.parsing.ConstructingParser$/;"	i
scala.xml.parsing.{ ExternalSources, MarkupHandler, MarkupParser }	scala/xml/pull/XMLEventReader.scala	/^import scala.xml.parsing.{ ExternalSources, MarkupHandler, MarkupParser }$/;"	i
scala.xml.{ Node, MetaData }	scala/runtime/ScalaRunTime.scala	/^import scala.xml.{ Node, MetaData }$/;"	i
scalaCmd	scala/util/Properties.scala	/^  def scalaCmd              = if (isWin) "scala.bat" else "scala"$/;"	m
scalaHome	scala/util/Properties.scala	/^  def scalaHome             = propOrEmpty("scala.home")$/;"	m
scalaPropOrElse	scala/util/Properties.scala	/^  def scalaPropOrElse(name: String, alt: String): String = scalaProps.getProperty(name, alt)$/;"	m
scalaPropOrEmpty	scala/util/Properties.scala	/^  def scalaPropOrEmpty(name: String): String             = scalaPropOrElse(name, "")$/;"	m
scalaPropOrNone	scala/util/Properties.scala	/^  def scalaPropOrNone(name: String): Option[String]      = Option(scalaProps.getProperty(name))$/;"	m
scalaProps	scala/util/Properties.scala	/^  protected lazy val scalaProps: java.util.Properties = {$/;"	V
scalacCmd	scala/util/Properties.scala	/^  def scalacCmd             = if (isWin) "scalac.bat" else "scalac"$/;"	m
scale	scala/math/BigDecimal.scala	/^  def scale: Int = this.bigDecimal.scale()$/;"	m
scan	scala/collection/GenTraversableLike.scala	/^  def scan[B >: A, That](z: B)(op: (B, B) => B)(implicit cbf: CanBuildFrom[Repr, B, That]): That$/;"	m
scan	scala/collection/TraversableLike.scala	/^  def scan[B >: A, That](z: B)(op: (B, B) => B)(implicit cbf: CanBuildFrom[Repr, B, That]): That = scanLeft(z)(op)$/;"	m
scan	scala/collection/parallel/ParIterableLike.scala	/^  def scan[U >: T, That](z: U)(op: (U, U) => U)(implicit bf: CanBuildFrom[Repr, U, That]): That = if (bf(repr).isCombiner) {$/;"	m
scanLeft	scala/collection/GenTraversableLike.scala	/^  def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
scanLeft	scala/collection/Iterator.scala	/^  def scanLeft[B](z: B)(op: (B, A) => B): Iterator[B] = new AbstractIterator[B] {$/;"	m
scanLeft	scala/collection/TraversableLike.scala	/^  def scanLeft[B, That](z: B)(op: (B, A) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
scanLeft	scala/collection/parallel/ParIterableLike.scala	/^  def scanLeft[S, That](z: S)(op: (S, T) => S)(implicit bf: CanBuildFrom[Repr, S, That]) = setTaskSupport(seq.scanLeft(z)(op)(bf2seq(bf)), tasksupport)$/;"	m
scanRight	scala/collection/GenTraversableLike.scala	/^  def scanRight[B, That](z: B)(op: (A, B) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
scanRight	scala/collection/Iterator.scala	/^  def scanRight[B](z: B)(op: (A, B) => B): Iterator[B] = toBuffer.scanRight(z)(op).iterator$/;"	m
scanRight	scala/collection/TraversableLike.scala	/^  def scanRight[B, That](z: B)(op: (A, B) => B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
scanRight	scala/collection/parallel/ParIterableLike.scala	/^  def scanRight[S, That](z: S)(op: (T, S) => S)(implicit bf: CanBuildFrom[Repr, S, That]) = setTaskSupport(seq.scanRight(z)(op)(bf2seq(bf)), tasksupport)$/;"	m
scanToArray	scala/collection/parallel/RemainsIterator.scala	/^  def scanToArray[U >: T, A >: U](z: U, op: (U, U) => U, array: Array[A], from: Int) {$/;"	m
scanToCombiner	scala/collection/parallel/RemainsIterator.scala	/^  def scanToCombiner[U >: T, That](howmany: Int, startValue: U, op: (U, U) => U, cb: Combiner[U, That]) = {$/;"	m
scanToCombiner	scala/collection/parallel/RemainsIterator.scala	/^  def scanToCombiner[U >: T, That](startValue: U, op: (U, U) => U, cb: Combiner[U, That]) = {$/;"	m
scanned	scala/collection/TraversableLike.scala	/^    var scanned = List(z)$/;"	v
scope	scala/util/parsing/ast/Binders.scala	/^  class UnderBinder[binderType  <: NameElement, elementT <% Mappable[elementT]](val scope: Scope[binderType], private[Binders] val element: elementT) extends Element with BindingSensitive {$/;"	V
scope	scala/xml/Elem.scala	/^  override val scope: NamespaceBinding,$/;"	V
scope	scala/xml/Node.scala	/^  def scope: NamespaceBinding = TopScope$/;"	m
scope	scala/xml/parsing/MarkupParser.scala	/^    var scope: NamespaceBinding = pscope$/;"	v
scopeStack	scala/xml/parsing/FactoryAdapter.scala	/^  var scopeStack  = new mutable.Stack[NamespaceBinding]$/;"	v
scp	scala/xml/parsing/FactoryAdapter.scala	/^    val scp = scopeStack.pop$/;"	V
scpe	scala/xml/parsing/FactoryAdapter.scala	/^    var scpe: NamespaceBinding =$/;"	v
script	scala/collection/script/Location.scala	/^package script$/;"	p
script	scala/collection/script/Message.scala	/^package script$/;"	p
script	scala/collection/script/Scriptable.scala	/^package script$/;"	p
script._	scala/collection/mutable/BufferLike.scala	/^import script._$/;"	i
script._	scala/collection/mutable/BufferProxy.scala	/^import script._$/;"	i
script._	scala/collection/mutable/ObservableBuffer.scala	/^import script._$/;"	i
script._	scala/collection/mutable/ObservableMap.scala	/^import script._$/;"	i
script._	scala/collection/mutable/ObservableSet.scala	/^import script._$/;"	i
script._	scala/collection/mutable/SetLike.scala	/^import script._$/;"	i
script._	scala/collection/mutable/SynchronizedBuffer.scala	/^import script._$/;"	i
script._	scala/collection/mutable/SynchronizedSet.scala	/^import script._$/;"	i
search	scala/concurrent/Future.scala	/^      val search: Try[T] => Unit = v => try {$/;"	V
second	scala/concurrent/duration/DurationConversions.scala	/^  def second       = seconds$/;"	m
second	scala/concurrent/duration/DurationConversions.scala	/^  def second[C](c: C)(implicit ev: Classifier[C]): ev.R = seconds(c)$/;"	m
second	scala/sys/process/ProcessImpl.scala	/^          val second = b.run(io)$/;"	V
second	scala/sys/process/ProcessImpl.scala	/^      val second = b.run(secondIO)$/;"	V
second	scala/util/continuations/package.scala	/^ *       val second = ask("Please enter another number")$/;"	V
secondIO	scala/sys/process/ProcessImpl.scala	/^      val secondIO = defaultIO.withInput(toInput => currentSink put Some(toInput))$/;"	V
seconds	scala/concurrent/duration/DurationConversions.scala	/^  def seconds      = durationIn(SECONDS)$/;"	m
seconds	scala/concurrent/duration/DurationConversions.scala	/^  def seconds[C](c: C)(implicit ev: Classifier[C]): ev.R = ev.convert(seconds)$/;"	m
seed	scala/util/parsing/combinator/PackratParsers.scala	/^  private case class LR(var seed: ParseResult[_], var rule: Parser[_], var head: Option[Head]){$/;"	v
seedArray	scala/util/MurmurHash.scala	/^  final private val seedArray = 0x3c074a61$/;"	V
seedString	scala/util/MurmurHash.scala	/^  final private val seedString = 0xf7ca7fd2$/;"	V
seedvalue	scala/collection/mutable/FlatHashTable.scala	/^    val seedvalue: Int,$/;"	V
seedvalue	scala/collection/mutable/FlatHashTable.scala	/^  @transient protected var seedvalue: Int = tableSizeSeed$/;"	v
seedvalue	scala/collection/mutable/HashTable.scala	/^    val seedvalue: Int,$/;"	V
seedvalue	scala/collection/mutable/HashTable.scala	/^  @transient protected var seedvalue: Int = tableSizeSeed$/;"	v
seedvalue	scala/collection/parallel/mutable/ParHashMap.scala	/^  private var seedvalue = 27$/;"	v
seedvalue	scala/collection/parallel/mutable/ParHashSet.scala	/^  private var seedvalue = 27$/;"	v
seen	scala/collection/SeqLike.scala	/^    val seen = mutable.HashSet[A]()$/;"	V
seen	scala/collection/immutable/ListSet.scala	/^    protected val seen  = new mutable.HashSet[Elem] ++= initial$/;"	V
seglen	scala/collection/parallel/ParSeqLike.scala	/^      val seglen = pit.prefixLength(pred)$/;"	V
segmentLength	scala/collection/GenSeqLike.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int$/;"	m
segmentLength	scala/collection/IndexedSeqOptimized.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int = {$/;"	m
segmentLength	scala/collection/LinearSeqOptimized.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int = {$/;"	m
segmentLength	scala/collection/SeqLike.scala	/^  def segmentLength(p: A => Boolean, from: Int): Int = {$/;"	m
segmentLength	scala/collection/parallel/ParSeqLike.scala	/^  def segmentLength(p: T => Boolean, from: Int): Int = if (from >= length) 0 else {$/;"	m
selectTag	scala/util/automata/SubsetConstruction.scala	/^  def selectTag(Q: immutable.BitSet, finals: Array[Int]) =$/;"	m
self	scala/Proxy.scala	/^    def self: T$/;"	m
self	scala/Proxy.scala	/^  def self: Any$/;"	m
self	scala/collection/Iterator.scala	/^    val self = buffered$/;"	V
self	scala/collection/TraversableProxyLike.scala	/^  def self: Repr$/;"	m
self	scala/collection/immutable/ListMap.scala	/^      var self: ListMap[A,B] = ListMap.this$/;"	v
self	scala/collection/immutable/MapProxy.scala	/^    new MapProxy[A, B1] { val self = newSelf }$/;"	V
self	scala/collection/immutable/MapProxy.scala	/^  override def keySet: immutable.Set[A] = new SetProxy[A] { val self = MapProxy.this.self.keySet }$/;"	V
self	scala/collection/immutable/NumericRange.scala	/^    val self = this$/;"	V
self	scala/collection/immutable/SetProxy.scala	/^    new AbstractSet[B] with SetProxy[B] { val self = newSelf }$/;"	V
self	scala/collection/immutable/WrappedString.scala	/^class WrappedString(val self: String) extends AbstractSeq[Char] with IndexedSeq[Char] with StringLike[WrappedString] {$/;"	V
self	scala/collection/mutable/BufferProxy.scala	/^    def self = BufferProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/BufferProxy.scala	/^  def self: Buffer[A]$/;"	m
self	scala/collection/mutable/Builder.scala	/^      val self = Builder.this$/;"	V
self	scala/collection/mutable/MapProxy.scala	/^    new MapProxy[A, B1] { val self = newSelf }$/;"	V
self	scala/collection/mutable/MapProxy.scala	/^  override def empty: MapProxy[A, B] = new MapProxy[A, B] { val self = MapProxy.this.self.empty }$/;"	V
self	scala/collection/mutable/PriorityQueueProxy.scala	/^    def self = PriorityQueueProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/PriorityQueueProxy.scala	/^  def self: PriorityQueue[A]$/;"	m
self	scala/collection/mutable/Publisher.scala	/^  protected val self: Pub = this.asInstanceOf[Pub]$/;"	V
self	scala/collection/mutable/QueueProxy.scala	/^    def self = QueueProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/QueueProxy.scala	/^  def self: Queue[A]$/;"	m
self	scala/collection/mutable/SetProxy.scala	/^  override def empty = new SetProxy[A] { val self = SetProxy.this.self.empty }$/;"	V
self	scala/collection/mutable/StackProxy.scala	/^    def self = StackProxy.this.self.clone()$/;"	m
self	scala/collection/mutable/StackProxy.scala	/^  def self: Stack[A]$/;"	m
self	scala/ref/ReferenceWrapper.scala	/^  def self = underlying$/;"	m
self	scala/runtime/RichBoolean.scala	/^final class RichBoolean(val self: Boolean) extends AnyVal with OrderedProxy[Boolean] {$/;"	V
self	scala/runtime/RichByte.scala	/^final class RichByte(val self: Byte) extends AnyVal with ScalaWholeNumberProxy[Byte] {$/;"	V
self	scala/runtime/RichChar.scala	/^final class RichChar(val self: Char) extends AnyVal with IntegralProxy[Char] {$/;"	V
self	scala/runtime/RichDouble.scala	/^final class RichDouble(val self: Double) extends AnyVal with FractionalProxy[Double] {$/;"	V
self	scala/runtime/RichFloat.scala	/^final class RichFloat(val self: Float) extends AnyVal with FractionalProxy[Float] {$/;"	V
self	scala/runtime/RichInt.scala	/^final class RichInt(val self: Int) extends AnyVal with ScalaNumberProxy[Int] with RangedProxy[Int] {$/;"	V
self	scala/runtime/RichLong.scala	/^final class RichLong(val self: Long) extends AnyVal with IntegralProxy[Long] {$/;"	V
self	scala/runtime/RichShort.scala	/^final class RichShort(val self: Short) extends AnyVal with ScalaWholeNumberProxy[Short] {$/;"	V
self	scala/runtime/StringAdd.scala	/^final class StringAdd(val self: Any) extends AnyVal {$/;"	V
self	scala/runtime/StringFormat.scala	/^final class StringFormat(val self: Any) extends AnyVal {$/;"	V
self	scala/util/Random.scala	/^class Random(val self: java.util.Random) {$/;"	V
self	scala/util/parsing/ast/Binders.scala	/^    def self: Element = scope.getElementFor(el)$/;"	m
selfExhausted	scala/collection/Iterator.scala	/^    private var selfExhausted : Boolean = false$/;"	v
selfrem	scala/collection/parallel/RemainsIterator.scala	/^      val selfrem = self.remaining$/;"	V
selfs	scala/collection/parallel/RemainsIterator.scala	/^      val selfs = self.psplit(selfsizes: _*)$/;"	V
selfs	scala/collection/parallel/RemainsIterator.scala	/^      val selfs = self.split$/;"	V
separate	scala/collection/immutable/List.scala	/^  def separate[A,B](es: Iterable[Either[A, B]]): (List[A], List[B]) =$/;"	m
seq	scala/collection/GenIterable.scala	/^  def seq: Iterable[A]$/;"	m
seq	scala/collection/GenMap.scala	/^  def seq: Map[A, B]$/;"	m
seq	scala/collection/GenMapLike.scala	/^  def seq: Map[A, B]$/;"	m
seq	scala/collection/GenSeq.scala	/^  def seq: Seq[A]$/;"	m
seq	scala/collection/GenSeqLike.scala	/^  def seq: Seq[A]$/;"	m
seq	scala/collection/GenSet.scala	/^  def seq: Set[A]$/;"	m
seq	scala/collection/GenSetLike.scala	/^  def seq: Set[A]$/;"	m
seq	scala/collection/GenTraversable.scala	/^  def seq: Traversable[A]$/;"	m
seq	scala/collection/GenTraversableOnce.scala	/^  def seq: TraversableOnce[A]$/;"	m
seq	scala/collection/IndexedSeqLike.scala	/^  def seq: IndexedSeq[A]$/;"	m
seq	scala/collection/Iterator.scala	/^  def seq: Iterator[A] = this$/;"	m
seq	scala/collection/LinearSeqLike.scala	/^  def seq: LinearSeq[A]$/;"	m
seq	scala/collection/Parallelizable.scala	/^  def seq: TraversableOnce[A]$/;"	m
seq	scala/collection/TraversableOnce.scala	/^  def seq: TraversableOnce[A]$/;"	m
seq	scala/collection/immutable/StringOps.scala	/^  def seq = new WrappedString(repr)$/;"	m
seq	scala/collection/mutable/ArrayOps.scala	/^  def seq = thisCollection$/;"	m
seq	scala/collection/package.scala	/^ * scala> val seq = Seq(1,2,3,4,1)$/;"	V
seq	scala/collection/parallel/ParIterableLike.scala	/^  def seq: Sequential$/;"	m
seq	scala/collection/parallel/ParMapLike.scala	/^    def seq = self.seq.filterKeys(p)$/;"	m
seq	scala/collection/parallel/ParMapLike.scala	/^    def seq = self.seq.mapValues(f)$/;"	m
seq	scala/collection/parallel/ParMapLike.scala	/^    def seq = self.seq.values$/;"	m
seq	scala/collection/parallel/mutable/ParIterable.scala	/^  def seq: scala.collection.mutable.Iterable[T]$/;"	m
seq	scala/collection/parallel/mutable/ParMap.scala	/^  def seq: scala.collection.mutable.Map[K, V]$/;"	m
seq	scala/collection/parallel/mutable/ParSeq.scala	/^  def seq: scala.collection.mutable.Seq[T]$/;"	m
seq	scala/collection/parallel/mutable/ParSet.scala	/^  def seq: scala.collection.mutable.Set[T]$/;"	m
seq	scala/xml/transform/BasicTransformer.scala	/^    val seq = transform(n)$/;"	V
seqHash	scala/util/hashing/MurmurHash3.scala	/^  def seqHash(xs: scala.collection.Seq[_]): Int    = xs match {$/;"	m
seqRest	scala/xml/dtd/ContentModelParser.scala	/^  def seqRest(p: RegExp) = {$/;"	m
seqReversed	scala/Array.scala	/^ *  val seqReversed : Seq[Int] = arr.reverse$/;"	V
seqSeed	scala/util/hashing/MurmurHash3.scala	/^  final val seqSeed         = "Seq".hashCode$/;"	V
sequ	scala/io/BytePickle.scala	/^  def sequ[t,u](f: u => t, pa: SPU[t], k: t => SPU[u]): SPU[u] = new SPU[u] {$/;"	m
sequence	scala/concurrent/Future.scala	/^  def sequence[A, M[_] <: TraversableOnce[_]](in: M[Future[A]])(implicit cbf: CanBuildFrom[M[Future[A]], A, M[A]], executor: ExecutionContext): Future[M[A]] = {$/;"	m
sequence	scala/util/parsing/ast/Binders.scala	/^  def sequence[bt <: NameElement, st <% Mappable[st]](orig: List[UnderBinder[bt, st]]): UnderBinder[bt, List[st]] =$/;"	m
serialVersionUID	scala/runtime/BooleanRef.java	/^    private static final long serialVersionUID = -5730524563015615974L;$/;"	f	class:BooleanRef	file:
serialVersionUID	scala/runtime/BoxedUnit.java	/^    private static final long serialVersionUID = 8405543498931817370L;$/;"	f	class:BoxedUnit	file:
serialVersionUID	scala/runtime/ByteRef.java	/^    private static final long serialVersionUID = -100666928446877072L;$/;"	f	class:ByteRef	file:
serialVersionUID	scala/runtime/CharRef.java	/^    private static final long serialVersionUID = 6537214938268005702L;$/;"	f	class:CharRef	file:
serialVersionUID	scala/runtime/DoubleRef.java	/^    private static final long serialVersionUID = 8304402127373655534L;$/;"	f	class:DoubleRef	file:
serialVersionUID	scala/runtime/FloatRef.java	/^    private static final long serialVersionUID = -5793980990371366933L;$/;"	f	class:FloatRef	file:
serialVersionUID	scala/runtime/IntRef.java	/^    private static final long serialVersionUID = 1488197132022872888L;$/;"	f	class:IntRef	file:
serialVersionUID	scala/runtime/LongRef.java	/^    private static final long serialVersionUID = -3567869820105829499L;$/;"	f	class:LongRef	file:
serialVersionUID	scala/runtime/ObjectRef.java	/^    private static final long serialVersionUID = -9055728157600312291L;$/;"	f	class:ObjectRef	file:
serialVersionUID	scala/runtime/ShortRef.java	/^    private static final long serialVersionUID = 4218441291229072313L;$/;"	f	class:ShortRef	file:
serialVersionUID	scala/runtime/VolatileBooleanRef.java	/^    private static final long serialVersionUID = -5730524563015615974L;$/;"	f	class:VolatileBooleanRef	file:
serialVersionUID	scala/runtime/VolatileByteRef.java	/^    private static final long serialVersionUID = -100666928446877072L;$/;"	f	class:VolatileByteRef	file:
serialVersionUID	scala/runtime/VolatileCharRef.java	/^    private static final long serialVersionUID = 6537214938268005702L;$/;"	f	class:VolatileCharRef	file:
serialVersionUID	scala/runtime/VolatileDoubleRef.java	/^    private static final long serialVersionUID = 8304402127373655534L;$/;"	f	class:VolatileDoubleRef	file:
serialVersionUID	scala/runtime/VolatileFloatRef.java	/^    private static final long serialVersionUID = -5793980990371366933L;$/;"	f	class:VolatileFloatRef	file:
serialVersionUID	scala/runtime/VolatileIntRef.java	/^    private static final long serialVersionUID = 1488197132022872888L;$/;"	f	class:VolatileIntRef	file:
serialVersionUID	scala/runtime/VolatileLongRef.java	/^    private static final long serialVersionUID = -3567869820105829499L;$/;"	f	class:VolatileLongRef	file:
serialVersionUID	scala/runtime/VolatileObjectRef.java	/^    private static final long serialVersionUID = -9055728157600312291L;$/;"	f	class:VolatileObjectRef	file:
serialVersionUID	scala/runtime/VolatileShortRef.java	/^    private static final long serialVersionUID = 4218441291229072313L;$/;"	f	class:VolatileShortRef	file:
serializable	scala/annotation/serializable.scala	/^class serializable extends scala.annotation.StaticAnnotation$/;"	c
serializable	scala/package.scala	/^  type serializable = annotation.serializable$/;"	T
ses	scala/collection/parallel/mutable/ParHashTable.scala	/^        val ses = itertable(sidx - 1).asInstanceOf[Entry] \/\/ sidx - 1 ensures counting from the right spot$/;"	V
sessions	scala/util/continuations/package.scala	/^ *   val sessions = new HashMap[UUID, Int=>Unit]$/;"	V
set	scala/collection/mutable/ImmutableSetAdaptor.scala	/^class ImmutableSetAdaptor[A](protected var set: immutable.Set[A])$/;"	v
set	scala/collection/mutable/MultiMap.scala	/^        val set = makeSet$/;"	V
set	scala/collection/package.scala	/^ * scala> val set = Set(1,2,3,4,1)$/;"	V
set	scala/concurrent/SyncVar.scala	/^  def set(x: A): Unit = setVal(x)$/;"	m
set	scala/sys/BooleanProp.scala	/^    def set(newValue: String) = "" + value$/;"	m
set	scala/sys/Prop.scala	/^  def set(newValue: String): String$/;"	m
set	scala/sys/PropImpl.scala	/^  def set(newValue: String): String = {$/;"	m
setBit	scala/math/BigInt.scala	/^  def setBit  (n: Int): BigInt  = new BigInt(this.bigInteger.setBit(n))$/;"	m
setCanBuildFrom	scala/collection/generic/GenSetFactory.scala	/^  def setCanBuildFrom[A] = new CanBuildFrom[CC[_], A, CC[A]] {$/;"	m
setCharAt	scala/collection/mutable/StringBuilder.scala	/^  def setCharAt(index: Int, ch: Char): Unit = underlying.setCharAt(index, ch)$/;"	m
setContentModel	scala/xml/dtd/ElementValidator.scala	/^  def setContentModel(cm: ContentModel) = {$/;"	m
setDocumentLocator	scala/xml/include/sax/XIncluder.scala	/^  def setDocumentLocator(locator: Locator) {}$/;"	m
setErr	scala/Console.scala	/^  def setErr(err: OutputStream): Unit =$/;"	m
setErr	scala/Console.scala	/^  def setErr(err: PrintStream) { errVar.value = err }$/;"	m
setEvent	scala/xml/pull/XMLEventReader.scala	/^    def setEvent(es: XMLEvent*): NodeSeq = {$/;"	m
setFilter	scala/xml/include/sax/XIncluder.scala	/^  def setFilter(filter: XIncludeFilter) {$/;"	m
setHash	scala/util/hashing/MurmurHash3.scala	/^  def setHash(xs: scala.collection.Set[_]): Int    = unorderedHash(xs, setSeed)$/;"	m
setIn	scala/Console.scala	/^  def setIn(in: InputStream) {$/;"	m
setIn	scala/Console.scala	/^  def setIn(reader: Reader) {$/;"	m
setIndexFlag	scala/collection/generic/Signalling.scala	/^  def setIndexFlag(f: Int) = signalDelegate.setIndexFlag(f)$/;"	m
setIndexFlag	scala/collection/generic/Signalling.scala	/^  def setIndexFlag(f: Int) {}$/;"	m
setIndexFlag	scala/collection/generic/Signalling.scala	/^  def setIndexFlag(f: Int)$/;"	m
setIndexFlagIfGreater	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfGreater(f: Int) = signalDelegate.setIndexFlagIfGreater(f)$/;"	m
setIndexFlagIfGreater	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfGreater(f: Int) {}$/;"	m
setIndexFlagIfGreater	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfGreater(f: Int)$/;"	m
setIndexFlagIfLesser	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfLesser(f: Int) = signalDelegate.setIndexFlagIfLesser(f)$/;"	m
setIndexFlagIfLesser	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfLesser(f: Int) {}$/;"	m
setIndexFlagIfLesser	scala/collection/generic/Signalling.scala	/^  def setIndexFlagIfLesser(f: Int)$/;"	m
setInternalSize	scala/collection/parallel/mutable/package.scala	/^    def setInternalSize(s: Int) = size0 = s$/;"	m
setLength	scala/collection/mutable/StringBuilder.scala	/^  def setLength(len: Int) { underlying setLength len }$/;"	m
setMetaData	scala/xml/dtd/ElementValidator.scala	/^  def setMetaData(adecls: List[AttrDecl]) { this.adecls = adecls }$/;"	m
setOut	scala/Console.scala	/^  def setOut(out: OutputStream): Unit =$/;"	m
setOut	scala/Console.scala	/^  def setOut(out: PrintStream) { outVar.value = out }$/;"	m
setPos	scala/util/parsing/input/Positional.scala	/^  def setPos(newpos: Position): this.type = {$/;"	m
setProp	scala/util/Properties.scala	/^  def setProp(name: String, value: String)      = System.setProperty(name, value)$/;"	m
setProperty	scala/collection/convert/Wrappers.scala	/^    def setProperty(key: String, value: String) =$/;"	m
setRootCause	scala/xml/include/XIncludeException.scala	/^  def setRootCause(nestedException: Throwable ) {$/;"	m
setScale	scala/math/BigDecimal.scala	/^  def setScale(scale: Int): BigDecimal = this.bigDecimal setScale scale$/;"	m
setScale	scala/math/BigDecimal.scala	/^  def setScale(scale: Int, mode: RoundingMode): BigDecimal =$/;"	m
setSeed	scala/util/Random.scala	/^  def setSeed(seed: Long) { self.setSeed(seed) }$/;"	m
setSeed	scala/util/hashing/MurmurHash3.scala	/^  final val setSeed         = "Set".hashCode$/;"	V
setSize	scala/collection/parallel/mutable/ParHashMap.scala	/^    def setSize(sz: Int) = tableSize = sz$/;"	m
setSize	scala/collection/parallel/mutable/ParHashSet.scala	/^    def setSize(sz: Int) = tableSize = sz$/;"	m
setTaskSupport	scala/collection/parallel/package.scala	/^  def setTaskSupport[Coll](c: Coll, t: TaskSupport): Coll = {$/;"	m
setValue	scala/collection/convert/Wrappers.scala	/^            def setValue(v1 : B) = self.put(k, v1)$/;"	m
setValue	scala/sys/BooleanProp.scala	/^    def setValue[T1 >: Boolean](newValue: T1): Boolean = value$/;"	m
setValue	scala/sys/Prop.scala	/^  def setValue[T1 >: T](value: T1): T$/;"	m
setValue	scala/sys/PropImpl.scala	/^  def setValue[T1 >: T](newValue: T1): T = {$/;"	m
setter	scala/annotation/target/package.scala	/^  type setter = scala.annotation.meta.setter$/;"	T
share	scala/io/BytePickle.scala	/^  def share[a](pa: SPU[a]): SPU[a] = new SPU[a] {$/;"	m
shared	scala/collection/parallel/ParIterableLike.scala	/^      val shared = combiner$/;"	V
shell	scala/sys/process/package.scala	/^  \/\/ private val shell: String => Array[String] =$/;"	V
shift	scala/collection/immutable/Vector.scala	/^        val shift = freeSpace & ~((1<<5*(depth-1))-1) \/\/ number of elements by which we'll shift right (only move at top level)$/;"	V
shift	scala/collection/immutable/Vector.scala	/^        val shift = startIndex & ~((1<<5*(depth-1))-1)$/;"	V
shift	scala/collection/immutable/Vector.scala	/^    val shift = (cutIndex & ~((1 << (5*d))-1))$/;"	V
shift	scala/collection/immutable/Vector.scala	/^    val shift = (startIndex & ~((1 << (5*d))-1))$/;"	V
shift	scala/util/continuations/package.scala	/^  def shift[A,B,C](fun: (A => B) => C): A @cpsParam[B,C] = {$/;"	m
shiftBlocks	scala/collection/immutable/Vector.scala	/^        val shiftBlocks = freeSpace >>> 5*(depth-1) \/\/ number of top-level blocks$/;"	V
shiftBlocks	scala/collection/immutable/Vector.scala	/^        val shiftBlocks = startIndex >>> 5*(depth-1)$/;"	V
shiftLogicalRight	scala/runtime/BoxesRunTime.java	/^    public static Object shiftLogicalRight(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
shiftR	scala/util/continuations/package.scala	/^  def shiftR[A,B,C](fun: (A => B) => C): ControlContext[A,B,C] = {$/;"	m
shiftSignedLeft	scala/runtime/BoxesRunTime.java	/^    public static Object shiftSignedLeft(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
shiftSignedRight	scala/runtime/BoxesRunTime.java	/^    public static Object shiftSignedRight(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
shiftUnit	scala/util/continuations/package.scala	/^  def shiftUnit[A,B,C>:B](x: A): A @cpsParam[B,C] = {$/;"	m
shiftUnit0	scala/util/continuations/package.scala	/^  def shiftUnit0[A,B](x: A): A @cpsParam[B,B] = {$/;"	m
shiftUnitR	scala/util/continuations/package.scala	/^  def shiftUnitR[A,B](x: A): ControlContext[A,B,B] = {$/;"	m
shifted	scala/collection/mutable/HashTable.scala	/^    val shifted = (improved >> (32 - java.lang.Integer.bitCount(ones))) & ones$/;"	V
shifted	scala/math/BigInt.scala	/^    val shifted = bigInteger.shiftRight(Int.MaxValue)$/;"	V
shortBy	scala/collection/Iterator.scala	/^          val shortBy = count - res.length$/;"	V
shortForm	scala/xml/Xhtml.scala	/^    def shortForm =$/;"	m
shortValue	scala/math/ScalaNumericConversions.scala	/^  def shortValue(): Short$/;"	m
shortValue	scala/runtime/ScalaNumberProxy.scala	/^  def shortValue()  = intValue.toShort$/;"	m
shortened	scala/collection/parallel/RemainsIterator.scala	/^      val shortened = for ((it, (from, until)) <- sq zip (sizes.init zip sizes.tail)) yield$/;"	V
shorter	scala/collection/generic/BitOperations.scala	/^    def shorter(m1: Int, m2: Int)               = unsignedCompare(m2, m1)$/;"	m
shorter	scala/collection/generic/BitOperations.scala	/^    def shorter(m1: Long, m2: Long)                = unsignedCompare(m2, m1)$/;"	m
shorter	scala/collection/immutable/List.scala	/^ *  val shorter =  mainList.tail  \/\/ costs nothing as it uses the same 2::1::Nil instances as mainList$/;"	V
shouldRethrow	scala/util/control/Exception.scala	/^  def shouldRethrow(x: Throwable): Boolean = x match {$/;"	m
shouldSplitFurther	scala/collection/parallel/ParIterableLike.scala	/^    def shouldSplitFurther = false$/;"	m
shouldSplitFurther	scala/collection/parallel/ParIterableLike.scala	/^    def shouldSplitFurther = pit.shouldSplitFurther(self.repr, tasksupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/ParIterableLike.scala	/^    def shouldSplitFurther = tree match {$/;"	m
shouldSplitFurther	scala/collection/parallel/RemainsIterator.scala	/^  def shouldSplitFurther[S](coll: ParIterable[S], parallelismLevel: Int) = remaining > thresholdFromSize(coll.size, parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/Tasks.scala	/^  def shouldSplitFurther: Boolean$/;"	m
shouldSplitFurther	scala/collection/parallel/immutable/ParHashMap.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(root.length, combinerTaskSupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/immutable/ParHashSet.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(root.length, combinerTaskSupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParArray.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(length, tasksupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParArray.scala	/^    def shouldSplitFurther = tree match {$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParHashMap.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(ParHashMapCombiner.numblocks, combinerTaskSupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParHashSet.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(ParHashMapCombiner.numblocks, combinerTaskSupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ParTrieMap.scala	/^    def shouldSplitFurther = howmany > 1$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(size, combinerTaskSupport.parallelismLevel)$/;"	m
shouldSplitFurther	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    def shouldSplitFurther = howmany > scala.collection.parallel.thresholdFromSize(size, combinerTaskSupport.parallelismLevel)$/;"	m
shouldWaitFor	scala/collection/parallel/Tasks.scala	/^    @volatile var shouldWaitFor = true$/;"	v
shuffle	scala/util/Random.scala	/^  def shuffle[T, CC[X] <: TraversableOnce[X]](xs: CC[T])(implicit bf: CanBuildFrom[CC[T], T, CC[T]]): CC[T] = {$/;"	m
shutdown	scala/concurrent/JavaConversions.scala	/^      def shutdown() =$/;"	m
shutdown	scala/concurrent/TaskRunner.scala	/^  def shutdown(): Unit$/;"	m
sidx	scala/collection/parallel/mutable/ParHashTable.scala	/^        val sidx = idx + divsz + 1 \/\/ + 1 preserves iteration invariant$/;"	V
sign	scala/util/parsing/json/Lexer.scala	/^  def sign = elem("sign character", d => d == '-' || d == '+')$/;"	m
signalDelegate	scala/collection/generic/Signalling.scala	/^  var signalDelegate: Signalling$/;"	v
signalDelegate	scala/collection/generic/Signalling.scala	/^class DelegatedContext(var signalDelegate: Signalling) extends DelegatedSignalling$/;"	v
signalDelegate	scala/collection/parallel/RemainsIterator.scala	/^  var signalDelegate: Signalling = IdleSignalling$/;"	v
signum	scala/math/BigDecimal.scala	/^  def signum: Int = this.bigDecimal.signum()$/;"	m
signum	scala/math/BigInt.scala	/^  def signum: Int = this.bigInteger.signum()$/;"	m
signum	scala/math/Numeric.scala	/^    def signum(): Int = Numeric.this.signum(lhs)$/;"	m
signum	scala/math/Numeric.scala	/^  def signum(x: T): Int =$/;"	m
signum	scala/math/package.scala	/^  def signum(x: Double): Double = java.lang.Math.signum(x)$/;"	m
signum	scala/math/package.scala	/^  def signum(x: Float): Float = java.lang.Math.signum(x)$/;"	m
signum	scala/math/package.scala	/^  def signum(x: Int): Int = java.lang.Integer.signum(x)$/;"	m
signum	scala/math/package.scala	/^  def signum(x: Long): Long = java.lang.Long.signum(x)$/;"	m
signum	scala/runtime/ScalaNumberProxy.scala	/^  def signum          = num.signum(self)$/;"	m
sin	scala/math/package.scala	/^  def sin(x: Double): Double = java.lang.Math.sin(x)$/;"	m
single	scala/collection/Iterator.scala	/^  def single[A](elem: A): Iterator[A] = new AbstractIterator[A] {$/;"	m
singleType	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] = Manifest.singleType(value)$/;"	m
singleType	scala/reflect/Manifest.scala	/^  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] =$/;"	m
singleton	scala/collection/immutable/IntMap.scala	/^  def singleton[T](key: Int, value: T): IntMap[T] = IntMap.Tip(key, value);$/;"	m
singleton	scala/collection/immutable/LongMap.scala	/^  def singleton[T](key: Long, value: T): LongMap[T] = LongMap.Tip(key, value)$/;"	m
singleton_	scala/Predef.scala	/^  private[this] final val singleton_=:= = new =:=[Any,Any] { def apply(x: Any): Any = x }$/;"	V
sinh	scala/math/package.scala	/^  def sinh(x: Double): Double = java.lang.Math.sinh(x)$/;"	m
sink	scala/sys/process/ProcessImpl.scala	/^      val sink        = new PipeSink(pipeIn, currentSink, b.toString)$/;"	V
sink	scala/util/automata/SubsetConstruction.scala	/^    val sink = immutable.BitSet.empty       \/\/ the set { }$/;"	V
siz	scala/collection/mutable/ListMap.scala	/^  private var siz: Int = 0$/;"	v
size	scala/collection/GenTraversableLike.scala	/^  def size: Int$/;"	m
size	scala/collection/GenTraversableOnce.scala	/^  def size: Int$/;"	m
size	scala/collection/TraversableOnce.scala	/^  def size: Int = {$/;"	m
size	scala/collection/convert/Wrappers.scala	/^      def size = self.size$/;"	m
size	scala/collection/convert/Wrappers.scala	/^    def size = underlying.size$/;"	m
size	scala/collection/convert/Wrappers.scala	/^    def size: Int = underlying.size$/;"	m
size	scala/collection/generic/Sizing.scala	/^  def size: Int$/;"	m
size	scala/collection/immutable/Vector.scala	/^    val size = blockIndex + lo$/;"	V
size	scala/collection/immutable/package.scala	/^      val size = end.toLong - start.toLong$/;"	V
size	scala/collection/mutable/ArrayBuilder.scala	/^    private var size: Int = 0$/;"	v
size	scala/collection/mutable/FlatHashTable.scala	/^    val size = in.readInt()$/;"	V
size	scala/collection/mutable/HashTable.scala	/^    val size = in.readInt()$/;"	V
size	scala/collection/mutable/UnrolledBuffer.scala	/^  class Unrolled[T: ClassTag] private[collection] (var size: Int, var array: Array[T], var next: Unrolled[T], val buff: UnrolledBuffer[T] = null) {$/;"	v
size	scala/collection/mutable/WrappedArrayBuilder.scala	/^  private var size: Int = 0$/;"	v
size	scala/collection/parallel/ParIterableLike.scala	/^    def size = splitter.remaining$/;"	m
size	scala/collection/parallel/ParIterableView.scala	/^    def size = throw new UnsupportedOperationException("ParIterableView.Combiner.size")$/;"	m
size	scala/collection/parallel/ParIterableViewLike.scala	/^    def size = splitter.remaining$/;"	m
size	scala/collection/parallel/ParMapLike.scala	/^    def size = filtered.size$/;"	m
size	scala/collection/parallel/ParSeqView.scala	/^    def size = throw new UnsupportedOperationException("ParSeqView.Combiner.size")$/;"	m
size	scala/collection/parallel/immutable/ParVector.scala	/^  def size: Int = sz$/;"	m
size	scala/collection/parallel/mutable/LazyCombiner.scala	/^  def size = chain.foldLeft(0)(_ + _.size)$/;"	m
size	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^  def size = buff.size$/;"	m
size	scala/collection/parallel/package.scala	/^    def size = sz$/;"	m
size0	scala/collection/immutable/HashMap.scala	/^    private[collection] val size0: Int$/;"	V
size0	scala/collection/mutable/ResizableArray.scala	/^  protected var size0: Int = 0$/;"	v
sizeForThreshold	scala/collection/mutable/FlatHashTable.scala	/^  def sizeForThreshold(size: Int, _loadFactor: Int) = scala.math.max(32, (size.toLong * loadFactorDenum \/ _loadFactor).toInt)$/;"	m
sizeHint	scala/collection/mutable/Builder.scala	/^  def sizeHint(coll: TraversableLike[_, _]) {$/;"	m
sizeHint	scala/collection/mutable/Builder.scala	/^  def sizeHint(coll: TraversableLike[_, _], delta: Int) {$/;"	m
sizeHint	scala/collection/mutable/Builder.scala	/^  def sizeHint(size: Int) {}$/;"	m
sizeHintBounded	scala/collection/mutable/Builder.scala	/^  def sizeHintBounded(size: Int, boundingColl: TraversableLike[_, _]) {$/;"	m
sizeNew	scala/collection/immutable/HashMap.scala	/^            val sizeNew = size - sub.size$/;"	V
sizeNew	scala/collection/immutable/HashMap.scala	/^          val sizeNew = size + (subNew.size - sub.size)$/;"	V
sizeNew	scala/collection/immutable/HashSet.scala	/^            val sizeNew = size - sub.size$/;"	V
sizeNew	scala/collection/immutable/HashSet.scala	/^          val sizeNew = size + (subNew.size - sub.size)$/;"	V
sizemap	scala/collection/mutable/FlatHashTable.scala	/^    val sizemap: Array[Int]$/;"	V
sizemap	scala/collection/mutable/FlatHashTable.scala	/^  @transient protected var sizemap: Array[Int] = null$/;"	v
sizemap	scala/collection/mutable/HashTable.scala	/^    val sizemap: Array[Int]$/;"	V
sizemap	scala/collection/mutable/HashTable.scala	/^  @transient protected var sizemap: Array[Int] = null$/;"	v
sizes	scala/collection/parallel/ParIterableLike.scala	/^      val sizes = pits.map(_.remaining)$/;"	V
sizes	scala/collection/parallel/ParIterableLike.scala	/^      val sizes = pits.scanLeft(0)(_ + _.remaining)$/;"	V
sizes	scala/collection/parallel/RemainsIterator.scala	/^      val sizes = selfs.map(_.remaining)$/;"	V
sizes	scala/collection/parallel/RemainsIterator.scala	/^      val sizes = sq.scanLeft(0)(_ + _.remaining)$/;"	V
sizes	scala/collection/parallel/mutable/ParArray.scala	/^      val sizes = if (total >= left) sizesIncomplete else sizesIncomplete :+ (left - total)$/;"	V
skip	scala/collection/Iterator.scala	/^      def skip() =$/;"	m
skipWhitespace	scala/util/parsing/combinator/RegexParsers.scala	/^  def skipWhitespace = whiteSpace.toString.length > 0$/;"	m
skippedEntity	scala/xml/include/sax/XIncluder.scala	/^  def skippedEntity(name: String) {$/;"	m
sl	scala/collection/JavaConversions.scala	/^ *    val sl = new scala.collection.mutable.ListBuffer[Int]$/;"	V
sl	scala/collection/JavaConverters.scala	/^ *    val sl = new scala.collection.mutable.ListBuffer[Int]$/;"	V
sl	scala/collection/convert/DecorateAsJava.scala	/^ *    val sl = new scala.collection.mutable.ListBuffer[Int]$/;"	V
sl2	scala/collection/JavaConversions.scala	/^ *    val sl2 : scala.collection.mutable.Buffer[Int] = jl$/;"	V
sl2	scala/collection/JavaConverters.scala	/^ *    val sl2 : scala.collection.mutable.Buffer[Int] = jl.asScala$/;"	V
sl2	scala/collection/convert/DecorateAsJava.scala	/^ *    val sl2 : scala.collection.mutable.Buffer[Int] = jl.asScala$/;"	V
slen	scala/collection/SeqLike.scala	/^    val slen        = source.length$/;"	V
slice	scala/collection/GenTraversableLike.scala	/^  def slice(unc_from: Int, unc_until: Int): Repr$/;"	m
slice	scala/collection/IndexedSeqOptimized.scala	/^  def slice(from: Int, until: Int): Repr = {$/;"	m
slice	scala/collection/Iterator.scala	/^  def slice(from: Int, until: Int): Iterator[A] = {$/;"	m
slice	scala/collection/LinearSeqOptimized.scala	/^  def slice(from: Int, until: Int): Repr = {$/;"	m
slice	scala/collection/TraversableLike.scala	/^  def slice(from: Int, until: Int): Repr =$/;"	m
slice	scala/collection/immutable/PagedSeq.scala	/^  def slice(start: Int): PagedSeq[T] = slice(start, UndeterminedEnd)$/;"	m
slice	scala/collection/immutable/RedBlackTree.scala	/^  def slice[A: Ordering, B](tree: Tree[A, B], from: Int, until: Int): Tree[A, B] = blacken(doSlice(tree, from, until))$/;"	m
slice2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def slice2combiner[U >: T, This](from: Int, until: Int, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
sliceElems	scala/collection/LinearSeqOptimized.scala	/^    var sliceElems = until - count$/;"	v
sliding	scala/collection/IterableLike.scala	/^  def sliding(size: Int): Iterator[Repr] = sliding(size, 1)$/;"	m
sliding	scala/collection/IterableLike.scala	/^  def sliding(size: Int, step: Int): Iterator[Repr] =$/;"	m
sliding	scala/collection/Iterator.scala	/^  def sliding[B >: A](size: Int, step: Int = 1): GroupedIterator[B] =$/;"	m
smDefined	scala/collection/mutable/FlatHashTable.scala	/^    val smDefined = in.readBoolean()$/;"	V
smDefined	scala/collection/mutable/HashTable.scala	/^    val smDefined = in.readBoolean()$/;"	V
smaller	scala/xml/Utility.scala	/^    val smaller = sort(md.filter { m => m.key < key })$/;"	V
smallest	scala/collection/immutable/RedBlack.scala	/^    def smallest: NonEmpty[B] = if (left.isEmpty) this else left.smallest$/;"	m
smallest	scala/collection/immutable/RedBlack.scala	/^    def smallest: NonEmpty[B]$/;"	m
smallest	scala/collection/immutable/RedBlack.scala	/^    def smallest: NonEmpty[Nothing] = throw new NoSuchElementException("empty map")$/;"	m
smallest	scala/collection/immutable/RedBlackTree.scala	/^  def smallest[A, B](tree: Tree[A, B]): Tree[A, B] = {$/;"	m
smallest	scala/collection/immutable/TreeMap.scala	/^    val smallest = RB.smallest(tree)$/;"	V
snd	scala/collection/immutable/TrieIterator.scala	/^          val snd = Array[Iterable[T]](arrayStack(0).last)$/;"	V
snd	scala/io/BytePickle.scala	/^    def snd(p: (a,b)): b = p._2$/;"	m
snd	scala/io/BytePickle.scala	/^    def snd(p: (a,b,c)): b = p._2$/;"	m
sndidx	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val sndidx = divpt$/;"	V
sndit	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val sndit = newIterator(sndidx, snduntil, sndtotal)$/;"	V
sndlength	scala/collection/parallel/immutable/ParHashMap.scala	/^        val sndlength = previousRemaining - fstlength$/;"	V
sndlength	scala/collection/parallel/immutable/ParHashSet.scala	/^        val sndlength = previousRemaining - fstlength$/;"	V
sndtotal	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val sndtotal = remaining - fsttotal$/;"	V
snduntil	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^      val snduntil = until$/;"	V
some	scala/collection/parallel/mutable/ParArray.scala	/^      var some = false$/;"	v
someFile	scala/Console.scala	/^   *  val someFile:Reader = openFile("file.txt")$/;"	V
sort	scala/xml/Utility.scala	/^  def sort(md: MetaData): MetaData = if((md eq Null) || (md.next eq Null)) md else {$/;"	m
sort	scala/xml/Utility.scala	/^  def sort(n:Node): Node = n match {$/;"	m
sort2	scala/util/Sorting.scala	/^    def sort2(off: Int, len: Int) {$/;"	m
sortBy	scala/collection/SeqLike.scala	/^  def sortBy[B](f: A => B)(implicit ord: Ordering[B]): Repr = sorted(ord on f)$/;"	m
sortWith	scala/collection/SeqLike.scala	/^  def sortWith(lt: (A, A) => Boolean): Repr = sorted(Ordering fromLessThan lt)$/;"	m
sorted	scala/collection/SeqLike.scala	/^  def sorted[B >: A](implicit ord: Ordering[B]): Repr = {$/;"	m
source	scala/sys/process/ProcessImpl.scala	/^      val source        = new PipeSource(currentSource, pipeOut, a.toString)$/;"	V
source	scala/util/matching/Regex.scala	/^    val source: java.lang.CharSequence$/;"	V
source	scala/util/matching/Regex.scala	/^  class Match(val source: java.lang.CharSequence,$/;"	V
source	scala/util/matching/Regex.scala	/^  class MatchIterator(val source: java.lang.CharSequence, val regex: Regex, val groupNames: Seq[String])$/;"	V
source	scala/util/parsing/combinator/RegexParsers.scala	/^      val source = in.source$/;"	V
source	scala/util/parsing/input/CharSequenceReader.scala	/^class CharSequenceReader(override val source: java.lang.CharSequence,$/;"	V
source	scala/util/parsing/input/PagedSeqReader.scala	/^  override lazy val source: java.lang.CharSequence = seq$/;"	V
source	scala/util/parsing/input/Reader.scala	/^  def source: java.lang.CharSequence =$/;"	m
source	scala/xml/include/sax/XIncludeFilter.scala	/^    val source =$/;"	V
source	scala/xml/include/sax/XIncludeFilter.scala	/^    var source: URL = null$/;"	v
source	scala/xml/pull/package.scala	/^ * scala> val source = Source.fromString("""<?xml version="1.0" encoding="UTF-8" standalone="yes"?>$/;"	V
sourceEncoding	scala/util/Properties.scala	/^  def sourceEncoding        = scalaPropOrElse("file.encoding", "UTF-8")$/;"	m
sourceReader	scala/util/Properties.scala	/^  def sourceReader          = scalaPropOrElse("source.reader", "scala.tools.nsc.io.SourceReader")$/;"	m
sov	scala/collection/immutable/Stream.scala	/^   * val sov: Stream[Vector[Int]] = Vector(0) #:: Vector(0, 0) #:: sov.zip(sov.tail).map { n => n._1 ++ n._2 }$/;"	V
sov	scala/collection/immutable/Stream.scala	/^ *  val sov: Stream[Vector[Int]] = Vector(0) #:: sov.zip(sov.tail).map { n => n._1 ++ n._2 }$/;"	V
sp	scala/collection/parallel/ParSeqLike.scala	/^      val sp = len - len \/ 2$/;"	V
sp	scala/collection/parallel/ParSeqLike.scala	/^      val sp = pit.remaining - fp$/;"	V
space	scala/xml/XML.scala	/^  val space     = "space"$/;"	V
spaces	scala/text/Document.scala	/^    def spaces(n: Int) {$/;"	m
span	scala/collection/GenTraversableLike.scala	/^  def span(pred: A => Boolean): (Repr, Repr)$/;"	m
span	scala/collection/IndexedSeqOptimized.scala	/^  def span(p: A => Boolean): (Repr, Repr) = splitAt(prefixLength(p))$/;"	m
span	scala/collection/Iterator.scala	/^  def span(p: A => Boolean): (Iterator[A], Iterator[A]) = {$/;"	m
span	scala/collection/LinearSeqOptimized.scala	/^  def span(p: A => Boolean): (Repr, Repr) = {$/;"	m
span	scala/collection/TraversableLike.scala	/^  def span(p: A => Boolean): (Repr, Repr) = {$/;"	m
span	scala/collection/parallel/ParIterableLike.scala	/^  def span(pred: T => Boolean): (Repr, Repr) = {$/;"	m
span	scala/concurrent/duration/package.scala	/^  object span$/;"	o
span2combiners	scala/collection/parallel/RemainsIterator.scala	/^  def span2combiners[U >: T, This](p: T => Boolean, before: Combiner[U, This], after: Combiner[U, This]) = {$/;"	m
spawn	scala/concurrent/ops.scala	/^  def spawn(p: => Unit)(implicit runner: TaskRunner = defaultRunner): Unit = {$/;"	m
spawnSubtasks	scala/collection/parallel/Tasks.scala	/^    def spawnSubtasks() = {$/;"	m
spde	scala/sys/process/Process.scala	/^    * val spde = new URL("http:\/\/technically.us\/spde\/About")$/;"	V
specialized	scala/package.scala	/^  type specialized = annotation.specialized$/;"	T
specialized	scala/specialized.scala	/^class specialized(group: SpecializedGroup) extends scala.annotation.StaticAnnotation {$/;"	c
split	scala/collection/immutable/HashMap.scala	/^  def split: Seq[HashMap[A, B]] = Seq(this)$/;"	m
split	scala/collection/immutable/StringLike.scala	/^  def split(separator: Char): Array[String] = toString.split(escape(separator))$/;"	m
split	scala/collection/immutable/StringLike.scala	/^  def split(separators: Array[Char]): Array[String] = {$/;"	m
split	scala/collection/immutable/TrieIterator.scala	/^  def split: SplitIterators = {$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split = pit.splitWithSignalling.map(newSubtask(_)) \/\/ default split procedure$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split = throw new UnsupportedOperationException("Does not split.")$/;"	m
split	scala/collection/parallel/ParIterableLike.scala	/^    def split = tree match {$/;"	m
split	scala/collection/parallel/ParMapLike.scala	/^      def split = {$/;"	m
split	scala/collection/parallel/ParSeqLike.scala	/^    def split = psplit(remaining \/ 2, remaining - remaining \/ 2)$/;"	m
split	scala/collection/parallel/PreciseSplitter.scala	/^  def split: Seq[PreciseSplitter[T]]$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split = trio.split$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[(T, S)]] = {$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[(U, S)]] = {$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[S]] = self.split.map { _ map f }$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[T]] = takeSeq(self.split) { (p, n) => p.take(n) }$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^    def split: Seq[IterableSplitter[U]] = if (firstNonEmpty) Seq(curr, that) else curr.split$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^  def split: Seq[IterableSplitter[T]]$/;"	m
split	scala/collection/parallel/RemainsIterator.scala	/^  def split: Seq[SeqSplitter[T]]$/;"	m
split	scala/collection/parallel/Splitter.scala	/^    def split = Seq(this)$/;"	m
split	scala/collection/parallel/Splitter.scala	/^  def split: Seq[Splitter[T]]$/;"	m
split	scala/collection/parallel/Tasks.scala	/^    def split = body.split.map(b => newWrappedTask(b))$/;"	m
split	scala/collection/parallel/Tasks.scala	/^    def split: Seq[WrappedTask[R, Tp]]$/;"	m
split	scala/collection/parallel/immutable/ParHashMap.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/immutable/ParHashMap.scala	/^    def split: Seq[IterableSplitter[(K, V)]] = if (remaining < 2) Seq(this) else triter match {$/;"	m
split	scala/collection/parallel/immutable/ParHashSet.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/immutable/ParHashSet.scala	/^    def split: Seq[IterableSplitter[T]] = if (remaining < 2) Seq(this) else triter match {$/;"	m
split	scala/collection/parallel/immutable/ParRange.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/immutable/ParVector.scala	/^    def split: Seq[ParVectorIterator] = {$/;"	m
split	scala/collection/parallel/immutable/package.scala	/^      def split = psplit(remaining \/ 2, remaining - remaining \/ 2)$/;"	m
split	scala/collection/parallel/mutable/ParArray.scala	/^    def split = tree match {$/;"	m
split	scala/collection/parallel/mutable/ParArray.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    def split = if (remaining > 1) {$/;"	m
split	scala/collection/parallel/mutable/ParHashMap.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParHashSet.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParHashTable.scala	/^    def split: Seq[IterableSplitter[T]] = if (remaining > 1) {$/;"	m
split	scala/collection/parallel/mutable/ParTrieMap.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def split: Seq[IterableSplitter[(K, V)]] = subdivide().asInstanceOf[Seq[IterableSplitter[(K, V)]]]$/;"	m
split	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^    def split = {$/;"	m
split	scala/collection/parallel/package.scala	/^    def split: Seq[IterableSplitter[T]] = if (remaining > 1) {$/;"	m
split	scala/util/matching/Regex.scala	/^  def split(toSplit: java.lang.CharSequence): Array[String] =$/;"	m
splitAt	scala/collection/GenTraversableLike.scala	/^  def splitAt(n: Int): (Repr, Repr)$/;"	m
splitAt	scala/collection/IndexedSeqOptimized.scala	/^  def splitAt(n: Int): (Repr, Repr) = (take(n), drop(n))$/;"	m
splitAt	scala/collection/TraversableLike.scala	/^  def splitAt(n: Int): (Repr, Repr) = {$/;"	m
splitAt	scala/collection/parallel/ParIterableLike.scala	/^  def splitAt(n: Int): (Repr, Repr) = {$/;"	m
splitAt2combiners	scala/collection/parallel/RemainsIterator.scala	/^  def splitAt2combiners[U >: T, This](at: Int, before: Combiner[U, This], after: Combiner[U, This]) = {$/;"	m
splitWithSignalling	scala/collection/parallel/RemainsIterator.scala	/^  def splitWithSignalling: Seq[IterableSplitter[T]] = {$/;"	m
splitpoint	scala/collection/immutable/HashMap.scala	/^        val splitpoint = nodesize \/ 2$/;"	V
splitpoint	scala/collection/parallel/mutable/ParArray.scala	/^        val splitpoint = left \/ 2$/;"	V
splitsizes	scala/collection/parallel/RemainsIterator.scala	/^      val splitsizes = sizes.zip(szcum.init zip szcum.tail).flatMap { t =>$/;"	V
splitted	scala/collection/parallel/immutable/ParVector.scala	/^      val splitted = new ArrayBuffer[Vector[T]]$/;"	V
splitter	scala/collection/parallel/ParIterableLike.scala	/^    def splitter = self.splitter$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[(T, S)] = self.splitter zipParSeq otherPar.splitter$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[(U, S)] = self.splitter.zipAllParSeq(otherPar.splitter, thisElem, thatElem)$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[S] = forcedPar.splitter$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[S] = self.splitter.map(mapping)$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[T] = self.splitter.slice(from, until)$/;"	m
splitter	scala/collection/parallel/ParIterableViewLike.scala	/^    def splitter: IterableSplitter[U] = self.splitter.appendParIterable[U, IterableSplitter[U]](restPar.splitter)$/;"	m
splitter	scala/collection/parallel/ParMap.scala	/^    def splitter                    = underlying.splitter$/;"	m
splitter	scala/collection/parallel/ParMapLike.scala	/^    def splitter = filtered.splitter$/;"	m
splitter	scala/collection/parallel/ParMapLike.scala	/^    def splitter = keysIterator(self.splitter)$/;"	m
splitter	scala/collection/parallel/ParMapLike.scala	/^    def splitter = self.splitter.map(kv => (kv._1, f(kv._2)))$/;"	m
splitter	scala/collection/parallel/ParMapLike.scala	/^    def splitter = valuesIterator(self.splitter)$/;"	m
splitter	scala/collection/parallel/ParSeqLike.scala	/^    def splitter = self.splitter$/;"	m
splitter	scala/collection/parallel/immutable/ParHashMap.scala	/^  def splitter: IterableSplitter[(K, V)] = new ParHashMapIterator(trie.iterator, trie.size)$/;"	m
splitter	scala/collection/parallel/immutable/ParHashSet.scala	/^  def splitter: IterableSplitter[T] = new ParHashSetIterator(trie.iterator, trie.size)$/;"	m
splitter	scala/collection/parallel/immutable/ParRange.scala	/^  def splitter = new ParRangeIterator$/;"	m
splitter	scala/collection/parallel/immutable/ParVector.scala	/^  def splitter: SeqSplitter[T] = {$/;"	m
splitter	scala/collection/parallel/immutable/package.scala	/^    def splitter = new ParIterator$/;"	m
splitter	scala/collection/parallel/mutable/ParHashMap.scala	/^  def splitter = new ParHashMapIterator(1, table.length, size, table(0).asInstanceOf[DefaultEntry[K, V]])$/;"	m
splitter	scala/collection/parallel/mutable/ParHashSet.scala	/^  def splitter = new ParHashSetIterator(0, table.length, size)$/;"	m
splitter	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def splitter = new ParTrieMapSplitter(0, ctrie.readOnlySnapshot().asInstanceOf[TrieMap[K, V]], true)$/;"	m
sq	scala/collection/parallel/mutable/ParArray.scala	/^        val sq = Seq($/;"	V
sq	scala/xml/PrettyPrinter.scala	/^             val sq:Seq[String] = stg.split(" ");$/;"	V
sqrt	scala/math/package.scala	/^  def sqrt(x: Double): Double = java.lang.Math.sqrt(x)$/;"	m
src	scala/xml/parsing/ConstructingParser.scala	/^  *     val src = scala.io.Source.fromURL(url)$/;"	V
src	scala/xml/persistent/CachedFileStorage.scala	/^    val src = Source.fromFile(theFile)$/;"	V
srcClass	scala/Array.scala	/^    val srcClass = src.getClass$/;"	V
srcUntil	scala/Array.scala	/^    val srcUntil = srcPos + length$/;"	V
ss	scala/collection/parallel/ParMapLike.scala	/^        val ss = iter.split.map(keysIterator(_))$/;"	V
ss	scala/collection/parallel/ParMapLike.scala	/^        val ss = iter.split.map(valuesIterator(_))$/;"	V
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassTag, M: Ordering](a: Seq[K], f: K => M): Array[K] =$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassTag: Ordering](a: Array[K]) {$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassTag: Ordering](a: Seq[K]): Array[K] =$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassTag](a: Array[K], f: (K, K) => Boolean) {$/;"	m
stableSort	scala/util/Sorting.scala	/^  def stableSort[K: ClassTag](a: Seq[K], f: (K, K) => Boolean): Array[K] = {$/;"	m
stack	scala/collection/concurrent/TrieMap.scala	/^  private var stack = new Array[Array[BasicNode]](7)$/;"	v
stack	scala/collection/mutable/AVLTree.scala	/^  val stack = mutable.ArrayStack[Node[A]](root)$/;"	V
stackpos	scala/collection/concurrent/TrieMap.scala	/^  private var stackpos = new Array[Int](7)$/;"	v
standAlone	scala/xml/Document.scala	/^  var standAlone: Option[Boolean] = _$/;"	v
standard	scala/sys/process/BasicIO.scala	/^  def standard(connectInput: Boolean): ProcessIO = standard(input(connectInput))$/;"	m
standard	scala/sys/process/BasicIO.scala	/^  def standard(in: OutputStream => Unit): ProcessIO = new ProcessIO(in, toStdOut, toStdErr)$/;"	m
standardInterpolator	scala/StringContext.scala	/^  def standardInterpolator(process: String => String, args: Seq[Any]): String = {$/;"	m
start	scala/StringContext.scala	/^    var start = 0$/;"	v
start	scala/collection/GenSeqViewLike.scala	/^    protected[this] lazy val start = self prefixLength pred$/;"	V
start	scala/collection/IndexedSeqOptimized.scala	/^    val start = from max 0$/;"	V
start	scala/collection/generic/SliceInterval.scala	/^    val start = from + lo$/;"	V
start	scala/collection/immutable/NumericRange.scala	/^  (val start: T, val end: T, val step: T, val isInclusive: Boolean)$/;"	V
start	scala/collection/immutable/Range.scala	/^class Range(val start: Int, val end: Int, val step: Int)$/;"	V
start	scala/collection/immutable/StringLike.scala	/^      val start = index$/;"	V
start	scala/collection/immutable/StringLike.scala	/^    val start = from max 0$/;"	V
start	scala/collection/immutable/StringOps.scala	/^    val start = if (from < 0) 0 else from$/;"	V
start	scala/collection/immutable/WrappedString.scala	/^    val start = if (from < 0) 0 else from$/;"	V
start	scala/collection/immutable/package.scala	/^    def start: Int$/;"	m
start	scala/collection/mutable/ListBuffer.scala	/^  private var start: List[A] = Nil$/;"	v
start	scala/collection/parallel/Tasks.scala	/^    def start() = fork$/;"	m
start	scala/collection/parallel/Tasks.scala	/^    def start() = synchronized {$/;"	m
start	scala/collection/parallel/Tasks.scala	/^    def start() = {$/;"	m
start	scala/collection/parallel/mutable/ParArray.scala	/^        val start = traversed$/;"	V
start	scala/concurrent/SyncVar.scala	/^    val start = System.currentTimeMillis$/;"	V
start	scala/sys/process/ProcessImpl.scala	/^    def start()     = getExitValue$/;"	m
start	scala/sys/process/ProcessImpl.scala	/^    def start(): Unit$/;"	m
start	scala/util/matching/Regex.scala	/^    def start(i: Int) = starts(i)$/;"	m
start	scala/util/matching/Regex.scala	/^    def start(i: Int): Int = matcher.start(i)$/;"	m
start	scala/util/matching/Regex.scala	/^    def start(i: Int): Int$/;"	m
start	scala/util/matching/Regex.scala	/^    def start: Int = matcher.start$/;"	m
start	scala/util/matching/Regex.scala	/^    def start: Int$/;"	m
start	scala/util/matching/Regex.scala	/^    val start = matcher.start$/;"	V
start	scala/util/parsing/combinator/RegexParsers.scala	/^        val start = handleWhiteSpace(in.source, offset)$/;"	V
start	scala/util/parsing/combinator/RegexParsers.scala	/^      val start = handleWhiteSpace(source, offset)$/;"	V
start1	scala/runtime/SeqCharSequence.scala	/^      val start1 = start + start0$/;"	V
startDTD	scala/xml/include/sax/XIncluder.scala	/^  def startDTD(name: String, publicID: String, systemID: String) {$/;"	m
startElement	scala/xml/include/sax/XIncluder.scala	/^  def startElement(namespaceURI: String, localName: String, qualifiedName: String, atts: Attributes) = {$/;"	m
startEntity	scala/xml/include/sax/XIncluder.scala	/^  def startEntity(name: String) {$/;"	m
startHash	scala/util/MurmurHash.scala	/^  def startHash(seed: Int) = seed ^ visibleMagic$/;"	m
startIndex	scala/collection/immutable/Vector.scala	/^final class Vector[+A](private[collection] val startIndex: Int, private[collection] val endIndex: Int, focus: Int)$/;"	V
startMagicA	scala/util/MurmurHash.scala	/^  def startMagicA = hiddenMagicA$/;"	m
startMagicB	scala/util/MurmurHash.scala	/^  def startMagicB = hiddenMagicB$/;"	m
startModCount	scala/collection/mutable/OpenHashMap.scala	/^    val startModCount = modCount;$/;"	V
startPrefixMapping	scala/xml/include/sax/XIncluder.scala	/^  def startPrefixMapping(prefix: String , uri: String) {}$/;"	m
startTime	scala/testing/Benchmark.scala	/^      val startTime = Platform.currentTime$/;"	V
starts	scala/util/matching/Regex.scala	/^    private lazy val starts: Array[Int] =$/;"	V
startsWith	scala/collection/GenSeqLike.scala	/^  def startsWith[B](that: GenSeq[B]): Boolean = startsWith(that, 0)$/;"	m
startsWith	scala/collection/GenSeqLike.scala	/^  def startsWith[B](that: GenSeq[B], offset: Int): Boolean$/;"	m
startsWith	scala/collection/IndexedSeqOptimized.scala	/^  def startsWith[B](that: GenSeq[B], offset: Int): Boolean = that match {$/;"	m
startsWith	scala/collection/SeqLike.scala	/^  def startsWith[B](that: GenSeq[B], offset: Int): Boolean = {$/;"	m
startsWith	scala/collection/parallel/ParSeqLike.scala	/^  def startsWith[S](that: GenSeq[S], offset: Int): Boolean = that ifParSeq { pthat =>$/;"	m
states	scala/util/automata/SubsetConstruction.scala	/^    var states = Set(q0, sink)    \/\/ initial set of sets$/;"	v
staticClass	scala/reflect/ClassTag.scala	/^      val staticClass = classTag[U].runtimeClass$/;"	V
status	scala/beans/BeanProperty.scala	/^ *    var status = ""$/;"	v
stbl	scala/collection/immutable/ListMap.scala	/^        val stbl = acc$/;"	V
stderr	scala/sys/process/package.scala	/^    def stderr = java.lang.System.err$/;"	m
stdin	scala/io/Source.scala	/^  def stdin = fromInputStream(System.in)$/;"	m
stdin	scala/sys/process/package.scala	/^    def stdin  = java.lang.System.in$/;"	m
stdout	scala/sys/process/package.scala	/^    def stdout = java.lang.System.out$/;"	m
step	scala/collection/immutable/Range.scala	/^      val step = this.step$/;"	V
step	scala/collection/immutable/package.scala	/^    def step: Int$/;"	m
stmt	scala/xml/parsing/MarkupParser.scala	/^              val stmt = xName$/;"	V
stop	scala/xml/pull/XMLEventReader.scala	/^  def stop() = {$/;"	m
stopTime	scala/testing/Benchmark.scala	/^      val stopTime = Platform.currentTime$/;"	V
storageNode	scala/xml/persistent/CachedFileStorage.scala	/^    val storageNode = <nodes>{ nodes.toList }<\/nodes>$/;"	V
storedMagicA	scala/util/MurmurHash.scala	/^  val storedMagicA =$/;"	V
storedMagicB	scala/util/MurmurHash.scala	/^  val storedMagicB =$/;"	V
stotal	scala/collection/parallel/mutable/ParHashTable.scala	/^        val stotal = calcNumElems(sidx - 1, suntil, table.length, sizeMapBucketSize)$/;"	V
str	scala/collection/immutable/StringLike.scala	/^    val str = self.toString$/;"	V
str	scala/collection/parallel/ParIterableLike.scala	/^      \/\/ val str = "At leaf we will iterate: " + pa.splitter.toList$/;"	V
str	scala/reflect/NameTransformer.scala	/^              val str = Integer.parseInt(hex, 16).toChar$/;"	V
str	scala/xml/parsing/MarkupParser.scala	/^    val str = cbuf.toString$/;"	V
str	scala/xml/parsing/MarkupParser.scala	/^    val str = cbuf.toString()$/;"	V
str	scala/xml/parsing/MarkupParserCommon.scala	/^    val str = xAttributeValue(ch_returning_nextch)$/;"	V
strRep	scala/util/parsing/json/Lexer.scala	/^    val strRep = xs mkString ""$/;"	V
stream	scala/io/BytePickle.scala	/^  class PicklerState(val stream: Array[Byte], val dict: PicklerEnv)$/;"	V
stream	scala/io/BytePickle.scala	/^  class UnPicklerState(val stream: Array[Byte], val dict: UnPicklerEnv)$/;"	V
stream	scala/sys/process/BasicIO.scala	/^    val  stream:  () => Stream[T]$/;"	V
stream	scala/util/Properties.scala	/^    val stream = pickJarBasedOn getResourceAsStream propFilename$/;"	V
stream1	scala/collection/immutable/Stream.scala	/^ *  val stream1: Stream[Int] = {$/;"	V
streamed	scala/sys/process/ProcessBuilderImpl.scala	/^      val streamed = Streamed[String](nonZeroException)$/;"	V
strict_	scala/xml/Equality.scala	/^  def strict_!=(other: Equality) = !strict_==(other)$/;"	m
strict_==	scala/xml/Equality.scala	/^  def strict_==(other: Equality): Boolean$/;"	m
strictfp	scala/annotation/strictfp.scala	/^class strictfp extends scala.annotation.StaticAnnotation$/;"	c
strictlyEqual	scala/xml/Equality.scala	/^    val strictlyEqual = other match {$/;"	V
string	scala/collection/TraversableLike.scala	/^    var string = repr.getClass.getName$/;"	v
string	scala/collection/concurrent/BasicNode.java	/^    public abstract String string(int lev);$/;"	m	class:BasicNode
string	scala/collection/concurrent/TrieMap.scala	/^  def string = RDCSS_READ_ROOT().string(0)$/;"	m
string	scala/collection/concurrent/TrieMap.scala	/^  def string(lev: Int) = "%sINode -> %s".format("  " * lev, mainnode match {$/;"	m
string	scala/collection/concurrent/TrieMap.scala	/^  def string(lev: Int) = (" " * lev) + "LNode(%s)".format(listmap.mkString(", "))$/;"	m
string	scala/collection/concurrent/TrieMap.scala	/^  def string(lev: Int) = throw new UnsupportedOperationException$/;"	m
string	scala/io/BytePickle.scala	/^  def string: SPU[String] = share(wrap($/;"	m
string	scala/util/parsing/combinator/testing/RegexTest.scala	/^  val string: Parser[Any] = "\\".*\\"".r ^^ (s => Str(s.substring(1, s.length - 1)))$/;"	V
string	scala/util/parsing/json/Lexer.scala	/^  def string = '\\"' ~> rep(charSeq | chrExcept('\\"', '\\n', EofCh)) <~ '\\"' ^^ { _ mkString "" }$/;"	m
stringCanBuildFrom	scala/Predef.scala	/^  def stringCanBuildFrom: CanBuildFrom[String, Char, String] = StringCanBuildFrom$/;"	m
stringHash	scala/util/MurmurHash.scala	/^  def stringHash(s: String) = {$/;"	m
stringHash	scala/util/hashing/MurmurHash3.scala	/^  def stringHash(x: String): Int                   = stringHash(x, stringSeed)$/;"	m
stringHashing	scala/util/hashing/MurmurHash3.scala	/^  def stringHashing = new Hashing[String] {$/;"	m
stringLit	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^  def stringLit: Parser[String] =$/;"	m
stringLiteral	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def stringLiteral: Parser[String] =$/;"	m
stringOf	scala/runtime/ScalaRunTime.scala	/^  def stringOf(arg: Any): String = stringOf(arg, scala.Int.MaxValue)$/;"	m
stringOf	scala/runtime/ScalaRunTime.scala	/^  def stringOf(arg: Any, maxElements: Int): String = {$/;"	m
stringPrefix	scala/collection/GenTraversableLike.scala	/^  def stringPrefix: String$/;"	m
stringPrefix	scala/collection/TraversableLike.scala	/^  def stringPrefix : String = {$/;"	m
stringPrefix	scala/collection/parallel/ParIterable.scala	/^  def stringPrefix = "ParIterable"$/;"	m
stringRepr	scala/collection/generic/IsTraversableLike.scala	/^  implicit val stringRepr: IsTraversableLike[String] { type A = Char } =$/;"	V
stringRepr	scala/collection/generic/IsTraversableLike.scala	/^ * implicit val stringRepr: IsTraversableLike[String] { type A = Char } =$/;"	V
stringRepr	scala/collection/generic/IsTraversableOnce.scala	/^  implicit val stringRepr: IsTraversableOnce[String] { type A = Char } =$/;"	V
stringSeed	scala/util/hashing/MurmurHash3.scala	/^  final val stringSeed      = 0xf7ca7fd2$/;"	V
stringVal	scala/util/parsing/json/Parser.scala	/^  def stringVal  = accept("string", { case lexical.StringLit(n) => n} )$/;"	m
stripLineEnd	scala/collection/immutable/StringLike.scala	/^  def stripLineEnd: String = {$/;"	m
stripMargin	scala/collection/immutable/StringLike.scala	/^  def stripMargin(marginChar: Char): String = {$/;"	m
stripMargin	scala/collection/immutable/StringLike.scala	/^  def stripMargin: String = stripMargin('|')$/;"	m
stripPrefix	scala/collection/immutable/StringLike.scala	/^  def stripPrefix(prefix: String) =$/;"	m
stripSuffix	scala/collection/immutable/StringLike.scala	/^  def stripSuffix(suffix: String) =$/;"	m
sub	scala/collection/concurrent/TrieMap.scala	/^                    val sub = cn.array(pos)$/;"	V
sub	scala/collection/concurrent/TrieMap.scala	/^          val sub = cn.array(pos)$/;"	V
sub	scala/collection/concurrent/TrieMap.scala	/^      val sub = arr(i)$/;"	V
sub	scala/collection/immutable/HashMap.scala	/^        val sub = elems(offset)$/;"	V
sub	scala/collection/immutable/HashSet.scala	/^        val sub = elems(offset)$/;"	V
subIter	scala/collection/immutable/TrieIterator.scala	/^  private[this] var subIter                                   = initSubIter$/;"	v
subNew	scala/collection/immutable/HashMap.scala	/^        val subNew = sub.removed0(key, hash, level + 5)$/;"	V
subNew	scala/collection/immutable/HashMap.scala	/^        val subNew = sub.updated0(key, hash, level + 5, value, kv, merger)$/;"	V
subNew	scala/collection/immutable/HashSet.scala	/^        val subNew = sub.removed0(key, hash, level + 5)$/;"	V
subNew	scala/collection/immutable/HashSet.scala	/^        val subNew = sub.updated0(key, hash, level + 5)$/;"	V
subSequence	scala/collection/mutable/StringBuilder.scala	/^  def subSequence(start: Int, end: Int): java.lang.CharSequence =$/;"	m
subSequence	scala/runtime/SeqCharSequence.scala	/^  def subSequence(start0: Int, end0: Int): CharSequence = {$/;"	m
subSequence	scala/runtime/SeqCharSequence.scala	/^  def subSequence(start: Int, end: Int): CharSequence = new SeqCharSequence(xs.slice(start, end))$/;"	m
subcount	scala/collection/immutable/HashMap.scala	/^        val subcount = Integer.bitCount(thisbm | thatbm)$/;"	V
subgroups	scala/util/matching/Regex.scala	/^    def subgroups: List[String] = (1 to groupCount).toList map group$/;"	m
subinode	scala/collection/concurrent/TrieMap.scala	/^      val subinode = new INode[K, V](gen)\/\/(TrieMap.inodeupdater)$/;"	V
subiter	scala/collection/concurrent/TrieMap.scala	/^  private var subiter: Iterator[(K, V)] = null$/;"	v
subl	scala/collection/immutable/RedBlack.scala	/^      def subl(t: Tree[B]) = t match {$/;"	m
subl	scala/collection/immutable/RedBlackTree.scala	/^    def subl(t: Tree[A, B]) =$/;"	m
submit	scala/concurrent/FutureTaskRunner.scala	/^  def submit[S](task: Task[S]): Future[S]$/;"	m
submit	scala/concurrent/ThreadPoolRunner.scala	/^  def submit[S](task: Task[S]): Future[S] = {$/;"	m
submit	scala/concurrent/ThreadRunner.scala	/^  def submit[S](task: Task[S]): Future[S] = {$/;"	m
subscribe	scala/collection/mutable/Publisher.scala	/^  def subscribe(sub: Sub) { subscribe(sub, event => true) }$/;"	m
subscribe	scala/collection/mutable/Publisher.scala	/^  def subscribe(sub: Sub, filter: Filter) { filters.addBinding(sub, filter) }$/;"	m
subsetOf	scala/collection/BitSetLike.scala	/^  def subsetOf(other: BitSet): Boolean =$/;"	m
subsetOf	scala/collection/GenSetLike.scala	/^  def subsetOf(that: GenSet[A]): Boolean = this forall that$/;"	m
subsets	scala/collection/SetLike.scala	/^  def subsets(len: Int): Iterator[This] = {$/;"	m
subsets	scala/collection/SetLike.scala	/^  def subsets: Iterator[This] = new AbstractIterator[This] {$/;"	m
substitute	scala/util/parsing/ast/Binders.scala	/^    def substitute(b: binderType, value: Element): Unit = substitution(b) = value$/;"	m
substitution	scala/util/parsing/ast/Binders.scala	/^    private val substitution: mutable.Map[binderType, Element] =$/;"	V
substring	scala/collection/mutable/StringBuilder.scala	/^  def substring(start: Int): String = substring(start, length)$/;"	m
substring	scala/collection/mutable/StringBuilder.scala	/^  def substring(start: Int, end: Int): String = underlying.substring(start, end)$/;"	m
subtasks	scala/collection/parallel/Tasks.scala	/^        val subtasks = head.split$/;"	V
subtract	scala/runtime/BoxesRunTime.java	/^    public static Object subtract(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
succ	scala/Function1.scala	/^ *    val succ = (x: Int) => x + 1$/;"	V
success	scala/concurrent/Promise.scala	/^  def success(v: T): this.type = complete(Success(v))$/;"	m
success	scala/sys/process/ProcessBuilderImpl.scala	/^      val success = new SyncVar[Boolean]$/;"	V
success	scala/util/parsing/combinator/Parsers.scala	/^  def success[T](v: T) = Parser{ in => Success(v, in) }$/;"	m
successful	scala/concurrent/Future.scala	/^  def successful[T](result: T): Future[T] = Promise.successful(result).future$/;"	m
successful	scala/concurrent/Promise.scala	/^  def successful[T](result: T): Promise[T] = new impl.Promise.KeptPromise[T](Success(result))$/;"	m
successful	scala/util/parsing/combinator/Parsers.scala	/^    val successful = false$/;"	V
successful	scala/util/parsing/combinator/Parsers.scala	/^    val successful = true$/;"	V
successful	scala/util/parsing/combinator/Parsers.scala	/^    val successful: Boolean$/;"	V
sum	scala/collection/GenTraversableOnce.scala	/^  def sum[A1 >: A](implicit num: Numeric[A1]): A1$/;"	m
sum	scala/collection/SeqLike.scala	/^        var sum = nums.slice(idx + 1, nums.length).sum + 1$/;"	v
sum	scala/collection/TraversableOnce.scala	/^  def sum[B >: A](implicit num: Numeric[B]): B = foldLeft(num.zero)(num.plus)$/;"	m
sum	scala/collection/parallel/ParIterableLike.scala	/^  def sum[U >: T](implicit num: Numeric[U]): U = {$/;"	m
sum	scala/collection/parallel/mutable/ParArray.scala	/^      var sum = z$/;"	v
sum	scala/collection/parallel/mutable/ParArray.scala	/^      var sum = zero$/;"	v
suntil	scala/collection/parallel/mutable/ParHashTable.scala	/^        val suntil = until$/;"	V
supers	scala/reflect/ClassManifestDeprecatedApis.scala	/^        val supers = next.getInterfaces.toSet ++ Option(next.getSuperclass)$/;"	V
surrogateStart	scala/util/Random.scala	/^      val surrogateStart: Int = 0xD800$/;"	V
suspendSubscription	scala/collection/mutable/Publisher.scala	/^  def suspendSubscription(sub: Sub) { suspended += sub }$/;"	m
suspendable	scala/util/continuations/package.scala	/^  type suspendable = cps[Unit]$/;"	T
suspended	scala/collection/mutable/Publisher.scala	/^  private val suspended = new HashSet[Sub]$/;"	V
swap	scala/Tuple2.scala	/^  def swap: Tuple2[T2,T1] = Tuple2(_2, _1)$/;"	m
swap	scala/util/Either.scala	/^  def swap = this match {$/;"	m
swap	scala/util/Random.scala	/^    def swap(i1: Int, i2: Int) {$/;"	m
swap	scala/util/Sorting.scala	/^    def swap(a: Int, b: Int) {$/;"	m
sym	scala/Symbol.scala	/^          val sym = valueFromKey(name)$/;"	V
symApply	scala/testing/Show.scala	/^  def symApply(sym: Symbol): SymApply = new SymApply(sym)$/;"	m
symmetricHash	scala/util/MurmurHash.scala	/^  def symmetricHash[T](xs: scala.collection.TraversableOnce[T], seed: Int) = {$/;"	m
symmetricSeed	scala/util/hashing/MurmurHash3.scala	/^  final val symmetricSeed   = 0xb592f7ae$/;"	V
sync	scala/collection/parallel/Tasks.scala	/^    def sync() = future.get$/;"	m
sync	scala/collection/parallel/Tasks.scala	/^    def sync() = join$/;"	m
sync	scala/collection/parallel/Tasks.scala	/^    def sync() = synchronized {$/;"	m
syntactic	scala/util/parsing/combinator/testing/Tester.scala	/^  val syntactic: TokenParsers { val lexical: Lexical }$/;"	V
syntactic	scala/util/parsing/combinator/testing/Tester.scala	/^ *    val syntactic = new MyParsers$/;"	V
syntactical	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^package syntactical$/;"	p
syntactical	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^package syntactical$/;"	p
syntactical	scala/util/parsing/combinator/syntactical/TokenParsers.scala	/^package syntactical$/;"	p
sys	scala/sys/Prop.scala	/^package sys$/;"	p
sysID	scala/xml/parsing/MarkupParser.scala	/^      val sysID = if (ch != '>')$/;"	V
sysID	scala/xml/parsing/MarkupParser.scala	/^      val sysID = systemLiteral()$/;"	V
systemID	scala/xml/include/sax/XIncludeFilter.scala	/^    var systemID = ""$/;"	v
systemId	scala/xml/dtd/ExternalID.scala	/^  def systemId: String$/;"	m
systemLiteral	scala/xml/parsing/MarkupParser.scala	/^  def systemLiteral(): String = {$/;"	m
sz	scala/collection/concurrent/TrieMap.scala	/^      val sz = computeSize(ct.asInstanceOf[TrieMap[K, V]])$/;"	V
sz	scala/collection/concurrent/TrieMap.scala	/^    var sz = 0$/;"	v
sz	scala/collection/convert/Wrappers.scala	/^      val sz = underlying.size$/;"	V
sz	scala/collection/mutable/UnrolledBuffer.scala	/^  @transient private var sz = 0$/;"	v
sz	scala/collection/parallel/immutable/ParHashMap.scala	/^    val sz = root.foldLeft(0)(_ + _.size)$/;"	V
sz	scala/collection/parallel/immutable/ParHashMap.scala	/^  class ParHashMapIterator(var triter: Iterator[(K, V @uncheckedVariance)], val sz: Int)$/;"	V
sz	scala/collection/parallel/immutable/ParHashSet.scala	/^    val sz = root.foldLeft(0)(_ + _.size)$/;"	V
sz	scala/collection/parallel/immutable/ParHashSet.scala	/^  class ParHashSetIterator(var triter: Iterator[T], val sz: Int)$/;"	V
sz	scala/collection/parallel/immutable/ParVector.scala	/^  var sz = 0$/;"	v
sz	scala/collection/parallel/mutable/ParArray.scala	/^            val sz = remaining$/;"	V
sz	scala/collection/parallel/mutable/ParArray.scala	/^        val sz = remaining$/;"	V
sz	scala/collection/parallel/mutable/ParTrieMap.scala	/^      var sz = 0$/;"	v
sz	scala/collection/parallel/package.scala	/^    protected var sz: Int = 0$/;"	v
szcum	scala/collection/parallel/RemainsIterator.scala	/^      val szcum = sizes.scanLeft(0)(_ + _)$/;"	V
szsnd	scala/collection/immutable/TrieIterator.scala	/^          val szsnd = snd(0).size$/;"	V
t	scala/collection/parallel/Tasks.scala	/^        val t = new Thread(r)$/;"	V
t	scala/collection/parallel/Tasks.scala	/^    val t = newWrappedTask(task)$/;"	V
t	scala/collection/parallel/mutable/ParHashMap.scala	/^      val t = table$/;"	V
t	scala/collection/parallel/mutable/ParHashSet.scala	/^      var t = table$/;"	v
t	scala/concurrent/impl/ExecutionContextImpl.scala	/^              val t = Thread.currentThread$/;"	V
t	scala/sys/ShutdownHookThread.scala	/^    val t = new ShutdownHookThread(hookName()) {$/;"	V
t	scala/sys/process/ProcessBuilderImpl.scala	/^      val t = Spawn({$/;"	V
t	scala/util/Sorting.scala	/^      val t = x(a)$/;"	V
t0	scala/collection/SeqLike.scala	/^    val t0          = math.min(tlen, targetOffset)$/;"	V
t0	scala/collection/immutable/HashMap.scala	/^def time(block: =>Unit) = { val t0 = System.nanoTime; block; println("elapsed: " + (System.nanoTime - t0)\/1000000.0) }$/;"	V
t0	scala/collection/immutable/HashSet.scala	/^def time(block: =>Unit) = { val t0 = System.nanoTime; block; println("elapsed: " + (System.nanoTime - t0)\/1000000.0) }$/;"	V
t1	scala/collection/SeqLike.scala	/^    val t1          = math.min(tlen, t0 + targetCount)$/;"	V
t_hi	scala/util/Sorting.scala	/^      var t_hi = mid + 1$/;"	v
tabinc	scala/io/Source.scala	/^    var tabinc = 4$/;"	v
table	scala/collection/mutable/ArrayStack.scala	/^class ArrayStack[T] private(private var table : Array[AnyRef],$/;"	v
table	scala/collection/mutable/FlatHashTable.scala	/^    val table: Array[AnyRef],$/;"	V
table	scala/collection/mutable/FlatHashTable.scala	/^  @transient protected var table: Array[AnyRef] = new Array(initialCapacity)$/;"	v
table	scala/collection/mutable/HashTable.scala	/^    val table: Array[HashEntry[A, Entry]],$/;"	V
table	scala/collection/mutable/HashTable.scala	/^  @transient protected var table: Array[HashEntry[A, Entry]] = new Array(initialCapacity)$/;"	v
table	scala/collection/mutable/OpenHashMap.scala	/^  private var table : Array[Entry] = new Array[Entry](actualInitialSize)$/;"	v
table	scala/collection/parallel/mutable/ParHashMap.scala	/^    object table extends HashTable[K, DefaultEntry[K, V]] {$/;"	o
table	scala/collection/parallel/mutable/ParHashMap.scala	/^    val table = new AddingHashTable(size, tableLoadFactor, seedvalue)$/;"	V
table	scala/collection/parallel/mutable/ParHashSet.scala	/^    val table = new AddingFlatHashTable(size, tableLoadFactor, seedvalue)$/;"	V
tableLength	scala/collection/parallel/mutable/ParHashSet.scala	/^    def tableLength = table.length$/;"	m
tableLoadFactor	scala/collection/parallel/mutable/ParHashMap.scala	/^private[mutable] abstract class ParHashMapCombiner[K, V](private val tableLoadFactor: Int)$/;"	V
tableLoadFactor	scala/collection/parallel/mutable/ParHashSet.scala	/^private[mutable] abstract class ParHashSetCombiner[T](private val tableLoadFactor: Int)$/;"	V
tableSize	scala/collection/mutable/FlatHashTable.scala	/^    val tableSize: Int,$/;"	V
tableSize	scala/collection/mutable/FlatHashTable.scala	/^  @transient protected var tableSize = 0$/;"	v
tableSize	scala/collection/mutable/HashTable.scala	/^    val tableSize: Int,$/;"	V
tableSize	scala/collection/mutable/HashTable.scala	/^  @transient protected var tableSize: Int = 0$/;"	v
tableidx	scala/collection/mutable/FlatHashTable.scala	/^    var tableidx = 0$/;"	v
tableidx	scala/collection/mutable/HashTable.scala	/^    var tableidx = 0$/;"	v
tableuntil	scala/collection/mutable/FlatHashTable.scala	/^    var tableuntil = sizeMapBucketSize min tbl.length$/;"	v
tableuntil	scala/collection/mutable/HashTable.scala	/^    var tableuntil = 0$/;"	v
tabulate	scala/Array.scala	/^  def tabulate[T: ClassTag](n1: Int, n2: Int)(f: (Int, Int) => T): Array[Array[T]] =$/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) => T): Array[Array[Array[T]]] =$/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) => T): Array[Array[Array[Array[T]]]] =$/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) => T): Array[Array[Array[Array[Array[T]]]]] =$/;"	m
tabulate	scala/Array.scala	/^  def tabulate[T: ClassTag](n: Int)(f: Int => T): Array[T] = {$/;"	m
tabulate	scala/collection/Iterator.scala	/^  def tabulate[A](end: Int)(f: Int => A): Iterator[A] = new AbstractIterator[A] {$/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int)(f: (Int, Int) => A): CC[CC[A]] =$/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int, n3: Int)(f: (Int, Int, Int) => A): CC[CC[CC[A]]] =$/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int, n3: Int, n4: Int)(f: (Int, Int, Int, Int) => A): CC[CC[CC[CC[A]]]] =$/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n1: Int, n2: Int, n3: Int, n4: Int, n5: Int)(f: (Int, Int, Int, Int, Int) => A): CC[CC[CC[CC[CC[A]]]]] =$/;"	m
tabulate	scala/collection/generic/GenTraversableFactory.scala	/^  def tabulate[A](n: Int)(f: Int => A): CC[A] = {$/;"	m
tag	scala/collection/generic/GenericClassTagTraversableTemplate.scala	/^  implicit protected[this] val tag: ClassTag[A]$/;"	V
tag	scala/collection/generic/Signalling.scala	/^  def tag = -1$/;"	m
tag	scala/collection/generic/Signalling.scala	/^  def tag = signalDelegate.tag$/;"	m
tag	scala/collection/generic/Signalling.scala	/^  def tag: Int$/;"	m
tag	scala/collection/generic/Signalling.scala	/^class TaggedDelegatedContext(deleg: Signalling, override val tag: Int) extends DelegatedContext(deleg)$/;"	V
tag	scala/collection/mutable/ArrayBuilder.scala	/^    val tag = implicitly[ClassTag[T]]$/;"	V
tag	scala/collection/mutable/UnrolledBuffer.scala	/^class UnrolledBuffer[T](implicit val tag: ClassTag[T])$/;"	V
tagStack	scala/xml/parsing/FactoryAdapter.scala	/^  val tagStack    = new mutable.Stack[String]$/;"	V
tail	scala/collection/GenTraversableLike.scala	/^  def tail: Repr$/;"	m
tail	scala/collection/IndexedSeqOptimized.scala	/^  def tail: Repr = if (isEmpty) super.tail else slice(1, length)$/;"	m
tail	scala/collection/Iterator.scala	/^    private var tail: Iterator[A] = self$/;"	v
tail	scala/collection/LinearSeqOptimized.scala	/^  def tail: Repr$/;"	m
tail	scala/collection/immutable/List.scala	/^  def tail: List[A]$/;"	m
tail	scala/collection/immutable/ListMap.scala	/^      \/\/   val tail = next - k$/;"	V
tail	scala/collection/immutable/ListSet.scala	/^      val tail = self - e; new tail.Node(head)$/;"	V
tail	scala/collection/immutable/Stream.scala	/^        var tail: Stream[A] = coll$/;"	v
tail	scala/collection/immutable/Stream.scala	/^  def tail: Stream[A]$/;"	m
tail	scala/collection/parallel/ParIterableLike.scala	/^  def tail = drop(1)$/;"	m
tail	scala/util/hashing/MurmurHash3.scala	/^      val tail = elems.tail$/;"	V
tail0	scala/collection/immutable/List.scala	/^          val tail0 = pending.tail$/;"	V
tailDefined	scala/collection/immutable/Stream.scala	/^    def tailDefined = false$/;"	m
tailDefined	scala/collection/immutable/Stream.scala	/^    def tailDefined: Boolean = tlVal ne null$/;"	m
tailFlatMap	scala/collection/immutable/Stream.scala	/^      def tailFlatMap(coll: Stream[A]): Stream[B] = {$/;"	m
tailMap	scala/collection/immutable/Stream.scala	/^      def tailMap(coll: Stream[A]): Stream[B] = {$/;"	m
tailcall	scala/util/control/TailCalls.scala	/^  def tailcall[A](rest: => TailRec[A]): TailRec[A] = new Call(() => rest)$/;"	m
tails	scala/collection/TraversableLike.scala	/^  def tails: Iterator[Repr] = iterateUntilEmpty(_.tail)$/;"	m
take	scala/collection/GenTraversableLike.scala	/^  def take(n: Int): Repr$/;"	m
take	scala/collection/IndexedSeqOptimized.scala	/^  def take(n: Int): Repr = slice(0, n)$/;"	m
take	scala/collection/Iterator.scala	/^  def take(n: Int): Iterator[A] = slice(0, n)$/;"	m
take	scala/collection/LinearSeqOptimized.scala	/^  def take(n: Int): Repr = {$/;"	m
take	scala/collection/TraversableLike.scala	/^  def take(n: Int): Repr = slice(0, n)$/;"	m
take	scala/collection/immutable/RedBlackTree.scala	/^  def take[A: Ordering, B](tree: Tree[A, B], n: Int): Tree[A, B] = blacken(doTake(tree, n))$/;"	m
take	scala/collection/parallel/ParIterableLike.scala	/^  def take(n: Int): Repr = {$/;"	m
take	scala/concurrent/SyncVar.scala	/^  def take(): A = synchronized {$/;"	m
take	scala/concurrent/SyncVar.scala	/^  def take(timeout: Long): A = synchronized {$/;"	m
take2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def take2combiner[U >: T, This](n: Int, cb: Combiner[U, This]): Combiner[U, This] = {$/;"	m
takeAnd	scala/runtime/BoxesRunTime.java	/^    public static Object takeAnd(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeConditionalAnd	scala/runtime/BoxesRunTime.java	/^    public static Object takeConditionalAnd(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeConditionalOr	scala/runtime/BoxesRunTime.java	/^    public static Object takeConditionalOr(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeModulo	scala/runtime/BoxesRunTime.java	/^    public static Object takeModulo(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeNot	scala/runtime/BoxesRunTime.java	/^    public static Object takeNot(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeOr	scala/runtime/BoxesRunTime.java	/^    public static Object takeOr(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
takeRight	scala/collection/IndexedSeqOptimized.scala	/^  def takeRight(n: Int): Repr = slice(length - n, length)$/;"	m
takeRight	scala/collection/IterableLike.scala	/^  def takeRight(n: Int): Repr = {$/;"	m
takeWhile	scala/collection/GenTraversableLike.scala	/^  def takeWhile(pred: A => Boolean): Repr$/;"	m
takeWhile	scala/collection/IndexedSeqOptimized.scala	/^  def takeWhile(p: A => Boolean): Repr = take(prefixLength(p))$/;"	m
takeWhile	scala/collection/Iterator.scala	/^  def takeWhile(p: A => Boolean): Iterator[A] = new AbstractIterator[A] {$/;"	m
takeWhile	scala/collection/LinearSeqOptimized.scala	/^  def takeWhile(p: A => Boolean): Repr = {$/;"	m
takeWhile	scala/collection/TraversableLike.scala	/^  def takeWhile(p: A => Boolean): Repr = {$/;"	m
takeWhile	scala/collection/parallel/ParIterableLike.scala	/^  def takeWhile(pred: T => Boolean): Repr = {$/;"	m
takeWhile2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def takeWhile2combiner[U >: T, This](p: T => Boolean, cb: Combiner[U, This]) = {$/;"	m
takeXor	scala/runtime/BoxesRunTime.java	/^    public static Object takeXor(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
tan	scala/math/package.scala	/^  def tan(x: Double): Double = java.lang.Math.tan(x)$/;"	m
tanh	scala/math/package.scala	/^  def tanh(x: Double):Double = java.lang.Math.tanh(x)$/;"	m
targarrseq	scala/collection/parallel/mutable/ParArray.scala	/^      val targarrseq = new ArraySeq[U](length + 1)$/;"	V
targarrseq	scala/collection/parallel/mutable/ParArray.scala	/^    val targarrseq = new ArraySeq[S](length)$/;"	V
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^            val targetarr: Array[Any] = pac.buff.lastPtr.array.asInstanceOf[Array[Any]]$/;"	V
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^          val targetarr: Array[Any] = pac.buff.lastPtr.array.asInstanceOf[Array[Any]]$/;"	V
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^        val targetarr: Array[Any] = pac.lastbuff.internalArray.asInstanceOf[Array[Any]]$/;"	V
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^      val targetarr = targarrseq.array.asInstanceOf[Array[Any]]$/;"	V
targetarr	scala/collection/parallel/mutable/ParArray.scala	/^    val targetarr = targarrseq.array.asInstanceOf[Array[Any]]$/;"	V
tarr	scala/collection/parallel/mutable/ParArray.scala	/^      val tarr = targetarr$/;"	V
tarray	scala/sys/package.scala	/^    val tarray = new Array[Thread](num)$/;"	V
task	scala/collection/parallel/ParIterableLike.scala	/^      val task = (copythis parallel copythat) { _ combine _ } mapResult {$/;"	V
tasks	scala/concurrent/Future.scala	/^          val tasks = _tasksLocal.get$/;"	V
tasksupport	scala/collection/parallel/ParIterableLike.scala	/^  def tasksupport = {$/;"	m
tasksupport_=	scala/collection/parallel/ParIterableLike.scala	/^  def tasksupport_=(ts: TaskSupport) = _tasksupport = ts$/;"	m
tbl	scala/collection/mutable/FlatHashTable.scala	/^    var tbl = table$/;"	v
tbl	scala/collection/mutable/HashTable.scala	/^    val tbl = table$/;"	V
tbl	scala/collection/parallel/mutable/ParHashSet.scala	/^    val tbl = new FlatHashTable[T] {$/;"	V
tcount	scala/collection/parallel/Tasks.scala	/^  val tcount = new atomic.AtomicLong(0L)$/;"	V
tempEntry	scala/util/parsing/combinator/PackratParsers.scala	/^          val tempEntry: MemoEntry[_] = cached.get \/\/ match {case Some(x: MemoEntry[_]) => x}$/;"	V
tempRes	scala/util/parsing/combinator/PackratParsers.scala	/^            val tempRes = p(in)$/;"	V
tempRes	scala/util/parsing/combinator/PackratParsers.scala	/^          val tempRes = p(in)$/;"	V
tempRes	scala/util/parsing/combinator/PackratParsers.scala	/^    val tempRes = p(rest); tempRes match {$/;"	V
terminal	scala/collection/immutable/Range.scala	/^      val terminal = terminalElement$/;"	V
terminalElement	scala/collection/immutable/Range.scala	/^  final val terminalElement = start + numRangeElements * step$/;"	V
test	scala/testing/Show.scala	/^  def test[A](f: Symbol, args: A*): String = {$/;"	m
test	scala/util/automata/Inclusion.scala	/^        val test = encode(r1, r2)$/;"	V
test	scala/util/parsing/combinator/testing/Tester.scala	/^  def test(in: String) {$/;"	m
test	scala/xml/PrettyPrinter.scala	/^        val test = {$/;"	V
testBit	scala/math/BigInt.scala	/^  def testBit (n: Int): Boolean = this.bigInteger.testBit(n)$/;"	m
testEqual	scala/runtime/BoxesRunTime.java	/^    public static Object testEqual(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testGreaterOrEqualThan	scala/runtime/BoxesRunTime.java	/^    public static Object testGreaterOrEqualThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testGreaterThan	scala/runtime/BoxesRunTime.java	/^    public static Object testGreaterThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testLessOrEqualThan	scala/runtime/BoxesRunTime.java	/^    public static Object testLessOrEqualThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testLessThan	scala/runtime/BoxesRunTime.java	/^    public static Object testLessThan(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
testLogged	scala/xml/factory/LoggedNodeFactory.scala	/^object testLogged extends App {$/;"	o
testMethod	scala/testing/Show.scala	/^    def testMethod(meth: java.lang.reflect.Method): String =$/;"	m
testNotEqual	scala/runtime/BoxesRunTime.java	/^    public static Object testNotEqual(Object arg1, Object arg2) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
text	scala/text/Document.scala	/^  def text(s: String): Document = DocText(s)$/;"	m
text	scala/util/matching/Regex.scala	/^   *  val text = "The doc spree happened on 2011-07-15."$/;"	V
text	scala/util/matching/Regex.scala	/^   * val text = "A text with variables %x, %y and %z."$/;"	V
text	scala/util/matching/Regex.scala	/^   * val text = "From 2011-07-15 to 2011-07-17"$/;"	V
text	scala/xml/NodeSeq.scala	/^  def text: String = (this map (_.text)).mkString$/;"	m
text	scala/xml/parsing/ConstructingHandler.scala	/^  def text(pos: Int, txt: String)     = Text(txt)$/;"	m
text	scala/xml/parsing/DefaultMarkupHandler.scala	/^  def text(pos: Int, txt:String) = NodeSeq.Empty$/;"	m
text	scala/xml/parsing/MarkupHandler.scala	/^  def text(pos: Int, txt: String): NodeSeq$/;"	m
text	scala/xml/pull/XMLEventReader.scala	/^    def text(pos: Int, txt:String)                        = setEvent(EvText(txt))$/;"	m
textDecl	scala/xml/parsing/MarkupParser.scala	/^  def textDecl(): (Option[String], Option[String]) =$/;"	m
textField	scala/Option.scala	/^   * val textField = new JComponent(initalText.orNull,20)$/;"	V
textdecl	scala/xml/parsing/MarkupParser.scala	/^    var textdecl: (Option[String],Option[String]) = null$/;"	v
that	scala/collection/immutable/HashMap.scala	/^          val that = new HashMap1[A, B1](key, hash, value, kv)$/;"	V
that	scala/collection/immutable/HashMap.scala	/^        val that = hm.asInstanceOf[HashTrieMap[A, B1]]$/;"	V
that	scala/collection/immutable/HashMap.scala	/^        val that = new HashMap1(key, hash, value, kv)$/;"	V
that	scala/collection/immutable/ListSet.scala	/^    var that: ListSet[A] = self$/;"	v
that	scala/collection/parallel/ParSeqLike.scala	/^      val that = patch.asParSeq$/;"	V
that	scala/collection/parallel/RemainsIterator.scala	/^  class Appended[U >: T, PI <: IterableSplitter[U]](protected val that: PI) extends IterableSplitter[U] {$/;"	V
that	scala/collection/parallel/RemainsIterator.scala	/^  class ZippedAll[U >: T, S](protected val that: SeqSplitter[S], protected val thiselem: U, protected val thatelem: S)$/;"	V
that	scala/collection/parallel/RemainsIterator.scala	/^  class Zipped[S](protected val that: SeqSplitter[S]) extends IterableSplitter[(T, S)] {$/;"	V
that	scala/collection/parallel/Tasks.scala	/^    val that = t.asInstanceOf[Task[R, Tp]]$/;"	V
that	scala/collection/parallel/immutable/ParVector.scala	/^    val that = other.asInstanceOf[LazyParVectorCombiner[T]]$/;"	V
that	scala/collection/parallel/mutable/LazyCombiner.scala	/^      val that = other.asInstanceOf[LazyCombiner[Elem, To, Buff]]$/;"	V
that	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val that = other.asInstanceOf[ParTrieMap[K, V]]$/;"	V
that	scala/collection/parallel/package.scala	/^          val that = other.asInstanceOf[BucketCombiner[Elem, To, Buck, CombinerType]]$/;"	V
that0	scala/collection/Iterator.scala	/^    val that0 = that.toIterator$/;"	V
thatElem	scala/collection/GenIterableViewLike.scala	/^    protected[this] val thatElem: B$/;"	V
thatElem	scala/collection/IterableViewLike.scala	/^    val thatElem = _thatElem$/;"	V
thatElem	scala/collection/SeqViewLike.scala	/^    val thatElem = _thatElem$/;"	V
thatElem	scala/collection/parallel/ParIterableViewLike.scala	/^    val thatElem = _thatElem$/;"	V
thatElem	scala/collection/parallel/ParSeqViewLike.scala	/^    val thatElem = _thatElem$/;"	V
thatElementClass	scala/collection/mutable/ArrayOps.scala	/^    val thatElementClass = arrayElementClass(implicitly[ClassTag[U]])$/;"	V
thatElementClass	scala/collection/mutable/WrappedArray.scala	/^    val thatElementClass = arrayElementClass(implicitly[ClassTag[U]])$/;"	V
thatElems	scala/collection/IndexedSeqOptimized.scala	/^      val thatElems = that.iterator$/;"	V
thatLen	scala/collection/IndexedSeqOptimized.scala	/^      val thatLen = that.length$/;"	V
thatSeq	scala/collection/GenSeqViewLike.scala	/^    protected[this] lazy val thatSeq = other.seq.toSeq$/;"	V
thatbm	scala/collection/immutable/HashMap.scala	/^        var thatbm = that.bitmap$/;"	v
thatelems	scala/collection/immutable/HashMap.scala	/^        val thatelems = that.elems$/;"	V
thati	scala/collection/immutable/HashMap.scala	/^        var thati = 0$/;"	v
thatindex	scala/collection/immutable/HashMap.scala	/^    \/\/     var thatindex = (hash >>> level) & 0x1f$/;"	v
thatit	scala/collection/parallel/RemainsIterator.scala	/^      val thatit = if (selfrem > thatrem) that.appendParSeq(repetition(thatelem, selfrem - thatrem).splitter) else that$/;"	V
thatlsb	scala/collection/immutable/HashMap.scala	/^          val thatlsb = thatbm ^ (thatbm & (thatbm - 1))$/;"	V
thatrem	scala/collection/parallel/RemainsIterator.scala	/^      val thatrem = that.remaining$/;"	V
thats	scala/collection/parallel/RemainsIterator.scala	/^      val thats = that.psplit(sizes: _*)$/;"	V
thats	scala/collection/parallel/RemainsIterator.scala	/^      val thats = that.psplit(thatsizes: _*)$/;"	V
thatseq	scala/collection/parallel/ParIterableLike.scala	/^    val thatseq = that.asParSeq$/;"	V
thatseq	scala/collection/parallel/ParSeqLike.scala	/^    val thatseq = that.asParSeq$/;"	V
theChar	scala/xml/Utility.scala	/^          val theChar = parseCharRef ({ ()=> c },{ () => c = it.next },{s => throw new RuntimeException(s)}, {s => throw new RuntimeException(s)})$/;"	V
theChar	scala/xml/parsing/MarkupParser.scala	/^              val theChar = handle.text(tmppos, xCharRef(() => ch, () => nextch))$/;"	V
theFile	scala/xml/persistent/CachedFileStorage.scala	/^  private var theFile: File = null$/;"	v
theNode	scala/xml/parsing/MarkupParser.scala	/^    var theNode: Node = null$/;"	v
theSeq	scala/xml/Document.scala	/^  def theSeq: Seq[Node] = this.docElem$/;"	m
theSeq	scala/xml/Node.scala	/^  def theSeq: Seq[Node] = this :: Nil$/;"	m
theSeq	scala/xml/NodeSeq.scala	/^    def theSeq = s$/;"	m
theSeq	scala/xml/NodeSeq.scala	/^  def theSeq: Seq[Node]$/;"	m
theSeq	scala/xml/parsing/MarkupParser.scala	/^    def done = new NodeSeq { val theSeq = ts.toList }$/;"	V
theSet	scala/xml/persistent/SetStorage.scala	/^  private var theSet: mutable.HashSet[Node] = new mutable.HashSet[Node]$/;"	v
these	scala/collection/IterableLike.scala	/^    val these = this.iterator$/;"	V
these	scala/collection/LinearSeqLike.scala	/^    var these = self$/;"	v
these	scala/collection/LinearSeqOptimized.scala	/^      var these = this$/;"	v
these	scala/collection/LinearSeqOptimized.scala	/^    var these = repr$/;"	v
these	scala/collection/LinearSeqOptimized.scala	/^    var these = self$/;"	v
these	scala/collection/LinearSeqOptimized.scala	/^    var these = this drop from$/;"	v
these	scala/collection/LinearSeqOptimized.scala	/^    var these = this$/;"	v
these	scala/collection/LinearSeqOptimized.scala	/^    var these: Repr = repr$/;"	v
these	scala/collection/immutable/List.scala	/^    var these = this$/;"	v
these	scala/collection/immutable/List.scala	/^    var these: List[B] = this$/;"	v
these	scala/collection/immutable/Stream.scala	/^    var these = this$/;"	v
these	scala/collection/immutable/Stream.scala	/^    var these: Stream[A] = this$/;"	v
these	scala/collection/immutable/Stream.scala	/^  private var these: LazyCell = _$/;"	v
these	scala/collection/mutable/LinkedListLike.scala	/^    var these = this$/;"	v
these	scala/collection/mutable/LinkedListLike.scala	/^    var these: This = repr$/;"	v
these	scala/xml/NodeSeq.scala	/^    val these = this.iterator$/;"	V
this	scala/Enumeration.scala	/^    def this()             = this(nextId)$/;"	m
this	scala/Enumeration.scala	/^    def this(i: Int)       = this(i, nextNameOrNull)$/;"	m
this	scala/Enumeration.scala	/^    def this(name: String) = this(nextId, name)$/;"	m
this	scala/Enumeration.scala	/^  def this() = this(0)$/;"	m
this	scala/Enumeration.scala	/^  def this(initial: Int, names: String*) = {$/;"	m
this	scala/Enumeration.scala	/^  def this(names: String*) = this(0, names: _*)$/;"	m
this	scala/NotImplementedError.scala	/^  def this() = this("an implementation is missing")$/;"	m
this	scala/UninitializedFieldError.scala	/^  def this(obj: Any) =$/;"	m
this	scala/annotation/migration.scala	/^   def this(majorVersion: Int, minorVersion: Int, message: String) = this(message, majorVersion + "." + minorVersion)$/;"	m
this	scala/collection/concurrent/TrieMap.scala	/^  def this() = this(Hashing.default, Equiv.universal)$/;"	m
this	scala/collection/concurrent/TrieMap.scala	/^  def this(g: Gen) = this(null, g)$/;"	m
this	scala/collection/concurrent/TrieMap.scala	/^  def this(hashf: Hashing[K], ef: Equiv[K]) = this($/;"	m
this	scala/collection/concurrent/TrieMap.scala	/^  def this(k1: K, v1: V, k2: K, v2: V) = this(ImmutableListMap(k1 -> v1, k2 -> v2))$/;"	m
this	scala/collection/concurrent/TrieMap.scala	/^  def this(k: K, v: V) = this(ImmutableListMap(k -> v))$/;"	m
this	scala/collection/immutable/HashMap.scala	/^    def this (level: Int, m1: HashMap1[A,B], m2: HashMap1[A,B]) = {$/;"	m
this	scala/collection/immutable/ListSet.scala	/^    def this() = this(empty[Elem])$/;"	m
this	scala/collection/immutable/PagedSeq.scala	/^  def this(more: (Array[T], Int, Int) => Int) = this(more, new Page[T](0), 0, UndeterminedEnd)$/;"	m
this	scala/collection/immutable/Stack.scala	/^  def this() = this(Nil)$/;"	m
this	scala/collection/immutable/Stream.scala	/^  def this(self: Stream[A]) {$/;"	m
this	scala/collection/immutable/TreeMap.scala	/^  def this()(implicit ordering: Ordering[A]) = this(null)(ordering)$/;"	m
this	scala/collection/immutable/TreeSet.scala	/^  def this()(implicit ordering: Ordering[A]) = this(null)(ordering)$/;"	m
this	scala/collection/mutable/ArrayBuffer.scala	/^  def this() = this(16)$/;"	m
this	scala/collection/mutable/ArrayStack.scala	/^  def this() = this(new Array[AnyRef](1), 0)$/;"	m
this	scala/collection/mutable/BitSet.scala	/^  def this() = this(0)$/;"	m
this	scala/collection/mutable/BitSet.scala	/^  def this(initSize: Int) = this(new Array[Long]((initSize + 63) >> 6 max 1))$/;"	m
this	scala/collection/mutable/DoubleLinkedList.scala	/^  def this(elem: A, next: DoubleLinkedList[A]) {$/;"	m
this	scala/collection/mutable/HashMap.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/mutable/HashSet.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/mutable/LinkedList.scala	/^  def this(elem: A, next: LinkedList[A]) {$/;"	m
this	scala/collection/mutable/OpenHashMap.scala	/^  def this() = this(8)$/;"	m
this	scala/collection/mutable/Stack.scala	/^  def this() = this(Nil)$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this() = this(16, "")$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this(capacity: Int) = this(capacity, "")$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this(initCapacity: Int, initValue: String) =$/;"	m
this	scala/collection/mutable/StringBuilder.scala	/^  def this(str: String) = this(16, str)$/;"	m
this	scala/collection/parallel/immutable/ParHashMap.scala	/^  def this() = this(HashMap.empty[K, V])$/;"	m
this	scala/collection/parallel/immutable/ParHashSet.scala	/^  def this() = this(HashSet.empty[T])$/;"	m
this	scala/collection/parallel/immutable/ParVector.scala	/^  def this() = this(Vector())$/;"	m
this	scala/collection/parallel/mutable/ParArray.scala	/^  def this(sz: Int) = this {$/;"	m
this	scala/collection/parallel/mutable/ParHashMap.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/parallel/mutable/ParHashSet.scala	/^  def this() = this(null)$/;"	m
this	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def this() = this(new TrieMap)$/;"	m
this	scala/collection/script/Message.scala	/^  def this(elem: A) = this(NoLo, elem)$/;"	m
this	scala/io/BufferedSource.scala	/^  def this(inputStream: InputStream)(implicit codec: Codec) = this(inputStream, DefaultBufSize)(codec)$/;"	m
this	scala/io/Source.scala	/^    def this() = this(RelaxedPosition)$/;"	m
this	scala/math/BigDecimal.scala	/^  def this(bigDecimal: BigDec) = this(bigDecimal, BigDecimal.defaultMathContext)$/;"	m
this	scala/ref/SoftReference.scala	/^  def this(value : T) = this(value, null);$/;"	m
this	scala/ref/WeakReference.scala	/^  def this(value: T) = this(value, null)$/;"	m
this	scala/specialized.scala	/^  def this() = this(Primitives)$/;"	m
this	scala/specialized.scala	/^  def this(types: Specializable*) = this(new Group(types.toList))$/;"	m
this	scala/sys/process/ProcessIO.scala	/^  def this(in: OutputStream => Unit, out: InputStream => Unit, err: InputStream => Unit) = this(in, out, err, false)$/;"	m
this	scala/throws.scala	/^  def this(clazz: Class[T]) = this()$/;"	m
this	scala/util/Random.scala	/^  def this() = this(new java.util.Random())$/;"	m
this	scala/util/Random.scala	/^  def this(seed: Int) = this(seed.toLong)$/;"	m
this	scala/util/Random.scala	/^  def this(seed: Long) = this(new java.util.Random(seed))$/;"	m
this	scala/util/parsing/combinator/lexical/Scanners.scala	/^    def this(in: String) = this(new CharArrayReader(in.toCharArray()))$/;"	m
this	scala/util/parsing/input/CharArrayReader.scala	/^  def this(chars: Array[Char]) = this(chars, 0)$/;"	m
this	scala/util/parsing/input/CharSequenceReader.scala	/^  def this(source: java.lang.CharSequence) = this(source, 0)$/;"	m
this	scala/util/parsing/input/PagedSeqReader.scala	/^  def this(seq: PagedSeq[Char]) = this(seq, 0)$/;"	m
this	scala/xml/Elem.scala	/^  def this(prefix: String, label: String, attributes: MetaData, scope: NamespaceBinding, child: Node*) = {$/;"	m
this	scala/xml/PrefixedAttribute.scala	/^  def this(pre: String, key: String, value: Option[Seq[Node]], next: MetaData) =$/;"	m
this	scala/xml/PrefixedAttribute.scala	/^  def this(pre: String, key: String, value: String, next: MetaData) =$/;"	m
this	scala/xml/UnprefixedAttribute.scala	/^  def this(key: String, value: Option[Seq[Node]], next: MetaData) =$/;"	m
this	scala/xml/UnprefixedAttribute.scala	/^  def this(key: String, value: String, next: MetaData) =$/;"	m
this	scala/xml/include/CircularIncludeException.scala	/^  def this() = this(null)$/;"	m
this	scala/xml/include/UnavailableResourceException.scala	/^  def this() = this(null)$/;"	m
this	scala/xml/include/XIncludeException.scala	/^  def this() = this(null)$/;"	m
thisElem	scala/collection/GenIterableViewLike.scala	/^    protected[this] val thisElem: A1$/;"	V
thisElem	scala/collection/IterableViewLike.scala	/^    val thisElem = _thisElem$/;"	V
thisElem	scala/collection/SeqViewLike.scala	/^    val thisElem = _thisElem$/;"	V
thisElem	scala/collection/parallel/ParIterableViewLike.scala	/^    val thisElem = _thisElem$/;"	V
thisElem	scala/collection/parallel/ParSeqViewLike.scala	/^    val thisElem = _thisElem$/;"	V
thisLen	scala/collection/IndexedSeqOptimized.scala	/^      val thisLen = length$/;"	V
thisbm	scala/collection/immutable/HashMap.scala	/^        var thisbm = this.bitmap$/;"	v
thiselems	scala/collection/immutable/HashMap.scala	/^        val thiselems = this.elems$/;"	V
thisi	scala/collection/immutable/HashMap.scala	/^        var thisi = 0$/;"	v
thisindex	scala/collection/immutable/HashMap.scala	/^    \/\/     var thisindex = (this.hash >>> level) & 0x1f$/;"	v
thisit	scala/collection/parallel/RemainsIterator.scala	/^      val thisit = if (selfrem < thatrem) self.appendParIterable[U, SeqSplitter[U]](repetition[U](thiselem, thatrem - selfrem).splitter) else self$/;"	V
thisit	scala/collection/parallel/RemainsIterator.scala	/^      val thisit = if (selfrem < thatrem) self.appendParSeq[U, SeqSplitter[U]](repetition[U](thiselem, thatrem - selfrem).splitter) else self$/;"	V
thislsb	scala/collection/immutable/HashMap.scala	/^          val thislsb = thisbm ^ (thisbm & (thisbm - 1))$/;"	V
thiz	scala/collection/parallel/mutable/ParTrieMap.scala	/^    val thiz = this.asInstanceOf[ParTrieMap[K, V]]$/;"	V
those	scala/collection/IterableLike.scala	/^    val those = that.iterator$/;"	V
those	scala/collection/LinearSeqOptimized.scala	/^      var those = that1$/;"	v
those	scala/xml/NodeSeq.scala	/^    val those = that.iterator$/;"	V
thr	scala/util/continuations/ControlContext.scala	/^        val thr: Exception => B = { t: Exception =>$/;"	V
thr	scala/util/continuations/ControlContext.scala	/^        val thr: Exception => B1 = { t: Exception =>$/;"	V
thread	scala/sys/process/ProcessImpl.scala	/^      val thread = Spawn(code set runAndExitValue())$/;"	V
thread	scala/sys/process/ProcessImpl.scala	/^      val thread = new Thread() { override def run() = { f } }$/;"	V
threadFactory	scala/concurrent/impl/ExecutionContextImpl.scala	/^    val threadFactory = new DefaultThreadFactory(daemonic = true)$/;"	V
threadPoolRunner	scala/concurrent/TaskRunners.scala	/^  implicit val threadPoolRunner: FutureTaskRunner = {$/;"	V
threadRunner	scala/concurrent/TaskRunners.scala	/^  implicit val threadRunner: FutureTaskRunner =$/;"	V
threshold	scala/collection/mutable/FlatHashTable.scala	/^    val threshold: Int,$/;"	V
threshold	scala/collection/mutable/FlatHashTable.scala	/^  @transient protected var threshold: Int = newThreshold(_loadFactor, initialCapacity)$/;"	v
threshold	scala/collection/mutable/HashTable.scala	/^    val threshold: Int,$/;"	V
threshold	scala/collection/mutable/HashTable.scala	/^  @transient protected var threshold: Int = initialThreshold(_loadFactor)$/;"	v
thresholdFromSize	scala/collection/parallel/package.scala	/^  def thresholdFromSize(sz: Int, parallelismLevel: Int) = {$/;"	m
throwable	scala/collection/parallel/Tasks.scala	/^  @volatile var throwable: Throwable = null$/;"	v
throwables	scala/collection/parallel/package.scala	/^    val throwables: Set[Throwable]$/;"	V
throws	scala/package.scala	/^  type throws  = annotation.throws$/;"	T
throws	scala/throws.scala	/^class throws[T <: Throwable](cause: String = "") extends scala.annotation.StaticAnnotation {$/;"	c
ti	scala/collection/SeqLike.scala	/^                val ti = T(i)$/;"	V
ti	scala/collection/SeqLike.scala	/^            val ti = T(i)$/;"	V
time	scala/collection/immutable/HashMap.scala	/^def time(block: =>Unit) = { val t0 = System.nanoTime; block; println("elapsed: " + (System.nanoTime - t0)\/1000000.0) }$/;"	m
time	scala/collection/immutable/HashSet.scala	/^def time(block: =>Unit) = { val t0 = System.nanoTime; block; println("elapsed: " + (System.nanoTime - t0)\/1000000.0) }$/;"	m
timeLeft	scala/concurrent/duration/Deadline.scala	/^  def timeLeft: FiniteDuration = this - Deadline.now$/;"	m
timeUnit	scala/concurrent/duration/Duration.scala	/^  protected[duration] val timeUnit: Map[String, TimeUnit] =$/;"	V
timeUnitLabels	scala/concurrent/duration/Duration.scala	/^  private[this] val timeUnitLabels = List($/;"	V
timeUnitName	scala/concurrent/duration/Duration.scala	/^  protected[duration] val timeUnitName: Map[TimeUnit, String] =$/;"	V
times	scala/math/Numeric.scala	/^    def times(x: BigDecimal, y: BigDecimal): BigDecimal = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: BigInt, y: BigInt): BigInt = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Byte, y: Byte): Byte = (x * y).toByte$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Char, y: Char): Char = (x * y).toChar$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Double, y: Double): Double = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Float, y: Float): Float = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Int, y: Int): Int = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Long, y: Long): Long = x * y$/;"	m
times	scala/math/Numeric.scala	/^    def times(x: Short, y: Short): Short = (x * y).toShort$/;"	m
times	scala/math/Numeric.scala	/^  def times(x: T, y: T): T$/;"	m
tl	scala/collection/SeqLike.scala	/^      val tl = that.length$/;"	V
tl	scala/collection/SeqLike.scala	/^    val tl = that.length$/;"	V
tl	scala/collection/mutable/MutableList.scala	/^    val tl = new MutableList[A]$/;"	V
tl	scala/collection/mutable/Queue.scala	/^    val tl = new Queue[A]$/;"	V
tl	scala/util/DynamicVariable.scala	/^  private val tl = new InheritableThreadLocal[T] {$/;"	V
tlVal	scala/collection/immutable/Stream.scala	/^    @volatile private[this] var tlVal: Stream[A] = _$/;"	v
tlen	scala/collection/SeqLike.scala	/^    val tlen        = target.length$/;"	V
tlen	scala/collection/parallel/ParSeqLike.scala	/^      val tlen = that.length$/;"	V
tmp	scala/collection/mutable/ArrayStack.scala	/^      val tmp = table(i)$/;"	V
tmp	scala/util/Random.scala	/^      val tmp = buf(i1)$/;"	V
tmp	scala/xml/PrettyPrinter.scala	/^    val tmp = width - cur$/;"	V
tmp	scala/xml/dtd/Decl.scala	/^    var tmp = value$/;"	v
tmp	scala/xml/parsing/MarkupParser.scala	/^        val tmp = content(scope)$/;"	V
tmpDir	scala/util/Properties.scala	/^  def tmpDir                = propOrEmpty("java.io.tmpdir")$/;"	m
tmpE	scala/collection/SeqLike.scala	/^      var tmpE = elms(i)$/;"	v
tmpI	scala/collection/SeqLike.scala	/^      var tmpI = idxs(i)$/;"	v
tmparray	scala/collection/concurrent/TrieMap.scala	/^    val tmparray = new Array[BasicNode](arr.length)$/;"	V
tmppos	scala/xml/parsing/MarkupParser.scala	/^  var tmppos: Int = _$/;"	v
tmppos	scala/xml/parsing/MarkupParserCommon.scala	/^  var tmppos: PositionType$/;"	v
to	scala/collection/GenTraversableOnce.scala	/^  def to[Col[_]](implicit cbf: CanBuildFrom[Nothing, A, Col[A @uV]]): Col[A @uV]$/;"	m
to	scala/collection/TraversableOnce.scala	/^  def to[Col[_]](implicit cbf: CanBuildFrom[Nothing, A, Col[A @uV]]): Col[A @uV] = {$/;"	m
to	scala/collection/generic/Sorted.scala	/^  def to(to: K): This = {$/;"	m
to	scala/collection/immutable/RedBlackTree.scala	/^  def to[A: Ordering, B](tree: Tree[A, B], to: A): Tree[A, B] = blacken(doTo(tree, to))$/;"	m
to	scala/math/BigDecimal.scala	/^  def to(end: BigDecimal): Range.Partial[BigDecimal, NumericRange.Inclusive[BigDecimal]] =$/;"	m
to	scala/math/BigDecimal.scala	/^  def to(end: BigDecimal, step: BigDecimal) = Range.BigDecimal.inclusive(this, end, step)$/;"	m
to	scala/math/BigInt.scala	/^  def to(end: BigInt, step: BigInt = BigInt(1)) = Range.BigInt.inclusive(this, end, step)$/;"	m
to	scala/runtime/RichInt.scala	/^  def to(end: Int): Range.Inclusive = Range.inclusive(self, end)$/;"	m
to	scala/runtime/RichInt.scala	/^  def to(end: Int, step: Int): Range.Inclusive = Range.inclusive(self, end, step)$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T): NumericRange.Inclusive[T]             = NumericRange.inclusive(self, end, num.one)$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T): ResultWithoutStep                     = new Range.Partial(NumericRange.inclusive(self, end, _))$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T): ResultWithoutStep$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T, step: T): NumericRange.Inclusive[T]    = NumericRange.inclusive(self, end, step)$/;"	m
to	scala/runtime/ScalaNumberProxy.scala	/^  def to(end: T, step: T): immutable.IndexedSeq[T]$/;"	m
toArray	scala/collection/GenTraversableOnce.scala	/^  def toArray[A1 >: A: ClassTag]: Array[A1]$/;"	m
toArray	scala/collection/TraversableOnce.scala	/^  def toArray[B >: A : ClassTag]: Array[B] = {$/;"	m
toArray	scala/collection/mutable/StringBuilder.scala	/^  def toArray: Array[Char] = {$/;"	m
toArray	scala/runtime/ScalaRunTime.scala	/^  def toArray[T](xs: scala.collection.Seq[T]) = {$/;"	m
toBD	scala/collection/immutable/Range.scala	/^    def toBD(x: Double): BigDecimal = scala.math.BigDecimal valueOf x$/;"	m
toBigInt	scala/math/BigDecimal.scala	/^  def toBigInt(): BigInt = new BigInt(this.bigDecimal.toBigInteger())$/;"	m
toBigIntExact	scala/math/BigDecimal.scala	/^  def toBigIntExact(): Option[BigInt] =$/;"	m
toBinaryString	scala/runtime/RichInt.scala	/^  def toBinaryString: String = java.lang.Integer.toBinaryString(self)$/;"	m
toBinaryString	scala/runtime/RichLong.scala	/^  def toBinaryString: String = java.lang.Long.toBinaryString(self)$/;"	m
toBitMask	scala/Enumeration.scala	/^    def toBitMask: Array[Long] = nnIds.toBitMask$/;"	m
toBitMask	scala/collection/BitSetLike.scala	/^  def toBitMask: Array[Long] = {$/;"	m
toBoolean	scala/collection/immutable/StringLike.scala	/^  def toBoolean: Boolean = parseBoolean(toString)$/;"	m
toBoxed	scala/concurrent/Future.scala	/^  private[concurrent] val toBoxed = Map[Class[_], Class[_]]($/;"	V
toBuffer	scala/collection/GenTraversableOnce.scala	/^  def toBuffer[A1 >: A]: scala.collection.mutable.Buffer[A1]$/;"	m
toBuffer	scala/collection/TraversableOnce.scala	/^  def toBuffer[B >: A]: mutable.Buffer[B] = to[ArrayBuffer].asInstanceOf[mutable.Buffer[B]]$/;"	m
toByte	scala/Byte.scala	/^  def toByte: Byte$/;"	m
toByte	scala/Char.scala	/^  def toByte: Byte$/;"	m
toByte	scala/Double.scala	/^  def toByte: Byte$/;"	m
toByte	scala/Float.scala	/^  def toByte: Byte$/;"	m
toByte	scala/Int.scala	/^  def toByte: Byte$/;"	m
toByte	scala/Long.scala	/^  def toByte: Byte$/;"	m
toByte	scala/Short.scala	/^  def toByte: Byte$/;"	m
toByte	scala/collection/immutable/StringLike.scala	/^  def toByte: Byte       = java.lang.Byte.parseByte(toString)$/;"	m
toByte	scala/math/ScalaNumericConversions.scala	/^  def toByte = byteValue$/;"	m
toByte	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Byte toByte(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toByteArray	scala/math/BigInt.scala	/^  def toByteArray: Array[Byte] = this.bigInteger.toByteArray()$/;"	m
toByteExact	scala/math/BigDecimal.scala	/^  def toByteExact = bigDecimal.byteValueExact$/;"	m
toChar	scala/Byte.scala	/^  def toChar: Char$/;"	m
toChar	scala/Char.scala	/^  def toChar: Char$/;"	m
toChar	scala/Double.scala	/^  def toChar: Char$/;"	m
toChar	scala/Float.scala	/^  def toChar: Char$/;"	m
toChar	scala/Int.scala	/^  def toChar: Char$/;"	m
toChar	scala/Long.scala	/^  def toChar: Char$/;"	m
toChar	scala/Short.scala	/^  def toChar: Char$/;"	m
toChar	scala/math/ScalaNumericConversions.scala	/^  def toChar = intValue.toChar$/;"	m
toCharacter	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Character toCharacter(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toCompressed	scala/collection/concurrent/TrieMap.scala	/^  def toCompressed(ct: TrieMap[K, V], lev: Int, gen: Gen) = {$/;"	m
toContracted	scala/collection/concurrent/TrieMap.scala	/^  def toContracted(lev: Int): MainNode[K, V] = if (array.length == 1 && lev > 0) array(0) match {$/;"	m
toDays	scala/concurrent/duration/Duration.scala	/^  def toDays    = unit.toDays(length)$/;"	m
toDays	scala/concurrent/duration/Duration.scala	/^  def toDays: Long$/;"	m
toDegrees	scala/math/package.scala	/^  def toDegrees(x: Double): Double = java.lang.Math.toDegrees(x)$/;"	m
toDegrees	scala/runtime/RichDouble.scala	/^  def toDegrees: Double = math.toDegrees(self)$/;"	m
toDegrees	scala/runtime/RichFloat.scala	/^  def toDegrees: Float = math.toDegrees(self).toFloat$/;"	m
toDouble	scala/Byte.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/Char.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/Double.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/Float.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/Int.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/Long.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/Short.scala	/^  def toDouble: Double$/;"	m
toDouble	scala/collection/immutable/StringLike.scala	/^  def toDouble: Double   = java.lang.Double.parseDouble(toString)$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(): Double = Numeric.this.toDouble(lhs)$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: BigDecimal): Double = x.doubleValue$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: BigInt): Double = x.doubleValue$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Byte): Double = x.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Char): Double = x.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Double): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Float): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Int): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Long): Double = x$/;"	m
toDouble	scala/math/Numeric.scala	/^    def toDouble(x: Short): Double = x.toDouble$/;"	m
toDouble	scala/math/Numeric.scala	/^  def toDouble(x: T): Double$/;"	m
toDouble	scala/math/ScalaNumericConversions.scala	/^  def toDouble = doubleValue$/;"	m
toDouble	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Double toDouble(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toDrop	scala/collection/Iterator.scala	/^    var toDrop = lo$/;"	v
toEither	scala/util/control/Exception.scala	/^    def toEither: Catch[Either[Throwable, T]] = withApply(Left(_))$/;"	m
toEnum	scala/io/BytePickle.scala	/^    def toEnum(b: Boolean) = if (b) 1 else 0$/;"	m
toFloat	scala/Byte.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/Char.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/Double.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/Float.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/Int.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/Long.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/Short.scala	/^  def toFloat: Float$/;"	m
toFloat	scala/collection/immutable/StringLike.scala	/^  def toFloat: Float     = java.lang.Float.parseFloat(toString)$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(): Float = Numeric.this.toFloat(lhs)$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: BigDecimal): Float = x.floatValue$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: BigInt): Float = x.floatValue$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Byte): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Char): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Double): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Float): Float = x$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Int): Float = x$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Long): Float = x$/;"	m
toFloat	scala/math/Numeric.scala	/^    def toFloat(x: Short): Float = x.toFloat$/;"	m
toFloat	scala/math/Numeric.scala	/^  def toFloat(x: T): Float$/;"	m
toFloat	scala/math/ScalaNumericConversions.scala	/^  def toFloat = floatValue$/;"	m
toFloat	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Float toFloat(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toHexString	scala/runtime/RichInt.scala	/^  def toHexString: String = java.lang.Integer.toHexString(self)$/;"	m
toHexString	scala/runtime/RichLong.scala	/^  def toHexString: String = java.lang.Long.toHexString(self)$/;"	m
toHours	scala/concurrent/duration/Duration.scala	/^  def toHours   = unit.toHours(length)$/;"	m
toHours	scala/concurrent/duration/Duration.scala	/^  def toHours: Long$/;"	m
toImmutable	scala/collection/mutable/BitSet.scala	/^  def toImmutable = immutable.BitSet.fromBitMaskNoCopy(elems)$/;"	m
toIndexedSeq	scala/collection/GenTraversableOnce.scala	/^  def toIndexedSeq: immutable.IndexedSeq[A]$/;"	m
toIndexedSeq	scala/collection/TraversableOnce.scala	/^  def toIndexedSeq: immutable.IndexedSeq[A] = to[immutable.IndexedSeq]$/;"	m
toInt	scala/Byte.scala	/^  def toInt: Int$/;"	m
toInt	scala/Char.scala	/^  def toInt: Int$/;"	m
toInt	scala/Double.scala	/^  def toInt: Int$/;"	m
toInt	scala/Float.scala	/^  def toInt: Int$/;"	m
toInt	scala/Int.scala	/^  def toInt: Int$/;"	m
toInt	scala/Long.scala	/^  def toInt: Int$/;"	m
toInt	scala/Short.scala	/^  def toInt: Int$/;"	m
toInt	scala/collection/immutable/StringLike.scala	/^  def toInt: Int         = java.lang.Integer.parseInt(toString)$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(): Int = Numeric.this.toInt(lhs)$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: BigDecimal): Int = x.intValue$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: BigInt): Int = x.intValue$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Byte): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Char): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Double): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Float): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Int): Int = x$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Long): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^    def toInt(x: Short): Int = x.toInt$/;"	m
toInt	scala/math/Numeric.scala	/^  def toInt(x: T): Int$/;"	m
toInt	scala/math/ScalaNumericConversions.scala	/^  def toInt = intValue$/;"	m
toIntExact	scala/math/BigDecimal.scala	/^  def toIntExact = bigDecimal.intValueExact$/;"	m
toInteger	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Integer toInteger(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toIterable	scala/collection/GenTraversableOnce.scala	/^  def toIterable: GenIterable[A]$/;"	m
toIterable	scala/collection/TraversableOnce.scala	/^  def toIterable: Iterable[A] = toStream$/;"	m
toIterator	scala/collection/GenTraversableOnce.scala	/^  def toIterator: Iterator[A]$/;"	m
toIterator	scala/collection/Iterator.scala	/^  def toIterator: Iterator[A] = self$/;"	m
toIterator	scala/collection/TraversableLike.scala	/^  def toIterator: Iterator[A] = toStream.iterator$/;"	m
toLeft	scala/collection/TraversableLike.scala	/^    var toLeft = true$/;"	v
toList	scala/Option.scala	/^  def toList: List[A] =$/;"	m
toList	scala/collection/GenTraversableOnce.scala	/^  def toList: List[A]$/;"	m
toList	scala/collection/TraversableOnce.scala	/^  def toList: List[A] = to[List]$/;"	m
toLong	scala/Byte.scala	/^  def toLong: Long$/;"	m
toLong	scala/Char.scala	/^  def toLong: Long$/;"	m
toLong	scala/Double.scala	/^  def toLong: Long$/;"	m
toLong	scala/Float.scala	/^  def toLong: Long$/;"	m
toLong	scala/Int.scala	/^  def toLong: Long$/;"	m
toLong	scala/Long.scala	/^  def toLong: Long$/;"	m
toLong	scala/Short.scala	/^  def toLong: Long$/;"	m
toLong	scala/collection/immutable/StringLike.scala	/^  def toLong: Long       = java.lang.Long.parseLong(toString)$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(): Long = Numeric.this.toLong(lhs)$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: BigDecimal): Long = x.longValue$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: BigInt): Long = x.longValue$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Byte): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Char): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Double): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Float): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Int): Long = x$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Long): Long = x$/;"	m
toLong	scala/math/Numeric.scala	/^    def toLong(x: Short): Long = x.toLong$/;"	m
toLong	scala/math/Numeric.scala	/^  def toLong(x: T): Long$/;"	m
toLong	scala/math/ScalaNumericConversions.scala	/^  def toLong = longValue$/;"	m
toLong	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Long toLong(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toLongExact	scala/math/BigDecimal.scala	/^  def toLongExact = bigDecimal.longValueExact$/;"	m
toLower	scala/runtime/RichChar.scala	/^  def toLower: Char                     = Character.toLowerCase(self)$/;"	m
toMap	scala/collection/GenTraversableOnce.scala	/^  def toMap[K, V](implicit ev: A <:< (K, V)): GenMap[K, V]$/;"	m
toMap	scala/collection/TraversableOnce.scala	/^  def toMap[T, U](implicit ev: A <:< (T, U)): immutable.Map[T, U] = {$/;"	m
toMicros	scala/concurrent/duration/Duration.scala	/^  def toMicros  = unit.toMicros(length)$/;"	m
toMicros	scala/concurrent/duration/Duration.scala	/^  def toMicros: Long$/;"	m
toMillis	scala/concurrent/duration/Duration.scala	/^  def toMillis  = unit.toMillis(length)$/;"	m
toMillis	scala/concurrent/duration/Duration.scala	/^  def toMillis: Long$/;"	m
toMinutes	scala/concurrent/duration/Duration.scala	/^  def toMinutes = unit.toMinutes(length)$/;"	m
toMinutes	scala/concurrent/duration/Duration.scala	/^  def toMinutes: Long$/;"	m
toNanos	scala/concurrent/duration/Duration.scala	/^  def toNanos   = unit.toNanos(length)$/;"	m
toNanos	scala/concurrent/duration/Duration.scala	/^  def toNanos: Long$/;"	m
toObjectArray	scala/runtime/ScalaRunTime.scala	/^  def toObjectArray(src: AnyRef): Array[Object] = src match {$/;"	m
toOctalString	scala/runtime/RichInt.scala	/^  def toOctalString: String = java.lang.Integer.toOctalString(self)$/;"	m
toOctalString	scala/runtime/RichLong.scala	/^  def toOctalString: String = java.lang.Long.toOctalString(self)$/;"	m
toOption	scala/util/Either.scala	/^    def toOption = e match {$/;"	m
toOption	scala/util/Try.scala	/^  def toOption: Option[T] = if (isSuccess) Some(get) else None$/;"	m
toOption	scala/util/control/Exception.scala	/^    def toOption: Catch[Option[T]] = withApply(_ => None)$/;"	m
toParArray	scala/collection/parallel/package.scala	/^    def toParArray = if (t.isInstanceOf[ParArray[_]]) t.asInstanceOf[ParArray[T]] else {$/;"	m
toParArray	scala/collection/parallel/package.scala	/^    def toParArray: ParArray[T]$/;"	m
toQueue	scala/collection/mutable/MutableList.scala	/^  def toQueue = new Queue(first0, last0, len)$/;"	m
toQueue	scala/collection/mutable/PriorityQueue.scala	/^  def toQueue: Queue[A] = new Queue[A] ++= this.iterator$/;"	m
toRadians	scala/math/package.scala	/^  def toRadians(x: Double): Double = java.lang.Math.toRadians(x)$/;"	m
toRadians	scala/runtime/RichDouble.scala	/^  def toRadians: Double = math.toRadians(self)$/;"	m
toRadians	scala/runtime/RichFloat.scala	/^  def toRadians: Float = math.toRadians(self).toFloat$/;"	m
toSeconds	scala/concurrent/duration/Duration.scala	/^  def toSeconds = unit.toSeconds(length)$/;"	m
toSeconds	scala/concurrent/duration/Duration.scala	/^  def toSeconds: Long$/;"	m
toSeq	scala/collection/GenSeqLike.scala	/^  def toSeq: GenSeq[A]$/;"	m
toSeq	scala/collection/GenTraversableOnce.scala	/^  def toSeq: GenSeq[A]$/;"	m
toSeq	scala/collection/TraversableOnce.scala	/^  def toSeq: Seq[A] = toStream$/;"	m
toSeq	scala/util/Either.scala	/^    def toSeq = e match {$/;"	m
toSet	scala/collection/GenTraversableOnce.scala	/^  def toSet[A1 >: A]: GenSet[A1]$/;"	m
toSet	scala/collection/TraversableOnce.scala	/^  def toSet[B >: A]: immutable.Set[B] = to[immutable.Set].asInstanceOf[immutable.Set[B]]$/;"	m
toShort	scala/Byte.scala	/^  def toShort: Short$/;"	m
toShort	scala/Char.scala	/^  def toShort: Short$/;"	m
toShort	scala/Double.scala	/^  def toShort: Short$/;"	m
toShort	scala/Float.scala	/^  def toShort: Short$/;"	m
toShort	scala/Int.scala	/^  def toShort: Short$/;"	m
toShort	scala/Long.scala	/^  def toShort: Short$/;"	m
toShort	scala/Short.scala	/^  def toShort: Short$/;"	m
toShort	scala/collection/immutable/StringLike.scala	/^  def toShort: Short     = java.lang.Short.parseShort(toString)$/;"	m
toShort	scala/math/ScalaNumericConversions.scala	/^  def toShort = shortValue$/;"	m
toShort	scala/runtime/BoxesRunTime.java	/^    public static java.lang.Short toShort(Object arg) throws NoSuchMethodException {$/;"	m	class:BoxesRunTime
toShortExact	scala/math/BigDecimal.scala	/^  def toShortExact = bigDecimal.shortValueExact$/;"	m
toStdErr	scala/sys/process/BasicIO.scala	/^  def toStdErr = (in: InputStream) => transferFully(in, stderr)$/;"	m
toStdOut	scala/sys/process/BasicIO.scala	/^  def toStdOut = (in: InputStream) => transferFully(in, stdout)$/;"	m
toStream	scala/collection/GenTraversableOnce.scala	/^  def toStream: Stream[A]$/;"	m
toStream	scala/collection/Iterator.scala	/^  def toStream: Stream[A] =$/;"	m
toStream	scala/collection/TraversableLike.scala	/^  def toStream: Stream[A] = toBuffer.toStream$/;"	m
toStream	scala/collection/immutable/RedBlack.scala	/^    def toStream: Stream[(A,B)] =$/;"	m
toStream	scala/collection/immutable/RedBlack.scala	/^    def toStream: Stream[(A,B)]$/;"	m
toStream	scala/collection/immutable/RedBlack.scala	/^    def toStream: Stream[(A,Nothing)] = Stream.empty$/;"	m
toString	scala/collection/MapLike.scala	/^  def toString = super[IterableLike].toString$/;"	m
toString	scala/io/Position.scala	/^  def toString(pos: Int): String = line(pos) + ":" + column(pos)$/;"	m
toString	scala/math/BigInt.scala	/^  def toString(radix: Int): String = this.bigInteger.toString(radix)$/;"	m
toString	scala/reflect/Manifest.scala	/^                                            override val toString: String) extends ClassTypeManifest[T](None, _runtimeClass, Nil) {$/;"	V
toString	scala/reflect/Manifest.scala	/^    override lazy val toString = value.toString + ".type"$/;"	V
toString	scala/reflect/Manifest.scala	/^abstract class AnyValManifest[T <: AnyVal](override val toString: String) extends Manifest[T] with Equals {$/;"	V
toString	scala/runtime/BooleanRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:BooleanRef
toString	scala/runtime/BoxedUnit.java	/^    public String toString() {$/;"	m	class:BoxedUnit
toString	scala/runtime/ByteRef.java	/^    public String toString() { return java.lang.Byte.toString(elem); }$/;"	m	class:ByteRef
toString	scala/runtime/CharRef.java	/^    public String toString() { return java.lang.Character.toString(elem); }$/;"	m	class:CharRef
toString	scala/runtime/DoubleRef.java	/^    public String toString() { return java.lang.Double.toString(elem); }$/;"	m	class:DoubleRef
toString	scala/runtime/FloatRef.java	/^    public String toString() { return java.lang.Float.toString(elem); }$/;"	m	class:FloatRef
toString	scala/runtime/IntRef.java	/^    public String toString() { return java.lang.Integer.toString(elem); }$/;"	m	class:IntRef
toString	scala/runtime/LongRef.java	/^    public String toString() { return java.lang.Long.toString(elem); }$/;"	m	class:LongRef
toString	scala/runtime/ObjectRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:ObjectRef
toString	scala/runtime/ShortRef.java	/^    public String toString() { return java.lang.Short.toString(elem); }$/;"	m	class:ShortRef
toString	scala/runtime/VolatileBooleanRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:VolatileBooleanRef
toString	scala/runtime/VolatileByteRef.java	/^    public String toString() { return java.lang.Byte.toString(elem); }$/;"	m	class:VolatileByteRef
toString	scala/runtime/VolatileCharRef.java	/^    public String toString() { return java.lang.Character.toString(elem); }$/;"	m	class:VolatileCharRef
toString	scala/runtime/VolatileDoubleRef.java	/^    public String toString() { return java.lang.Double.toString(elem); }$/;"	m	class:VolatileDoubleRef
toString	scala/runtime/VolatileFloatRef.java	/^    public String toString() { return java.lang.Float.toString(elem); }$/;"	m	class:VolatileFloatRef
toString	scala/runtime/VolatileIntRef.java	/^    public String toString() { return java.lang.Integer.toString(elem); }$/;"	m	class:VolatileIntRef
toString	scala/runtime/VolatileLongRef.java	/^    public String toString() { return java.lang.Long.toString(elem); }$/;"	m	class:VolatileLongRef
toString	scala/runtime/VolatileObjectRef.java	/^    public String toString() { return String.valueOf(elem); }$/;"	m	class:VolatileObjectRef
toString	scala/runtime/VolatileShortRef.java	/^    public String toString() { return java.lang.Short.toString(elem); }$/;"	m	class:VolatileShortRef
toString	scala/sys/process/ProcessBuilderImpl.scala	/^    override val toString: String,$/;"	V
toString	scala/sys/process/ProcessBuilderImpl.scala	/^  private[process] class Dummy(override val toString: String, exitValue: => Int) extends AbstractBuilder {$/;"	V
toString	scala/util/parsing/json/Parser.scala	/^  def toString (formatter : JSONFormat.ValueFormatter) : String$/;"	m
toString	scala/util/parsing/json/Parser.scala	/^  def toString (formatter : JSONFormat.ValueFormatter) =$/;"	m
toText	scala/xml/TextBuffer.scala	/^  def toText: Seq[Text] = sb.toString.trim match {$/;"	m
toTitleCase	scala/runtime/RichChar.scala	/^  def toTitleCase: Char                 = Character.toTitleCase(self)$/;"	m
toTraversable	scala/collection/GenTraversableOnce.scala	/^  def toTraversable: GenTraversable[A]$/;"	m
toTraversable	scala/collection/Iterator.scala	/^  def toTraversable: Traversable[A] = toStream$/;"	m
toTraversable	scala/collection/TraversableLike.scala	/^  def toTraversable: Traversable[A] = thisCollection$/;"	m
toTraversable	scala/collection/TraversableOnce.scala	/^  def toTraversable: Traversable[A]$/;"	m
toTry	scala/util/control/Exception.scala	/^    def toTry: Catch[scala.util.Try[T]] = withApply(x => Failure(x))$/;"	m
toUTF8	scala/io/Codec.scala	/^  def toUTF8(chars: Array[Char], offset: Int, len: Int): Array[Byte] = {$/;"	m
toUTF8	scala/io/Codec.scala	/^  def toUTF8(cs: CharSequence): Array[Byte] = {$/;"	m
toUnit	scala/concurrent/duration/Duration.scala	/^    def toUnit(unit: TimeUnit): Double = Double.NaN$/;"	m
toUnit	scala/concurrent/duration/Duration.scala	/^    def toUnit(unit: TimeUnit): Double = Double.NegativeInfinity$/;"	m
toUnit	scala/concurrent/duration/Duration.scala	/^    def toUnit(unit: TimeUnit): Double = Double.PositiveInfinity$/;"	m
toUnit	scala/concurrent/duration/Duration.scala	/^  def toUnit(u: TimeUnit) = toNanos.toDouble \/ NANOSECONDS.convert(1, u)$/;"	m
toUnit	scala/concurrent/duration/Duration.scala	/^  def toUnit(unit: TimeUnit): Double$/;"	m
toUpper	scala/runtime/RichChar.scala	/^  def toUpper: Char                     = Character.toUpperCase(self)$/;"	m
toVector	scala/collection/GenTraversableOnce.scala	/^  def toVector: Vector[A]$/;"	m
toVector	scala/collection/TraversableOnce.scala	/^  def toVector: Vector[A] = to[Vector]$/;"	m
toXhtml	scala/xml/Xhtml.scala	/^  def toXhtml(node: Node): String = sbToString(sb => toXhtml(x = node, sb = sb))$/;"	m
toXhtml	scala/xml/Xhtml.scala	/^  def toXhtml(nodeSeq: NodeSeq): String = sbToString(sb => sequenceToXML(nodeSeq: Seq[Node], sb = sb))$/;"	m
toggle	scala/sys/BooleanProp.scala	/^    def toggle()  = if (value) disable() else enable()$/;"	m
toggle	scala/sys/BooleanProp.scala	/^  def toggle(): Unit$/;"	m
token	scala/util/parsing/combinator/lexical/Scanners.scala	/^  def token: Parser[Token]$/;"	m
token	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  def token: Parser[Token] =$/;"	m
token	scala/util/parsing/combinator/token/StdTokens.scala	/^package token$/;"	p
token	scala/util/parsing/combinator/token/Tokens.scala	/^package token$/;"	p
token	scala/xml/dtd/Scanner.scala	/^  var token:Int = END$/;"	v
token._	scala/util/parsing/combinator/lexical/Lexical.scala	/^import token._$/;"	i
token._	scala/util/parsing/combinator/lexical/Scanners.scala	/^import token._$/;"	i
token._	scala/util/parsing/combinator/lexical/StdLexical.scala	/^import token._$/;"	i
token._	scala/util/parsing/combinator/syntactical/StandardTokenParsers.scala	/^import token._$/;"	i
token._	scala/util/parsing/combinator/syntactical/StdTokenParsers.scala	/^import token._$/;"	i
tokenMe	scala/annotation/switch.scala	/^  def tokenMe(ch: Char) = (ch: @switch) match {$/;"	m
top	scala/collection/immutable/Stack.scala	/^  def top: A =$/;"	m
top	scala/collection/mutable/ArrayStack.scala	/^  def top: T = table(index - 1).asInstanceOf[T]$/;"	m
top	scala/collection/mutable/ResizableArray.scala	/^    val top = size$/;"	V
top	scala/collection/mutable/Stack.scala	/^  def top: A =$/;"	m
topId	scala/Enumeration.scala	/^  private var topId = initial$/;"	v
topmost	scala/collection/immutable/TrieIterator.scala	/^        val topmost = arrayStack(0)$/;"	V
total	scala/App.scala	/^      val total = currentTime - executionStart$/;"	V
total	scala/Application.scala	/^      val total = currentTime - executionStart$/;"	V
total	scala/collection/parallel/RemainsIterator.scala	/^    var total = 0$/;"	v
total	scala/collection/parallel/mutable/ParArray.scala	/^      val total = sizesIncomplete.reduceLeft(_ + _)$/;"	V
totalLength	scala/concurrent/duration/Duration.scala	/^    val totalLength = safeAdd(commonUnit.convert(length, unit), commonUnit.convert(otherLength, otherUnit))$/;"	V
totalbuckets	scala/collection/mutable/FlatHashTable.scala	/^    val totalbuckets = totalSizeMapBuckets$/;"	V
totalbuckets	scala/collection/mutable/HashTable.scala	/^    val totalbuckets = totalSizeMapBuckets$/;"	V
totalcombines	scala/collection/parallel/immutable/ParHashMap.scala	/^  var totalcombines = new java.util.concurrent.atomic.AtomicInteger(0)$/;"	v
totalelems	scala/collection/immutable/HashMap.scala	/^        var totalelems = 0$/;"	v
totalinserts	scala/collection/parallel/mutable/ParHashSet.scala	/^      var totalinserts = 0$/;"	v
totalleft	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^      var totalleft = howmany$/;"	v
totalleft	scala/collection/parallel/mutable/UnrolledParArrayCombiner.scala	/^      var totalleft = howmany$/;"	v
totallen	scala/collection/parallel/mutable/ParArray.scala	/^      val totallen = (self.length - i) min len min (array.length - from)$/;"	V
totalsize	scala/collection/parallel/mutable/ParTrieMap.scala	/^  lazy val totalsize = ct.par.size$/;"	V
totaltasks	scala/collection/parallel/Tasks.scala	/^  @volatile var totaltasks = 0$/;"	v
trailing	scala/collection/Iterator.scala	/^    val trailing = new AbstractIterator[A] {$/;"	V
trans	scala/util/automata/SubsetConstruction.scala	/^      deftrans = deftrans.updated(P, Pdef)$/;"	m
trans	scala/util/automata/SubsetConstruction.scala	/^      val trans = delta(Q)$/;"	V
trans	scala/xml/parsing/ValidatingMarkupHandler.scala	/^      val trans = dm.dfa.delta(qCurrent)$/;"	V
transDef	scala/util/automata/SubsetConstruction.scala	/^      val transDef = deftrans(Q)$/;"	V
transferFully	scala/sys/process/BasicIO.scala	/^  def transferFully(in: InputStream, out: OutputStream): Unit =$/;"	m
transform	scala/collection/immutable/IntMap.scala	/^  def transform[S](f: (Int, T) => S): IntMap[S] = this match {$/;"	m
transform	scala/collection/immutable/LongMap.scala	/^  def transform[S](f: (Long, T) => S): LongMap[S] = this match {$/;"	m
transform	scala/collection/immutable/MapLike.scala	/^  def transform[C, That](f: (A, B) => C)(implicit bf: CanBuildFrom[This, (A, C), That]): That = {$/;"	m
transform	scala/collection/mutable/MapLike.scala	/^  def transform(f: (A, B) => B): this.type = {$/;"	m
transform	scala/collection/mutable/SeqLike.scala	/^  def transform(f: A => A): this.type = {$/;"	m
transform	scala/concurrent/Future.scala	/^  def transform[S](s: T => S, f: Throwable => Throwable)(implicit executor: ExecutionContext): Future[S] = {$/;"	m
transform	scala/util/Try.scala	/^  def transform[U](s: T => Try[U], f: Throwable => Try[U]): Try[U] =$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^  def transform(it: Iterator[Node], nb: NodeBuffer): Seq[Node] =$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^  def transform(n: Node): Seq[Node] = {$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^  def transform(ns: Seq[Node]): Seq[Node] = {$/;"	m
transform	scala/xml/transform/BasicTransformer.scala	/^package transform$/;"	p
transform	scala/xml/transform/RewriteRule.scala	/^package transform$/;"	p
transform	scala/xml/transform/RuleTransformer.scala	/^package transform$/;"	p
transient	scala/package.scala	/^  type transient = annotation.transient$/;"	T
transient	scala/transient.scala	/^class transient extends scala.annotation.StaticAnnotation$/;"	c
transpose	scala/collection/generic/GenericTraversableTemplate.scala	/^  def transpose[B](implicit asTraversable: A => \/*<:<!!!*\/ GenTraversableOnce[B]): CC[CC[B] @uncheckedVariance] = {$/;"	m
transpose	scala/collection/immutable/List.scala	/^  def transpose[A](xss: List[List[A]]): List[List[A]] = {$/;"	m
transpose	scala/collection/mutable/ArrayOps.scala	/^  def transpose[U](implicit asArray: T => Array[U]): Array[Array[U]] = {$/;"	m
traversable	scala/collection/parallel/RemainsIterator.scala	/^      val traversable = f(next).seq$/;"	V
traversable	scala/collection/parallel/mutable/ParArray.scala	/^        val traversable = f(arr(i).asInstanceOf[T])$/;"	V
traversableOnceCanBuildFrom	scala/collection/TraversableOnce.scala	/^  def traversableOnceCanBuildFrom[T] = new OnceCanBuildFrom[T]$/;"	m
traversableSeed	scala/util/hashing/MurmurHash3.scala	/^  final val traversableSeed = 0xe73a8b15$/;"	V
traversableToColl	scala/collection/Iterator.scala	/^    def traversableToColl[B](t: GenTraversable[B]) = t.toIterator$/;"	m
traversableToColl	scala/collection/TraversableOnce.scala	/^    def traversableToColl[B](t: GenTraversable[B]) = t.seq$/;"	m
traversableToColl	scala/collection/TraversableOnce.scala	/^    def traversableToColl[B](t: GenTraversable[B]): Coll[B]$/;"	m
traverse	scala/concurrent/Future.scala	/^  def traverse[A, B, M[_] <: TraversableOnce[_]](in: M[A])(fn: A => Future[B])(implicit cbf: CanBuildFrom[M[A], B, M[B]], executor: ExecutionContext): Future[M[B]] =$/;"	m
traverse	scala/xml/dtd/ContentModel.scala	/^    def traverse(r: RegExp): Set[String] = r match { \/\/ !!! check for match translation problem$/;"	m
traversed	scala/collection/parallel/mutable/ParArray.scala	/^      var traversed = i$/;"	v
traversed	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^    private var traversed = 0$/;"	v
traversed	scala/collection/parallel/mutable/ParHashTable.scala	/^    private var traversed = 0$/;"	v
trd	scala/io/BytePickle.scala	/^    def trd(p: (a,b,c)): c = p._3$/;"	m
treatEscapes	scala/StringContext.scala	/^  def treatEscapes(str: String): String = {$/;"	m
trees	scala/collection/parallel/ParIterableLike.scala	/^      val trees = ArrayBuffer[ScanTree[U]]()$/;"	V
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      val trie = new HashMap.HashTrieMap(bitmap, root, sz)$/;"	V
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      val trie = new HashMap.HashTrieMap(bitmap, root.asInstanceOf[Array[HashMap[K, Repr]]], sz)$/;"	V
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      var trie = new HashMap[K, Combiner[V, Repr]]$/;"	v
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^      var trie = new HashMap[K, V]$/;"	v
trie	scala/collection/parallel/immutable/ParHashMap.scala	/^class ParHashMap[K, +V] private[immutable] (private[this] val trie: HashMap[K, V])$/;"	V
trie	scala/collection/parallel/immutable/ParHashSet.scala	/^      val trie = new HashSet.HashTrieSet(bitmap, root, sz)$/;"	V
trie	scala/collection/parallel/immutable/ParHashSet.scala	/^      var trie = new HashSet[T]$/;"	v
trie	scala/collection/parallel/immutable/ParHashSet.scala	/^class ParHashSet[T] private[immutable] (private[this] val trie: HashSet[T])$/;"	V
trim	scala/xml/Utility.scala	/^  def trim(x: Node): Node = x match {$/;"	m
trimEnd	scala/collection/mutable/BufferLike.scala	/^  def trimEnd(n: Int) { remove(length - n max 0, n) }$/;"	m
trimProper	scala/xml/Utility.scala	/^  def trimProper(x:Node): Seq[Node] = x match {$/;"	m
trimStart	scala/collection/mutable/BufferLike.scala	/^  def trimStart(n: Int) { remove(0, n) }$/;"	m
trio	scala/collection/parallel/RemainsIterator.scala	/^    private[this] val trio = {$/;"	V
triple	scala/io/BytePickle.scala	/^  def triple[a,b,c](pa: SPU[a], pb: SPU[b], pc: SPU[c]): SPU[(a,b,c)] = {$/;"	m
triter	scala/collection/parallel/immutable/ParHashMap.scala	/^  class ParHashMapIterator(var triter: Iterator[(K, V @uncheckedVariance)], val sz: Int)$/;"	v
triter	scala/collection/parallel/immutable/ParHashSet.scala	/^  class ParHashSetIterator(var triter: Iterator[T], val sz: Int)$/;"	v
truncatedError	scala/xml/parsing/MarkupParser.scala	/^  def truncatedError(msg: String): Nothing = throw FatalError(msg)$/;"	m
truncatedError	scala/xml/parsing/MarkupParserCommon.scala	/^  def truncatedError(msg: String): Nothing$/;"	m
tryBreakable	scala/util/control/Breaks.scala	/^  def tryBreakable[T](op: =>T) = new TryBlock[T] {$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel = false$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel = tryUnfork$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel() = synchronized {$/;"	m
tryCancel	scala/collection/parallel/Tasks.scala	/^    def tryCancel(): Boolean$/;"	m
tryCompare	scala/math/Ordering.scala	/^  def tryCompare(x: T, y: T) = Some(compare(x, y))$/;"	m
tryCompare	scala/math/PartialOrdering.scala	/^    def tryCompare(x: T, y: T) = outer.tryCompare(y, x)$/;"	m
tryCompare	scala/math/PartialOrdering.scala	/^  def tryCompare(x: T, y: T): Option[Int]$/;"	m
tryCompareTo	scala/math/PartiallyOrdered.scala	/^  def tryCompareTo [B >: A <% PartiallyOrdered[B]](that: B): Option[Int]$/;"	m
tryComplete	scala/concurrent/Promise.scala	/^  def tryComplete(result: Try[T]): Boolean$/;"	m
tryComplete	scala/concurrent/impl/Promise.scala	/^        def tryComplete(v: Try[T]): List[CallbackRunnable[T]] = {$/;"	m
tryComplete	scala/concurrent/impl/Promise.scala	/^    def tryComplete(value: Try[T]): Boolean = false$/;"	m
tryComplete	scala/concurrent/impl/Promise.scala	/^    def tryComplete(value: Try[T]): Boolean = {$/;"	m
tryFailure	scala/concurrent/Promise.scala	/^  def tryFailure(t: Throwable): Boolean = tryComplete(Failure(t))$/;"	m
trySuccess	scala/concurrent/Promise.scala	/^  def trySuccess(value: T): Boolean = tryComplete(Success(value))$/;"	m
ts	scala/collection/parallel/ParIterableLike.scala	/^    val ts = _tasksupport$/;"	V
ts	scala/xml/parsing/MarkupParser.scala	/^      val ts = new NodeBuffer()$/;"	V
ts	scala/xml/parsing/MarkupParser.scala	/^    val ts = {$/;"	V
ts	scala/xml/parsing/MarkupParser.scala	/^    var ts = new NodeBuffer$/;"	v
tsk	scala/collection/parallel/ParSeqLike.scala	/^        val tsk = new that.Copy[U, That](cfactory, that.splitter)$/;"	V
tupleNames	scala/runtime/ScalaRunTime.scala	/^  private val tupleNames = {$/;"	V
tupled	scala/Function.scala	/^  def tupled[a1, a2, a3, a4, a5, b](f: (a1, a2, a3, a4, a5) => b): Tuple5[a1, a2, a3, a4, a5] => b = {$/;"	m
tupled	scala/Function.scala	/^  def tupled[a1, a2, a3, a4, b](f: (a1, a2, a3, a4) => b): Tuple4[a1, a2, a3, a4] => b = {$/;"	m
tupled	scala/Function.scala	/^  def tupled[a1, a2, a3, b](f: (a1, a2, a3) => b): Tuple3[a1, a2, a3] => b = {$/;"	m
tupled	scala/Function.scala	/^  def tupled[a1, a2, b](f: (a1, a2) => b): Tuple2[a1, a2] => b = {$/;"	m
typeArguments	scala/reflect/ClassManifestDeprecatedApis.scala	/^      override val typeArguments = args.toList$/;"	V
typeArguments	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def typeArguments: List[OptManifest[_]] = List()$/;"	m
typeArguments	scala/reflect/ClassManifestDeprecatedApis.scala	/^  override val typeArguments: List[OptManifest[_]]) extends ClassManifest[T]$/;"	V
typeArguments	scala/reflect/Manifest.scala	/^                                     override val typeArguments: List[Manifest[_]]) extends Manifest[T] {$/;"	V
typeArguments	scala/reflect/Manifest.scala	/^      override val typeArguments = args.toList$/;"	V
typeCode	scala/runtime/BoxesRunTime.java	/^    private static int typeCode(Object a) {$/;"	m	class:BoxesRunTime	file:
typedProductIterator	scala/runtime/ScalaRunTime.scala	/^  def typedProductIterator[T](x: Product): Iterator[T] = {$/;"	m
u	scala/collection/BitSetLike.scala	/^      val u = until.get$/;"	V
u	scala/collection/parallel/ParIterableLike.scala	/^        val u = (until min (untilp + p.remaining)) - untilp$/;"	V
u	scala/collection/parallel/RemainsIterator.scala	/^    var u: U = next$/;"	v
uateSecondProcess	scala/sys/process/ProcessImpl.scala	/^    evaluateSecondProcess: Int => Boolean$/;"	V
uc	scala/xml/include/sax/XIncludeFilter.scala	/^      val uc = source.openConnection()$/;"	V
ue	scala/Console.scala	/^    inVar.value = new BufferedReader(reader)$/;"	V
ue	scala/Console.scala	/^  def setErr(err: PrintStream) { errVar.value = err }$/;"	V
ue	scala/Console.scala	/^  def setOut(out: PrintStream) { outVar.value = out }$/;"	V
ue	scala/Enumeration.scala	/^    def + (value: Value) = new ValueSet(nnIds + (value.id - bottomId))$/;"	V
ue	scala/Enumeration.scala	/^    def - (value: Value) = new ValueSet(nnIds - (value.id - bottomId))$/;"	V
ue	scala/Option.scala	/^   *  @return   Some(value) if value != null, None if value == null$/;"	V
ue	scala/Specializable.scala	/^  class Group[T >: Null](value: T) extends SpecializedGroup { }$/;"	V
ue	scala/annotation/elidable.scala	/^     println("I computed a value: " + computedValue)$/;"	V
ue	scala/annotation/elidable.scala	/^   I computed a value: 0$/;"	V
ue	scala/annotation/elidable.scala	/^   I computed a value: 172$/;"	V
ue	scala/collection/GenMap.scala	/^  def updated [B1 >: B](key: A, value: B1): GenMap[A, B1]$/;"	V
ue	scala/collection/MapLike.scala	/^   *  @usecase  def updated(key: A, value: B): Map[A, B]$/;"	V
ue	scala/collection/MapLike.scala	/^  def updated [B1 >: B](key: A, value: B1): Map[A, B1] = this + ((key, value))$/;"	V
ue	scala/collection/MapProxyLike.scala	/^  override def updated [B1 >: B](key: A, value: B1): Map[A, B1] = self.updated(key, value)$/;"	V
ue	scala/collection/SortedMapLike.scala	/^  override def updated[B1 >: B](key: A, value: B1): SortedMap[A, B1] = this+((key, value))$/;"	V
ue	scala/collection/concurrent/Map.scala	/^  def replace(k: A, oldvalue: B, newvalue: B): Boolean$/;"	V
ue	scala/collection/concurrent/TrieMap.scala	/^  def replace(k: K, oldvalue: V, newvalue: V): Boolean = {$/;"	V
ue	scala/collection/concurrent/TrieMap.scala	/^  override def put(key: K, value: V): Option[V] = {$/;"	V
ue	scala/collection/convert/Wrappers.scala	/^    def put(key: A, value: B): B = underlying.put(key, value) match {$/;"	V
ue	scala/collection/convert/Wrappers.scala	/^    def replace(k: A, oldvalue: B, newvalue: B): Boolean =$/;"	V
ue	scala/collection/convert/Wrappers.scala	/^    def setProperty(key: String, value: String) =$/;"	V
ue	scala/collection/immutable/HashMap.scala	/^    \/\/ override def updated0[B1 >: B](key: A, hash: Int, level: Int, value: B1, kv: (A, B1)): HashMap[A, B1] =$/;"	V
ue	scala/collection/immutable/HashMap.scala	/^    private[collection] override def updated0[B1 >: B](key: A, hash: Int, level: Int, value: B1, kv: (A, B1), merger: Merger[A, B1]): HashMap[A, B1] = {$/;"	V
ue	scala/collection/immutable/HashMap.scala	/^    private[collection] override def updated0[B1 >: B](key: A, hash: Int, level: Int, value: B1, kv: (A, B1), merger: Merger[A, B1]): HashMap[A, B1] =$/;"	V
ue	scala/collection/immutable/HashMap.scala	/^  override def updated [B1 >: B] (key: A, value: B1): HashMap[A, B1] =$/;"	V
ue	scala/collection/immutable/HashMap.scala	/^  private[collection] def updated0[B1 >: B](key: A, hash: Int, level: Int, value: B1, kv: (A, B1), merger: Merger[A, B1]): HashMap[A, B1] =$/;"	V
ue	scala/collection/immutable/IntMap.scala	/^    this.intersectionWith(that, (key: Int, value: T, value2: R) => value)$/;"	V
ue	scala/collection/immutable/IntMap.scala	/^  def singleton[T](key: Int, value: T): IntMap[T] = IntMap.Tip(key, value);$/;"	V
ue	scala/collection/immutable/IntMap.scala	/^  def updateWith[S >: T](key: Int, value: S, f: (T, S) => S): IntMap[S] = this match {$/;"	V
ue	scala/collection/immutable/IntMap.scala	/^  override def updated[S >: T](key: Int, value: S): IntMap[S] = this match {$/;"	V
ue	scala/collection/immutable/IntMap.scala	/^  private[immutable] case class Tip[+T](key: Int, value: T) extends IntMap[T]{$/;"	V
ue	scala/collection/immutable/ListMap.scala	/^  override def updated [B1 >: B] (key: A, value: B1): ListMap[A, B1] =$/;"	V
ue	scala/collection/immutable/ListMap.scala	/^  protected def value: B = throw new NoSuchElementException("empty map")$/;"	V
ue	scala/collection/immutable/LongMap.scala	/^    this.intersectionWith(that, (key: Long, value: T, value2: R) => value)$/;"	V
ue	scala/collection/immutable/LongMap.scala	/^  def singleton[T](key: Long, value: T): LongMap[T] = LongMap.Tip(key, value)$/;"	V
ue	scala/collection/immutable/LongMap.scala	/^  def updateWith[S >: T](key: Long, value: S, f: (T, S) => S): LongMap[S] = this match {$/;"	V
ue	scala/collection/immutable/LongMap.scala	/^  override def updated[S >: T](key: Long, value: S): LongMap[S] = this match {$/;"	V
ue	scala/collection/immutable/LongMap.scala	/^  private[immutable] case class Tip[+T](key: Long, value: T) extends LongMap[T] {$/;"	V
ue	scala/collection/immutable/Map.scala	/^    override def updated [B1 >: B] (key: A, value: B1): Map[A, B1] =$/;"	V
ue	scala/collection/immutable/Map.scala	/^    override def updated [B1] (key: Any, value: B1): Map[Any, B1] = new Map1(key, value)$/;"	V
ue	scala/collection/immutable/Map.scala	/^    override def updated[B1 >: B](key: A, value: B1): WithDefault[A, B1] = new WithDefault[A, B1](underlying.updated[B1](key, value), d)$/;"	V
ue	scala/collection/immutable/Map.scala	/^  override def updated [B1 >: B](key: A, value: B1): Map[A, B1]$/;"	V
ue	scala/collection/immutable/MapLike.scala	/^  override def updated [B1 >: B](key: A, value: B1): immutable.Map[A, B1] = this + ((key, value))$/;"	V
ue	scala/collection/immutable/MapProxy.scala	/^  override def updated [B1 >: B](key: A, value: B1) = newProxy(self.updated(key, value))$/;"	V
ue	scala/collection/immutable/NumericRange.scala	/^  private def newEmptyRange(value: T) = NumericRange(value, value, step)$/;"	V
ue	scala/collection/immutable/Range.scala	/^  private def newEmptyRange(value: Int) = new Range(value, value, step)$/;"	V
ue	scala/collection/immutable/RedBlack.scala	/^    def value: B$/;"	V
ue	scala/collection/immutable/RedBlackTree.scala	/^                               value: B,$/;"	V
ue	scala/collection/immutable/RedBlackTree.scala	/^                             value: B,$/;"	V
ue	scala/collection/immutable/RedBlackTree.scala	/^    @inline def apply[A, B](key: A, value: B, left: Tree[A, B], right: Tree[A, B]) = new BlackTree(key, value, left, right)$/;"	V
ue	scala/collection/immutable/RedBlackTree.scala	/^    @inline def apply[A, B](key: A, value: B, left: Tree[A, B], right: Tree[A, B]) = new RedTree(key, value, left, right)$/;"	V
ue	scala/collection/immutable/SortedMap.scala	/^  override def updated [B1 >: B](key: A, value: B1): SortedMap[A, B1] = this + ((key, value))$/;"	V
ue	scala/collection/immutable/TreeMap.scala	/^  def insert [B1 >: B](key: A, value: B1): TreeMap[A, B1] = {$/;"	V
ue	scala/collection/immutable/TreeMap.scala	/^  override def updated [B1 >: B](key: A, value: B1): TreeMap[A, B1] = new TreeMap(RB.update(tree, key, value, true))$/;"	V
ue	scala/collection/immutable/Vector.scala	/^  private[immutable] def appendBack[B>:A](value: B): Vector[B] = {$/;"	V
ue	scala/collection/immutable/Vector.scala	/^  private[immutable] def appendFront[B>:A](value: B): Vector[B] = {$/;"	V
ue	scala/collection/mutable/AVLTree.scala	/^  def contains[B >: A](value: B, ordering: Ordering[B]): Boolean = false$/;"	V
ue	scala/collection/mutable/AVLTree.scala	/^  def insert[B >: A](value: B, ordering: Ordering[B]): AVLTree[B] = Node(value, Leaf, Leaf)$/;"	V
ue	scala/collection/mutable/AVLTree.scala	/^  def remove[B >: A](value: B, ordering: Ordering[B]): AVLTree[A] =$/;"	V
ue	scala/collection/mutable/AVLTree.scala	/^  override def contains[B >: A](value: B, ordering: Ordering[B]) = {$/;"	V
ue	scala/collection/mutable/AVLTree.scala	/^  override def insert[B >: A](value: B, ordering: Ordering[B]) = {$/;"	V
ue	scala/collection/mutable/AVLTree.scala	/^  override def remove[B >: A](value: B, ordering: Ordering[B]): AVLTree[A] = {$/;"	V
ue	scala/collection/mutable/ConcurrentMap.scala	/^  def replace(k: A, oldvalue: B, newvalue: B): Boolean$/;"	V
ue	scala/collection/mutable/DefaultMapModel.scala	/^  override def put(key: A, value: B): Option[B] = {$/;"	V
ue	scala/collection/mutable/FlatHashTable.scala	/^      seedvalue = c.seedvalue$/;"	V
ue	scala/collection/mutable/FlatHashTable.scala	/^    seedvalue = in.readInt()$/;"	V
ue	scala/collection/mutable/FlatHashTable.scala	/^    seedvalue = tableSizeSeed$/;"	V
ue	scala/collection/mutable/FlatHashTable.scala	/^  @transient protected var seedvalue: Int = tableSizeSeed$/;"	V
ue	scala/collection/mutable/HashMap.scala	/^    if (e ne null) e.value = kv._2$/;"	V
ue	scala/collection/mutable/HashMap.scala	/^  override def put(key: A, value: B): Option[B] = {$/;"	V
ue	scala/collection/mutable/HashMap.scala	/^  override def update(key: A, value: B): Unit = put(key, value)$/;"	V
ue	scala/collection/mutable/HashMap.scala	/^  protected def createNewEntry[B1](key: A, value: B1): Entry = {$/;"	V
ue	scala/collection/mutable/HashTable.scala	/^      append("Seedvalue: " + seedvalue)$/;"	V
ue	scala/collection/mutable/HashTable.scala	/^      seedvalue = c.seedvalue$/;"	V
ue	scala/collection/mutable/HashTable.scala	/^    seedvalue = in.readInt()$/;"	V
ue	scala/collection/mutable/HashTable.scala	/^  @transient protected var seedvalue: Int = tableSizeSeed$/;"	V
ue	scala/collection/mutable/HashTable.scala	/^  protected def createNewEntry[B](key: A, value: B): Entry$/;"	V
ue	scala/collection/mutable/HashTable.scala	/^  protected def findOrAddEntry[B](key: A, value: B): Entry = {$/;"	V
ue	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  override def update(key: A, value: B): Unit = { imap = imap.updated(key, value) }$/;"	V
ue	scala/collection/mutable/LinkedHashMap.scala	/^  override def put(key: A, value: B): Option[B] = {$/;"	V
ue	scala/collection/mutable/LinkedHashMap.scala	/^  protected def createNewEntry[B1](key: A, value: B1): Entry = {$/;"	V
ue	scala/collection/mutable/Map.scala	/^    override def update(key: A, value: B) = self.update(key, value)$/;"	V
ue	scala/collection/mutable/Map.scala	/^    override def updated[B1 >: B](key: A, value: B1): WithDefault[A, B1] = new WithDefault[A, B1](underlying.updated[B1](key, value), d)$/;"	V
ue	scala/collection/mutable/MapLike.scala	/^  def put(key: A, value: B): Option[B] = {$/;"	V
ue	scala/collection/mutable/MapLike.scala	/^  def update(key: A, value: B) { this += ((key, value)) }$/;"	V
ue	scala/collection/mutable/MapLike.scala	/^  override def updated[B1 >: B](key: A, value: B1): Map[A, B1] = this + ((key, value))$/;"	V
ue	scala/collection/mutable/MapProxy.scala	/^  override def updated [B1 >: B](key: A, value: B1) = newProxy(self.updated(key, value))$/;"	V
ue	scala/collection/mutable/MultiMap.scala	/^  def addBinding(key: A, value: B): this.type = {$/;"	V
ue	scala/collection/mutable/MultiMap.scala	/^  def removeBinding(key: A, value: B): this.type = {$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^                                            var value: Option[Value])$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^      entry.value = Some(value);$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^      if (entry.value == None) { size += 1; modCount += 1 }$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^      table(index).value = None$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^      while((index <= mask) && (table(index) == null || table(index).value == None)) index+=1;$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^    foreachUndeletedEntry(entry => entry.value = Some(f(entry.key, entry.value.get)));$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^    foreachUndeletedEntry(entry => if (!f(entry.key, entry.value.get)) {entry.value = None; size -= 1; deleted += 1} );$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^  override def put(key: Key, value: Value): Option[Value] =$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^  override def update(key: Key, value: Value) {$/;"	V
ue	scala/collection/mutable/OpenHashMap.scala	/^  private def put(key: Key, hash: Int, value: Value): Option[Value] = {$/;"	V
ue	scala/collection/mutable/SynchronizedMap.scala	/^  override def put(key: A, value: B): Option[B] = synchronized { super.put(key, value) }$/;"	V
ue	scala/collection/mutable/SynchronizedMap.scala	/^  override def update(key: A, value: B): Unit = synchronized { super.update(key, value) }$/;"	V
ue	scala/collection/parallel/ParMap.scala	/^  override def updated [U >: V](key: K, value: U): ParMap[K, U] = this + ((key, value))$/;"	V
ue	scala/collection/parallel/immutable/ParMap.scala	/^    override def updated[U >: V](key: K, value: U): WithDefault[K, U] = new WithDefault[K, U](underlying.updated[U](key, value), d)$/;"	V
ue	scala/collection/parallel/immutable/ParMap.scala	/^  override def updated [U >: V](key: K, value: U): ParMap[K, U] = this + ((key, value))$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^    if (e ne null) e.value = kv._2$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^    seedvalue = _seedvalue$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^  def put(key: K, value: V): Option[V] = {$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^  def update(key: K, value: V): Unit = put(key, value)$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^  private var seedvalue = 27$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^  private[ParHashMapCombiner] class AddingHashTable(numelems: Int, lf: Int, _seedvalue: Int) extends HashTable[K, DefaultEntry[K, V]] {$/;"	V
ue	scala/collection/parallel/mutable/ParHashMap.scala	/^  protected def createNewEntry[V1](key: K, value: V1): Entry = {$/;"	V
ue	scala/collection/parallel/mutable/ParHashSet.scala	/^      seedvalue = ParHashSetCombiner.this.seedvalue$/;"	V
ue	scala/collection/parallel/mutable/ParHashSet.scala	/^    seedvalue = inseedvalue$/;"	V
ue	scala/collection/parallel/mutable/ParHashSet.scala	/^  class AddingFlatHashTable(numelems: Int, lf: Int, inseedvalue: Int) extends FlatHashTable[T] {$/;"	V
ue	scala/collection/parallel/mutable/ParHashSet.scala	/^  private var seedvalue = 27$/;"	V
ue	scala/collection/parallel/mutable/ParMap.scala	/^    def put(key: K, value: V): Option[V] = underlying.put(key, value)$/;"	V
ue	scala/collection/parallel/mutable/ParMap.scala	/^    override def updated[U >: V](key: K, value: U): WithDefault[K, U] = new WithDefault[K, U](underlying.updated[U](key, value), d)$/;"	V
ue	scala/collection/parallel/mutable/ParMap.scala	/^  override def updated [U >: V](key: K, value: U): ParMap[K, U] = this + ((key, value))$/;"	V
ue	scala/collection/parallel/mutable/ParMapLike.scala	/^  def put(key: K, value: V): Option[V]$/;"	V
ue	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def put(key: K, value: V): Option[V] = ctrie.put(key, value)$/;"	V
ue	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def update(key: K, value: V): Unit = ctrie.update(key, value)$/;"	V
ue	scala/concurrent/Future.scala	/^  def value: Option[Try[T]]$/;"	V
ue	scala/concurrent/Promise.scala	/^  def trySuccess(value: T): Boolean = tryComplete(Success(value))$/;"	V
ue	scala/concurrent/SyncVar.scala	/^    value = None$/;"	V
ue	scala/concurrent/SyncVar.scala	/^    value = Some(x)$/;"	V
ue	scala/concurrent/SyncVar.scala	/^  private var value: Option[A] = None$/;"	V
ue	scala/concurrent/impl/Promise.scala	/^    def tryComplete(value: Try[T]): Boolean = false$/;"	V
ue	scala/concurrent/impl/Promise.scala	/^    def tryComplete(value: Try[T]): Boolean = {$/;"	V
ue	scala/concurrent/impl/Promise.scala	/^    def value: Option[Try[T]] = getState match {$/;"	V
ue	scala/concurrent/impl/Promise.scala	/^    value = v$/;"	V
ue	scala/concurrent/impl/Promise.scala	/^  var value: Try[T] = null$/;"	V
ue	scala/ref/PhantomReference.scala	/^class PhantomReference[+T <: AnyRef](value: T, queue: ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	V
ue	scala/ref/PhantomReference.scala	/^private class PhantomReferenceWithWrapper[T <: AnyRef](value: T, queue: ReferenceQueue[T], val wrapper: PhantomReference[T])$/;"	V
ue	scala/ref/SoftReference.scala	/^  def this(value : T) = this(value, null);$/;"	V
ue	scala/ref/SoftReference.scala	/^class SoftReference[+T <: AnyRef](value : T, queue : ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	V
ue	scala/ref/SoftReference.scala	/^private class SoftReferenceWithWrapper[T <: AnyRef](value: T, queue: ReferenceQueue[T], val wrapper: SoftReference[T])$/;"	V
ue	scala/ref/WeakReference.scala	/^  def apply[T <: AnyRef](value: T) = new WeakReference(value)$/;"	V
ue	scala/ref/WeakReference.scala	/^  def this(value: T) = this(value, null)$/;"	V
ue	scala/ref/WeakReference.scala	/^class WeakReference[+T <: AnyRef](value: T, queue: ReferenceQueue[T]) extends ReferenceWrapper[T] {$/;"	V
ue	scala/ref/WeakReference.scala	/^private class WeakReferenceWithWrapper[T <: AnyRef](value: T, queue: ReferenceQueue[T], val wrapper: WeakReference[T])$/;"	V
ue	scala/reflect/ClassManifestDeprecatedApis.scala	/^  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] = Manifest.singleType(value)$/;"	V
ue	scala/reflect/Manifest.scala	/^  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] =$/;"	V
ue	scala/reflect/Manifest.scala	/^  private class SingletonTypeManifest[T <: AnyRef](value: AnyRef) extends Manifest[T] {$/;"	V
ue	scala/runtime/ScalaRunTime.scala	/^  def anyValClass[T <: AnyVal : ClassTag](value: T): jClass[T] =$/;"	V
ue	scala/runtime/ScalaRunTime.scala	/^  def array_update(xs: AnyRef, idx: Int, value: Any): Unit = xs match {$/;"	V
ue	scala/sys/BooleanProp.scala	/^  def value: Boolean$/;"	V
ue	scala/sys/Prop.scala	/^  def setValue[T1 >: T](value: T1): T$/;"	V
ue	scala/sys/Prop.scala	/^  def value: T$/;"	V
ue	scala/sys/PropImpl.scala	/^  def value: T = if (isSet) valueFn(get) else zero$/;"	V
ue	scala/sys/process/Process.scala	/^  def apply(value: Boolean): ProcessBuilder           = apply(value.toString, if (value) 0 else 1)$/;"	V
ue	scala/sys/process/ProcessBuilderImpl.scala	/^      else scala.sys.error("Nonzero exit value: " + code)$/;"	V
ue	scala/util/DynamicVariable.scala	/^  def value: T = tl.get.asInstanceOf[T]$/;"	V
ue	scala/util/Either.scala	/^   *   v => "Operation produced value: " + v$/;"	V
ue	scala/util/MurmurHash.scala	/^      hashvalue = finalizeHash(h)$/;"	V
ue	scala/util/MurmurHash.scala	/^  def extendHash(hash: Int, value: Int, magicA: Int, magicB: Int) = {$/;"	V
ue	scala/util/MurmurHash.scala	/^  private var hashvalue = h$/;"	V
ue	scala/util/Properties.scala	/^  def propIsSetTo(name: String, value: String)  = propOrNull(name) == value$/;"	V
ue	scala/util/Properties.scala	/^  def setProp(name: String, value: String)      = System.setProperty(name, value)$/;"	V
ue	scala/util/Try.scala	/^final case class Success[+T](value: T) extends Try[T] {$/;"	V
ue	scala/util/control/Exception.scala	/^  def failAsValue[T](exceptions: Class[_]*)(value: => T): Catch[T] =$/;"	V
ue	scala/util/parsing/ast/Binders.scala	/^    def substitute(b: binderType, value: Element): Unit = substitution(b) = value$/;"	V
ue	scala/util/parsing/combinator/Parsers.scala	/^      lastNoSuccessVar.value = Some(this)$/;"	V
ue	scala/util/parsing/combinator/Parsers.scala	/^  def lastNoSuccess_=(x: NoSuccess): Unit = lastNoSuccessVar.value = Option(x)$/;"	V
ue	scala/util/parsing/json/Parser.scala	/^  def value: Parser[Any] = (jsonObj | jsonArray | number | "true" ^^^ true | "false" ^^^ false | "null" ^^^ null | stringVal)$/;"	V
ue	scala/xml/Attribute.scala	/^    if (value == null) next.iterator$/;"	V
ue	scala/xml/Attribute.scala	/^    if (value == null) next.size$/;"	V
ue	scala/xml/Attribute.scala	/^    if (value == null)$/;"	V
ue	scala/xml/Attribute.scala	/^  def apply(key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	V
ue	scala/xml/Attribute.scala	/^  def apply(pre: Option[String], key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	V
ue	scala/xml/Attribute.scala	/^  def apply(pre: String, key: String, value: Seq[Node], next: MetaData): Attribute =$/;"	V
ue	scala/xml/Attribute.scala	/^  def apply(pre: String, key: String, value: String, next: MetaData): Attribute =$/;"	V
ue	scala/xml/MetaData.scala	/^  def value: Seq[Node]$/;"	V
ue	scala/xml/Null.scala	/^  def value = null$/;"	V
ue	scala/xml/PrefixedAttribute.scala	/^  def this(pre: String, key: String, value: Option[Seq[Node]], next: MetaData) =$/;"	V
ue	scala/xml/PrefixedAttribute.scala	/^  def this(pre: String, key: String, value: String, next: MetaData) =$/;"	V
ue	scala/xml/UnprefixedAttribute.scala	/^  def this(key: String, value: Option[Seq[Node]], next: MetaData) =$/;"	V
ue	scala/xml/UnprefixedAttribute.scala	/^  def this(key: String, value: String, next: MetaData) =$/;"	V
ue	scala/xml/Utility.scala	/^  def checkAttributeValue(value: String): String = {$/;"	V
ue	scala/xml/Utility.scala	/^  def parseAttributeValue(value: String): Seq[Node] = {$/;"	V
ue	scala/xml/dtd/Decl.scala	/^case class IntDef(value:String) extends EntityDef {$/;"	V
ue	scala/xml/dtd/Scanner.scala	/^    value = ""$/;"	V
ue	scala/xml/dtd/Scanner.scala	/^    value = sb.toString()$/;"	V
ue	scala/xml/dtd/Scanner.scala	/^  var value:String = _$/;"	V
ue	scala/xml/dtd/ValidationException.scala	/^  def fromFixedAttribute(k: String, value: String, actual: String) =$/;"	V
ue	scala/xml/pull/package.scala	/^ * <?instruction custom value="customvalue"?>$/;"	V
ue	scala/xml/pull/package.scala	/^ * EvProcInstr(instruction,custom value="customvalue")$/;"	V
ue1	scala/collection/immutable/Map.scala	/^  class Map1[A, +B](key1: A, value1: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	V
ue1	scala/collection/immutable/Map.scala	/^  class Map2[A, +B](key1: A, value1: B, key2: A, value2: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	V
ue1	scala/collection/immutable/Map.scala	/^  class Map3[A, +B](key1: A, value1: B, key2: A, value2: B, key3: A, value3: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	V
ue1	scala/collection/immutable/Map.scala	/^  class Map4[A, +B](key1: A, value1: B, key2: A, value2: B, key3: A, value3: B, key4: A, value4: B) extends AbstractMap[A, B] with Map[A, B] with Serializable {$/;"	V
ueFn	scala/sys/BooleanProp.scala	/^  class BooleanPropImpl(key: String, valueFn: String => Boolean) extends PropImpl(key, valueFn) with BooleanProp {$/;"	V
ueManifests	scala/reflect/Manifest.scala	/^  def valueManifests: List[AnyValManifest[_]] =$/;"	V
ue_	scala/util/DynamicVariable.scala	/^  def value_=(newval: T) = tl set newval$/;"	V
ues	scala/Enumeration.scala	/^  def values: ValueSet = {$/;"	V
ues	scala/collection/GenMapLike.scala	/^  def values: GenIterable[B]$/;"	V
ues	scala/collection/MapLike.scala	/^  def values: Iterable[B] = new DefaultValuesIterable$/;"	V
ues	scala/collection/MapProxyLike.scala	/^  override def values: Iterable[B] = self.values$/;"	V
ues	scala/collection/immutable/Stream.scala	/^ *  more values:$/;"	V
ues	scala/collection/mutable/HashMap.scala	/^  override def values: scala.collection.Iterable[B] = new DefaultValuesIterable {$/;"	V
ues	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  override def values: scala.collection.Iterable[B] = imap.values$/;"	V
ues	scala/collection/mutable/SynchronizedMap.scala	/^  override def values: scala.collection.Iterable[B] = synchronized { super.values }$/;"	V
ues	scala/collection/parallel/ParMapLike.scala	/^  def values: ParIterable[V] = new DefaultValuesIterable$/;"	V
uesIterator	scala/collection/GenMapLike.scala	/^  def valuesIterator: Iterator[B]$/;"	V
uesIterator	scala/collection/MapLike.scala	/^  def valuesIterator: Iterator[B] = new AbstractIterator[B] {$/;"	V
uesIterator	scala/collection/MapProxyLike.scala	/^  override def valuesIterator: Iterator[B] = self.valuesIterator$/;"	V
uesIterator	scala/collection/immutable/IntMap.scala	/^  override def valuesIterator: Iterator[T] = this match {$/;"	V
uesIterator	scala/collection/immutable/LongMap.scala	/^  override def valuesIterator: Iterator[T] = this match {$/;"	V
uesIterator	scala/collection/immutable/TreeMap.scala	/^  override def valuesIterator: Iterator[B] = RB.valuesIterator(tree)$/;"	V
uesIterator	scala/collection/mutable/HashMap.scala	/^  override def valuesIterator: Iterator[B] = new AbstractIterator[B] {$/;"	V
uesIterator	scala/collection/mutable/ImmutableMapAdaptor.scala	/^  override def valuesIterator: Iterator[B] = imap.valuesIterator$/;"	V
uesIterator	scala/collection/mutable/LinkedHashMap.scala	/^  override def valuesIterator: Iterator[B] = new AbstractIterator[B] {$/;"	V
uesIterator	scala/collection/mutable/SynchronizedMap.scala	/^  override def valuesIterator: Iterator[B] = synchronized { super.valuesIterator }$/;"	V
uesIterator	scala/collection/parallel/ParMapLike.scala	/^  def valuesIterator: IterableSplitter[V] = valuesIterator(splitter)$/;"	V
ufixedList	scala/io/BytePickle.scala	/^  def ufixedList[A](pa: PU[A])(n: Int): PU[List[A]] = {$/;"	m
ui	scala/collection/convert/Wrappers.scala	/^        val ui = underlying.iterator$/;"	V
ui	scala/collection/convert/Wrappers.scala	/^      val ui = underlying.entrySet.iterator$/;"	V
ui	scala/collection/convert/Wrappers.scala	/^      val ui = underlying.iterator$/;"	V
ulift	scala/io/BytePickle.scala	/^  def ulift[t](x: t): PU[t] = new PU[t] {$/;"	m
ulist	scala/io/BytePickle.scala	/^  def ulist[a](pa: PU[a]): PU[List[a]] =$/;"	m
ulp	scala/math/BigDecimal.scala	/^  def ulp: BigDecimal = this.bigDecimal.ulp$/;"	m
ulp	scala/math/package.scala	/^  def ulp(x: Double): Double = java.lang.Math.ulp(x)$/;"	m
ulp	scala/math/package.scala	/^  def ulp(x: Float): Float = java.lang.Math.ulp(x)$/;"	m
ultimately	scala/util/control/Exception.scala	/^  def ultimately[T](body: => Unit): Catch[T] = noCatch andFinally body$/;"	m
unanchored	scala/util/matching/Regex.scala	/^  def unanchored: UnanchoredRegex = new Regex(regex, groupNames: _*) with UnanchoredRegex { override def anchored = outer }$/;"	m
unapply	scala/Predef.scala	/^    def unapply[A, B, C](x: Tuple3[A, B, C]): Option[Tuple3[A, B, C]] = Some(x)$/;"	m
unapply	scala/Predef.scala	/^    def unapply[A, B](x: Tuple2[A, B]): Option[Tuple2[A, B]] = Some(x)$/;"	m
unapply	scala/Product1.scala	/^  def unapply[T1](x: Product1[T1]): Option[Product1[T1]] =$/;"	m
unapply	scala/Product10.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10](x: Product10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]): Option[Product10[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]] =$/;"	m
unapply	scala/Product11.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11](x: Product11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]): Option[Product11[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11]] =$/;"	m
unapply	scala/Product12.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12](x: Product12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]): Option[Product12[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12]] =$/;"	m
unapply	scala/Product13.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13](x: Product13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]): Option[Product13[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13]] =$/;"	m
unapply	scala/Product14.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14](x: Product14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]): Option[Product14[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14]] =$/;"	m
unapply	scala/Product15.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15](x: Product15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]): Option[Product15[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15]] =$/;"	m
unapply	scala/Product16.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16](x: Product16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]): Option[Product16[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16]] =$/;"	m
unapply	scala/Product17.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17](x: Product17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]): Option[Product17[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17]] =$/;"	m
unapply	scala/Product18.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18](x: Product18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]): Option[Product18[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18]] =$/;"	m
unapply	scala/Product19.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19](x: Product19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]): Option[Product19[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19]] =$/;"	m
unapply	scala/Product2.scala	/^  def unapply[T1, T2](x: Product2[T1, T2]): Option[Product2[T1, T2]] =$/;"	m
unapply	scala/Product20.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20](x: Product20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]): Option[Product20[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20]] =$/;"	m
unapply	scala/Product21.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21](x: Product21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]): Option[Product21[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21]] =$/;"	m
unapply	scala/Product22.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22](x: Product22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]): Option[Product22[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22]] =$/;"	m
unapply	scala/Product3.scala	/^  def unapply[T1, T2, T3](x: Product3[T1, T2, T3]): Option[Product3[T1, T2, T3]] =$/;"	m
unapply	scala/Product4.scala	/^  def unapply[T1, T2, T3, T4](x: Product4[T1, T2, T3, T4]): Option[Product4[T1, T2, T3, T4]] =$/;"	m
unapply	scala/Product5.scala	/^  def unapply[T1, T2, T3, T4, T5](x: Product5[T1, T2, T3, T4, T5]): Option[Product5[T1, T2, T3, T4, T5]] =$/;"	m
unapply	scala/Product6.scala	/^  def unapply[T1, T2, T3, T4, T5, T6](x: Product6[T1, T2, T3, T4, T5, T6]): Option[Product6[T1, T2, T3, T4, T5, T6]] =$/;"	m
unapply	scala/Product7.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7](x: Product7[T1, T2, T3, T4, T5, T6, T7]): Option[Product7[T1, T2, T3, T4, T5, T6, T7]] =$/;"	m
unapply	scala/Product8.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8](x: Product8[T1, T2, T3, T4, T5, T6, T7, T8]): Option[Product8[T1, T2, T3, T4, T5, T6, T7, T8]] =$/;"	m
unapply	scala/Product9.scala	/^  def unapply[T1, T2, T3, T4, T5, T6, T7, T8, T9](x: Product9[T1, T2, T3, T4, T5, T6, T7, T8, T9]): Option[Product9[T1, T2, T3, T4, T5, T6, T7, T8, T9]] =$/;"	m
unapply	scala/Symbol.scala	/^  def unapply(other: V): Option[K] = keyFromValue(other)$/;"	m
unapply	scala/collection/SeqExtractors.scala	/^  def unapply[T,Coll <: SeqLike[T, Coll]]($/;"	m
unapply	scala/collection/immutable/RedBlackTree.scala	/^    def unapply[A, B](t: BlackTree[A, B]) = Some((t.key, t.value, t.left, t.right))$/;"	m
unapply	scala/collection/immutable/RedBlackTree.scala	/^    def unapply[A, B](t: RedTree[A, B]) = Some((t.key, t.value, t.left, t.right))$/;"	m
unapply	scala/collection/immutable/Stream.scala	/^    def unapply[A](xs: Stream[A]): Option[(A, Stream[A])] = #::.unapply(xs)$/;"	m
unapply	scala/collection/immutable/Stream.scala	/^    def unapply[A](xs: Stream[A]): Option[(A, Stream[A])] =$/;"	m
unapply	scala/concurrent/duration/Duration.scala	/^  def unapply(d: Duration): Option[(Long, TimeUnit)] =$/;"	m
unapply	scala/concurrent/duration/Duration.scala	/^  def unapply(s: String): Option[(Long, TimeUnit)] =$/;"	m
unapply	scala/ref/WeakReference.scala	/^  def unapply[T <: AnyRef](wr: WeakReference[T]): Option[T] = {$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Any): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Boolean): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Byte): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Char): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Double): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Float): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Int): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Long): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Short): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply(x: Unit): Option[T] = unapply_impl(x)$/;"	m
unapply	scala/reflect/ClassTag.scala	/^  def unapply[T](ctag: ClassTag[T]): Option[Class[_]] = Some(ctag.runtimeClass)$/;"	m
unapply	scala/util/control/NonFatal.scala	/^  def unapply(t: Throwable): Option[Throwable] = if (apply(t)) Some(t) else None$/;"	m
unapply	scala/util/matching/Regex.scala	/^    def unapply(m: Match): Some[String] = Some(m.matched)$/;"	m
unapply	scala/util/parsing/combinator/Parsers.scala	/^    def unapply[T](x: ParseResult[T]) = x match {$/;"	m
unapply	scala/xml/Attribute.scala	/^  def unapply(x: Attribute) = x match {$/;"	m
unapply	scala/xml/PCData.scala	/^  def unapply(other: Any): Option[String] = other match {$/;"	m
unapply	scala/xml/PrefixedAttribute.scala	/^  def unapply(x: PrefixedAttribute) = Some((x.pre, x.key, x.value, x.next))$/;"	m
unapply	scala/xml/Text.scala	/^  def unapply(other: Any): Option[String] = other match {$/;"	m
unapply	scala/xml/Unparsed.scala	/^  def unapply(x: Unparsed) = Some(x.data)$/;"	m
unapply	scala/xml/UnprefixedAttribute.scala	/^  def unapply(x: UnprefixedAttribute) = Some((x.key, x.value, x.next))$/;"	m
unapplySeq	scala/Array.scala	/^  def unapplySeq[T](x: Array[T]): Option[IndexedSeq[T]] =$/;"	m
unapplySeq	scala/collection/generic/SeqFactory.scala	/^  def unapplySeq[A](x: CC[A]): Some[CC[A]] = Some(x)$/;"	m
unapplySeq	scala/util/matching/Regex.scala	/^    def unapplySeq(m: Match): Option[Seq[String]] = if (m.groupCount > 0) Some(1 to m.groupCount map m.group) else None$/;"	m
unapplySeq	scala/util/matching/Regex.scala	/^  def unapplySeq(target: Any): Option[List[String]] = target match {$/;"	m
unapplySeq	scala/util/regexp/Base.scala	/^    def unapplySeq(x: Alt) = Some(x.rs)$/;"	m
unapplySeq	scala/util/regexp/Base.scala	/^    def unapplySeq(x: Sequ) = Some(x.rs)$/;"	m
unapplySeq	scala/xml/Elem.scala	/^  def unapplySeq(n: Node) = n match {$/;"	m
unapplySeq	scala/xml/Node.scala	/^  def unapplySeq(n: Node) = Some((n.label, n.attributes, n.child))$/;"	m
unapplySeq	scala/xml/QNode.scala	/^  def unapplySeq(n: Node) = Some((n.scope.getURI(n.prefix), n.label, n.attributes, n.child))$/;"	m
unary_	scala/Boolean.scala	/^  def unary_! : Boolean$/;"	m
unary_	scala/Byte.scala	/^  def unary_+ : Int$/;"	m
unary_	scala/Byte.scala	/^  def unary_- : Int$/;"	m
unary_	scala/Byte.scala	/^  def unary_~ : Int$/;"	m
unary_	scala/Char.scala	/^  def unary_+ : Int$/;"	m
unary_	scala/Char.scala	/^  def unary_- : Int$/;"	m
unary_	scala/Char.scala	/^  def unary_~ : Int$/;"	m
unary_	scala/Double.scala	/^  def unary_+ : Double$/;"	m
unary_	scala/Double.scala	/^  def unary_- : Double$/;"	m
unary_	scala/Float.scala	/^  def unary_+ : Float$/;"	m
unary_	scala/Float.scala	/^  def unary_- : Float$/;"	m
unary_	scala/Int.scala	/^  def unary_+ : Int$/;"	m
unary_	scala/Int.scala	/^  def unary_- : Int$/;"	m
unary_	scala/Int.scala	/^  def unary_~ : Int$/;"	m
unary_	scala/Long.scala	/^  def unary_+ : Long$/;"	m
unary_	scala/Long.scala	/^  def unary_- : Long$/;"	m
unary_	scala/Long.scala	/^  def unary_~ : Long$/;"	m
unary_	scala/Short.scala	/^  def unary_+ : Int$/;"	m
unary_	scala/Short.scala	/^  def unary_- : Int$/;"	m
unary_	scala/Short.scala	/^  def unary_~ : Int$/;"	m
unary_	scala/concurrent/duration/Duration.scala	/^    def unary_- : Duration = Inf$/;"	m
unary_	scala/concurrent/duration/Duration.scala	/^    def unary_- : Duration = MinusInf$/;"	m
unary_	scala/concurrent/duration/Duration.scala	/^    def unary_- : Duration = this$/;"	m
unary_	scala/concurrent/duration/Duration.scala	/^  def unary_- : Duration$/;"	m
unary_	scala/concurrent/duration/Duration.scala	/^  def unary_- = Duration(-length, unit)$/;"	m
unary_	scala/math/BigDecimal.scala	/^  def unary_- : BigDecimal = this.bigDecimal.negate()$/;"	m
unary_	scala/math/BigInt.scala	/^  def unary_- : BigInt   = new BigInt(this.bigInteger.negate())$/;"	m
unary_	scala/math/BigInt.scala	/^  def unary_~ : BigInt = new BigInt(this.bigInteger.not())$/;"	m
unary_	scala/math/Numeric.scala	/^    def unary_-() = negate(lhs)$/;"	m
unat	scala/io/BytePickle.scala	/^  def unat: PU[Int] = new PU[Int] {$/;"	m
unbox	scala/Boolean.scala	/^  def unbox(x: java.lang.Object): Boolean = x.asInstanceOf[java.lang.Boolean].booleanValue()$/;"	m
unbox	scala/Byte.scala	/^  def unbox(x: java.lang.Object): Byte = x.asInstanceOf[java.lang.Byte].byteValue()$/;"	m
unbox	scala/Char.scala	/^  def unbox(x: java.lang.Object): Char = x.asInstanceOf[java.lang.Character].charValue()$/;"	m
unbox	scala/Double.scala	/^  def unbox(x: java.lang.Object): Double = x.asInstanceOf[java.lang.Double].doubleValue()$/;"	m
unbox	scala/Float.scala	/^  def unbox(x: java.lang.Object): Float = x.asInstanceOf[java.lang.Float].floatValue()$/;"	m
unbox	scala/Int.scala	/^  def unbox(x: java.lang.Object): Int = x.asInstanceOf[java.lang.Integer].intValue()$/;"	m
unbox	scala/Long.scala	/^  def unbox(x: java.lang.Object): Long = x.asInstanceOf[java.lang.Long].longValue()$/;"	m
unbox	scala/Short.scala	/^  def unbox(x: java.lang.Object): Short = x.asInstanceOf[java.lang.Short].shortValue()$/;"	m
unbox	scala/Unit.scala	/^  def unbox(x: java.lang.Object): Unit = ()$/;"	m
unboxCharOrDouble	scala/runtime/BoxesRunTime.java	/^    private static double unboxCharOrDouble(Object arg1, int code) {$/;"	m	class:BoxesRunTime	file:
unboxCharOrFloat	scala/runtime/BoxesRunTime.java	/^    private static float unboxCharOrFloat(Object arg1, int code) {$/;"	m	class:BoxesRunTime	file:
unboxCharOrInt	scala/runtime/BoxesRunTime.java	/^    private static int unboxCharOrInt(Object arg1, int code) {$/;"	m	class:BoxesRunTime	file:
unboxCharOrLong	scala/runtime/BoxesRunTime.java	/^    private static long unboxCharOrLong(Object arg1, int code) {$/;"	m	class:BoxesRunTime	file:
unboxToBoolean	scala/runtime/BoxesRunTime.java	/^    public static boolean unboxToBoolean(Object b) {$/;"	m	class:BoxesRunTime
unboxToByte	scala/runtime/BoxesRunTime.java	/^    public static byte unboxToByte(Object b) {$/;"	m	class:BoxesRunTime
unboxToChar	scala/runtime/BoxesRunTime.java	/^    public static char unboxToChar(Object c) {$/;"	m	class:BoxesRunTime
unboxToDouble	scala/runtime/BoxesRunTime.java	/^    public static double unboxToDouble(Object d) {$/;"	m	class:BoxesRunTime
unboxToFloat	scala/runtime/BoxesRunTime.java	/^    public static float unboxToFloat(Object f) {$/;"	m	class:BoxesRunTime
unboxToInt	scala/runtime/BoxesRunTime.java	/^    public static int unboxToInt(Object i) {$/;"	m	class:BoxesRunTime
unboxToLong	scala/runtime/BoxesRunTime.java	/^    public static long unboxToLong(Object l) {$/;"	m	class:BoxesRunTime
unboxToShort	scala/runtime/BoxesRunTime.java	/^    public static short unboxToShort(Object s) {$/;"	m	class:BoxesRunTime
uncaughtException	scala/concurrent/impl/ExecutionContextImpl.scala	/^    def uncaughtException(thread: Thread, cause: Throwable): Unit = reporter(cause)$/;"	m
uncaughtExceptionHandler	scala/concurrent/impl/ExecutionContextImpl.scala	/^  private[this] val uncaughtExceptionHandler: Thread.UncaughtExceptionHandler = new Thread.UncaughtExceptionHandler {$/;"	V
unchecked	scala/package.scala	/^  type unchecked = annotation.unchecked.unchecked$/;"	T
unchecked	scala/unchecked.scala	/^class unchecked extends scala.annotation.Annotation {}$/;"	c
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, a3, a4, a5, b](f: a1 => a2 => a3 => a4 => a5 => b): (a1, a2, a3, a4, a5) => b  =  {$/;"	m
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, a3, a4, b](f: a1 => a2 => a3 => a4 => b): (a1, a2, a3, a4) => b = {$/;"	m
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, a3, b](f: a1 => a2 => a3 => b): (a1, a2, a3) => b = {$/;"	m
uncurried	scala/Function.scala	/^  def uncurried[a1, a2, b](f: a1 => a2 => b): (a1, a2) => b = {$/;"	m
underlying	scala/AnyVal.scala	/^ *     class Wrapper(val underlying: Int) extends AnyVal {$/;"	V
underlying	scala/collection/GenTraversableViewLike.scala	/^    lazy val underlying = self.underlying$/;"	V
underlying	scala/collection/IterableLike.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/collection/SeqLike.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/collection/TraversableLike.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^    def underlying: ju.Map[A, B]$/;"	m
underlying	scala/collection/convert/Wrappers.scala	/^    val underlying: Iterable[A]$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^  case class JConcurrentMapDeprecatedWrapper[A, B](val underlying: juc.ConcurrentMap[A, B]) extends mutable.AbstractMap[A, B] with JMapWrapperLike[A, B, JConcurrentMapDeprecatedWrapper[A, B]] with mutable.ConcurrentMap[A, B] {$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^  case class JConcurrentMapWrapper[A, B](val underlying: juc.ConcurrentMap[A, B]) extends mutable.AbstractMap[A, B] with JMapWrapperLike[A, B, JConcurrentMapWrapper[A, B]] with concurrent.Map[A, B] {$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^  case class JListWrapper[A](val underlying: ju.List[A]) extends mutable.AbstractBuffer[A] with mutable.Buffer[A] {$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^  case class JMapWrapper[A, B](val underlying : ju.Map[A, B]) extends mutable.AbstractMap[A, B] with JMapWrapperLike[A, B, JMapWrapper[A, B]] {$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^  class ConcurrentMapDeprecatedWrapper[A, B](override val underlying: mutable.ConcurrentMap[A, B]) extends MutableMapWrapper[A, B](underlying) with juc.ConcurrentMap[A, B] {$/;"	V
underlying	scala/collection/convert/Wrappers.scala	/^  class ConcurrentMapWrapper[A, B](override val underlying: concurrent.Map[A, B]) extends MutableMapWrapper[A, B](underlying) with juc.ConcurrentMap[A, B] {$/;"	V
underlying	scala/collection/immutable/Stream.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/collection/mutable/IndexedSeqLike.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/collection/mutable/StringBuilder.scala	/^final class StringBuilder(private val underlying: JavaStringBuilder)$/;"	V
underlying	scala/collection/parallel/ParIterableLike.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/collection/parallel/ParSeqLike.scala	/^    protected lazy val underlying = self.repr$/;"	V
underlying	scala/math/BigDecimal.scala	/^  def underlying = bigDecimal$/;"	m
underlying	scala/math/BigInt.scala	/^  def underlying = bigInteger$/;"	m
underlying	scala/math/ScalaNumber.java	/^  public abstract Object underlying();$/;"	m	class:ScalaNumber
underlying	scala/math/ScalaNumericConversions.scala	/^  def underlying(): Any$/;"	m
underlying	scala/math/ScalaNumericConversions.scala	/^  def underlying(): Object$/;"	m
underlying	scala/ref/PhantomReference.scala	/^  val underlying: java.lang.ref.PhantomReference[_ <: T] =$/;"	V
underlying	scala/ref/ReferenceQueue.scala	/^  private[ref] val underlying: java.lang.ref.ReferenceQueue[_ <: T] = new java.lang.ref.ReferenceQueue[T]$/;"	V
underlying	scala/ref/ReferenceWrapper.scala	/^  val underlying: java.lang.ref.Reference[_ <: T]$/;"	V
underlying	scala/ref/SoftReference.scala	/^  val underlying: java.lang.ref.SoftReference[_ <: T] =$/;"	V
underlying	scala/ref/WeakReference.scala	/^  val underlying: java.lang.ref.WeakReference[_ <: T] =$/;"	V
underlying	scala/runtime/ScalaNumberProxy.scala	/^  def underlying()  = self.asInstanceOf[AnyRef]$/;"	m
underlyingRange	scala/collection/immutable/NumericRange.scala	/^      private lazy val underlyingRange: NumericRange[T] = self$/;"	V
undo	scala/collection/mutable/ObservableMap.scala	/^          def undo = +=((key, old))$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^          def undo = -=(key)$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^          def undo = update(key, old)$/;"	m
undo	scala/collection/mutable/ObservableMap.scala	/^      def undo(): Unit = throw new UnsupportedOperationException("cannot undo")$/;"	m
undo	scala/collection/mutable/ObservableSet.scala	/^      def undo(): Unit = throw new UnsupportedOperationException("cannot undo")$/;"	m
undo	scala/collection/mutable/RevertibleHistory.scala	/^  def undo(): Unit = {$/;"	m
undo	scala/collection/mutable/Undoable.scala	/^  def undo(): Unit$/;"	m
unescMap	scala/xml/Utility.scala	/^    val unescMap  = pairs ++ Map("apos"  -> '\\'')$/;"	V
unicode	scala/reflect/NameTransformer.scala	/^      var unicode = false$/;"	v
union	scala/collection/GenSeqLike.scala	/^  def union[B >: A, That](that: GenSeq[B])(implicit bf: CanBuildFrom[Repr, B, That]): That = this ++ that$/;"	m
union	scala/collection/GenSetLike.scala	/^  def union(that: GenSet[A]): Repr$/;"	m
union	scala/collection/SetLike.scala	/^  def union(that: GenSet[A]): This = this ++ that$/;"	m
union	scala/collection/immutable/RedBlack.scala	/^        val union = if (leftMost) {$/;"	V
union	scala/collection/immutable/RedBlackTree.scala	/^      val union = if (leftMost) {$/;"	V
union	scala/collection/parallel/ParSetLike.scala	/^  def union(that: GenSet[T]): Repr = sequentially {$/;"	m
unionWith	scala/collection/immutable/IntMap.scala	/^  def unionWith[S >: T](that: IntMap[S], f: (Int, S, S) => S): IntMap[S] = (this, that) match{$/;"	m
unionWith	scala/collection/immutable/LongMap.scala	/^  def unionWith[S >: T](that: LongMap[S], f: (Long, S, S) => S): LongMap[S] = (this, that) match{$/;"	m
unit	scala/concurrent/duration/Duration.scala	/^  def unit: TimeUnit$/;"	m
unit	scala/util/parsing/ast/Binders.scala	/^    def unit[bt <: NameElement, elementT <% Mappable[elementT]](x: elementT) = UnderBinder(new Scope[bt](), x)$/;"	m
unitName	scala/concurrent/duration/Duration.scala	/^        val unitName = s1.reverse takeWhile (_.isLetter) reverse;$/;"	V
universal	scala/math/Equiv.scala	/^  def universal[T] : Equiv[T] = new Equiv[T] {$/;"	m
unlift	scala/Function.scala	/^  def unlift[T, R](f: T => Option[R]): PartialFunction[T, R] = PartialFunction.unlifted(f)$/;"	m
unorderedHash	scala/util/hashing/MurmurHash3.scala	/^  def unorderedHash(xs: TraversableOnce[Any]): Int = unorderedHash(xs, traversableSeed)$/;"	m
unorderedHashing	scala/util/hashing/MurmurHash3.scala	/^  def unorderedHashing = new Hashing[TraversableOnce[Any]] {$/;"	m
unparsedEntities	scala/xml/Document.scala	/^  def unparsedEntities: Seq[scala.xml.dtd.EntityDecl] =$/;"	m
unparsedEntities	scala/xml/dtd/DTD.scala	/^  def unparsedEntities: Seq[EntityDecl] = Nil$/;"	m
unparsedEntityDecl	scala/xml/parsing/MarkupHandler.scala	/^  def unparsedEntityDecl(name: String, extID: ExternalID, notat: String): Unit = ()$/;"	m
unpickle	scala/io/BytePickle.scala	/^  def unpickle[T](p: SPU[T], stream: Array[Byte]): T =$/;"	m
unrolled	scala/collection/mutable/UnrolledBuffer.scala	/^      var unrolled = this$/;"	v
unrolled	scala/collection/parallel/immutable/ParHashMap.scala	/^      var unrolled = elems$/;"	v
unrolled	scala/collection/parallel/immutable/ParHashSet.scala	/^      var unrolled = elems$/;"	v
unrolled	scala/collection/parallel/mutable/ParHashMap.scala	/^      var unrolled = elems$/;"	v
unrolled	scala/collection/parallel/mutable/ParHashSet.scala	/^      var unrolled = elems.headPtr$/;"	v
unrolledlength	scala/collection/mutable/UnrolledBuffer.scala	/^  private[collection] val unrolledlength = 32$/;"	V
unsequence	scala/util/parsing/ast/Binders.scala	/^  def unsequence[bt <: NameElement, st <% Mappable[st]](orig: UnderBinder[bt, List[st]]): List[UnderBinder[bt, st]] =$/;"	m
unset	scala/concurrent/SyncVar.scala	/^  def unset(): Unit = synchronized {$/;"	m
unsignedCompare	scala/collection/generic/BitOperations.scala	/^    def unsignedCompare(i: Int, j: Int)         = (i < j) ^ (i < 0) ^ (j < 0)$/;"	m
unsignedCompare	scala/collection/generic/BitOperations.scala	/^    def unsignedCompare(i: Long, j: Long)          = (i < j) ^ (i < 0L) ^ (j < 0L)$/;"	m
unspecialized	scala/annotation/unspecialized.scala	/^class unspecialized extends scala.annotation.StaticAnnotation$/;"	c
unsupported	scala/collection/package.scala	/^    def unsupported(msg: String)     = throw new UnsupportedOperationException(msg)$/;"	m
until	scala/collection/generic/Sorted.scala	/^  def until(until: K): This = rangeImpl(None, Some(until))$/;"	m
until	scala/collection/immutable/RedBlackTree.scala	/^  def until[A: Ordering, B](tree: Tree[A, B], key: A): Tree[A, B] = blacken(doUntil(tree, key))$/;"	m
until	scala/collection/mutable/ArrayStack.scala	/^    val until = index \/ 2$/;"	V
until	scala/collection/mutable/TreeSet.scala	/^  private var until: Option[A] = None$/;"	v
until	scala/collection/parallel/ParIterableLike.scala	/^      val until = from + len$/;"	V
until	scala/collection/parallel/ParIterableLike.scala	/^    val until = unc_until min size max from$/;"	V
until	scala/collection/parallel/ParSeqLike.scala	/^    val until = if (end >= length) length else end + 1$/;"	V
until	scala/collection/parallel/RemainsIterator.scala	/^    val until = from + len$/;"	V
until	scala/collection/parallel/immutable/ParHashMap.scala	/^      val until = offset + howmany$/;"	V
until	scala/collection/parallel/immutable/ParHashSet.scala	/^      val until = offset + howmany$/;"	V
until	scala/collection/parallel/immutable/package.scala	/^    class ParIterator(var i: Int = 0, val until: Int = length, elem: T = self.elem) extends SeqSplitter[T] {$/;"	V
until	scala/collection/parallel/mutable/ParArray.scala	/^      val until = from + len$/;"	V
until	scala/collection/parallel/mutable/ParArray.scala	/^      val until = offset + howmany$/;"	V
until	scala/collection/parallel/mutable/ParArray.scala	/^  class ParArrayIterator(var i: Int = 0, val until: Int = length, val arr: Array[Any] = array)$/;"	V
until	scala/collection/parallel/mutable/ParFlatHashTable.scala	/^  abstract class ParFlatHashTableIterator(var idx: Int, val until: Int, val totalsize: Int)$/;"	V
until	scala/collection/parallel/mutable/ParHashMap.scala	/^      val until = offset + howmany$/;"	V
until	scala/collection/parallel/mutable/ParHashTable.scala	/^  (private var idx: Int, private val until: Int, private val totalsize: Int, private var es: Entry)$/;"	V
until	scala/collection/parallel/mutable/ParTrieMap.scala	/^      val until = offset + howmany$/;"	V
until	scala/collection/parallel/mutable/ResizableParArrayCombiner.scala	/^        val until = ind + chunksize$/;"	V
until	scala/math/BigDecimal.scala	/^  def until(end: BigDecimal): Range.Partial[BigDecimal, NumericRange.Exclusive[BigDecimal]] =$/;"	m
until	scala/math/BigDecimal.scala	/^  def until(end: BigDecimal, step: BigDecimal) = Range.BigDecimal(this, end, step)$/;"	m
until	scala/math/BigInt.scala	/^  def until(end: BigInt, step: BigInt = BigInt(1)) = Range.BigInt(this, end, step)$/;"	m
until	scala/runtime/RichInt.scala	/^  def until(end: Int): Range = Range(self, end)$/;"	m
until	scala/runtime/RichInt.scala	/^  def until(end: Int, step: Int): Range = Range(self, end, step)$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T): NumericRange.Exclusive[T]          = NumericRange(self, end, num.one)$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T): ResultWithoutStep                  = new Range.Partial(NumericRange(self, end, _))$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T): ResultWithoutStep$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T, step: T): NumericRange.Exclusive[T] = NumericRange(self, end, step)$/;"	m
until	scala/runtime/ScalaNumberProxy.scala	/^  def until(end: T, step: T): immutable.IndexedSeq[T]$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, a3, a4, a5, b](f: Tuple5[a1, a2, a3, a4, a5] => b): (a1, a2, a3, a4, a5) => b = {$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, a3, a4, b](f: Tuple4[a1, a2, a3, a4] => b): (a1, a2, a3, a4) => b = {$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, a3, b](f: Tuple3[a1, a2, a3] => b): (a1, a2, a3) => b = {$/;"	m
untupled	scala/Function.scala	/^  def untupled[a1, a2, b](f: Tuple2[a1, a2] => b): (a1, a2) => b = {$/;"	m
unusualUCS4	scala/xml/include/sax/EncodingHeuristics.scala	/^    val unusualUCS4   = "UCS-4"$/;"	V
unwrap	scala/util/control/Exception.scala	/^    def unwrap(x: Throwable): Throwable =$/;"	m
unwrapping	scala/util/control/Exception.scala	/^  def unwrapping[T](exceptions: Class[_]*): Catch[T] = {$/;"	m
unzip	scala/collection/generic/GenericTraversableTemplate.scala	/^  def unzip[A1, A2](implicit asPair: A => (A1, A2)): (CC[A1], CC[A2]) = {$/;"	m
unzip	scala/collection/immutable/List.scala	/^  def unzip[A,B](xs: Iterable[(A,B)]): (List[A], List[B]) =$/;"	m
unzip	scala/collection/immutable/List.scala	/^  def unzip[A,B](xs: List[(A,B)]): (List[A], List[B]) = {$/;"	m
unzip	scala/collection/immutable/RedBlack.scala	/^      def unzip(zipper: List[NonEmpty[B]], leftMost: Boolean): List[NonEmpty[B]] = {$/;"	m
unzip	scala/collection/immutable/RedBlackTree.scala	/^    def unzip(zipper: List[Tree[A, B]], leftMost: Boolean): List[Tree[A, B]] = {$/;"	m
unzip3	scala/collection/generic/GenericTraversableTemplate.scala	/^  def unzip3[A1, A2, A3](implicit asTriple: A => (A1, A2, A3)): (CC[A1], CC[A2], CC[A3]) = {$/;"	m
unzipBoth	scala/collection/immutable/RedBlack.scala	/^      def unzipBoth(left: Tree[B],$/;"	m
unzipBoth	scala/collection/immutable/RedBlackTree.scala	/^    def unzipBoth(left: Tree[A, B],$/;"	m
up	scala/collection/immutable/List.scala	/^    val up = step(start) > start$/;"	V
upair	scala/io/BytePickle.scala	/^  def upair[a,b](pa: PU[a], pb: PU[b]): PU[(a,b)] = {$/;"	m
upd	scala/collection/immutable/RedBlack.scala	/^    def upd[B1 >: B](k: A, v: B1): Tree[B1] = {$/;"	m
upd	scala/collection/immutable/RedBlack.scala	/^    def upd[B1 >: B](k: A, v: B1): Tree[B1]$/;"	m
upd	scala/collection/immutable/RedBlack.scala	/^    def upd[B](k: A, v: B): Tree[B] = RedTree(k, v, Empty, Empty)$/;"	m
update	scala/Array.scala	/^  def update(i: Int, x: T) { throw new Error() }$/;"	m
update	scala/collection/convert/Wrappers.scala	/^    def update(i: Int, elem: A) = underlying.set(i, elem)$/;"	m
update	scala/collection/immutable/RedBlack.scala	/^    def update[B1 >: B](k: A, v: B1): Tree[B1] = blacken(upd(k, v))$/;"	m
update	scala/collection/immutable/RedBlackTree.scala	/^  def update[A, B, B1 >: B](tree: Tree[A, B], k: A, v: B1, overwrite: Boolean)(implicit ordering: Ordering[A]): Tree[A, B1] = blacken(upd(tree, k, v, overwrite))$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Boolean) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Byte) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Char) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Double) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Float) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Int) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Long) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Short) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: T) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArrayOps.scala	/^    def update(index: Int, elem: Unit) { repr(index) = elem }$/;"	m
update	scala/collection/mutable/ArraySeq.scala	/^  def update(idx: Int, elem: A) {$/;"	m
update	scala/collection/mutable/ArrayStack.scala	/^  def update(n: Int, newelem: T) =$/;"	m
update	scala/collection/mutable/BufferLike.scala	/^  def update(n: Int, newelem: A)$/;"	m
update	scala/collection/mutable/BufferProxy.scala	/^  def update(n: Int, newelem: A) { self.update(n, newelem) }$/;"	m
update	scala/collection/mutable/IndexedSeqLike.scala	/^  def update(idx: Int, elem: A)$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: A) = self.update(index(idx), elem)$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: A) = self.update(self.length - 1 - idx, elem)$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: A) =$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^    def update(idx: Int, elem: B): Unit$/;"	m
update	scala/collection/mutable/IndexedSeqView.scala	/^  def update(idx: Int, elem: A): Unit$/;"	m
update	scala/collection/mutable/LinkedListLike.scala	/^  def update(n: Int, x: A): Unit  = atLocation(n)(_.elem = x)$/;"	m
update	scala/collection/mutable/ListBuffer.scala	/^  def update(n: Int, x: A) {$/;"	m
update	scala/collection/mutable/MapLike.scala	/^  def update(key: A, value: B) { this += ((key, value)) }$/;"	m
update	scala/collection/mutable/MutableList.scala	/^  def update(n: Int, x: A): Unit = first0.update(n, x)$/;"	m
update	scala/collection/mutable/ResizableArray.scala	/^  def update(idx: Int, elem: A) {$/;"	m
update	scala/collection/mutable/SeqLike.scala	/^  def update(idx: Int, elem: A)$/;"	m
update	scala/collection/mutable/SetLike.scala	/^  def update(elem: A, included: Boolean) {$/;"	m
update	scala/collection/mutable/Stack.scala	/^  def update(n: Int, newelem: A) =$/;"	m
update	scala/collection/mutable/StringBuilder.scala	/^  def update(i: Int, c: Char): Unit = setCharAt(i, c)$/;"	m
update	scala/collection/mutable/UnrolledBuffer.scala	/^  def update(idx: Int, newelem: T) =$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Boolean) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Byte) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Char) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Double) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Float) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Int) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Long) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Short) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: T) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^    def update(index: Int, elem: Unit) { array(index) = elem }$/;"	m
update	scala/collection/mutable/WrappedArray.scala	/^  def update(index: Int, elem: T): Unit$/;"	m
update	scala/collection/parallel/immutable/package.scala	/^    def update(idx: Int, elem: T) = throw new UnsupportedOperationException$/;"	m
update	scala/collection/parallel/mutable/ParArray.scala	/^  def update(i: Int, elem: T) = array(i) = elem$/;"	m
update	scala/collection/parallel/mutable/ParHashMap.scala	/^  def update(key: K, value: V): Unit = put(key, value)$/;"	m
update	scala/collection/parallel/mutable/ParSeq.scala	/^  def update(i: Int, elem: T): Unit$/;"	m
update	scala/collection/parallel/mutable/ParTrieMap.scala	/^  def update(key: K, value: V): Unit = ctrie.update(key, value)$/;"	m
update	scala/xml/MetaData.scala	/^  def update(attribs: MetaData, scope: NamespaceBinding, updates: MetaData): MetaData =$/;"	m
updateCache	scala/Symbol.scala	/^    def updateCache(): V = {$/;"	m
updateState	scala/concurrent/impl/AbstractPromise.java	/^    protected final boolean updateState(Object oldState, Object newState) {$/;"	m	class:AbstractPromise
updateWith	scala/collection/immutable/IntMap.scala	/^  def updateWith[S >: T](key: Int, value: S, f: (T, S) => S): IntMap[S] = this match {$/;"	m
updateWith	scala/collection/immutable/LongMap.scala	/^  def updateWith[S >: T](key: Long, value: S, f: (T, S) => S): LongMap[S] = this match {$/;"	m
updated	scala/collection/GenMap.scala	/^  def updated [B1 >: B](key: A, value: B1): GenMap[A, B1]$/;"	m
updated	scala/collection/GenSeqLike.scala	/^  def updated[B >: A, That](index: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That$/;"	m
updated	scala/collection/MapLike.scala	/^  def updated [B1 >: B](key: A, value: B1): Map[A, B1] = this + ((key, value))$/;"	m
updated	scala/collection/SeqLike.scala	/^  def updated[B >: A, That](index: Int, elem: B)(implicit bf: CanBuildFrom[Repr, B, That]): That = {$/;"	m
updated	scala/collection/parallel/ParSeqLike.scala	/^  def updated[U >: T, That](index: Int, elem: U)(implicit bf: CanBuildFrom[Repr, U, That]): That = if (bf(repr).isCombiner) {$/;"	m
updated0	scala/collection/immutable/HashSet.scala	/^  def updated0(key: A, hash: Int, level: Int): HashSet[A] =$/;"	m
updated2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def updated2combiner[U >: T, That](index: Int, elem: U, cb: Combiner[U, That]): Combiner[U, That] = {$/;"	m
updatedAt	scala/collection/concurrent/TrieMap.scala	/^  def updatedAt(pos: Int, nn: BasicNode, gen: Gen) = {$/;"	m
updatedState	scala/util/continuations/ControlContext.scala	/^ *        val updatedState =$/;"	V
updater	scala/collection/concurrent/CNodeBase.java	/^    public static final AtomicIntegerFieldUpdater<CNodeBase> updater = AtomicIntegerFieldUpdater.newUpdater(CNodeBase.class, "csize");$/;"	f	class:CNodeBase
updater	scala/collection/concurrent/INodeBase.java	/^    public static final AtomicReferenceFieldUpdater<INodeBase, MainNode> updater = AtomicReferenceFieldUpdater.newUpdater(INodeBase.class, MainNode.class, "mainnode");$/;"	f	class:INodeBase
updater	scala/collection/concurrent/MainNode.java	/^    public static final AtomicReferenceFieldUpdater<MainNode, MainNode> updater = AtomicReferenceFieldUpdater.newUpdater(MainNode.class, MainNode.class, "prev");$/;"	f	class:MainNode
updater	scala/concurrent/impl/AbstractPromise.java	/^    protected final static AtomicReferenceFieldUpdater<AbstractPromise, Object> updater =$/;"	f	class:AbstractPromise
updmap	scala/collection/concurrent/TrieMap.scala	/^    val updmap = listmap - k$/;"	V
upe	scala/io/BytePickle.scala	/^      val upe = state.dict$/;"	V
upickle	scala/io/BytePickle.scala	/^  def upickle[T](p: PU[T], a: T): Array[Byte] =$/;"	m
upper	scala/Option.scala	/^ *  val upper = for {$/;"	V
upper	scala/Option.scala	/^ *  val upper = name map { _.trim } filter { _.length != 0 } map { _.toUpperCase }$/;"	V
upward	scala/collection/immutable/NumericRange.scala	/^    val upward  = num.lt(start, end)$/;"	V
url	scala/xml/parsing/ConstructingParser.scala	/^  *     val url = args(0)$/;"	V
useOwnToString	scala/runtime/ScalaRunTime.scala	/^    def useOwnToString(x: Any) = x match {$/;"	m
useSizeMap	scala/collection/mutable/HashMap.scala	/^  def useSizeMap(t: Boolean) = if (t) {$/;"	m
useSizeMap	scala/collection/mutable/HashSet.scala	/^  def useSizeMap(t: Boolean) = if (t) {$/;"	m
usequ	scala/io/BytePickle.scala	/^  def usequ[t,u](f: u => t, pa: PU[t], k: t => PU[u]): PU[u] = new PU[u] {$/;"	m
userDir	scala/util/Properties.scala	/^  def userDir               = propOrEmpty("user.dir")$/;"	m
userHome	scala/util/Properties.scala	/^  def userHome              = propOrEmpty("user.home")$/;"	m
userInput	scala/util/Either.scala	/^   * val userInput: String = ...$/;"	V
userName	scala/util/Properties.scala	/^  def userName              = propOrEmpty("user.name")$/;"	m
utf8	scala/xml/include/sax/EncodingHeuristics.scala	/^    val utf8          = "UTF-8"$/;"	V
util	scala/util/Sorting.scala	/^package util$/;"	p
util.control	scala/util/control/NoStackTrace.scala	/^package util.control$/;"	p
uunpickle	scala/io/BytePickle.scala	/^  def uunpickle[T](p: PU[T], stream: Array[Byte]): T =$/;"	m
uwrap	scala/io/BytePickle.scala	/^  def uwrap[a,b](i: a => b, j: b => a, pa: PU[a]): PU[b] =$/;"	m
v	scala/collection/concurrent/TrieMap.scala	/^        val v = in.readObject().asInstanceOf[V]$/;"	V
v	scala/collection/concurrent/TrieMap.scala	/^    val v = \/*READ*\/root$/;"	V
v	scala/collection/convert/Wrappers.scala	/^      val v = underlying get k$/;"	V
v	scala/collection/immutable/Stream.scala	/^    lazy val v = st$/;"	V
v	scala/collection/immutable/Vector.scala	/^    val v = new Vector(blockIndex + lo, _endIndex, blockIndex + lo)$/;"	V
v	scala/collection/mutable/DefaultMapModel.scala	/^    else { val v = e.value; e.value = value; Some(v) }$/;"	V
v	scala/collection/mutable/HashMap.scala	/^    else { val v = e.value; e.value = value; Some(v) }$/;"	V
v	scala/collection/mutable/LinkedHashMap.scala	/^    else { val v = e.value; e.value = value; Some(v) }$/;"	V
v	scala/collection/parallel/immutable/ParHashSet.scala	/^          val v = chunkarr(i).asInstanceOf[T]$/;"	V
v	scala/collection/parallel/mutable/ParHashMap.scala	/^    else { val v = e.value; e.value = value; Some(v) }$/;"	V
v	scala/concurrent/duration/Duration.scala	/^        val v = DAYS.convert(length, unit)$/;"	V
v	scala/util/Sorting.scala	/^        val v = x(m)$/;"	V
v	scala/xml/parsing/FactoryAdapter.scala	/^    val v = (Iterator continually hStack.pop takeWhile (_ != null)).toList.reverse$/;"	V
v0	scala/util/parsing/combinator/Parsers.scala	/^      lazy val v0 = v \/\/ lazy argument$/;"	V
validateRangeBoundaries	scala/collection/immutable/Range.scala	/^  def validateRangeBoundaries(f: Int => Any): Boolean = {$/;"	m
value	scala/Enumeration.scala	/^      val value = m.invoke(this).asInstanceOf[Value]$/;"	V
value	scala/collection/immutable/HashMap.scala	/^        val value = in.readObject().asInstanceOf[B]$/;"	V
value	scala/collection/immutable/ListMap.scala	/^                                override protected val value: B1) extends ListMap[A, B1] with Serializable {$/;"	V
value	scala/collection/immutable/RedBlack.scala	/^                           override val value: B,$/;"	V
value	scala/collection/immutable/RedBlack.scala	/^                         override val value: B,$/;"	V
value	scala/collection/immutable/RedBlack.scala	/^    def value: B$/;"	m
value	scala/collection/immutable/RedBlackTree.scala	/^    @(inline @getter) final val value: B,$/;"	V
value	scala/collection/mutable/DefaultEntry.scala	/^final class DefaultEntry[A, B](val key: A, var value: B)$/;"	v
value	scala/collection/mutable/LinkedEntry.scala	/^final class LinkedEntry[A, B](val key: A, var value: B)$/;"	v
value	scala/collection/mutable/OpenHashMap.scala	/^                                            var value: Option[Value])$/;"	v
value	scala/concurrent/Future.scala	/^  def value: Option[Try[T]]$/;"	m
value	scala/concurrent/SyncVar.scala	/^  private var value: Option[A] = None$/;"	v
value	scala/concurrent/impl/Promise.scala	/^    def value: Option[Try[T]] = getState match {$/;"	m
value	scala/concurrent/impl/Promise.scala	/^    val value = Some(resolveTry(suppliedValue))$/;"	V
value	scala/concurrent/impl/Promise.scala	/^  var value: Try[T] = null$/;"	v
value	scala/sys/BooleanProp.scala	/^  def value: Boolean$/;"	m
value	scala/sys/Prop.scala	/^  def value: T$/;"	m
value	scala/sys/PropImpl.scala	/^  def value: T = if (isSet) valueFn(get) else zero$/;"	m
value	scala/util/DynamicVariable.scala	/^  def value: T = tl.get.asInstanceOf[T]$/;"	m
value	scala/util/parsing/json/Parser.scala	/^  def value: Parser[Any] = (jsonObj | jsonArray | number | "true" ^^^ true | "false" ^^^ false | "null" ^^^ null | stringVal)$/;"	m
value	scala/xml/Attribute.scala	/^  val value: Seq[Node]$/;"	V
value	scala/xml/MetaData.scala	/^  def value: Seq[Node]$/;"	m
value	scala/xml/Null.scala	/^  def value = null$/;"	m
value	scala/xml/PrefixedAttribute.scala	/^  val value: Seq[Node],$/;"	V
value	scala/xml/UnprefixedAttribute.scala	/^  val value: Seq[Node],$/;"	V
value	scala/xml/dtd/Scanner.scala	/^  var value:String = _$/;"	v
value	scala/xml/include/sax/XIncluder.scala	/^        val value = atts.getValue(i);$/;"	V
value	scala/xml/parsing/FactoryAdapter.scala	/^      val value = attributes getValue i$/;"	V
value	scala/xml/parsing/MarkupParser.scala	/^      val value = xAttributeValue()$/;"	V
valueD	scala/concurrent/duration/Duration.scala	/^            val valueD = JDouble.parseDouble(valueStr)$/;"	V
valueIsTrue	scala/sys/BooleanProp.scala	/^  def valueIsTrue[T](key: String): BooleanProp = new BooleanPropImpl(key, _.toLowerCase == "true")$/;"	m
valueManifests	scala/reflect/Manifest.scala	/^  def valueManifests: List[AnyValManifest[_]] =$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip: IntMap.Tip[V]) = (tip.key, tip.value)$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip: IntMap.Tip[V]) = tip.key$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip: IntMap.Tip[V]) = tip.value$/;"	m
valueOf	scala/collection/immutable/IntMap.scala	/^  def valueOf(tip: IntMap.Tip[V]): T$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip: LongMap.Tip[V]) = (tip.key, tip.value)$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip: LongMap.Tip[V]) = tip.key$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip: LongMap.Tip[V]) = tip.value$/;"	m
valueOf	scala/collection/immutable/LongMap.scala	/^  def valueOf(tip: LongMap.Tip[V]): T$/;"	m
valueOf	scala/math/BigDecimal.scala	/^  def valueOf(d: Double): BigDecimal = apply(BigDec valueOf d)$/;"	m
valueOf	scala/math/BigDecimal.scala	/^  def valueOf(d: Double, mc: MathContext): BigDecimal = apply(BigDec valueOf d, mc)$/;"	m
valueStr	scala/concurrent/duration/Duration.scala	/^            val valueStr = s1 dropRight unitName.length$/;"	V
value_=	scala/util/DynamicVariable.scala	/^  def value_=(newval: T) = tl set newval$/;"	m
values	scala/Enumeration.scala	/^  def values: ValueSet = {$/;"	m
values	scala/collection/GenMapLike.scala	/^  def values: GenIterable[B]$/;"	m
values	scala/collection/MapLike.scala	/^  def values: Iterable[B] = new DefaultValuesIterable$/;"	m
values	scala/collection/parallel/ParMapLike.scala	/^  def values: ParIterable[V] = new DefaultValuesIterable$/;"	m
valuesIterator	scala/collection/GenMapLike.scala	/^  def valuesIterator: Iterator[B]$/;"	m
valuesIterator	scala/collection/MapLike.scala	/^  def valuesIterator: Iterator[B] = new AbstractIterator[B] {$/;"	m
valuesIterator	scala/collection/immutable/RedBlackTree.scala	/^  def valuesIterator[_, B](tree: Tree[_, B]): Iterator[B] = new ValuesIterator(tree)$/;"	m
valuesIterator	scala/collection/parallel/ParMapLike.scala	/^  def valuesIterator: IterableSplitter[V] = valuesIterator(splitter)$/;"	m
varPattern	scala/util/matching/Regex.scala	/^   * val varPattern = """%(\\w+)""".r$/;"	V
vecswap	scala/util/Sorting.scala	/^    def vecswap(_a: Int, _b: Int, n: Int) {$/;"	m
vector	scala/collection/parallel/immutable/ParVector.scala	/^class ParVector[+T](private[this] val vector: Vector[T])$/;"	V
vectors	scala/collection/parallel/immutable/ParVector.scala	/^  val vectors = new ArrayBuffer[VectorBuilder[T]] += new VectorBuilder[T]$/;"	V
vendor	scala/collection/parallel/package.scala	/^      val vendor = scala.util.Properties.javaVmVendor$/;"	V
version	scala/xml/Document.scala	/^  var version: Option[String] = _$/;"	v
versionMsg	scala/util/Properties.scala	/^  def versionMsg            = "Scala %s %s -- %s".format(propCategory, versionString, copyrightString)$/;"	m
versionNumberString	scala/util/Properties.scala	/^  def versionNumberString = scalaPropOrEmpty("version.number")$/;"	m
versionString	scala/util/Properties.scala	/^  val versionString         = "version " + scalaPropOrElse("version.number", "(unknown)")$/;"	V
veryBig	scala/collection/immutable/NumericRange.scala	/^ *     val veryBig = Int.MaxValue.toLong + 1$/;"	V
view	scala/collection/TraversableLike.scala	/^  def view = new TraversableView[A, Repr] {$/;"	m
view	scala/collection/TraversableLike.scala	/^  def view(from: Int, until: Int): TraversableView[A, Repr] = view.slice(from, until)$/;"	m
view	scala/collection/parallel/ParIterableLike.scala	/^  def view = new ParIterableView[T, Repr, Sequential] {$/;"	m
viewToString	scala/collection/GenTraversableViewLike.scala	/^  def viewToString = stringPrefix + viewIdString + "(...)"$/;"	m
visibleMagic	scala/util/MurmurHash.scala	/^  final private val visibleMagic = 0x971e137b$/;"	V
visibleMixer	scala/util/MurmurHash.scala	/^  final private val visibleMixer = 0x52dce729$/;"	V
vmap	scala/Enumeration.scala	/^  private val vmap: mutable.Map[Int, Value] = new mutable.HashMap$/;"	V
volatile	scala/package.scala	/^  type volatile = annotation.volatile$/;"	T
volatile	scala/volatile.scala	/^class volatile extends scala.annotation.StaticAnnotation$/;"	c
vset	scala/Enumeration.scala	/^  @transient private var vset: ValueSet = null$/;"	v
vsetDefined	scala/Enumeration.scala	/^  @transient @volatile private var vsetDefined = false$/;"	v
w	scala/collection/BitSetLike.scala	/^      val w = u \/ 64$/;"	V
w	scala/collection/BitSetLike.scala	/^      val w = word(i)$/;"	V
w	scala/xml/XML.scala	/^    val w = Channels.newWriter(fos.getChannel(), enc)$/;"	V
w	scala/xml/persistent/CachedFileStorage.scala	/^    val w = Channels.newWriter(c, "utf-8")$/;"	V
waterline	scala/collection/mutable/UnrolledBuffer.scala	/^  val waterline = 50$/;"	V
waterlineDelim	scala/collection/mutable/UnrolledBuffer.scala	/^  val waterlineDelim = 100$/;"	V
wellformed	scala/xml/Attribute.scala	/^  def wellformed(scope: NamespaceBinding): Boolean = {$/;"	m
wellformed	scala/xml/MetaData.scala	/^  def wellformed(scope: NamespaceBinding): Boolean$/;"	m
when	scala/collection/immutable/List.scala	/^ *  val when = "AM" :: "PM" :: List()$/;"	V
whiteSpace	scala/util/parsing/combinator/RegexParsers.scala	/^  protected val whiteSpace = """\\s+""".r$/;"	V
whitespace	scala/util/parsing/combinator/lexical/Scanners.scala	/^  def whitespace: Parser[Any]$/;"	m
whitespace	scala/util/parsing/combinator/lexical/StdLexical.scala	/^  def whitespace: Parser[Any] = rep($/;"	m
whitespaceChar	scala/util/parsing/combinator/lexical/Lexical.scala	/^  def whitespaceChar = elem("space char", ch => ch <= ' ' && ch != EofCh)$/;"	m
wholeNumber	scala/util/parsing/combinator/JavaTokenParsers.scala	/^  def wholeNumber: Parser[String] =$/;"	m
width	scala/collection/generic/SliceInterval.scala	/^  def width = until - from$/;"	m
wildcardType	scala/reflect/Manifest.scala	/^  def wildcardType[T](lowerBound: Manifest[_], upperBound: Manifest[_]): Manifest[T] =$/;"	m
wire	scala/concurrent/impl/ExecutionContextImpl.scala	/^    def wire[T <: Thread](thread: T): T = {$/;"	m
wit	scala/collection/SeqLike.scala	/^        val wit = W.iterator.drop(n0)$/;"	V
with4	scala/collection/immutable/List.scala	/^ *  val with4 =    4 :: mainList  \/\/ re-uses mainList, costs one :: instance$/;"	V
with42	scala/collection/immutable/List.scala	/^ *  val with42 =   42 :: mainList \/\/ also re-uses mainList, cost one :: instance$/;"	V
withApply	scala/util/control/Exception.scala	/^    def withApply[U](f: Throwable => U): Catch[U] = {$/;"	m
withBlockContext	scala/concurrent/BlockContext.scala	/^  def withBlockContext[T](blockContext: BlockContext)(body: => T): T = {$/;"	m
withClose	scala/io/Source.scala	/^  def withClose(f: () => Unit): this.type = {$/;"	m
withDefault	scala/collection/immutable/Map.scala	/^  def withDefault[B1 >: B](d: A => B1): immutable.Map[A, B1] = new Map.WithDefault[A, B1](this, d)$/;"	m
withDefault	scala/collection/mutable/Map.scala	/^  def withDefault(d: A => B): mutable.Map[A, B] = new Map.WithDefault[A, B](this, d)$/;"	m
withDefault	scala/collection/parallel/immutable/ParMap.scala	/^  def withDefault[U >: V](d: K => U): scala.collection.parallel.immutable.ParMap[K, U] = new ParMap.WithDefault[K, U](this, d)$/;"	m
withDefault	scala/collection/parallel/mutable/ParMap.scala	/^  def withDefault(d: K => V): scala.collection.parallel.mutable.ParMap[K, V] = new ParMap.WithDefault[K, V](this, d)$/;"	m
withDefaultValue	scala/collection/immutable/Map.scala	/^  def withDefaultValue[B1 >: B](d: B1): immutable.Map[A, B1] = new Map.WithDefault[A, B1](this, x => d)$/;"	m
withDefaultValue	scala/collection/mutable/Map.scala	/^  def withDefaultValue(d: B): mutable.Map[A, B] = new Map.WithDefault[A, B](this, x => d)$/;"	m
withDefaultValue	scala/collection/parallel/immutable/ParMap.scala	/^  def withDefaultValue[U >: V](d: U): scala.collection.parallel.immutable.ParMap[K, U] = new ParMap.WithDefault[K, U](this, x => d)$/;"	m
withDefaultValue	scala/collection/parallel/mutable/ParMap.scala	/^  def withDefaultValue(d: V): scala.collection.parallel.mutable.ParMap[K, V] = new ParMap.WithDefault[K, V](this, x => d)$/;"	m
withDesc	scala/util/control/Exception.scala	/^    def withDesc(s: String): this.type = {$/;"	m
withDescription	scala/io/Source.scala	/^  def withDescription(text: String): this.type = {$/;"	m
withErr	scala/Console.scala	/^  def withErr[T](err: OutputStream)(thunk: =>T): T =$/;"	m
withErr	scala/Console.scala	/^  def withErr[T](err: PrintStream)(thunk: =>T): T =$/;"	m
withError	scala/sys/process/ProcessIO.scala	/^  def withError(process: InputStream => Unit): ProcessIO  = new ProcessIO(writeInput, processOutput, process, daemonizeThreads)$/;"	m
withErrorMessage	scala/util/parsing/combinator/Parsers.scala	/^    def withErrorMessage(msg: String) = Parser{ in =>$/;"	m
withFailureMessage	scala/util/parsing/combinator/Parsers.scala	/^    def withFailureMessage(msg: String) = Parser{ in =>$/;"	m
withFilter	scala/Option.scala	/^    def withFilter(q: A => Boolean): WithFilter = new WithFilter(x => p(x) && q(x))$/;"	m
withFilter	scala/collection/Iterator.scala	/^  def withFilter(p: A => Boolean): Iterator[A] = filter(p)$/;"	m
withFilter	scala/collection/TraversableLike.scala	/^    def withFilter(q: A => Boolean): WithFilter =$/;"	m
withFilter	scala/collection/TraversableLike.scala	/^  def withFilter(p: A => Boolean): FilterMonadic[A, Repr] = new WithFilter(p)$/;"	m
withFilter	scala/collection/TraversableOnce.scala	/^    def withFilter(p: A => Boolean) = trav.toIterator filter p$/;"	m
withFilter	scala/collection/generic/FilterMonadic.scala	/^  def withFilter(p: A => Boolean): FilterMonadic[A, Repr]$/;"	m
withFilter	scala/util/parsing/combinator/Parsers.scala	/^    def withFilter(p: T => Boolean): Parser[T]$/;"	m
withIn	scala/Console.scala	/^  def withIn[T](in: InputStream)(thunk: =>T): T =$/;"	m
withIn	scala/Console.scala	/^  def withIn[T](reader: Reader)(thunk: =>T): T =$/;"	m
withInput	scala/sys/process/ProcessIO.scala	/^  def withInput(write: OutputStream => Unit): ProcessIO   = new ProcessIO(write, processOutput, processError, daemonizeThreads)$/;"	m
withOut	scala/Console.scala	/^  def withOut[T](out: OutputStream)(thunk: =>T): T =$/;"	m
withOut	scala/Console.scala	/^  def withOut[T](out: PrintStream)(thunk: =>T): T =$/;"	m
withOutput	scala/sys/process/ProcessIO.scala	/^  def withOutput(process: InputStream => Unit): ProcessIO = new ProcessIO(writeInput, process, processError, daemonizeThreads)$/;"	m
withPadding	scala/collection/Iterator.scala	/^    def withPadding(x: => B): this.type = {$/;"	m
withPartial	scala/collection/Iterator.scala	/^    def withPartial(x: Boolean): this.type = {$/;"	m
withPositioning	scala/io/Source.scala	/^  def withPositioning(on: Boolean): this.type = {$/;"	m
withPositioning	scala/io/Source.scala	/^  def withPositioning(pos: Positioner): this.type = {$/;"	m
withReset	scala/io/Source.scala	/^  def withReset(f: () => Source): this.type = {$/;"	m
withSAXParser	scala/xml/XML.scala	/^  def withSAXParser(p: SAXParser): XMLLoader[Elem] =$/;"	m
withTry	scala/util/control/Exception.scala	/^    def withTry[U >: T](body: => U): scala.util.Try[U] = toTry(Success(body))$/;"	m
withValue	scala/collection/immutable/IntMap.scala	/^    def withValue[S](s: S) =$/;"	m
withValue	scala/collection/immutable/LongMap.scala	/^    def withValue[S](s: S) =$/;"	m
withValue	scala/util/DynamicVariable.scala	/^  def withValue[S](newval: T)(thunk: => S): S = {$/;"	m
wlock	scala/Symbol.scala	/^  private val wlock = rwl.writeLock$/;"	V
word	scala/collection/immutable/NumericRange.scala	/^        val word  = if (isInclusive) "to" else "until"$/;"	V
words	scala/collection/BitSetLike.scala	/^    val words = new Array[Long](len)$/;"	V
words	scala/collection/SeqLike.scala	/^   *    val words = "The quick brown fox jumped over the lazy dog".split(' ')$/;"	V
workQueue	scala/concurrent/TaskRunners.scala	/^    val workQueue = new LinkedBlockingQueue[Runnable]$/;"	V
wrap	scala/io/BytePickle.scala	/^  def wrap[a,b](i: a => b, j: b => a, pa: SPU[a]): SPU[b] =$/;"	m
wrap	scala/io/Codec.scala	/^  def wrap(body: => Int): Int =$/;"	m
wrap	scala/reflect/ClassTag.scala	/^  def wrap: ClassTag[Array[T]] = ClassTag[Array[T]](arrayClass(runtimeClass))$/;"	m
wrapAccess	scala/sys/SystemProperties.scala	/^  def wrapAccess[T](body: => T): Option[T] =$/;"	m
wrapAll	scala/collection/convert/package.scala	/^  val wrapAll         = new WrapAsJava with WrapAsScala { }$/;"	V
wrapAsJava	scala/collection/convert/package.scala	/^  val wrapAsJava      = new WrapAsJava { }$/;"	V
wrapAsScala	scala/collection/convert/package.scala	/^  val wrapAsScala     = new WrapAsScala { }$/;"	V
wrapTraversableOnce	scala/collection/TraversableOnce.scala	/^  def wrapTraversableOnce[A](trav: TraversableOnce[A]) = new MonadOps(trav)$/;"	m
wrapper	scala/ref/ReferenceWrapper.scala	/^  val wrapper: ReferenceWrapper[T]$/;"	V
write	scala/concurrent/Channel.scala	/^  def write(x: A) = synchronized {$/;"	m
write	scala/concurrent/SyncChannel.scala	/^  def write(data: A) {$/;"	m
writeInput	scala/sys/process/ProcessIO.scala	/^  val writeInput: OutputStream => Unit,$/;"	V
writeNatPrefix	scala/io/BytePickle.scala	/^    def writeNatPrefix(x: Int) {$/;"	m
writeOne	scala/runtime/WorksheetSupport.scala	/^    def writeOne(c: Int) {$/;"	m
writeReq	scala/concurrent/SyncChannel.scala	/^    val writeReq = new SyncVar[Boolean]$/;"	V
writer	scala/sys/process/ProcessLogger.scala	/^  private val writer = ($/;"	V
writer	scala/util/Properties.scala	/^    val writer = new PrintWriter(Console.err, true)$/;"	V
written	scala/concurrent/Channel.scala	/^  private var written = new LinkedList[A] \/\/ FIFO buffer, realized through$/;"	v
x	scala/LowPriorityImplicits.scala	/^  \/\/ the boxed types, so that e.g. "var x: Int = null" is a compile time$/;"	v
x	scala/Predef.scala	/^    def x = __leftOfArrow$/;"	m
x	scala/Predef.scala	/^    def x = __resultOfEnsuring$/;"	m
x	scala/Proxy.scala	/^      val x = that.asInstanceOf[AnyRef]$/;"	V
x	scala/StringContext.scala	/^ *    val x: JSONObject = json"{ a: $a }"$/;"	V
x	scala/annotation/meta/package.scala	/^ *   @(Id @beanGetter) @BeanProperty val x = 0$/;"	V
x	scala/annotation/meta/package.scala	/^ *   @Id @BeanProperty val x = 0$/;"	V
x	scala/collection/GenSeqLike.scala	/^   *      scala> val x = LinkedList(1)$/;"	V
x	scala/collection/GenSeqLike.scala	/^   *    scala> val x = LinkedList(1, 2, 3, 4, 5)$/;"	V
x	scala/collection/IndexedSeqLike.scala	/^      val x = self(index)$/;"	V
x	scala/collection/IterableLike.scala	/^      val x = it.next$/;"	V
x	scala/collection/TraversableLike.scala	/^   *      scala> val x = List(1)$/;"	V
x	scala/collection/TraversableLike.scala	/^   *     scala> val x = List(1)$/;"	V
x	scala/collection/immutable/Vector.scala	/^      val x = array(index)$/;"	V
x	scala/collection/mutable/ArrayStack.scala	/^    val x = table(index).asInstanceOf[T]$/;"	V
x	scala/collection/parallel/ParSeqLike.scala	/^      val x = self(i)$/;"	V
x	scala/concurrent/Channel.scala	/^    val x = written.elem$/;"	V
x	scala/io/BytePickle.scala	/^        var x = 0$/;"	v
x	scala/io/BytePickle.scala	/^        var x = 0;$/;"	v
x	scala/math/Ordered.scala	/^ *  val x = Array(OrderedClass(1), OrderedClass(5), OrderedClass(3))$/;"	V
x	scala/ref/WeakReference.scala	/^    val x = wr.underlying.get $/;"	V
x	scala/runtime/Tuple2Zipped.scala	/^  final class Ops[T1, T2](val x: (T1, T2)) extends AnyVal {$/;"	V
x	scala/runtime/Tuple3Zipped.scala	/^  final class Ops[T1, T2, T3](val x: (T1, T2, T3)) extends AnyVal {$/;"	V
x	scala/util/logging/Logged.scala	/^  * val x = new MyClass() with ConsoleLogger$/;"	V
x	scala/util/parsing/ast/Binders.scala	/^   *  `BoundElement(n, s)`. (For example, in `val x:Int=x+1`, the first `x` is modelled by a$/;"	V
x	scala/xml/Utility.scala	/^        val x = it.next$/;"	V
x	scala/xml/Utility.scala	/^      val x = Text(sb.toString())$/;"	V
x	scala/xml/factory/LoggedNodeFactory.scala	/^  val x = new scala.xml.parsing.NoBindingFactoryAdapter$/;"	V
x	scala/xml/parsing/MarkupParser.scala	/^        def next() = { val x = underlying.next(); queue += x; x }$/;"	V
x1	scala/util/control/Exception.scala	/^ *  val x1 = catching(classOf[MalformedURLException]) opt new URL(s)$/;"	V
x2	scala/util/control/Exception.scala	/^ *  val x2 = catching(classOf[MalformedURLException], classOf[NullPointerException]) either new URL(s)$/;"	V
xAttributeValue	scala/xml/parsing/MarkupParserCommon.scala	/^  def xAttributeValue(): String = {$/;"	m
xAttributeValue	scala/xml/parsing/MarkupParserCommon.scala	/^  def xAttributeValue(endCh: Char): String = {$/;"	m
xAttributes	scala/xml/parsing/MarkupParser.scala	/^  def xAttributes(pscope: NamespaceBinding): (MetaData, NamespaceBinding) = {$/;"	m
xCharData	scala/xml/parsing/MarkupParser.scala	/^  def xCharData: NodeSeq = {$/;"	m
xCharRef	scala/xml/parsing/MarkupParserCommon.scala	/^  def xCharRef(ch: () => Char, nextch: () => Unit): String =$/;"	m
xCharRef	scala/xml/parsing/MarkupParserCommon.scala	/^  def xCharRef(it: Iterator[Char]): String = {$/;"	m
xCharRef	scala/xml/parsing/MarkupParserCommon.scala	/^  def xCharRef: String = xCharRef(() => ch, () => nextch)$/;"	m
xComment	scala/xml/parsing/MarkupParser.scala	/^  def xComment: NodeSeq = {$/;"	m
xEQ	scala/xml/parsing/MarkupParserCommon.scala	/^  def xEQ() = { xSpaceOpt; xToken('='); xSpaceOpt }$/;"	m
xEndTag	scala/xml/parsing/MarkupParserCommon.scala	/^  def xEndTag(startName: String) {$/;"	m
xEntityValue	scala/xml/parsing/MarkupParser.scala	/^  def xEntityValue(): String = {$/;"	m
xHandleError	scala/xml/parsing/MarkupParser.scala	/^  def xHandleError(that: Char, msg: String) = reportSyntaxError(msg)$/;"	m
xHandleError	scala/xml/parsing/MarkupParserCommon.scala	/^  def xHandleError(that: Char, msg: String): Unit$/;"	m
xName	scala/xml/parsing/MarkupParserCommon.scala	/^  def xName: String = {$/;"	m
xProcInstr	scala/xml/parsing/MarkupParserCommon.scala	/^  def xProcInstr: ElementType = {$/;"	m
xSpace	scala/xml/parsing/MarkupParserCommon.scala	/^  def xSpace() =$/;"	m
xSpaceOpt	scala/xml/parsing/MarkupParserCommon.scala	/^  def xSpaceOpt() = while (isSpace(ch) && !eof) nextch$/;"	m
xToken	scala/xml/parsing/MarkupParserCommon.scala	/^  def xToken(that: Char) {$/;"	m
xToken	scala/xml/parsing/MarkupParserCommon.scala	/^  def xToken(that: Seq[Char]) { that foreach xToken }$/;"	m
xc	scala/collection/immutable/List.scala	/^          var xc = unchanged$/;"	v
xc	scala/collection/immutable/List.scala	/^      var xc = xs$/;"	v
xc	scala/collection/immutable/List.scala	/^    var xc = xs$/;"	v
xe	scala/math/Ordering.scala	/^          val xe = x.iterator$/;"	V
xe	scala/math/Ordering.scala	/^        val xe = x.iterator$/;"	V
xidx	scala/collection/concurrent/TrieMap.scala	/^    val xidx = (xhc >>> lev) & 0x1f$/;"	V
xml	scala/xml/XML.scala	/^  val xml       = "xml"$/;"	V
xmlProcInstr	scala/xml/parsing/MarkupParser.scala	/^  def xmlProcInstr(): MetaData = {$/;"	m
xmlType	scala/xml/Node.scala	/^  def xmlType(): TypeSymbol = null$/;"	m
xml_sameElements	scala/xml/NodeSeq.scala	/^  def xml_sameElements[A](that: Iterable[A]): Boolean = {$/;"	m
xmlns	scala/xml/XML.scala	/^  val xmlns     = "xmlns"$/;"	V
xor	scala/collection/immutable/Vector.scala	/^    val xor = cutIndex ^ (endIndex - 1)$/;"	V
xor	scala/collection/immutable/Vector.scala	/^    val xor = startIndex ^ (cutIndex - 1)$/;"	V
xs	scala/collection/GenTraversableLike.scala	/^   *      val xs = Map("a" -> List(11,111), "b" -> List(22,222)).flatMap(_._2)$/;"	V
xs	scala/collection/Iterator.scala	/^      val xs: Seq[B] = {$/;"	V
xs	scala/collection/LinearSeqLike.scala	/^      val xs = these.toList$/;"	V
xs	scala/collection/SeqLike.scala	/^    var xs: List[A] = List()$/;"	v
xs	scala/collection/generic/GenericTraversableTemplate.scala	/^   *    val xs = List(Set(1, 2, 3), Set(1, 2, 3))$/;"	V
xs	scala/collection/immutable/List.scala	/^    var xs: List[B] = this$/;"	v
xs	scala/collection/mutable/ArrayBuffer.scala	/^    val xs = seq.toList$/;"	V
xs	scala/collection/mutable/ListBuffer.scala	/^    var xs: List[A] = start$/;"	v
xs	scala/reflect/ClassManifestDeprecatedApis.scala	/^          val xs = left ++ supers filterNot seen$/;"	V
xs	scala/runtime/ScalaRunTime.scala	/^      val xs = coll1.toIndexedSeq$/;"	V
xs	scala/runtime/SeqCharSequence.scala	/^final class ArrayCharSequence(val xs: Array[Char], start: Int, end: Int) extends CharSequence {$/;"	V
xs	scala/runtime/SeqCharSequence.scala	/^final class SeqCharSequence(val xs: scala.collection.IndexedSeq[Char]) extends CharSequence {$/;"	V
xs	scala/xml/Utility.scala	/^      val xs = s drop index$/;"	V
y	scala/collection/GenSeqLike.scala	/^   *      scala> val y = 2 +: x$/;"	V
y	scala/collection/TraversableLike.scala	/^   *      scala> val y = LinkedList(2)$/;"	V
y	scala/collection/TraversableLike.scala	/^   *     scala> val y = LinkedList(2)$/;"	V
y	scala/collection/mutable/ArrayStack.scala	/^    val y = new Array[AnyRef](math.max(x.length * 2, 1))$/;"	V
y	scala/collection/mutable/ArrayStack.scala	/^    val y = new Array[AnyRef](x.length)$/;"	V
y	scala/concurrent/ops.scala	/^    val y = new SyncVar[Either[Throwable, B]]$/;"	V
y	scala/io/BytePickle.scala	/^      val y = x >>> 7;$/;"	V
y	scala/io/BytePickle.scala	/^    val y = x >>> 7;$/;"	V
y	scala/xml/NodeSeq.scala	/^      lazy val y = this(0)$/;"	V
y	scala/xml/parsing/MarkupHandler.scala	/^        val y = f(name, edef)$/;"	V
yc	scala/collection/immutable/List.scala	/^    var yc = ys$/;"	v
ye	scala/math/Ordering.scala	/^          val ye = y.iterator$/;"	V
ye	scala/math/Ordering.scala	/^        val ye = y.iterator$/;"	V
yidx	scala/collection/concurrent/TrieMap.scala	/^    val yidx = (yhc >>> lev) & 0x1f$/;"	V
ys	scala/collection/GenTraversableLike.scala	/^   *      val ys = Map("a" -> List(1 -> 11,1 -> 111), "b" -> List(2 -> 22,2 -> 222)).flatMap(_._2)$/;"	V
ys	scala/collection/generic/GenericTraversableTemplate.scala	/^   *    val ys = Set(List(1, 2, 3), List(3, 2, 1))$/;"	V
ys	scala/runtime/ScalaRunTime.scala	/^      val ys = coll2.toIndexedSeq$/;"	V
yss	scala/collection/immutable/List.scala	/^    var yss = xss$/;"	v
z	scala/PartialFunction.scala	/^      val z = f(x)$/;"	V
z	scala/PartialFunction.scala	/^      val z = f1.applyOrElse(x, checkFallback[B])$/;"	V
z	scala/PartialFunction.scala	/^      val z = pf.applyOrElse(x, checkFallback[B])$/;"	V
z	scala/PartialFunction.scala	/^    val z = applyOrElse(x, checkFallback[B])$/;"	V
z	scala/collection/TraversableLike.scala	/^   *      scala> val z = x ++: y$/;"	V
z	scala/collection/TraversableLike.scala	/^   *     scala> val z = x ++: y$/;"	V
z	scala/collection/mutable/ListBuffer.scala	/^        val z = cursor.asInstanceOf[::[A]]$/;"	V
zero	scala/collection/SeqLike.scala	/^        val zero = if (forward) m0 else m1-1$/;"	V
zero	scala/collection/generic/BitOperations.scala	/^    def zero(i: Int, mask: Int)                 = (i & mask) == 0$/;"	m
zero	scala/collection/generic/BitOperations.scala	/^    def zero(i: Long, mask: Long)                  = (i & mask) == 0L$/;"	m
zero	scala/collection/immutable/NumericRange.scala	/^    val zero    = num.zero$/;"	V
zero	scala/math/Numeric.scala	/^  def zero = fromInt(0)$/;"	m
zero	scala/util/parsing/json/Lexer.scala	/^  def zero: Parser[String] = '0' ^^^ "0"$/;"	m
zip	scala/collection/GenIterableLike.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CBF[Repr, (A1, B), That]): That$/;"	m
zip	scala/collection/IndexedSeqOptimized.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = that match {$/;"	m
zip	scala/collection/IterableLike.scala	/^  def zip[A1 >: A, B, That](that: GenIterable[B])(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = {$/;"	m
zip	scala/collection/Iterator.scala	/^  def zip[B](that: Iterator[B]): Iterator[(A, B)] = new AbstractIterator[(A, B)] {$/;"	m
zip	scala/collection/parallel/ParIterableLike.scala	/^  def zip[U >: T, S, That](that: GenIterable[S])(implicit bf: CanBuildFrom[Repr, (U, S), That]): That = if (bf(repr).isCombiner && that.isParSeq) {$/;"	m
zip	scala/concurrent/Future.scala	/^  def zip[U](that: Future[U]): Future[(T, U)] = {$/;"	m
zip2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def zip2combiner[U >: T, S, That](otherpit: RemainsIterator[S], cb: Combiner[(U, S), That]): Combiner[(U, S), That] = {$/;"	m
zipAll	scala/collection/GenIterableLike.scala	/^  def zipAll[B, A1 >: A, That](that: GenIterable[B], thisElem: A1, thatElem: B)(implicit bf: CBF[Repr, (A1, B), That]): That$/;"	m
zipAll	scala/collection/IterableLike.scala	/^  def zipAll[B, A1 >: A, That](that: GenIterable[B], thisElem: A1, thatElem: B)(implicit bf: CanBuildFrom[Repr, (A1, B), That]): That = {$/;"	m
zipAll	scala/collection/Iterator.scala	/^  def zipAll[B, A1 >: A, B1 >: B](that: Iterator[B], thisElem: A1, thatElem: B1): Iterator[(A1, B1)] = new AbstractIterator[(A1, B1)] {$/;"	m
zipAll	scala/collection/parallel/ParIterableLike.scala	/^  def zipAll[S, U >: T, That](that: GenIterable[S], thisElem: U, thatElem: S)(implicit bf: CanBuildFrom[Repr, (U, S), That]): That = if (bf(repr).isCombiner && that.isParSeq) {$/;"	m
zipAll2combiner	scala/collection/parallel/RemainsIterator.scala	/^  def zipAll2combiner[U >: T, S, That](that: RemainsIterator[S], thiselem: U, thatelem: S, cb: Combiner[(U, S), That]): Combiner[(U, S), That] = {$/;"	m
zipAllParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def zipAllParSeq[S, U >: T, R >: S](that: SeqSplitter[S], thisElem: U, thatElem: R) = new ZippedAll[U, R](that, thisElem, thatElem)$/;"	m
zipFrom	scala/collection/immutable/RedBlack.scala	/^        val zipFrom = findDepth(zipper, smallerDepth)$/;"	V
zipFrom	scala/collection/immutable/RedBlackTree.scala	/^      val zipFrom = findDepth(zipper, smallerDepth)$/;"	V
zipParSeq	scala/collection/parallel/RemainsIterator.scala	/^  def zipParSeq[S](that: SeqSplitter[S]) = new Zipped(that)$/;"	m
zipWithIndex	scala/collection/GenIterableLike.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CBF[Repr, (A1, Int), That]): That$/;"	m
zipWithIndex	scala/collection/IndexedSeqOptimized.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CanBuildFrom[Repr, (A1, Int), That]): That = {$/;"	m
zipWithIndex	scala/collection/IterableLike.scala	/^  def zipWithIndex[A1 >: A, That](implicit bf: CanBuildFrom[Repr, (A1, Int), That]): That = {$/;"	m
zipWithIndex	scala/collection/Iterator.scala	/^  def zipWithIndex: Iterator[(A, Int)] = new AbstractIterator[(A, Int)] {$/;"	m
zipWithIndex	scala/collection/parallel/ParIterableLike.scala	/^  def zipWithIndex[U >: T, That](implicit bf: CanBuildFrom[Repr, (U, Int), That]): That = this zip immutable.ParRange(0, size, 1, false)$/;"	m
zipped	scala/collection/parallel/RemainsIterator.scala	/^      val zipped = thisit zipParSeq thatit$/;"	V
zippedTree	scala/collection/immutable/RedBlack.scala	/^        val zippedTree = zipFrom.tail.foldLeft(union: Tree[B]) { (tree, node) =>$/;"	V
zippedTree	scala/collection/immutable/RedBlackTree.scala	/^      val zippedTree = zipFrom.tail.foldLeft(union: Tree[A, B]) { (tree, node) =>$/;"	V
